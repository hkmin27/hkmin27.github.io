shadow$provide.module$node_modules$mathjs$lib$cjs$expression$node$ConditionalNode=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.createConditionalNode=void 0;var _is=require("module$node_modules$mathjs$lib$cjs$utils$is");global=require("module$node_modules$mathjs$lib$cjs$utils$factory");var _operators=require("module$node_modules$mathjs$lib$cjs$expression$operators");require=(0,global.factory)("ConditionalNode",["Node"],function(_ref){function ConditionalNode(condition,
trueExpr,falseExpr){if(!(this instanceof ConditionalNode))throw new SyntaxError("Constructor must be called with the new operator");if(!(0,_is.isNode)(condition))throw new TypeError("Parameter condition must be a Node");if(!(0,_is.isNode)(trueExpr))throw new TypeError("Parameter trueExpr must be a Node");if(!(0,_is.isNode)(falseExpr))throw new TypeError("Parameter falseExpr must be a Node");this.condition=condition;this.trueExpr=trueExpr;this.falseExpr=falseExpr}function testCondition(condition){if("number"===
typeof condition||"boolean"===typeof condition||"string"===typeof condition)return!!condition;if(condition){if((0,_is.isBigNumber)(condition))return!condition.isZero();if((0,_is.isComplex)(condition))return!(!condition.re&&!condition.im);if((0,_is.isUnit)(condition))return!!condition.value}if(null===condition||void 0===condition)return!1;throw new TypeError('Unsupported type of condition "'+(0,_is.typeOf)(condition)+'"');}ConditionalNode.prototype=new _ref.Node;ConditionalNode.prototype.type="ConditionalNode";
ConditionalNode.prototype.isConditionalNode=!0;ConditionalNode.prototype._compile=function(math,argNames){var evalCondition=this.condition._compile(math,argNames),evalTrueExpr=this.trueExpr._compile(math,argNames),evalFalseExpr=this.falseExpr._compile(math,argNames);return function(scope,args,context){return testCondition(evalCondition(scope,args,context))?evalTrueExpr(scope,args,context):evalFalseExpr(scope,args,context)}};ConditionalNode.prototype.forEach=function(callback){callback(this.condition,
"condition",this);callback(this.trueExpr,"trueExpr",this);callback(this.falseExpr,"falseExpr",this)};ConditionalNode.prototype.map=function(callback){return new ConditionalNode(this._ifNode(callback(this.condition,"condition",this)),this._ifNode(callback(this.trueExpr,"trueExpr",this)),this._ifNode(callback(this.falseExpr,"falseExpr",this)))};ConditionalNode.prototype.clone=function(){return new ConditionalNode(this.condition,this.trueExpr,this.falseExpr)};ConditionalNode.prototype._toString=function(options){var parenthesis=
options&&options.parenthesis?options.parenthesis:"keep",precedence=(0,_operators.getPrecedence)(this,parenthesis),condition=this.condition.toString(options),conditionPrecedence=(0,_operators.getPrecedence)(this.condition,parenthesis);if("all"===parenthesis||"OperatorNode"===this.condition.type||null!==conditionPrecedence&&conditionPrecedence<=precedence)condition="("+condition+")";conditionPrecedence=this.trueExpr.toString(options);var truePrecedence=(0,_operators.getPrecedence)(this.trueExpr,parenthesis);
if("all"===parenthesis||"OperatorNode"===this.trueExpr.type||null!==truePrecedence&&truePrecedence<=precedence)conditionPrecedence="("+conditionPrecedence+")";options=this.falseExpr.toString(options);truePrecedence=(0,_operators.getPrecedence)(this.falseExpr,parenthesis);if("all"===parenthesis||"OperatorNode"===this.falseExpr.type||null!==truePrecedence&&truePrecedence<=precedence)options="("+options+")";return condition+" ? "+conditionPrecedence+" : "+options};ConditionalNode.prototype.toJSON=function(){return{mathjs:"ConditionalNode",
condition:this.condition,trueExpr:this.trueExpr,falseExpr:this.falseExpr}};ConditionalNode.fromJSON=function(json){return new ConditionalNode(json.condition,json.trueExpr,json.falseExpr)};ConditionalNode.prototype.toHTML=function(options){var parenthesis=options&&options.parenthesis?options.parenthesis:"keep",precedence=(0,_operators.getPrecedence)(this,parenthesis),condition=this.condition.toHTML(options),conditionPrecedence=(0,_operators.getPrecedence)(this.condition,parenthesis);if("all"===parenthesis||
"OperatorNode"===this.condition.type||null!==conditionPrecedence&&conditionPrecedence<=precedence)condition='\x3cspan class\x3d"math-parenthesis math-round-parenthesis"\x3e(\x3c/span\x3e'+condition+'\x3cspan class\x3d"math-parenthesis math-round-parenthesis"\x3e)\x3c/span\x3e';conditionPrecedence=this.trueExpr.toHTML(options);var truePrecedence=(0,_operators.getPrecedence)(this.trueExpr,parenthesis);if("all"===parenthesis||"OperatorNode"===this.trueExpr.type||null!==truePrecedence&&truePrecedence<=
precedence)conditionPrecedence='\x3cspan class\x3d"math-parenthesis math-round-parenthesis"\x3e(\x3c/span\x3e'+conditionPrecedence+'\x3cspan class\x3d"math-parenthesis math-round-parenthesis"\x3e)\x3c/span\x3e';options=this.falseExpr.toHTML(options);truePrecedence=(0,_operators.getPrecedence)(this.falseExpr,parenthesis);if("all"===parenthesis||"OperatorNode"===this.falseExpr.type||null!==truePrecedence&&truePrecedence<=precedence)options='\x3cspan class\x3d"math-parenthesis math-round-parenthesis"\x3e(\x3c/span\x3e'+
options+'\x3cspan class\x3d"math-parenthesis math-round-parenthesis"\x3e)\x3c/span\x3e';return condition+'\x3cspan class\x3d"math-operator math-conditional-operator"\x3e?\x3c/span\x3e'+conditionPrecedence+'\x3cspan class\x3d"math-operator math-conditional-operator"\x3e:\x3c/span\x3e'+options};ConditionalNode.prototype._toTex=function(options){return"\\begin{cases} {"+this.trueExpr.toTex(options)+"}, \x26\\quad{\\text{if }\\;"+this.condition.toTex(options)+"}\\\\{"+this.falseExpr.toTex(options)+"}, \x26\\quad{\\text{otherwise}}\\end{cases}"};
return ConditionalNode},{isClass:!0,isNode:!0});exports.createConditionalNode=require}
//# sourceMappingURL=module$node_modules$mathjs$lib$cjs$expression$node$ConditionalNode.js.map
