shadow$provide.module$node_modules$mathjs$lib$cjs$type$matrix$MatrixIndex=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.createIndexClass=void 0;var _is=require("module$node_modules$mathjs$lib$cjs$utils$is"),_object=require("module$node_modules$mathjs$lib$cjs$utils$object"),_number=require("module$node_modules$mathjs$lib$cjs$utils$number");global=require("module$node_modules$mathjs$lib$cjs$utils$factory");global=(0,global.factory)("Index",["ImmutableDenseMatrix"],
function(_ref){function Index(ranges){if(!(this instanceof Index))throw new SyntaxError("Constructor must be called with the new operator");this._dimensions=[];this._isScalar=!0;for(var i=0,ii=arguments.length;i<ii;i++){var arg=arguments[i];if((0,_is.isRange)(arg))this._dimensions.push(arg),this._isScalar=!1;else if(Array.isArray(arg)||(0,_is.isMatrix)(arg)){if(arg=_createImmutableMatrix(arg.valueOf()),this._dimensions.push(arg),arg=arg.size(),1!==arg.length||1!==arg[0])this._isScalar=!1}else if("number"===
typeof arg)this._dimensions.push(_createImmutableMatrix([arg]));else if("string"===typeof arg)this._dimensions.push(arg);else throw new TypeError("Dimension must be an Array, Matrix, number, string, or Range");}}function _createImmutableMatrix(arg){for(var i=0,l=arg.length;i<l;i++)if("number"!==typeof arg[i]||!(0,_number.isInteger)(arg[i]))throw new TypeError("Index parameters must be positive integer numbers");return new ImmutableDenseMatrix(arg)}var ImmutableDenseMatrix=_ref.ImmutableDenseMatrix;
Index.prototype.type="Index";Index.prototype.isIndex=!0;Index.prototype.clone=function(){var index=new Index;index._dimensions=(0,_object.clone)(this._dimensions);index._isScalar=this._isScalar;return index};Index.create=function(ranges){var index=new Index;Index.apply(index,ranges);return index};Index.prototype.size=function(){for(var size=[],i=0,ii=this._dimensions.length;i<ii;i++){var d=this._dimensions[i];size[i]="string"===typeof d?1:d.size()[0]}return size};Index.prototype.max=function(){for(var values=
[],i=0,ii=this._dimensions.length;i<ii;i++){var range=this._dimensions[i];values[i]="string"===typeof range?range:range.max()}return values};Index.prototype.min=function(){for(var values=[],i=0,ii=this._dimensions.length;i<ii;i++){var range=this._dimensions[i];values[i]="string"===typeof range?range:range.min()}return values};Index.prototype.forEach=function(callback){for(var i=0,ii=this._dimensions.length;i<ii;i++)callback(this._dimensions[i],i,this)};Index.prototype.dimension=function(dim){return this._dimensions[dim]||
null};Index.prototype.isObjectProperty=function(){return 1===this._dimensions.length&&"string"===typeof this._dimensions[0]};Index.prototype.getObjectProperty=function(){return this.isObjectProperty()?this._dimensions[0]:null};Index.prototype.isScalar=function(){return this._isScalar};Index.prototype.toArray=function(){for(var array=[],i=0,ii=this._dimensions.length;i<ii;i++){var dimension=this._dimensions[i];array.push("string"===typeof dimension?dimension:dimension.toArray())}return array};Index.prototype.valueOf=
Index.prototype.toArray;Index.prototype.toString=function(){for(var strings=[],i=0,ii=this._dimensions.length;i<ii;i++){var dimension=this._dimensions[i];"string"===typeof dimension?strings.push(JSON.stringify(dimension)):strings.push(dimension.toString())}return"["+strings.join(", ")+"]"};Index.prototype.toJSON=function(){return{mathjs:"Index",dimensions:this._dimensions}};Index.fromJSON=function(json){return Index.create(json.dimensions)};return Index},{isClass:!0});exports.createIndexClass=global}
//# sourceMappingURL=module$node_modules$mathjs$lib$cjs$type$matrix$MatrixIndex.js.map
