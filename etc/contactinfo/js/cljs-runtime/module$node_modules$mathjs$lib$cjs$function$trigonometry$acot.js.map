{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$trigonometry$acot.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,6DAAA,CAAkF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG1HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,UAAR,CAAqB,IAAK,EAEtBC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAEf,KAAIQ,YAAcR,OAAA,CAAQ,qDAAR,CAAlB,CAEIS,OAAST,OAAA,CAAQ,uDAAR,CAITM,QAAAA,CAA4B,CAAC,CAAA,CAAGC,MAASG,CAAAA,OAAb,EAFrBC,MAEqB,CADbC,CAAC,OAADA,CAAU,WAAVA,CACa,CAA0C,QAAS,CAACC,IAAD,CAAO,CAAA,IACpFC,MAAQD,IAAKC,CAAAA,KADuE;AAEpFC,WAAaF,IAAKG,CAAAA,SAyBtB,OAAOF,MAAA,CA7BEH,MA6BF,CAAY,CACjBM,OAAQR,MAAOS,CAAAA,UADE,CAEjBC,QAASA,QAAgB,CAACC,CAAD,CAAI,CAC3B,MAAOA,EAAEC,CAAAA,IAAF,EADoB,CAFZ,CAKjBL,UAAWA,QAAkB,CAACI,CAAD,CAAI,CAC/B,MAAyBE,CAAlB,IAAIP,UAAJ,CAAe,CAAf,CAAkBO,EAAAA,GAAlB,CAAsBF,CAAtB,CAAyBG,CAAAA,IAAzB,EADwB,CALhB,CAQjB,iBAAkBC,QAAoB,CAACJ,CAAD,CAAI,CACxC,MAAO,CAAC,CAAA,CAAGZ,WAAYiB,CAAAA,OAAhB,EAAyBL,CAAzB,CAA4B,IAA5B,CADiC,CARzB,CAAZ,CA3BiF,CAA1D,CAwChClB,QAAQI,CAAAA,UAAR,CAAqBA,OAxDqG;",
"sources":["node_modules/mathjs/lib/cjs/function/trigonometry/acot.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$trigonometry$acot\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAcot = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _index = require(\"../../plain/number/index.js\");\n\nvar name = 'acot';\nvar dependencies = ['typed', 'BigNumber'];\nvar createAcot = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      _BigNumber = _ref.BigNumber;\n\n  /**\n   * Calculate the inverse cotangent of a value, defined as `acot(x) = atan(1/x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.acot(x)\n   *\n   * Examples:\n   *\n   *    math.acot(0.5)           // returns number 0.4636476090008061\n   *    math.acot(math.cot(1.5)) // returns number 1.5\n   *\n   *    math.acot(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n   *\n   * See also:\n   *\n   *    cot, atan\n   *\n   * @param {number | Complex | Array | Matrix} x   Function input\n   * @return {number | Complex | Array | Matrix} The arc cotangent of x\n   */\n  return typed(name, {\n    number: _index.acotNumber,\n    Complex: function Complex(x) {\n      return x.acot();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(1).div(x).atan();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n});\nexports.createAcot = createAcot;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createAcot","_factory","_collection","_index","factory","name","dependencies","_ref","typed","_BigNumber","BigNumber","number","acotNumber","Complex","x","acot","div","atan","ArrayMatrix","deepMap"]
}
