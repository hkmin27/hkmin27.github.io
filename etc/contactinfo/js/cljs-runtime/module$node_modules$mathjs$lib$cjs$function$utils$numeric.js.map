{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$utils$numeric.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,yDAAA,CAA8E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGtHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,aAAR,CAAwB,IAAK,EAE7B,KAAIC,IAAMP,OAAA,CAAQ,6CAAR,CAENQ,OAAAA,CAAWR,OAAA,CAAQ,kDAAR,CAEf,KAAIS,MAAQT,OAAA,CAAQ,+CAAR,CAIRM,QAAAA,CAA+B,CAAC,CAAA,CAAGE,MAASE,CAAAA,OAAb,EAFxBC,SAEwB,CADhBC,CAAC,QAADA,CAAW,YAAXA,CAAyB,WAAzBA,CACgB,CAA0C,QAAS,CAACC,IAAD,CAAO,CAAA,IACvFC,QAAUD,IAAKE,CAAAA,MADwE;AAEvFC,UAAYH,IAAKG,CAAAA,SAFsE,CAGvFC,SAAWJ,IAAKI,CAAAA,QAHuE,CAIvFC,gBAAkB,CACpBC,OAAQ,CAAA,CADY,CAEpBJ,OAAQ,CAAA,CAFY,CAGpBK,UAAW,CAAA,CAHS,CAIpBC,SAAU,CAAA,CAJU,CAJqE,CAWvFC,iBAAmB,CACrBP,OAAQA,QAAe,CAACQ,CAAD,CAAI,CACzB,MAAOT,QAAA,CAAQS,CAAR,CADkB,CADN,CAIrBH,UAAWJ,SAAA,CAAY,QAAS,CAACO,CAAD,CAAI,CAClC,MAAOP,UAAA,CAAUO,CAAV,CAD2B,CAAzB,CAEPd,KAAMe,CAAAA,WANW,CAOrBH,SAAUJ,QAAA,CAAW,QAAS,CAACM,CAAD,CAAI,CAChC,MAAON,SAAA,CAASM,CAAT,CADyB,CAAxB,CAENd,KAAMgB,CAAAA,UATW,CAwCvB,OAAOC,SAAgB,CAACrB,KAAD,CAAQsB,UAAR,CAAoB,CACzC,IAAIC,UAAY,CAAC,CAAA,CAAGrB,GAAIsB,CAAAA,MAAR,EAAgBxB,KAAhB,CAEhB,IAAI,EAAEuB,SAAF,GAAeV,gBAAf,CAAJ,CACE,KAAM,KAAIY,SAAJ,CAAc,iBAAd,CAAkCzB,KAAlC,CAA0C,YAA1C,CAAyDuB,SAAzD,CAAqE,2BAArE;AAAmGzB,MAAO4B,CAAAA,IAAP,CAAYb,eAAZ,CAA6Bc,CAAAA,IAA7B,CAAkC,IAAlC,CAAnG,CAAN,CAGF,GAAI,EAAEL,UAAF,GAAgBL,iBAAhB,CAAJ,CACE,KAAM,KAAIQ,SAAJ,CAAc,iBAAd,CAAkCzB,KAAlC,CAA0C,YAA1C,CAAyDsB,UAAzD,CAAsE,4BAAtE,CAAqGxB,MAAO4B,CAAAA,IAAP,CAAYT,gBAAZ,CAA8BU,CAAAA,IAA9B,CAAmC,IAAnC,CAArG,CAAN,CAGF,MAAIL,WAAJ,GAAmBC,SAAnB,CACSvB,KADT,CAGSiB,gBAAA,CAAiBK,UAAjB,CAAA,CAA6BtB,KAA7B,CAdgC,CAnDgD,CAA1D,CAqEnCH,QAAQI,CAAAA,aAAR,CAAwBA,OArF8F;",
"sources":["node_modules/mathjs/lib/cjs/function/utils/numeric.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$utils$numeric\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createNumeric = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _noop = require(\"../../utils/noop.js\");\n\nvar name = 'numeric';\nvar dependencies = ['number', '?bignumber', '?fraction'];\nvar createNumeric = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var _number = _ref.number,\n      bignumber = _ref.bignumber,\n      fraction = _ref.fraction;\n  var validInputTypes = {\n    string: true,\n    number: true,\n    BigNumber: true,\n    Fraction: true\n  }; // Load the conversion functions for each output type\n\n  var validOutputTypes = {\n    number: function number(x) {\n      return _number(x);\n    },\n    BigNumber: bignumber ? function (x) {\n      return bignumber(x);\n    } : _noop.noBignumber,\n    Fraction: fraction ? function (x) {\n      return fraction(x);\n    } : _noop.noFraction\n  };\n  /**\n   * Convert a numeric input to a specific numeric type: number, BigNumber, or Fraction.\n   *\n   * Syntax:\n   *\n   *    math.numeric(x)\n   *\n   * Examples:\n   *\n   *    math.numeric('4')                           // returns number 4\n   *    math.numeric('4', 'number')                 // returns number 4\n   *    math.numeric('4', 'BigNumber')              // returns BigNumber 4\n   *    math.numeric('4', 'Fraction')               // returns Fraction 4\n   *    math.numeric(4, 'Fraction')                 // returns Fraction 4\n   *    math.numeric(math.fraction(2, 5), 'number') // returns number 0.4\n   *\n   * See also:\n   *\n   *    number, fraction, bignumber, string, format\n   *\n   * @param {string | number | BigNumber | Fraction } value\n   *              A numeric value or a string containing a numeric value\n   * @param {string} outputType\n   *              Desired numeric output type.\n   *              Available values: 'number', 'BigNumber', or 'Fraction'\n   * @return {number | BigNumber | Fraction}\n   *              Returns an instance of the numeric in the requested type\n   */\n\n  return function numeric(value, outputType) {\n    var inputType = (0, _is.typeOf)(value);\n\n    if (!(inputType in validInputTypes)) {\n      throw new TypeError('Cannot convert ' + value + ' of type \"' + inputType + '\"; valid input types are ' + Object.keys(validInputTypes).join(', '));\n    }\n\n    if (!(outputType in validOutputTypes)) {\n      throw new TypeError('Cannot convert ' + value + ' to type \"' + outputType + '\"; valid output types are ' + Object.keys(validOutputTypes).join(', '));\n    }\n\n    if (outputType === inputType) {\n      return value;\n    } else {\n      return validOutputTypes[outputType](value);\n    }\n  };\n});\nexports.createNumeric = createNumeric;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createNumeric","_is","_factory","_noop","factory","name","dependencies","_ref","_number","number","bignumber","fraction","validInputTypes","string","BigNumber","Fraction","validOutputTypes","x","noBignumber","noFraction","numeric","outputType","inputType","typeOf","TypeError","keys","join"]
}
