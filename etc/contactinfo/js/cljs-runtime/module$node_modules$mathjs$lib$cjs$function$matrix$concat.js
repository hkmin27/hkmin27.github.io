shadow$provide.module$node_modules$mathjs$lib$cjs$function$matrix$concat=function(global,require,module,exports){function _concat(a,b,concatDim,dim){if(dim<concatDim){if(a.length!==b.length)throw new _DimensionError.DimensionError(a.length,b.length);for(var c=[],i=0;i<a.length;i++)c[i]=_concat(a[i],b[i],concatDim,dim+1);return c}return a.concat(b)}Object.defineProperty(exports,"__esModule",{value:!0});exports.createConcat=void 0;var _is=require("module$node_modules$mathjs$lib$cjs$utils$is"),_object=
require("module$node_modules$mathjs$lib$cjs$utils$object"),_array=require("module$node_modules$mathjs$lib$cjs$utils$array"),_IndexError=require("module$node_modules$mathjs$lib$cjs$error$IndexError"),_DimensionError=require("module$node_modules$mathjs$lib$cjs$error$DimensionError");global=require("module$node_modules$mathjs$lib$cjs$utils$factory");global=(0,global.factory)("concat",["typed","matrix","isInteger"],function(_ref){var typed=_ref.typed,matrix=_ref.matrix,isInteger=_ref.isInteger;return typed("concat",
{"...Array | Matrix | number | BigNumber":function(args){var i,len=args.length,dim=-1,asMatrix=!1,matrices=[];for(i=0;i<len;i++){var arg=args[i];(0,_is.isMatrix)(arg)&&(asMatrix=!0);if((0,_is.isNumber)(arg)||(0,_is.isBigNumber)(arg)){if(i!==len-1)throw Error("Dimension must be specified as last argument");var prevDim=dim;dim=arg.valueOf();if(!isInteger(dim))throw new TypeError("Integer number expected for dimension");if(0>dim||0<i&&dim>prevDim)throw new _IndexError.IndexError(dim,prevDim+1);}else if(prevDim=
(0,_object.clone)(arg).valueOf(),arg=(0,_array.arraySize)(prevDim),matrices[i]=prevDim,prevDim=dim,dim=arg.length-1,0<i&&dim!==prevDim)throw new _DimensionError.DimensionError(prevDim+1,dim+1);}if(0===matrices.length)throw new SyntaxError("At least one matrix expected");for(args=matrices.shift();matrices.length;)args=_concat(args,matrices.shift(),dim,0);return asMatrix?matrix(args):args},"...string":function(args){return args.join("")}})});exports.createConcat=global}
//# sourceMappingURL=module$node_modules$mathjs$lib$cjs$function$matrix$concat.js.map
