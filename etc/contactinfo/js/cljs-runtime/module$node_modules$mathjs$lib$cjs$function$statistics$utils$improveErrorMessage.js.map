{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$statistics$utils$improveErrorMessage.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,gFAAA,CAAqG,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG7IC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,mBAAR,CAcAA,QAA4B,CAACC,GAAD,CAAMC,MAAN,CAAcH,KAAd,CAAqB,CAI/C,GAA+C,EAA/C,GAAII,MAAA,CAAOF,GAAP,CAAYG,CAAAA,OAAZ,CAAoB,iBAApB,CAAJ,CAAmD,CACjD,IAAAC,QAA6B,CAAnB,CAAAC,SAAUC,CAAAA,MAAV,CAAuB,UAAvB,CAAoC,CAAC,CAAA,CAAGC,GAAIC,CAAAA,MAAR,EAAgBV,KAAhB,CAApC,CAA6D,WAA7D,CAA2EW,IAAKC,CAAAA,SAAL,CAAeZ,KAAf,CAA3E,CAAmG,GAAnG,CAAyG,UAAzG,CAAsHE,GAAIW,CAAAA,IAAKC,CAAAA,MAA/H,CAAwI,GAClJ,OAAO,KAAIC,SAAJ,CAAc,mBAAd,CAAoCZ,MAApC,CAA6C,+BAA7C;AAA+EG,OAA/E,CAF0C,CAKnD,MAA+C,EAA/C,GAAIF,MAAA,CAAOF,GAAP,CAAYG,CAAAA,OAAZ,CAAoB,iBAApB,CAAJ,EACEC,OACO,CADsB,CAAnB,CAAAC,SAAUC,CAAAA,MAAV,CAAuB,UAAvB,CAAoC,CAAC,CAAA,CAAGC,GAAIC,CAAAA,MAAR,EAAgBV,KAAhB,CAApC,CAA6D,WAA7D,CAA2EW,IAAKC,CAAAA,SAAL,CAAeZ,KAAf,CAA3E,CAAmG,GAAnG,CAAyG,EAC5G,CAAA,IAAIe,SAAJ,CAAc,mBAAd,CAAoCZ,MAApC,CAA6C,uDAA7C,CAAuGG,OAAvG,CAFT,EAKOJ,GAdwC,CAZjD,KAAIO,IAAMd,OAAA,CAAQ,6CAAR,CARmI;",
"sources":["node_modules/mathjs/lib/cjs/function/statistics/utils/improveErrorMessage.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$statistics$utils$improveErrorMessage\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.improveErrorMessage = improveErrorMessage;\n\nvar _is = require(\"../../../utils/is.js\");\n\n/**\n * Improve error messages for statistics functions. Errors are typically\n * thrown in an internally used function like larger, causing the error\n * not to mention the function (like max) which is actually used by the user.\n *\n * @param {Error} err\n * @param {String} fnName\n * @param {*} [value]\n * @return {Error}\n */\nfunction improveErrorMessage(err, fnName, value) {\n  // TODO: add information with the index (also needs transform in expression parser)\n  var details;\n\n  if (String(err).indexOf('Unexpected type') !== -1) {\n    details = arguments.length > 2 ? ' (type: ' + (0, _is.typeOf)(value) + ', value: ' + JSON.stringify(value) + ')' : ' (type: ' + err.data.actual + ')';\n    return new TypeError('Cannot calculate ' + fnName + ', unexpected type of argument' + details);\n  }\n\n  if (String(err).indexOf('complex numbers') !== -1) {\n    details = arguments.length > 2 ? ' (type: ' + (0, _is.typeOf)(value) + ', value: ' + JSON.stringify(value) + ')' : '';\n    return new TypeError('Cannot calculate ' + fnName + ', no ordering relation is defined for complex numbers' + details);\n  }\n\n  return err;\n}\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","improveErrorMessage","err","fnName","String","indexOf","details","arguments","length","_is","typeOf","JSON","stringify","data","actual","TypeError"]
}
