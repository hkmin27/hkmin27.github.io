{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$matrix$cross.js",
"lineCount":3,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/function/matrix/cross.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$matrix$cross\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCross = void 0;\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'cross';\nvar dependencies = ['typed', 'matrix', 'subtract', 'multiply'];\nvar createCross = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      subtract = _ref.subtract,\n      multiply = _ref.multiply;\n\n  /**\n   * Calculate the cross product for two vectors in three dimensional space.\n   * The cross product of `A = [a1, a2, a3]` and `B = [b1, b2, b3]` is defined\n   * as:\n   *\n   *    cross(A, B) = [\n   *      a2 * b3 - a3 * b2,\n   *      a3 * b1 - a1 * b3,\n   *      a1 * b2 - a2 * b1\n   *    ]\n   *\n   * If one of the input vectors has a dimension greater than 1, the output\n   * vector will be a 1x3 (2-dimensional) matrix.\n   *\n   * Syntax:\n   *\n   *    math.cross(x, y)\n   *\n   * Examples:\n   *\n   *    math.cross([1, 1, 0],   [0, 1, 1])       // Returns [1, -1, 1]\n   *    math.cross([3, -3, 1],  [4, 9, 2])       // Returns [-15, -2, 39]\n   *    math.cross([2, 3, 4],   [5, 6, 7])       // Returns [-3, 6, -3]\n   *    math.cross([[1, 2, 3]], [[4], [5], [6]]) // Returns [[-3, 6, -3]]\n   *\n   * See also:\n   *\n   *    dot, multiply\n   *\n   * @param  {Array | Matrix} x   First vector\n   * @param  {Array | Matrix} y   Second vector\n   * @return {Array | Matrix}     Returns the cross product of `x` and `y`\n   */\n  return typed(name, {\n    'Matrix, Matrix': function MatrixMatrix(x, y) {\n      return matrix(_cross(x.toArray(), y.toArray()));\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      return matrix(_cross(x.toArray(), y));\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      return matrix(_cross(x, y.toArray()));\n    },\n    'Array, Array': _cross\n  });\n  /**\n   * Calculate the cross product for two arrays\n   * @param {Array} x  First vector\n   * @param {Array} y  Second vector\n   * @returns {Array} Returns the cross product of x and y\n   * @private\n   */\n\n  function _cross(x, y) {\n    var highestDimension = Math.max((0, _array.arraySize)(x).length, (0, _array.arraySize)(y).length);\n    x = (0, _array.squeeze)(x);\n    y = (0, _array.squeeze)(y);\n    var xSize = (0, _array.arraySize)(x);\n    var ySize = (0, _array.arraySize)(y);\n\n    if (xSize.length !== 1 || ySize.length !== 1 || xSize[0] !== 3 || ySize[0] !== 3) {\n      throw new RangeError('Vectors with length 3 expected ' + '(Size A = [' + xSize.join(', ') + '], B = [' + ySize.join(', ') + '])');\n    }\n\n    var product = [subtract(multiply(x[1], y[2]), multiply(x[2], y[1])), subtract(multiply(x[2], y[0]), multiply(x[0], y[2])), subtract(multiply(x[0], y[1]), multiply(x[1], y[0]))];\n\n    if (highestDimension > 1) {\n      return [product];\n    } else {\n      return product;\n    }\n  }\n});\nexports.createCross = createCross;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createCross","_array","_factory","factory","name","dependencies","_ref","_cross","x","y","highestDimension","Math","max","arraySize","length","squeeze","xSize","ySize","RangeError","join","product","subtract","multiply","typed","matrix","MatrixMatrix","toArray","MatrixArray","ArrayMatrix"]
}
