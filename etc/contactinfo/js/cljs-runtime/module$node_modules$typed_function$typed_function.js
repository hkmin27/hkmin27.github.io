shadow$provide.module$node_modules$typed_function$typed_function=function(global,require,module,exports){(function(root,factory){"function"===typeof define&&define.amd?define([],factory):"object"===typeof exports?module.exports=factory():root.typed=factory()})(this,function(){function ok(){return!0}function notOk(){return!1}function undef(){}function create(){function findTypeByName(typeName){var entry=findInArray(typed.types,function(entry){return entry.name===typeName});if(entry)return entry;if("any"===
typeName)return anyType;entry=findInArray(typed.types,function(entry){return entry.name.toLowerCase()===typeName.toLowerCase()});throw new TypeError('Unknown type "'+typeName+'"'+(entry?'. Did you mean "'+entry.name+'"?':""));}function findTypeName(value){var entry$jscomp$0=findInArray(typed.types,function(entry){return entry.test(value)});if(entry$jscomp$0)return entry$jscomp$0.name;throw new TypeError("Value has unknown type. Value: "+value);}function stringifyParams(params){return params.map(function(param){var typeNames=
param.types.map(getTypeName);return(param.restParam?"...":"")+typeNames.join("|")}).join(",")}function parseParam(param,conversions){var restParam=0===param.indexOf("..."),typeNames=(restParam?3<param.length?param.slice(3):"any":param).split("|").map(trim).filter(notEmpty).filter(notIgnore);param=filterConversions(conversions,typeNames);typeNames=typeNames.map(function(typeName){var type=findTypeByName(typeName);return{name:typeName,typeIndex:type===anyType?999:typed.types.indexOf(type),test:type.test,
conversion:null,conversionIndex:-1}});param=param.map(function(conversion){var type=findTypeByName(conversion.from);return{name:conversion.from,typeIndex:type===anyType?999:typed.types.indexOf(type),test:type.test,conversion:conversion,conversionIndex:conversions.indexOf(conversion)}});return{types:typeNames.concat(param),restParam:restParam}}function parseSignature(signature,fn,conversions){var params=[];""!==signature.trim()&&(params=signature.split(",").map(trim).map(function(param,index,array){var parsedParam=
parseParam(param,conversions);if(parsedParam.restParam&&index!==array.length-1)throw new SyntaxError('Unexpected rest parameter "'+param+'": only allowed for the last parameter');return parsedParam}));return params.some(isInvalidParam)?null:{params:params,fn:fn}}function hasRestParam(params){return(params=params[params.length-1])?params.restParam:!1}function hasConversions(param){return param.types.some(function(type){return null!=type.conversion})}function compileTest(param){if(param&&0!==param.types.length){if(1===
param.types.length)return findTypeByName(param.types[0].name).test;if(2===param.types.length){var test0=findTypeByName(param.types[0].name).test,test1=findTypeByName(param.types[1].name).test;return function(x){return test0(x)||test1(x)}}var tests=param.types.map(function(type){return findTypeByName(type.name).test});return function(x){for(var i=0;i<tests.length;i++)if(tests[i](x))return!0;return!1}}return ok}function compileTests(params){if(hasRestParam(params)){var tests=params.slice(0,params.length-
1).map(compileTest);var varIndex=tests.length,lastTest=compileTest(params[params.length-1]);return function(args){for(var i=0;i<tests.length;i++)if(!tests[i](args[i]))return!1;a:{for(i=varIndex;i<args.length;i++)if(!lastTest(args[i])){i=!1;break a}i=!0}return i&&args.length>=varIndex+1}}if(0===params.length)return function(args){return 0===args.length};if(1===params.length){var test0=compileTest(params[0]);return function(args){return test0(args[0])&&1===args.length}}if(2===params.length){test0=compileTest(params[0]);
var test1=compileTest(params[1]);return function(args){return test0(args[0])&&test1(args[1])&&2===args.length}}tests=params.map(compileTest);return function(args){for(var i=0;i<tests.length;i++)if(!tests[i](args[i]))return!1;return args.length===tests.length}}function getParamAtIndex(signature,index){index<signature.params.length?signature=signature.params[index]:hasRestParam(signature.params)?(signature=signature.params,signature=signature[signature.length-1]):signature=null;return signature}function getExpectedTypeNames(signature,
index,excludeConversions){signature=getParamAtIndex(signature,index);return(signature?excludeConversions?signature.types.filter(isExactType):signature.types:[]).map(getTypeName)}function getTypeName(type){return type.name}function isExactType(type){return null===type.conversion||void 0===type.conversion}function mergeExpectedParams(signatures,index){signatures=uniq(flatMap(signatures,function(signature){return getExpectedTypeNames(signature,index,!1)}));return-1!==signatures.indexOf("any")?["any"]:
signatures}function createError(name,args,signatures){name=name||"unnamed";var index;for(index=0;index<args.length;index++){var expected=signatures.filter(function(signature){var test=compileTest(getParamAtIndex(signature,index));return(index<signature.params.length||hasRestParam(signature.params))&&test(args[index])});if(0===expected.length){if(expected=mergeExpectedParams(signatures,index),0<expected.length){var actualType=findTypeName(args[index]);signatures=new TypeError("Unexpected type of argument in function "+
name+" (expected: "+expected.join(" or ")+", actual: "+actualType+", index: "+index+")");signatures.data={category:"wrongType",fn:name,index:index,actual:actualType,expected:expected};return signatures}}else signatures=expected}expected=signatures.map(function(signature){return hasRestParam(signature.params)?Infinity:signature.params.length});if(args.length<Math.min.apply(null,expected))return expected=mergeExpectedParams(signatures,index),signatures=new TypeError("Too few arguments in function "+
name+" (expected: "+expected.join(" or ")+", index: "+args.length+")"),signatures.data={category:"tooFewArgs",fn:name,index:args.length,expected:expected},signatures;expected=Math.max.apply(null,expected);if(args.length>expected)return signatures=new TypeError("Too many arguments in function "+name+" (expected: "+expected+", actual: "+args.length+")"),signatures.data={category:"tooManyArgs",fn:name,index:args.length,expectedLength:expected},signatures;signatures=new TypeError('Arguments of type "'+
args.join(", ")+'" do not match any of the defined signatures of function '+name+".");signatures.data={category:"mismatch",actual:args.map(findTypeName)};return signatures}function getLowestTypeIndex(param){for(var min=999,i=0;i<param.types.length;i++)isExactType(param.types[i])&&(min=Math.min(min,param.types[i].typeIndex));return min}function getLowestConversionIndex(param){for(var min=999,i=0;i<param.types.length;i++)isExactType(param.types[i])||(min=Math.min(min,param.types[i].conversionIndex));
return min}function compareSignatures(signature1,signature2){var len=Math.min(signature1.params.length,signature2.params.length),i;var c=signature1.params.some(hasConversions)-signature2.params.some(hasConversions);if(0!==c)return c;for(i=0;i<len;i++)if(c=hasConversions(signature1.params[i])-hasConversions(signature2.params[i]),0!==c)return c;for(i=0;i<len;i++){var param1=signature1.params[i],param2=signature2.params[i];c=param1.restParam-param2.restParam;0===c&&(c=hasConversions(param1)-hasConversions(param2),
0===c&&(c=getLowestTypeIndex(param1)-getLowestTypeIndex(param2),c=0!==c?c:getLowestConversionIndex(param1)-getLowestConversionIndex(param2)));if(0!==c)return c}return signature1.params.length-signature2.params.length}function filterConversions(conversions,typeNames){var matches={};conversions.forEach(function(conversion){-1!==typeNames.indexOf(conversion.from)||-1===typeNames.indexOf(conversion.to)||matches[conversion.from]||(matches[conversion.from]=conversion)});return Object.keys(matches).map(function(from){return matches[from]})}
function compileArgsPreprocessing(params,fn){var fnConvert=fn;if(params.some(hasConversions)){var restParam=hasRestParam(params),compiledConversions=params.map(compileArgConversion);fnConvert=function(){for(var args=[],last=restParam?arguments.length-1:arguments.length,i=0;i<last;i++)args[i]=compiledConversions[i](arguments[i]);restParam&&(args[last]=arguments[last].map(compiledConversions[last]));return fn.apply(this,args)}}var fnPreprocess=fnConvert;if(hasRestParam(params)){var offset=params.length-
1;fnPreprocess=function(){return fnConvert.apply(this,Array.prototype.slice.call(arguments,0,offset).concat([Array.prototype.slice.call(arguments,offset,void 0)]))}}return fnPreprocess}function compileArgConversion(param){var tests=[],conversions=[];param.types.forEach(function(type){type.conversion&&(tests.push(findTypeByName(type.conversion.from).test),conversions.push(type.conversion.convert))});switch(conversions.length){case 0:return function(arg){return arg};case 1:var test0=tests[0];var conversion0=
conversions[0];return function(arg){return test0(arg)?conversion0(arg):arg};case 2:test0=tests[0];var test1=tests[1];conversion0=conversions[0];var conversion1=conversions[1];return function(arg){return test0(arg)?conversion0(arg):test1(arg)?conversion1(arg):arg};default:return function(arg){for(var i=0;i<conversions.length;i++)if(tests[i](arg))return conversions[i](arg);return arg}}}function createSignaturesMap(signatures){var signaturesMap={};signatures.forEach(function(signature){signature.params.some(hasConversions)||
splitParams(signature.params,!0).forEach(function(params){signaturesMap[stringifyParams(params)]=signature.fn})});return signaturesMap}function splitParams(params$jscomp$0,ignoreConversionTypes){function _splitParams(params,index,types){if(index<params.length){var param=params[index],filteredTypes=ignoreConversionTypes?param.types.filter(isExactType):param.types;param.restParam?(param=filteredTypes.filter(isExactType),filteredTypes=param.length<filteredTypes.length?[param,filteredTypes]:[filteredTypes]):
filteredTypes=filteredTypes.map(function(type){return[type]});return flatMap(filteredTypes,function(typeGroup){return _splitParams(params,index+1,types.concat([typeGroup]))})}return[types.map(function(type,typeIndex){return{types:type,restParam:typeIndex===params.length-1&&hasRestParam(params)}})]}return _splitParams(params$jscomp$0,0,[])}function createTypedFunction(name,signaturesMap){if(0===Object.keys(signaturesMap).length)throw new SyntaxError("No signatures provided");var parsedSignatures=[];
Object.keys(signaturesMap).map(function(signature){return parseSignature(signature,signaturesMap[signature],typed.conversions)}).filter(notNull).forEach(function(parsedSignature){var conflictingSignature=findInArray(parsedSignatures,function(s){a:{for(var ii=Math.max(s.params.length,parsedSignature.params.length),i=0;i<ii;i++){var typesNames1=getExpectedTypeNames(s,i,!0),typesNames2=getExpectedTypeNames(parsedSignature,i,!0);b:{for(var i$jscomp$0=0;i$jscomp$0<typesNames1.length;i$jscomp$0++)if(-1!==
typesNames2.indexOf(typesNames1[i$jscomp$0])){typesNames1=!0;break b}typesNames1=!1}if(!typesNames1){s=!1;break a}}ii=s.params.length;i=parsedSignature.params.length;s=hasRestParam(s.params);typesNames1=hasRestParam(parsedSignature.params);s=s?typesNames1?ii===i:i>=ii:typesNames1?ii>=i:ii===i}return s});if(conflictingSignature)throw new TypeError('Conflicting signatures "'+stringifyParams(conflictingSignature.params)+'" and "'+stringifyParams(parsedSignature.params)+'".');parsedSignatures.push(parsedSignature)});
var signatures=flatMap(parsedSignatures,function(parsedSignature){return(parsedSignature?splitParams(parsedSignature.params,!1):[]).map(function(params){return{params:params,fn:parsedSignature.fn}})}).filter(notNull);signatures.sort(compareSignatures);var ok0=signatures[0]&&2>=signatures[0].params.length&&!hasRestParam(signatures[0].params),ok1=signatures[1]&&2>=signatures[1].params.length&&!hasRestParam(signatures[1].params),ok2=signatures[2]&&2>=signatures[2].params.length&&!hasRestParam(signatures[2].params),
ok3=signatures[3]&&2>=signatures[3].params.length&&!hasRestParam(signatures[3].params),ok4=signatures[4]&&2>=signatures[4].params.length&&!hasRestParam(signatures[4].params),ok5=signatures[5]&&2>=signatures[5].params.length&&!hasRestParam(signatures[5].params),allOk=ok0&&ok1&&ok2&&ok3&&ok4&&ok5,tests=signatures.map(function(signature){return compileTests(signature.params)}),test00=ok0?compileTest(signatures[0].params[0]):notOk,test10=ok1?compileTest(signatures[1].params[0]):notOk,test20=ok2?compileTest(signatures[2].params[0]):
notOk,test30=ok3?compileTest(signatures[3].params[0]):notOk,test40=ok4?compileTest(signatures[4].params[0]):notOk,test50=ok5?compileTest(signatures[5].params[0]):notOk,test01=ok0?compileTest(signatures[0].params[1]):notOk,test11=ok1?compileTest(signatures[1].params[1]):notOk,test21=ok2?compileTest(signatures[2].params[1]):notOk,test31=ok3?compileTest(signatures[3].params[1]):notOk,test41=ok4?compileTest(signatures[4].params[1]):notOk,test51=ok5?compileTest(signatures[5].params[1]):notOk,fns=signatures.map(function(signature){return compileArgsPreprocessing(signature.params,
signature.fn)}),fn0=ok0?fns[0]:undef,fn1=ok1?fns[1]:undef,fn2=ok2?fns[2]:undef,fn3=ok3?fns[3]:undef,fn4=ok4?fns[4]:undef,fn5=ok5?fns[5]:undef,len0=ok0?signatures[0].params.length:-1,len1=ok1?signatures[1].params.length:-1,len2=ok2?signatures[2].params.length:-1,len3=ok3?signatures[3].params.length:-1,len4=ok4?signatures[4].params.length:-1,len5=ok5?signatures[5].params.length:-1,iStart=allOk?6:0,iEnd=signatures.length,generic=function(){for(var i=iStart;i<iEnd;i++)if(tests[i](arguments))return fns[i].apply(this,
arguments);throw createError(name,arguments,signatures);};ok0=function fn(arg0,arg1){return arguments.length===len0&&test00(arg0)&&test01(arg1)?fn0.apply(fn,arguments):arguments.length===len1&&test10(arg0)&&test11(arg1)?fn1.apply(fn,arguments):arguments.length===len2&&test20(arg0)&&test21(arg1)?fn2.apply(fn,arguments):arguments.length===len3&&test30(arg0)&&test31(arg1)?fn3.apply(fn,arguments):arguments.length===len4&&test40(arg0)&&test41(arg1)?fn4.apply(fn,arguments):arguments.length===len5&&test50(arg0)&&
test51(arg1)?fn5.apply(fn,arguments):generic.apply(fn,arguments)};try{Object.defineProperty(ok0,"name",{value:name})}catch(err){}ok0.signatures=createSignaturesMap(signatures);return ok0}function notIgnore(typeName){return-1===typed.ignore.indexOf(typeName)}function trim(str){return str.trim()}function notEmpty(str){return!!str}function notNull(value){return null!==value}function isInvalidParam(param){return 0===param.types.length}function findInArray(arr,test){for(var i=0;i<arr.length;i++)if(test(arr[i]))return arr[i]}
function uniq(arr){for(var entries={},i=0;i<arr.length;i++)entries[arr[i]]=!0;return Object.keys(entries)}function flatMap(arr,callback){return Array.prototype.concat.apply([],arr.map(callback))}function getName(fns){for(var name="",i=0;i<fns.length;i++){var fn=fns[i];if(("object"===typeof fn.signatures||"string"===typeof fn.signature)&&""!==fn.name)if(""===name)name=fn.name;else if(name!==fn.name)throw fns=Error("Function names do not match (expected: "+name+", actual: "+fn.name+")"),fns.data={actual:fn.name,
expected:name},fns;}return name}function extractSignatures(fns){function validateUnique(_signature,_fn){if(signaturesMap.hasOwnProperty(_signature)&&_fn!==signaturesMap[_signature])throw err=Error('Signature "'+_signature+'" is defined twice'),err.data={signature:_signature},err;}for(var err,signaturesMap={},i=0;i<fns.length;i++){var fn=fns[i];if("object"===typeof fn.signatures)for(var signature in fn.signatures)fn.signatures.hasOwnProperty(signature)&&(validateUnique(signature,fn.signatures[signature]),
signaturesMap[signature]=fn.signatures[signature]);else if("string"===typeof fn.signature)validateUnique(fn.signature,fn),signaturesMap[fn.signature]=fn;else throw err=new TypeError("Function is no typed-function (index: "+i+")"),err.data={index:i},err;}return signaturesMap}var _types=[{name:"number",test:function(x){return"number"===typeof x}},{name:"string",test:function(x){return"string"===typeof x}},{name:"boolean",test:function(x){return"boolean"===typeof x}},{name:"Function",test:function(x){return"function"===
typeof x}},{name:"Array",test:Array.isArray},{name:"Date",test:function(x){return x instanceof Date}},{name:"RegExp",test:function(x){return x instanceof RegExp}},{name:"Object",test:function(x){return"object"===typeof x&&null!==x&&x.constructor===Object}},{name:"null",test:function(x){return null===x}},{name:"undefined",test:function(x){return void 0===x}}],anyType={name:"any",test:ok},_ignore=[],_conversions=[],typed={types:_types,conversions:_conversions,ignore:_ignore};typed=createTypedFunction("typed",
{"string, Object":createTypedFunction,Object:function(signaturesMap){var fns=[],signature;for(signature in signaturesMap)signaturesMap.hasOwnProperty(signature)&&fns.push(signaturesMap[signature]);fns=getName(fns);return createTypedFunction(fns,signaturesMap)},"...Function":function(fns){return createTypedFunction(getName(fns),extractSignatures(fns))},"string, ...Function":function(name,fns){return createTypedFunction(name,extractSignatures(fns))}});typed.create=create;typed.types=_types;typed.conversions=
_conversions;typed.ignore=_ignore;typed.convert=function(value,type){var from=findTypeName(value);if(type===from)return value;for(var i=0;i<typed.conversions.length;i++){var conversion=typed.conversions[i];if(conversion.from===from&&conversion.to===type)return conversion.convert(value)}throw Error("Cannot convert from "+from+" to "+type);};typed.find=function(fn,signature){if(!fn.signatures)throw new TypeError("Function is no typed-function");if("string"===typeof signature){signature=signature.split(",");
for(var i=0;i<signature.length;i++)signature[i]=signature[i].trim()}else if(!Array.isArray(signature))throw new TypeError("String array or a comma separated string expected");i=signature.join(",");if(i=fn.signatures[i])return i;throw new TypeError("Signature not found (signature: "+(fn.name||"unnamed")+"("+signature.join(", ")+"))");};typed.addType=function(type,beforeObjectTest){if(!type||"string"!==typeof type.name||"function"!==typeof type.test)throw new TypeError("Object with properties {name: string, test: function} expected");
if(!1!==beforeObjectTest)for(beforeObjectTest=0;beforeObjectTest<typed.types.length;beforeObjectTest++)if("Object"===typed.types[beforeObjectTest].name){typed.types.splice(beforeObjectTest,0,type);return}typed.types.push(type)};typed.addConversion=function(conversion){if(!conversion||"string"!==typeof conversion.from||"string"!==typeof conversion.to||"function"!==typeof conversion.convert)throw new TypeError("Object with properties {from: string, to: string, convert: function} expected");typed.conversions.push(conversion)};
return typed}return create()})}
//# sourceMappingURL=module$node_modules$typed_function$typed_function.js.map
