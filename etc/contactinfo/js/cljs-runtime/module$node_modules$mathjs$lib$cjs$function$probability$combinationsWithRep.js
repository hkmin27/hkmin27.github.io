shadow$provide.module$node_modules$mathjs$lib$cjs$function$probability$combinationsWithRep=function(global,require,module,exports){function isPositiveInteger(n){return n.isInteger()&&n.gte(0)}Object.defineProperty(exports,"__esModule",{value:!0});exports.createCombinationsWithRep=void 0;global=require("module$node_modules$mathjs$lib$cjs$utils$factory");var _number=require("module$node_modules$mathjs$lib$cjs$utils$number"),_product=require("module$node_modules$mathjs$lib$cjs$utils$product");require=
(0,global.factory)("combinationsWithRep",["typed"],function(_ref){_ref=_ref.typed;return _ref("combinationsWithRep",{"number, number":function(n,k){if(!(0,_number.isInteger)(n)||0>n)throw new TypeError("Positive integer value expected in function combinationsWithRep");if(!(0,_number.isInteger)(k)||0>k)throw new TypeError("Positive integer value expected in function combinationsWithRep");if(1>n)throw new TypeError("k must be less than or equal to n + k - 1");return k<n-1?(0,_product.product)(n,n+k-
1)/(0,_product.product)(1,k):(0,_product.product)(k+1,n+k-1)/(0,_product.product)(1,n-1)},"BigNumber, BigNumber":function(n,k){var i,one=new n.constructor(1),nMinusOne=n.minus(one);if(!isPositiveInteger(n)||!isPositiveInteger(k))throw new TypeError("Positive integer value expected in function combinationsWithRep");if(n.lt(one))throw new TypeError("k must be less than or equal to n + k - 1 in function combinationsWithRep");n=one;if(k.lt(nMinusOne))for(i=one;i.lte(nMinusOne);i=i.plus(one))n=n.times(k.plus(i)).dividedBy(i);
else for(i=one;i.lte(k);i=i.plus(one))n=n.times(nMinusOne.plus(i)).dividedBy(i);return n}})});exports.createCombinationsWithRep=require}
//# sourceMappingURL=module$node_modules$mathjs$lib$cjs$function$probability$combinationsWithRep.js.map
