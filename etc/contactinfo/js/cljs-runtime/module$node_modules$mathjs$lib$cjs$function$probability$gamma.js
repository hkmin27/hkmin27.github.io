shadow$provide.module$node_modules$mathjs$lib$cjs$function$probability$gamma=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.createGamma=void 0;var _collection=require("module$node_modules$mathjs$lib$cjs$utils$collection");global=require("module$node_modules$mathjs$lib$cjs$utils$factory");var _index=require("module$node_modules$mathjs$lib$cjs$plain$number$index");require=(0,global.factory)("gamma","typed config multiplyScalar pow BigNumber Complex".split(" "),
function(_ref){function bigFactorial(n){if(8>n)return new _BigNumber([1,1,2,6,24,120,720,5040][n]);var precision=config.precision+(Math.log(n.toNumber())|0),Big=_BigNumber.clone({precision:precision});if(1===n%2)return n.times(bigFactorial(new _BigNumber(n-1)));precision=n;Big=new Big(n);for(n=n.toNumber();2<precision;)precision-=2,n+=precision,Big=Big.times(n);return new _BigNumber(Big.toPrecision(_BigNumber.precision))}var typed=_ref.typed,config=_ref.config,multiplyScalar=_ref.multiplyScalar,pow=
_ref.pow,_BigNumber=_ref.BigNumber,_Complex=_ref.Complex;return typed("gamma",{number:_index.gammaNumber,Complex:function(n){if(0===n.im)return this(n.re);n=new _Complex(n.re-1,n.im);for(var x=new _Complex(_index.gammaP[0],0),i=1;i<_index.gammaP.length;++i){var real=n.re+i,den=real*real+n.im*n.im;0!==den?(x.re+=_index.gammaP[i]*real/den,x.im+=-(_index.gammaP[i]*n.im)/den):x.re=0>_index.gammaP[i]?-Infinity:Infinity}i=new _Complex(n.re+_index.gammaG+.5,n.im);real=Math.sqrt(2*Math.PI);n.re+=.5;n=pow(i,
n);0===n.im?n.re*=real:(0!==n.re&&(n.re*=real),n.im*=real);real=Math.exp(-i.re);i.re=real*Math.cos(-i.im);i.im=real*Math.sin(-i.im);return multiplyScalar(multiplyScalar(n,i),x)},BigNumber:function(n){if(n.isInteger())return n.isNegative()||n.isZero()?new _BigNumber(Infinity):bigFactorial(n.minus(1));if(!n.isFinite())return new _BigNumber(n.isNegative()?NaN:Infinity);throw Error("Integer BigNumber expected");},"Array | Matrix":function(n){return(0,_collection.deepMap)(n,this)}})});exports.createGamma=
require}
//# sourceMappingURL=module$node_modules$mathjs$lib$cjs$function$probability$gamma.js.map
