{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$expression$transform$utils$compileInlineExpression.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,qFAAA,CAA0G,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGlJC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,uBAAR,CAYAA,QAAgC,CAACC,UAAD,CAAaC,IAAb,CAAmBC,KAAnB,CAA0B,CAExD,IAAIC,OAASH,UAAWI,CAAAA,MAAX,CAAkB,QAAS,CAACC,IAAD,CAAO,CAC7C,MAAO,CAAC,CAAA,CAAGC,GAAIC,CAAAA,YAAR,EAAsBF,IAAtB,CAAP,EAAsC,EAAEA,IAAKG,CAAAA,IAAP,GAAeP,KAAf,CAAtC,EAA8D,EAAEI,IAAKG,CAAAA,IAAP,GAAeN,MAAf,CADjB,CAAlC,CAAA,CAEV,CAFU,CAIb,IAAI,CAACC,MAAL,CACE,KAAUM,MAAJ,CAAU,oDAAV,CAAiET,UAAjE,CAA8E,GAA9E,CAAN,CAIF,IAAIQ,KAAOL,MAAOK,CAAAA,IAAlB,CAEIE;AAAWd,MAAOe,CAAAA,MAAP,CAAcT,KAAd,CAFf,CAGIU,GAAKZ,UAAWa,CAAAA,OAAX,EACT,OAAOC,SAAyB,CAACC,CAAD,CAAI,CAClCL,QAAA,CAASF,IAAT,CAAA,CAAiBO,CACjB,OAAOH,GAAGI,CAAAA,QAAH,CAAYN,QAAZ,CAF2B,CAfoB,CAV1D,KAAIJ,IAAMb,OAAA,CAAQ,6CAAR,CARwI;",
"sources":["node_modules/mathjs/lib/cjs/expression/transform/utils/compileInlineExpression.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$expression$transform$utils$compileInlineExpression\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.compileInlineExpression = compileInlineExpression;\n\nvar _is = require(\"../../../utils/is.js\");\n\n/**\n * Compile an inline expression like \"x > 0\"\n * @param {Node} expression\n * @param {Object} math\n * @param {Object} scope\n * @return {function} Returns a function with one argument which fills in the\n *                    undefined variable (like \"x\") and evaluates the expression\n */\nfunction compileInlineExpression(expression, math, scope) {\n  // find an undefined symbol\n  var symbol = expression.filter(function (node) {\n    return (0, _is.isSymbolNode)(node) && !(node.name in math) && !(node.name in scope);\n  })[0];\n\n  if (!symbol) {\n    throw new Error('No undefined variable found in inline expression \"' + expression + '\"');\n  } // create a test function for this equation\n\n\n  var name = symbol.name; // variable name\n\n  var subScope = Object.create(scope);\n  var eq = expression.compile();\n  return function inlineExpression(x) {\n    subScope[name] = x;\n    return eq.evaluate(subScope);\n  };\n}\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","compileInlineExpression","expression","math","scope","symbol","filter","node","_is","isSymbolNode","name","Error","subScope","create","eq","compile","inlineExpression","x","evaluate"]
}
