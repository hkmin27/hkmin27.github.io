{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$expression$embeddedDocs$function$set$setIsSubset.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,mFAAA,CAAwG,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGhJC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAYAH,QAAQI,CAAAA,eAAR,CARsBA,CACpBC,KAAM,aADcD,CAEpBE,SAAU,KAFUF,CAGpBG,OAAQ,CAAC,yBAAD,CAHYH,CAIpBI,YAAa,uMAJOJ,CAKpBK,SAAU,CAAC,mCAAD;AAAsC,mCAAtC,CALUL,CAMpBM,QAAS,CAAC,UAAD,CAAa,cAAb,CAA6B,eAA7B,CANWN,CAP0H;",
"sources":["node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/set/setIsSubset.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$expression$embeddedDocs$function$set$setIsSubset\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setIsSubsetDocs = void 0;\nvar setIsSubsetDocs = {\n  name: 'setIsSubset',\n  category: 'Set',\n  syntax: ['setIsSubset(set1, set2)'],\n  description: 'Check whether a (multi)set is a subset of another (multi)set: every element of set1 is the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',\n  examples: ['setIsSubset([1, 2], [3, 4, 5, 6])', 'setIsSubset([3, 4], [3, 4, 5, 6])'],\n  seealso: ['setUnion', 'setIntersect', 'setDifference']\n};\nexports.setIsSubsetDocs = setIsSubsetDocs;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","setIsSubsetDocs","name","category","syntax","description","examples","seealso"]
}
