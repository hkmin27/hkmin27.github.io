{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$utils$bignumber$bitwise.js",
"lineCount":10,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/utils/bignumber/bitwise.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$utils$bignumber$bitwise\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bitAndBigNumber = bitAndBigNumber;\nexports.bitNotBigNumber = bitNotBigNumber;\nexports.bitOrBigNumber = bitOrBigNumber;\nexports.bitwise = bitwise;\nexports.bitXor = bitXor;\nexports.leftShiftBigNumber = leftShiftBigNumber;\nexports.rightArithShiftBigNumber = rightArithShiftBigNumber;\n\n/**\n * Bitwise and for Bignumbers\n *\n * Special Cases:\n *   N &  n =  N\n *   n &  0 =  0\n *   n & -1 =  n\n *   n &  n =  n\n *   I &  I =  I\n *  -I & -I = -I\n *   I & -I =  0\n *   I &  n =  n\n *   I & -n =  I\n *  -I &  n =  0\n *  -I & -n = -I\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` & `y`, is fully precise\n * @private\n */\nfunction bitAndBigNumber(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function bitAnd');\n  }\n\n  var BigNumber = x.constructor;\n\n  if (x.isNaN() || y.isNaN()) {\n    return new BigNumber(NaN);\n  }\n\n  if (x.isZero() || y.eq(-1) || x.eq(y)) {\n    return x;\n  }\n\n  if (y.isZero() || x.eq(-1)) {\n    return y;\n  }\n\n  if (!x.isFinite() || !y.isFinite()) {\n    if (!x.isFinite() && !y.isFinite()) {\n      if (x.isNegative() === y.isNegative()) {\n        return x;\n      }\n\n      return new BigNumber(0);\n    }\n\n    if (!x.isFinite()) {\n      if (y.isNegative()) {\n        return x;\n      }\n\n      if (x.isNegative()) {\n        return new BigNumber(0);\n      }\n\n      return y;\n    }\n\n    if (!y.isFinite()) {\n      if (x.isNegative()) {\n        return y;\n      }\n\n      if (y.isNegative()) {\n        return new BigNumber(0);\n      }\n\n      return x;\n    }\n  }\n\n  return bitwise(x, y, function (a, b) {\n    return a & b;\n  });\n}\n/**\n * Bitwise not\n * @param {BigNumber} x\n * @return {BigNumber} Result of ~`x`, fully precise\n *\n */\n\n\nfunction bitNotBigNumber(x) {\n  if (x.isFinite() && !x.isInteger()) {\n    throw new Error('Integer expected in function bitNot');\n  }\n\n  var BigNumber = x.constructor;\n  var prevPrec = BigNumber.precision;\n  BigNumber.config({\n    precision: 1E9\n  });\n  var result = x.plus(new BigNumber(1));\n  result.s = -result.s || null;\n  BigNumber.config({\n    precision: prevPrec\n  });\n  return result;\n}\n/**\n * Bitwise OR for BigNumbers\n *\n * Special Cases:\n *   N |  n =  N\n *   n |  0 =  n\n *   n | -1 = -1\n *   n |  n =  n\n *   I |  I =  I\n *  -I | -I = -I\n *   I | -n = -1\n *   I | -I = -1\n *   I |  n =  I\n *  -I |  n = -I\n *  -I | -n = -n\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` | `y`, fully precise\n */\n\n\nfunction bitOrBigNumber(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function bitOr');\n  }\n\n  var BigNumber = x.constructor;\n\n  if (x.isNaN() || y.isNaN()) {\n    return new BigNumber(NaN);\n  }\n\n  var negOne = new BigNumber(-1);\n\n  if (x.isZero() || y.eq(negOne) || x.eq(y)) {\n    return y;\n  }\n\n  if (y.isZero() || x.eq(negOne)) {\n    return x;\n  }\n\n  if (!x.isFinite() || !y.isFinite()) {\n    if (!x.isFinite() && !x.isNegative() && y.isNegative() || x.isNegative() && !y.isNegative() && !y.isFinite()) {\n      return negOne;\n    }\n\n    if (x.isNegative() && y.isNegative()) {\n      return x.isFinite() ? x : y;\n    }\n\n    return x.isFinite() ? y : x;\n  }\n\n  return bitwise(x, y, function (a, b) {\n    return a | b;\n  });\n}\n/**\n * Applies bitwise function to numbers\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @param {function (a, b)} func\n * @return {BigNumber}\n */\n\n\nfunction bitwise(x, y, func) {\n  var BigNumber = x.constructor;\n  var xBits, yBits;\n  var xSign = +(x.s < 0);\n  var ySign = +(y.s < 0);\n\n  if (xSign) {\n    xBits = decCoefficientToBinaryString(bitNotBigNumber(x));\n\n    for (var i = 0; i < xBits.length; ++i) {\n      xBits[i] ^= 1;\n    }\n  } else {\n    xBits = decCoefficientToBinaryString(x);\n  }\n\n  if (ySign) {\n    yBits = decCoefficientToBinaryString(bitNotBigNumber(y));\n\n    for (var _i = 0; _i < yBits.length; ++_i) {\n      yBits[_i] ^= 1;\n    }\n  } else {\n    yBits = decCoefficientToBinaryString(y);\n  }\n\n  var minBits, maxBits, minSign;\n\n  if (xBits.length <= yBits.length) {\n    minBits = xBits;\n    maxBits = yBits;\n    minSign = xSign;\n  } else {\n    minBits = yBits;\n    maxBits = xBits;\n    minSign = ySign;\n  }\n\n  var shortLen = minBits.length;\n  var longLen = maxBits.length;\n  var expFuncVal = func(xSign, ySign) ^ 1;\n  var outVal = new BigNumber(expFuncVal ^ 1);\n  var twoPower = new BigNumber(1);\n  var two = new BigNumber(2);\n  var prevPrec = BigNumber.precision;\n  BigNumber.config({\n    precision: 1E9\n  });\n\n  while (shortLen > 0) {\n    if (func(minBits[--shortLen], maxBits[--longLen]) === expFuncVal) {\n      outVal = outVal.plus(twoPower);\n    }\n\n    twoPower = twoPower.times(two);\n  }\n\n  while (longLen > 0) {\n    if (func(minSign, maxBits[--longLen]) === expFuncVal) {\n      outVal = outVal.plus(twoPower);\n    }\n\n    twoPower = twoPower.times(two);\n  }\n\n  BigNumber.config({\n    precision: prevPrec\n  });\n\n  if (expFuncVal === 0) {\n    outVal.s = -outVal.s;\n  }\n\n  return outVal;\n}\n/* Extracted from decimal.js, and edited to specialize. */\n\n\nfunction decCoefficientToBinaryString(x) {\n  // Convert to string\n  var a = x.d; // array with digits\n\n  var r = a[0] + '';\n\n  for (var i = 1; i < a.length; ++i) {\n    var s = a[i] + '';\n\n    for (var z = 7 - s.length; z--;) {\n      s = '0' + s;\n    }\n\n    r += s;\n  }\n\n  var j = r.length;\n\n  while (r.charAt(j) === '0') {\n    j--;\n  }\n\n  var xe = x.e;\n  var str = r.slice(0, j + 1 || 1);\n  var strL = str.length;\n\n  if (xe > 0) {\n    if (++xe > strL) {\n      // Append zeros.\n      xe -= strL;\n\n      while (xe--) {\n        str += '0';\n      }\n    } else if (xe < strL) {\n      str = str.slice(0, xe) + '.' + str.slice(xe);\n    }\n  } // Convert from base 10 (decimal) to base 2\n\n\n  var arr = [0];\n\n  for (var _i2 = 0; _i2 < str.length;) {\n    var arrL = arr.length;\n\n    while (arrL--) {\n      arr[arrL] *= 10;\n    }\n\n    arr[0] += parseInt(str.charAt(_i2++)); // convert to int\n\n    for (var _j = 0; _j < arr.length; ++_j) {\n      if (arr[_j] > 1) {\n        if (arr[_j + 1] === null || arr[_j + 1] === undefined) {\n          arr[_j + 1] = 0;\n        }\n\n        arr[_j + 1] += arr[_j] >> 1;\n        arr[_j] &= 1;\n      }\n    }\n  }\n\n  return arr.reverse();\n}\n/**\n * Bitwise XOR for BigNumbers\n *\n * Special Cases:\n *   N ^  n =  N\n *   n ^  0 =  n\n *   n ^  n =  0\n *   n ^ -1 = ~n\n *   I ^  n =  I\n *   I ^ -n = -I\n *   I ^ -I = -1\n *  -I ^  n = -I\n *  -I ^ -n =  I\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` ^ `y`, fully precise\n *\n */\n\n\nfunction bitXor(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function bitXor');\n  }\n\n  var BigNumber = x.constructor;\n\n  if (x.isNaN() || y.isNaN()) {\n    return new BigNumber(NaN);\n  }\n\n  if (x.isZero()) {\n    return y;\n  }\n\n  if (y.isZero()) {\n    return x;\n  }\n\n  if (x.eq(y)) {\n    return new BigNumber(0);\n  }\n\n  var negOne = new BigNumber(-1);\n\n  if (x.eq(negOne)) {\n    return bitNotBigNumber(y);\n  }\n\n  if (y.eq(negOne)) {\n    return bitNotBigNumber(x);\n  }\n\n  if (!x.isFinite() || !y.isFinite()) {\n    if (!x.isFinite() && !y.isFinite()) {\n      return negOne;\n    }\n\n    return new BigNumber(x.isNegative() === y.isNegative() ? Infinity : -Infinity);\n  }\n\n  return bitwise(x, y, function (a, b) {\n    return a ^ b;\n  });\n}\n/**\n * Bitwise left shift\n *\n * Special Cases:\n *  n << -n = N\n *  n <<  N = N\n *  N <<  n = N\n *  n <<  0 = n\n *  0 <<  n = 0\n *  I <<  I = N\n *  I <<  n = I\n *  n <<  I = I\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` << `y`\n *\n */\n\n\nfunction leftShiftBigNumber(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function leftShift');\n  }\n\n  var BigNumber = x.constructor;\n\n  if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {\n    return new BigNumber(NaN);\n  }\n\n  if (x.isZero() || y.isZero()) {\n    return x;\n  }\n\n  if (!x.isFinite() && !y.isFinite()) {\n    return new BigNumber(NaN);\n  } // Math.pow(2, y) is fully precise for y < 55, and fast\n\n\n  if (y.lt(55)) {\n    return x.times(Math.pow(2, y.toNumber()) + '');\n  }\n\n  return x.times(new BigNumber(2).pow(y));\n}\n/*\n * Special Cases:\n *   n >> -n =  N\n *   n >>  N =  N\n *   N >>  n =  N\n *   I >>  I =  N\n *   n >>  0 =  n\n *   I >>  n =  I\n *  -I >>  n = -I\n *  -I >>  I = -I\n *   n >>  I =  I\n *  -n >>  I = -1\n *   0 >>  n =  0\n *\n * @param {BigNumber} value\n * @param {BigNumber} value\n * @return {BigNumber} Result of `x` >> `y`\n *\n */\n\n\nfunction rightArithShiftBigNumber(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function rightArithShift');\n  }\n\n  var BigNumber = x.constructor;\n\n  if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {\n    return new BigNumber(NaN);\n  }\n\n  if (x.isZero() || y.isZero()) {\n    return x;\n  }\n\n  if (!y.isFinite()) {\n    if (x.isNegative()) {\n      return new BigNumber(-1);\n    }\n\n    if (!x.isFinite()) {\n      return new BigNumber(NaN);\n    }\n\n    return new BigNumber(0);\n  } // Math.pow(2, y) is fully precise for y < 55, and fast\n\n\n  if (y.lt(55)) {\n    return x.div(Math.pow(2, y.toNumber()) + '').floor();\n  }\n\n  return x.div(new BigNumber(2).pow(y)).floor();\n}\n};"],
"names":["shadow$provide","global","require","module","exports","bitNotBigNumber","x","isFinite","isInteger","Error","BigNumber","constructor","prevPrec","precision","config","result","plus","s","bitwise","y","func","yBits","xSign","ySign","xBits","i","decCoefficientToBinaryString","length","_i","minBits","maxBits","minSign","shortLen","longLen","expFuncVal","outVal","twoPower","two","times","a","d","r","z","j","charAt","xe","e","str","slice","strL","arr","_i2","arrL","parseInt","_j","undefined","reverse","Object","defineProperty","value","bitAndBigNumber","isNaN","NaN","isZero","eq","isNegative","b","bitOrBigNumber","negOne","bitXor","Infinity","leftShiftBigNumber","lt","Math","pow","toNumber","rightArithShiftBigNumber","div","floor"]
}
