{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$set$setIntersect.js",
"lineCount":3,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/function/set/setIntersect.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$set$setIntersect\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSetIntersect = void 0;\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'setIntersect';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];\nvar createSetIntersect = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      size = _ref.size,\n      subset = _ref.subset,\n      compareNatural = _ref.compareNatural,\n      Index = _ref.Index,\n      DenseMatrix = _ref.DenseMatrix;\n\n  /**\n   * Create the intersection of two (multi)sets.\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setIntersect(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setIntersect([1, 2, 3, 4], [3, 4, 5, 6])            // returns [3, 4]\n   *    math.setIntersect([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [3, 4]\n   *\n   * See also:\n   *\n   *    setUnion, setDifference\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {Array | Matrix}    The intersection of two (multi)sets\n   */\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {\n      var result;\n\n      if (subset(size(a1), new Index(0)) === 0 || subset(size(a2), new Index(0)) === 0) {\n        // of any of them is empty, return empty\n        result = [];\n      } else {\n        var b1 = (0, _array.identify)((0, _array.flatten)(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));\n        var b2 = (0, _array.identify)((0, _array.flatten)(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));\n        result = [];\n\n        for (var i = 0; i < b1.length; i++) {\n          for (var j = 0; j < b2.length; j++) {\n            if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {\n              // the identifier is always a decimal int\n              result.push(b1[i]);\n              break;\n            }\n          }\n        }\n      } // return an array, if both inputs were arrays\n\n\n      if (Array.isArray(a1) && Array.isArray(a2)) {\n        return (0, _array.generalize)(result);\n      } // return a matrix otherwise\n\n\n      return new DenseMatrix((0, _array.generalize)(result));\n    }\n  });\n});\nexports.createSetIntersect = createSetIntersect;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createSetIntersect","_array","_factory","factory","name","dependencies","_ref","typed","size","subset","compareNatural","Index","DenseMatrix","ArrayMatrixArrayMatrix","a1","a2","result","b1","identify","flatten","Array","isArray","toArray","sort","b2","i","length","j","identifier","push","generalize"]
}
