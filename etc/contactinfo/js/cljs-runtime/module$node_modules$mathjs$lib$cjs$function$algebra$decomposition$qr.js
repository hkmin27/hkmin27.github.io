shadow$provide.module$node_modules$mathjs$lib$cjs$function$algebra$decomposition$qr=function(global,require,module,exports){function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i],key;for(key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target};return _extends.apply(this,arguments)}Object.defineProperty(exports,"__esModule",{value:!0});exports.createQr=void 0;global=require("module$node_modules$mathjs$lib$cjs$utils$factory");
global=(0,global.factory)("qr","typed matrix zeros identity isZero equal sign sqrt conj unaryMinus addScalar divideScalar multiplyScalar subtract complex".split(" "),function(_ref){function _denseQRimpl(m){var rows=m._size[0],cols=m._size[1],Q=identity([rows],"dense"),Qdata=Q._data;m=m.clone();var Rdata=m._data,i,k,w=zeros([rows],"");for(k=0;k<Math.min(cols,rows);++k){var j=Rdata[k][k];var sgn=unaryMinus(equal(j,0)?1:sign(j)),conjSgn=conj(sgn),alphaSquared=0;for(i=k;i<rows;i++)alphaSquared=addScalar(alphaSquared,
multiplyScalar(Rdata[i][k],conj(Rdata[i][k])));sgn=multiplyScalar(sgn,sqrt(alphaSquared));if(!isZero(sgn)){j=subtract(j,sgn);w[k]=1;for(i=k+1;i<rows;i++)w[i]=divideScalar(Rdata[i][k],j);sgn=unaryMinus(conj(divideScalar(j,sgn)));alphaSquared=void 0;for(j=k;j<cols;j++){alphaSquared=0;for(i=k;i<rows;i++)alphaSquared=addScalar(alphaSquared,multiplyScalar(conj(w[i]),Rdata[i][j]));alphaSquared=multiplyScalar(alphaSquared,sgn);for(i=k;i<rows;i++)Rdata[i][j]=multiplyScalar(subtract(Rdata[i][j],multiplyScalar(w[i],
alphaSquared)),conjSgn)}for(i=0;i<rows;i++){alphaSquared=0;for(j=k;j<rows;j++)alphaSquared=addScalar(alphaSquared,multiplyScalar(Qdata[i][j],w[j]));alphaSquared=multiplyScalar(alphaSquared,sgn);for(j=k;j<rows;++j)Qdata[i][j]=divideScalar(subtract(Qdata[i][j],multiplyScalar(alphaSquared,conj(w[j]))),conjSgn)}}}return{Q:Q,R:m,toString:function(){return"Q: "+this.Q.toString()+"\nR: "+this.R.toString()}}}function _denseQR(m){var ret=_denseQRimpl(m),Rdata=ret.R._data;if(0<m._data.length){m="Complex"===
Rdata[0][0].type?complex(0):0;for(var i=0;i<Rdata.length;++i)for(var j=0;j<i&&j<(Rdata[0]||[]).length;++j)Rdata[i][j]=m}return ret}var typed=_ref.typed,matrix=_ref.matrix,zeros=_ref.zeros,identity=_ref.identity,isZero=_ref.isZero,equal=_ref.equal,sign=_ref.sign,sqrt=_ref.sqrt,conj=_ref.conj,unaryMinus=_ref.unaryMinus,addScalar=_ref.addScalar,divideScalar=_ref.divideScalar,multiplyScalar=_ref.multiplyScalar,subtract=_ref.subtract,complex=_ref.complex;return _extends(typed("qr",{DenseMatrix:function(m){return _denseQR(m)},
SparseMatrix:function(m){throw Error("qr not implemented for sparse matrices yet");},Array:function(a){a=matrix(a);a=_denseQR(a);return{Q:a.Q.valueOf(),R:a.R.valueOf()}}}),{_denseQRimpl:_denseQRimpl})});exports.createQr=global}
//# sourceMappingURL=module$node_modules$mathjs$lib$cjs$function$algebra$decomposition$qr.js.map
