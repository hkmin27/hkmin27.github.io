{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$type$boolean.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,+CAAA,CAAoE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG5GC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,aAAR,CAAwB,IAAK,EAEzBC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAEf,KAAIQ,YAAcR,OAAA,CAAQ,qDAAR,CAIdM,QAAAA,CAA+B,CAAC,CAAA,CAAGC,MAASE,CAAAA,OAAb,EAFxBC,SAEwB,CADhBC,CAAC,OAADA,CACgB,CAA0C,QAAS,CAACC,IAAD,CAAO,CACvFC,IAAAA,CAAQD,IAAKC,CAAAA,KA6BjB,OAAOA,KAAA,CAhCEH,SAgCF,CAAY,CACjB,GAAII,QAAU,EAAG,CACf,MAAO,CAAA,CADQ,CADA,CAIjB,UAAWC,QAAgB,CAACC,CAAD,CAAI,CAC7B,MAAOA,EADsB,CAJd,CAOjBC,OAAQA,QAAe,CAACD,CAAD,CAAI,CACzB,MAAO,CAAC,CAACA,CADgB,CAPV;AAUjB,OAAQE,QAAc,CAACF,CAAD,CAAI,CACxB,MAAO,CAAA,CADiB,CAVT,CAajBG,UAAWA,QAAkB,CAACH,CAAD,CAAI,CAC/B,MAAO,CAACA,CAAEI,CAAAA,MAAF,EADuB,CAbhB,CAgBjBC,OAAQA,QAAe,CAACL,CAAD,CAAI,CAEzB,IAAIM,MAAQN,CAAEO,CAAAA,WAAF,EAEZ,IAAc,MAAd,GAAID,KAAJ,CACE,MAAO,CAAA,CACF,IAAc,OAAd,GAAIA,KAAJ,CACL,MAAO,CAAA,CAILE,MAAAA,CAAMC,MAAA,CAAOT,CAAP,CAEV,IAAU,EAAV,GAAIA,CAAJ,EAAgB,CAACU,KAAA,CAAMF,KAAN,CAAjB,CACE,MAAO,CAAC,CAACA,KAGX,MAAUG,MAAJ,CAAU,kBAAV,CAA+BX,CAA/B,CAAmC,gBAAnC,CAAN,CAjByB,CAhBV,CAmCjB,iBAAkBY,QAAoB,CAACZ,CAAD,CAAI,CACxC,MAAO,CAAC,CAAA,CAAGR,WAAYqB,CAAAA,OAAhB,EAAyBb,CAAzB,CAA4B,IAA5B,CADiC,CAnCzB,CAAZ,CA9BoF,CAA1D,CAsEnCd,QAAQI,CAAAA,aAAR,CAAwBA,OApFoF;",
"sources":["node_modules/mathjs/lib/cjs/type/boolean.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$type$boolean\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createBoolean = void 0;\n\nvar _factory = require(\"../utils/factory.js\");\n\nvar _collection = require(\"../utils/collection.js\");\n\nvar name = 'boolean';\nvar dependencies = ['typed'];\nvar createBoolean = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Create a boolean or convert a string or number to a boolean.\n   * In case of a number, `true` is returned for non-zero numbers, and `false` in\n   * case of zero.\n   * Strings can be `'true'` or `'false'`, or can contain a number.\n   * When value is a matrix, all elements will be converted to boolean.\n   *\n   * Syntax:\n   *\n   *    math.boolean(x)\n   *\n   * Examples:\n   *\n   *    math.boolean(0)     // returns false\n   *    math.boolean(1)     // returns true\n   *    math.boolean(-3)     // returns true\n   *    math.boolean('true')     // returns true\n   *    math.boolean('false')     // returns false\n   *    math.boolean([1, 0, 1, 1])     // returns [true, false, true, true]\n   *\n   * See also:\n   *\n   *    bignumber, complex, index, matrix, string, unit\n   *\n   * @param {string | number | boolean | Array | Matrix | null} value  A value of any type\n   * @return {boolean | Array | Matrix} The boolean value\n   */\n  return typed(name, {\n    '': function _() {\n      return false;\n    },\n    \"boolean\": function boolean(x) {\n      return x;\n    },\n    number: function number(x) {\n      return !!x;\n    },\n    \"null\": function _null(x) {\n      return false;\n    },\n    BigNumber: function BigNumber(x) {\n      return !x.isZero();\n    },\n    string: function string(x) {\n      // try case insensitive\n      var lcase = x.toLowerCase();\n\n      if (lcase === 'true') {\n        return true;\n      } else if (lcase === 'false') {\n        return false;\n      } // test whether value is a valid number\n\n\n      var num = Number(x);\n\n      if (x !== '' && !isNaN(num)) {\n        return !!num;\n      }\n\n      throw new Error('Cannot convert \"' + x + '\" to a boolean');\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n});\nexports.createBoolean = createBoolean;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createBoolean","_factory","_collection","factory","name","dependencies","_ref","typed","_","boolean","x","number","_null","BigNumber","isZero","string","lcase","toLowerCase","num","Number","isNaN","Error","ArrayMatrix","deepMap"]
}
