{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$arithmetic$log.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,0DAAA,CAA+E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGvHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,SAAR,CAAoB,IAAK,EAErBC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAEf,KAAIQ,YAAcR,OAAA,CAAQ,qDAAR,CAAlB,CAEIS,OAAST,OAAA,CAAQ,uDAAR,CAITM,QAAAA,CAA2B,CAAC,CAAA,CAAGC,MAASG,CAAAA,OAAb,EAFpBC,KAEoB,CADZC,CAAC,QAADA,CAAW,OAAXA,CAAoB,cAApBA,CAAoC,SAApCA,CACY,CAA0C,QAAS,CAACC,IAAD,CAAO,CAAA,IACnFC;AAAQD,IAAKC,CAAAA,KADsE,CAEnFC,OAASF,IAAKE,CAAAA,MAFqE,CAGnFC,aAAeH,IAAKG,CAAAA,YAH+D,CAInFC,QAAUJ,IAAKI,CAAAA,OAoCnB,OAAOH,MAAA,CA1CEH,KA0CF,CAAY,CACjBO,OAAQA,QAAe,CAACC,CAAD,CAAI,CACzB,MAAS,EAAT,EAAIA,CAAJ,EAAcJ,MAAOK,CAAAA,WAArB,CACS,CAAC,CAAA,CAAGX,MAAOY,CAAAA,SAAX,EAAsBF,CAAtB,CADT,CAI2BG,CAAlB,IAAIL,OAAJ,CAAYE,CAAZ,CAAe,CAAf,CAAkBG,EAAAA,GAAlB,EALgB,CADV,CASjBL,QAASA,QAAgB,CAACE,CAAD,CAAI,CAC3B,MAAOA,EAAEG,CAAAA,GAAF,EADoB,CATZ,CAYjBC,UAAWA,QAAkB,CAACJ,CAAD,CAAI,CAC/B,MAAI,CAACA,CAAEK,CAAAA,UAAF,EAAL,EAAuBT,MAAOK,CAAAA,WAA9B,CACSD,CAAEM,CAAAA,EAAF,EADT,CAIsCH,CAA7B,IAAIL,OAAJ,CAAYE,CAAEO,CAAAA,QAAF,EAAZ,CAA0B,CAA1B,CAA6BJ,EAAAA,GAA7B,EALsB,CAZhB,CAoBjB,iBAAkBK,QAAoB,CAACR,CAAD,CAAI,CACxC,MAAO,CAAC,CAAA,CAAGX,WAAYoB,CAAAA,OAAhB,EAAyBT,CAAzB,CAA4B,IAA5B,CADiC,CApBzB,CAuBjB,WAAYU,QAAe,CAACV,CAAD,CAAIW,IAAJ,CAAU,CAEnC,MAAOd,aAAA,CAAa,IAAA,CAAKG,CAAL,CAAb,CAAsB,IAAA,CAAKW,IAAL,CAAtB,CAF4B,CAvBpB,CAAZ,CAxCgF,CAA1D,CAqE/B5B,QAAQI,CAAAA,SAAR;AAAoBA,OArFmG;",
"sources":["node_modules/mathjs/lib/cjs/function/arithmetic/log.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$arithmetic$log\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createLog = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _index = require(\"../../plain/number/index.js\");\n\nvar name = 'log';\nvar dependencies = ['config', 'typed', 'divideScalar', 'Complex'];\nvar createLog = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      divideScalar = _ref.divideScalar,\n      Complex = _ref.Complex;\n\n  /**\n   * Calculate the logarithm of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.log(x)\n   *    math.log(x, base)\n   *\n   * Examples:\n   *\n   *    math.log(3.5)                  // returns 1.252762968495368\n   *    math.exp(math.log(2.4))        // returns 2.4\n   *\n   *    math.pow(10, 4)                // returns 10000\n   *    math.log(10000, 10)            // returns 4\n   *    math.log(10000) / math.log(10) // returns 4\n   *\n   *    math.log(1024, 2)              // returns 10\n   *    math.pow(2, 10)                // returns 1024\n   *\n   * See also:\n   *\n   *    exp, log2, log10, log1p\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            Value for which to calculate the logarithm.\n   * @param {number | BigNumber | Complex} [base=e]\n   *            Optional base for the logarithm. If not provided, the natural\n   *            logarithm of `x` is calculated.\n   * @return {number | BigNumber | Complex | Array | Matrix}\n   *            Returns the logarithm of `x`\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x >= 0 || config.predictable) {\n        return (0, _index.logNumber)(x);\n      } else {\n        // negative value -> complex value computation\n        return new Complex(x, 0).log();\n      }\n    },\n    Complex: function Complex(x) {\n      return x.log();\n    },\n    BigNumber: function BigNumber(x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.ln();\n      } else {\n        // downgrade to number, return Complex valued result\n        return new Complex(x.toNumber(), 0).log();\n      }\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    },\n    'any, any': function anyAny(x, base) {\n      // calculate logarithm for a specified base, log(x, base)\n      return divideScalar(this(x), this(base));\n    }\n  });\n});\nexports.createLog = createLog;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createLog","_factory","_collection","_index","factory","name","dependencies","_ref","typed","config","divideScalar","Complex","number","x","predictable","logNumber","log","BigNumber","isNegative","ln","toNumber","ArrayMatrix","deepMap","anyAny","base"]
}
