shadow$provide.module$node_modules$mathjs$lib$cjs$function$matrix$eigs=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.createEigs=void 0;var _object=require("module$node_modules$mathjs$lib$cjs$utils$object");global=require("module$node_modules$mathjs$lib$cjs$utils$factory");var _string=require("module$node_modules$mathjs$lib$cjs$utils$string");require=(0,global.factory)("eigs","config typed matrix addScalar equal subtract abs atan cos sin multiplyScalar inv bignumber multiply add".split(" "),
function(_ref){function checkAndSubmit(x$jscomp$0,n){var type=x$jscomp$0.datatype();void 0===type&&(type=x$jscomp$0.getDataType());if("number"!==type&&"BigNumber"!==type&&"Fraction"!==type){if("mixed"===type)throw new TypeError("Mixed matrix element type is not supported");throw new TypeError("Matrix element type not supported ("+type+")");}for(var x=x$jscomp$0.toArray(),i=0;i<n;i++)for(var j=i;j<n;j++)if(!equal(x[i][j],x[j][i]))throw new TypeError("Input matrix is not symmetric");if("number"===type)return diag(x$jscomp$0.toArray());
if("Fraction"===type){type=x$jscomp$0.toArray();for(x=0;x<n;x++)for(i=x;i<n;i++)type[x][i]=type[x][i].valueOf(),type[i][x]=type[x][i];return diag(x$jscomp$0.toArray())}if("BigNumber"===type){j=x$jscomp$0.toArray();x$jscomp$0=j.length;n=abs(config.epsilon/x$jscomp$0);type=Array(x$jscomp$0);for(x=0;x<x$jscomp$0;x++)type[x]=createArray(x$jscomp$0,0),type[x][x]=1;for(i=getAijBig(j);abs(i[1])>=abs(n);){x=i[0][0];i=i[0][1];var psi=j[x][i];var denom=subtract(j[i][i],j[x][x]),theta=psi=abs(denom)<=config.epsilon?
bignumber(-1).acos().div(4):multiplyScalar(.5,atan(multiply(2,psi,inv(denom))));denom=x;var j$jscomp$0=i,N=j.length,c=bignumber(cos(theta)),s=bignumber(sin(theta)),c2=multiplyScalar(c,c),s2=multiplyScalar(s,s);theta=createArray(N,bignumber(0));var Akj=createArray(N,bignumber(0)),csHij=multiply(bignumber(2),c,s,j[denom][j$jscomp$0]),Aii=addScalar(subtract(multiplyScalar(c2,j[denom][denom]),csHij),multiplyScalar(s2,j[j$jscomp$0][j$jscomp$0]));c2=add(multiplyScalar(s2,j[denom][denom]),csHij,multiplyScalar(c2,
j[j$jscomp$0][j$jscomp$0]));for(s2=0;s2<N;s2++)theta[s2]=subtract(multiplyScalar(c,j[denom][s2]),multiplyScalar(s,j[j$jscomp$0][s2])),Akj[s2]=addScalar(multiplyScalar(s,j[denom][s2]),multiplyScalar(c,j[j$jscomp$0][s2]));j[denom][denom]=Aii;j[j$jscomp$0][j$jscomp$0]=c2;j[denom][j$jscomp$0]=bignumber(0);j[j$jscomp$0][denom]=bignumber(0);for(c=0;c<N;c++)c!==denom&&c!==j$jscomp$0&&(j[denom][c]=theta[c],j[c][denom]=theta[c],j[j$jscomp$0][c]=Akj[c],j[c][j$jscomp$0]=Akj[c]);j$jscomp$0=psi;psi=type.length;
denom=cos(j$jscomp$0);c=sin(j$jscomp$0);j$jscomp$0=createArray(psi,bignumber(0));N=createArray(psi,bignumber(0));for(theta=0;theta<psi;theta++)j$jscomp$0[theta]=subtract(multiplyScalar(denom,type[theta][x]),multiplyScalar(c,type[theta][i])),N[theta]=addScalar(multiplyScalar(c,type[theta][x]),multiplyScalar(denom,type[theta][i]));for(denom=0;denom<psi;denom++)type[denom][x]=j$jscomp$0[denom],type[denom][i]=N[denom];i=getAijBig(j)}n=createArray(x$jscomp$0,0);for(x=0;x<x$jscomp$0;x++)n[x]=j[x][x];return sorting((0,
_object.clone)(n),(0,_object.clone)(type))}}function diag(x){var N=x.length,e0=Math.abs(config.epsilon/N),psi,Sij=Array(N);for(psi=0;psi<N;psi++)Sij[psi]=createArray(N,0),Sij[psi][psi]=1;for(psi=getAij(x);Math.abs(psi[1])>=Math.abs(e0);){var _i=psi[0][0],j=psi[0][1];psi=x[_i][_i];var ajj=x[j][j];psi=Math.abs(ajj-psi)<=config.epsilon?Math.PI/4:.5*Math.atan(2*x[_i][j]/(ajj-psi));ajj=_i;var j$jscomp$0=j,N$jscomp$0=x.length,c=Math.cos(psi),s=Math.sin(psi),c2=c*c,s2=s*s,Aki=createArray(N$jscomp$0,0),Akj=
createArray(N$jscomp$0,0),Aii=c2*x[ajj][ajj]-2*c*s*x[ajj][j$jscomp$0]+s2*x[j$jscomp$0][j$jscomp$0];c2=s2*x[ajj][ajj]+2*c*s*x[ajj][j$jscomp$0]+c2*x[j$jscomp$0][j$jscomp$0];for(s2=0;s2<N$jscomp$0;s2++)Aki[s2]=c*x[ajj][s2]-s*x[j$jscomp$0][s2],Akj[s2]=s*x[ajj][s2]+c*x[j$jscomp$0][s2];x[ajj][ajj]=Aii;x[j$jscomp$0][j$jscomp$0]=c2;x[ajj][j$jscomp$0]=0;for(c=x[j$jscomp$0][ajj]=0;c<N$jscomp$0;c++)c!==ajj&&c!==j$jscomp$0&&(x[ajj][c]=Aki[c],x[c][ajj]=Aki[c],x[j$jscomp$0][c]=Akj[c],x[c][j$jscomp$0]=Akj[c]);ajj=
Sij.length;j$jscomp$0=Math.cos(psi);Aki=Math.sin(psi);psi=createArray(ajj,0);N$jscomp$0=createArray(ajj,0);for(Akj=0;Akj<ajj;Akj++)psi[Akj]=j$jscomp$0*Sij[Akj][_i]-Aki*Sij[Akj][j],N$jscomp$0[Akj]=Aki*Sij[Akj][_i]+j$jscomp$0*Sij[Akj][j];for(j$jscomp$0=0;j$jscomp$0<ajj;j$jscomp$0++)Sij[j$jscomp$0][_i]=psi[j$jscomp$0],Sij[j$jscomp$0][j]=N$jscomp$0[j$jscomp$0];psi=getAij(x)}e0=createArray(N,0);for(psi=0;psi<N;psi++)e0[psi]=x[psi][psi];return sorting((0,_object.clone)(e0),(0,_object.clone)(Sij))}function getAij(Mij){for(var N=
Mij.length,maxMij=0,maxIJ=[0,1],i=0;i<N;i++)for(var j=i+1;j<N;j++)Math.abs(maxMij)<Math.abs(Mij[i][j])&&(maxMij=Math.abs(Mij[i][j]),maxIJ=[i,j]);return[maxIJ,maxMij]}function getAijBig(Mij){for(var N=Mij.length,maxMij=0,maxIJ=[0,1],i=0;i<N;i++)for(var j=i+1;j<N;j++)abs(maxMij)<abs(Mij[i][j])&&(maxMij=abs(Mij[i][j]),maxIJ=[i,j]);return[maxIJ,maxMij]}function sorting(E,S){for(var N=E.length,Ef=Array(N),Sf=Array(N),k=0;k<N;k++)Sf[k]=Array(N);for(k=0;k<N;k++){for(var minID=0,minE=E[0],j=0;j<E.length;j++)E[j]<
minE&&(minID=j,minE=E[minID]);Ef[k]=E.splice(minID,1)[0];for(minE=0;minE<N;minE++)Sf[minE][k]=S[minE][minID],S[minE].splice(minID,1)}return[(0,_object.clone)(Ef),(0,_object.clone)(Sf)]}function createArray(size,value){for(var array=Array(size),i=0;i<size;i++)array[i]=value;return array}var config=_ref.config,typed=_ref.typed,matrix=_ref.matrix,addScalar=_ref.addScalar,subtract=_ref.subtract,equal=_ref.equal,abs=_ref.abs,atan=_ref.atan,cos=_ref.cos,sin=_ref.sin,multiplyScalar=_ref.multiplyScalar,inv=
_ref.inv,bignumber=_ref.bignumber,multiply=_ref.multiply,add=_ref.add;return typed("eigs",{Array:function(x){x=matrix(x);var size=x.size();if(2!==size.length||size[0]!==size[1])throw new RangeError("Matrix must be square (size: "+(0,_string.format)(size)+")");x=checkAndSubmit(x,size[0]);return{values:x[0],vectors:x[1]}},Matrix:function(x){var size=x.size();if(2!==size.length||size[0]!==size[1])throw new RangeError("Matrix must be square (size: "+(0,_string.format)(size)+")");x=checkAndSubmit(x,size[0]);
return{values:matrix(x[0]),vectors:matrix(x[1])}}})});exports.createEigs=require}
//# sourceMappingURL=module$node_modules$mathjs$lib$cjs$function$matrix$eigs.js.map
