shadow$provide.module$node_modules$mathjs$lib$cjs$function$probability$combinations=function(global,require,module,exports){function isPositiveInteger(n){return n.isInteger()&&n.gte(0)}Object.defineProperty(exports,"__esModule",{value:!0});exports.createCombinations=void 0;global=require("module$node_modules$mathjs$lib$cjs$utils$factory");var _combinations=require("module$node_modules$mathjs$lib$cjs$plain$number$combinations");require=(0,global.factory)("combinations",["typed"],function(_ref){_ref=
_ref.typed;return _ref("combinations",{"number, number":_combinations.combinationsNumber,"BigNumber, BigNumber":function(n,k){var BigNumber=n.constructor,i,nMinusk=n.minus(k);BigNumber=new BigNumber(1);if(!isPositiveInteger(n)||!isPositiveInteger(k))throw new TypeError("Positive integer value expected in function combinations");if(k.gt(n))throw new TypeError("k must be less than n in function combinations");n=BigNumber;if(k.lt(nMinusk))for(i=BigNumber;i.lte(nMinusk);i=i.plus(BigNumber))n=n.times(k.plus(i)).dividedBy(i);
else for(i=BigNumber;i.lte(k);i=i.plus(BigNumber))n=n.times(nMinusk.plus(i)).dividedBy(i);return n}})});exports.createCombinations=require}
//# sourceMappingURL=module$node_modules$mathjs$lib$cjs$function$probability$combinations.js.map
