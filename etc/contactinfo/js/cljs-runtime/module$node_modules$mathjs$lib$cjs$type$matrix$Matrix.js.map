{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$type$matrix$Matrix.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/type/matrix/Matrix.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$type$matrix$Matrix\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMatrixClass = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'Matrix';\nvar dependencies = [];\nvar createMatrixClass = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function () {\n  /**\n   * @constructor Matrix\n   *\n   * A Matrix is a wrapper around an Array. A matrix can hold a multi dimensional\n   * array. A matrix can be constructed as:\n   *\n   *     let matrix = math.matrix(data)\n   *\n   * Matrix contains the functions to resize, get and set values, get the size,\n   * clone the matrix and to convert the matrix to a vector, array, or scalar.\n   * Furthermore, one can iterate over the matrix using map and forEach.\n   * The internal Array of the Matrix can be accessed using the function valueOf.\n   *\n   * Example usage:\n   *\n   *     let matrix = math.matrix([[1, 2], [3, 4]])\n   *     matix.size()              // [2, 2]\n   *     matrix.resize([3, 2], 5)\n   *     matrix.valueOf()          // [[1, 2], [3, 4], [5, 5]]\n   *     matrix.subset([1,2])       // 3 (indexes are zero-based)\n   *\n   */\n  function Matrix() {\n    if (!(this instanceof Matrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n  }\n  /**\n   * Attach type information\n   */\n\n\n  Matrix.prototype.type = 'Matrix';\n  Matrix.prototype.isMatrix = true;\n  /**\n   * Get the storage format used by the matrix.\n   *\n   * Usage:\n   *     const format = matrix.storage()   // retrieve storage format\n   *\n   * @return {string}           The storage format.\n   */\n\n  Matrix.prototype.storage = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke storage on a Matrix interface');\n  };\n  /**\n   * Get the datatype of the data stored in the matrix.\n   *\n   * Usage:\n   *     const format = matrix.datatype()    // retrieve matrix datatype\n   *\n   * @return {string}           The datatype.\n   */\n\n\n  Matrix.prototype.datatype = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke datatype on a Matrix interface');\n  };\n  /**\n   * Create a new Matrix With the type of the current matrix instance\n   * @param {Array | Object} data\n   * @param {string} [datatype]\n   */\n\n\n  Matrix.prototype.create = function (data, datatype) {\n    throw new Error('Cannot invoke create on a Matrix interface');\n  };\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     const subset = matrix.subset(index)               // retrieve subset\n   *     const value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @param {Index} index\n   * @param {Array | Matrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n\n\n  Matrix.prototype.subset = function (index, replacement, defaultValue) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke subset on a Matrix interface');\n  };\n  /**\n   * Get a single element from the matrix.\n   * @param {number[]} index   Zero-based index\n   * @return {*} value\n   */\n\n\n  Matrix.prototype.get = function (index) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke get on a Matrix interface');\n  };\n  /**\n   * Replace a single element in the matrix.\n   * @param {number[]} index   Zero-based index\n   * @param {*} value\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be left undefined.\n   * @return {Matrix} self\n   */\n\n\n  Matrix.prototype.set = function (index, value, defaultValue) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke set on a Matrix interface');\n  };\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n\n\n  Matrix.prototype.resize = function (size, defaultValue) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke resize on a Matrix interface');\n  };\n  /**\n   * Reshape the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (reshape in place).\n   *\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {boolean} [copy]          Return a reshaped copy of the matrix\n   *\n   * @return {Matrix}                 The reshaped matrix\n   */\n\n\n  Matrix.prototype.reshape = function (size, defaultValue) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke reshape on a Matrix interface');\n  };\n  /**\n   * Create a clone of the matrix\n   * @return {Matrix} clone\n   */\n\n\n  Matrix.prototype.clone = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke clone on a Matrix interface');\n  };\n  /**\n   * Retrieve the size of the matrix.\n   * @returns {number[]} size\n   */\n\n\n  Matrix.prototype.size = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke size on a Matrix interface');\n  };\n  /**\n   * Create a new matrix with the results of the callback function executed on\n   * each entry of the matrix.\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n   *\n   * @return {Matrix} matrix\n   */\n\n\n  Matrix.prototype.map = function (callback, skipZeros) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke map on a Matrix interface');\n  };\n  /**\n   * Execute a callback function on each entry of the matrix.\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   */\n\n\n  Matrix.prototype.forEach = function (callback) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke forEach on a Matrix interface');\n  };\n  /**\n   * Create an Array with a copy of the data of the Matrix\n   * @returns {Array} array\n   */\n\n\n  Matrix.prototype.toArray = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke toArray on a Matrix interface');\n  };\n  /**\n   * Get the primitive value of the Matrix: a multidimensional array\n   * @returns {Array} array\n   */\n\n\n  Matrix.prototype.valueOf = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke valueOf on a Matrix interface');\n  };\n  /**\n   * Get a string representation of the matrix, with optional formatting options.\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n\n\n  Matrix.prototype.format = function (options) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke format on a Matrix interface');\n  };\n  /**\n   * Get a string representation of the matrix\n   * @returns {string} str\n   */\n\n\n  Matrix.prototype.toString = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke toString on a Matrix interface');\n  };\n\n  return Matrix;\n}, {\n  isClass: true\n});\nexports.createMatrixClass = createMatrixClass;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createMatrixClass","_factory","factory","name","dependencies","Matrix","SyntaxError","prototype","type","isMatrix","storage","Matrix.prototype.storage","Error","datatype","Matrix.prototype.datatype","create","Matrix.prototype.create","data","subset","Matrix.prototype.subset","index","replacement","defaultValue","get","Matrix.prototype.get","set","Matrix.prototype.set","resize","Matrix.prototype.resize","size","reshape","Matrix.prototype.reshape","clone","Matrix.prototype.clone","Matrix.prototype.size","map","Matrix.prototype.map","callback","skipZeros","forEach","Matrix.prototype.forEach","toArray","Matrix.prototype.toArray","valueOf","Matrix.prototype.valueOf","format","Matrix.prototype.format","options","toString","Matrix.prototype.toString","isClass"]
}
