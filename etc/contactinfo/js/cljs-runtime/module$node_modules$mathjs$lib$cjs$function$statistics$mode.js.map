{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$statistics$mode.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,2DAAA,CAAgF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGxHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,UAAR,CAAqB,IAAK,EAE1B,KAAIC,OAASP,OAAA,CAAQ,gDAAR,CAETQ,OAAAA,CAAWR,OAAA,CAAQ,kDAAR,CAIXM,OAAAA,CAA4B,CAAC,CAAA,CAAGE,MAASC,CAAAA,OAAb,EAFrBC,MAEqB,CADbC,CAAC,OAADA,CAAU,OAAVA,CAAmB,WAAnBA,CACa,CAA0C,QAAS,CAACC,IAAD,CAAO,CA2CxFC,QAASA,MAAK,CAACC,MAAD,CAAS,CACrBA,MAAA,CAAS,CAAC,CAAA,CAAGP,MAAOQ,CAAAA,OAAX,EAAoBD,MAAOE,CAAAA,OAAP,EAApB,CAGT,IAAY,CAAZ,GAFUF,MAAOG,CAAAA,MAEjB,CACE,KAAUC,MAAJ,CAAU,yCAAV,CAAN;AAOF,IAJA,IAAIC,MAAQ,EAAZ,CACIC,KAAO,EADX,CAEIC,IAAM,CAFV,CAISC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBR,MAAOG,CAAAA,MAA3B,CAAmCK,CAAA,EAAnC,CAAwC,CACtC,IAAIjB,MAAQS,MAAA,CAAOQ,CAAP,CAEZ,IAAIC,SAAA,CAAUlB,KAAV,CAAJ,EAAwBmB,KAAA,CAAMnB,KAAN,CAAxB,CACE,KAAUa,MAAJ,CAAU,yDAAV,CAAN,CAGIb,KAAN,GAAec,MAAf,GACEA,KAAA,CAAMd,KAAN,CADF,CACiB,CADjB,CAIAc,MAAA,CAAMd,KAAN,CAAA,EAEIc,MAAA,CAAMd,KAAN,CAAJ,GAAqBgB,GAArB,CACED,IAAKK,CAAAA,IAAL,CAAUpB,KAAV,CADF,CAEWc,KAAA,CAAMd,KAAN,CAFX,CAE0BgB,GAF1B,GAGEA,GACA,CADMF,KAAA,CAAMd,KAAN,CACN,CAAAe,IAAA,CAAO,CAACf,KAAD,CAJT,CAbsC,CAqBxC,MAAOe,KAjCc,CA3CiE,IACpFM,MAAQd,IAAKc,CAAAA,KADuE,CAEpFF,MAAQZ,IAAKY,CAAAA,KAFuE,CAGpFD,UAAYX,IAAKW,CAAAA,SA2BrB,OAAOG,MAAA,CAhCEhB,MAgCF,CAAY,CACjB,iBAAkBG,KADD,CAEjB,MAAOc,QAAU,CAACC,IAAD,CAAO,CACtB,MAAOf,MAAA,CAAMe,IAAN,CADe,CAFP,CAAZ,CA9BiF,CAA1D,CA+EhC1B,QAAQI,CAAAA,UAAR,CAAqBA,MA7FmG;",
"sources":["node_modules/mathjs/lib/cjs/function/statistics/mode.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$statistics$mode\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMode = void 0;\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'mode';\nvar dependencies = ['typed', 'isNaN', 'isNumeric'];\nvar createMode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      isNaN = _ref.isNaN,\n      isNumeric = _ref.isNumeric;\n\n  /**\n  * Computes the mode of a set of numbers or a list with values(numbers or characters).\n  * If there are more than one modes, it returns a list of those values.\n  *\n  * Syntax:\n  *\n  *     math.mode(a, b, c, ...)\n  *     math.mode(A)\n  *\n  * Examples:\n  *\n  *     math.mode(2, 1, 4, 3, 1)                            // returns [1]\n  *     math.mode([1, 2.7, 3.2, 4, 2.7])                    // returns [2.7]\n  *     math.mode(1, 4, 6, 1, 6)                             // returns [1, 6]\n  *     math.mode('a','a','b','c')                           // returns [\"a\"]\n  *     math.mode(1, 1.5, 'abc')                             // returns [1, 1.5, \"abc\"]\n  *\n  * See also:\n  *\n  *     median,\n  *     mean\n  *\n  * @param {... *} args  A single matrix\n  * @return {*} The mode of all values\n  */\n  return typed(name, {\n    'Array | Matrix': _mode,\n    '...': function _(args) {\n      return _mode(args);\n    }\n  });\n  /**\n   * Calculates the mode in an 1-dimensional array\n   * @param {Array} values\n   * @return {Array} mode\n   * @private\n   */\n\n  function _mode(values) {\n    values = (0, _array.flatten)(values.valueOf());\n    var num = values.length;\n\n    if (num === 0) {\n      throw new Error('Cannot calculate mode of an empty array');\n    }\n\n    var count = {};\n    var mode = [];\n    var max = 0;\n\n    for (var i = 0; i < values.length; i++) {\n      var value = values[i];\n\n      if (isNumeric(value) && isNaN(value)) {\n        throw new Error('Cannot calculate mode of an array containing NaN values');\n      }\n\n      if (!(value in count)) {\n        count[value] = 0;\n      }\n\n      count[value]++;\n\n      if (count[value] === max) {\n        mode.push(value);\n      } else if (count[value] > max) {\n        max = count[value];\n        mode = [value];\n      }\n    }\n\n    return mode;\n  }\n});\nexports.createMode = createMode;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createMode","_array","_factory","factory","name","dependencies","_ref","_mode","values","flatten","valueOf","length","Error","count","mode","max","i","isNumeric","isNaN","push","typed","_","args"]
}
