{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$expression$embeddedDocs$function$combinatorics$composition.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,CAAA,6FAAA,CAAkH,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG1JC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAYAH,QAAQI,CAAAA,eAAR,CARsBA,CACpBC,KAAM,aADcD,CAEpBE,SAAU,eAFUF,CAGpBG,OAAQ,CAAC,mBAAD,CAHYH,CAIpBI,YAAa,6IAJOJ,CAKpBK,SAAU,CAAC,mBAAD,CALUL,CAMpBM,QAAS,CAAC,cAAD,CANWN,CAPoI;",
"sources":["node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/combinatorics/composition.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$expression$embeddedDocs$function$combinatorics$composition\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.compositionDocs = void 0;\nvar compositionDocs = {\n  name: 'composition',\n  category: 'Combinatorics',\n  syntax: ['composition(n, k)'],\n  description: 'The composition counts of n into k parts. composition only takes integer arguments. The following condition must be enforced: k <= n.',\n  examples: ['composition(5, 3)'],\n  seealso: ['combinations']\n};\nexports.compositionDocs = compositionDocs;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","compositionDocs","name","category","syntax","description","examples","seealso"]
}
