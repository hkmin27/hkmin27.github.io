{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$core$function$typed.js",
"lineCount":11,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/core/function/typed.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$core$function$typed\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createTyped = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _typedFunction = _interopRequireDefault(require(\"typed-function\"));\n\nvar _number = require(\"../../utils/number.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * Create a typed-function which checks the types of the arguments and\n * can match them against multiple provided signatures. The typed-function\n * automatically converts inputs in order to find a matching signature.\n * Typed functions throw informative errors in case of wrong input arguments.\n *\n * See the library [typed-function](https://github.com/josdejong/typed-function)\n * for detailed documentation.\n *\n * Syntax:\n *\n *     math.typed(name, signatures) : function\n *     math.typed(signatures) : function\n *\n * Examples:\n *\n *     // create a typed function with multiple types per argument (type union)\n *     const fn2 = typed({\n *       'number | boolean': function (b) {\n *         return 'b is a number or boolean'\n *       },\n *       'string, number | boolean': function (a, b) {\n *         return 'a is a string, b is a number or boolean'\n *       }\n *     })\n *\n *     // create a typed function with an any type argument\n *     const log = typed({\n *       'string, any': function (event, data) {\n *         console.log('event: ' + event + ', data: ' + JSON.stringify(data))\n *       }\n *     })\n *\n * @param {string} [name]                          Optional name for the typed-function\n * @param {Object<string, function>} signatures   Object with one or multiple function signatures\n * @returns {function} The created typed-function.\n */\n// returns a new instance of typed-function\nvar _createTyped2 = function _createTyped() {\n  // initially, return the original instance of typed-function\n  // consecutively, return a new instance from typed.create.\n  _createTyped2 = _typedFunction[\"default\"].create;\n  return _typedFunction[\"default\"];\n};\n\nvar dependencies = ['?BigNumber', '?Complex', '?DenseMatrix', '?Fraction'];\n/**\n * Factory function for creating a new typed instance\n * @param {Object} dependencies   Object with data types like Complex and BigNumber\n * @returns {Function}\n */\n\nvar createTyped = /* #__PURE__ */(0, _factory.factory)('typed', dependencies, function createTyped(_ref) {\n  var BigNumber = _ref.BigNumber,\n      Complex = _ref.Complex,\n      DenseMatrix = _ref.DenseMatrix,\n      Fraction = _ref.Fraction;\n\n  // TODO: typed-function must be able to silently ignore signatures with unknown data types\n  // get a new instance of typed-function\n  var typed = _createTyped2(); // define all types. The order of the types determines in which order function\n  // arguments are type-checked (so for performance it's important to put the\n  // most used types first).\n\n\n  typed.types = [{\n    name: 'number',\n    test: _is.isNumber\n  }, {\n    name: 'Complex',\n    test: _is.isComplex\n  }, {\n    name: 'BigNumber',\n    test: _is.isBigNumber\n  }, {\n    name: 'Fraction',\n    test: _is.isFraction\n  }, {\n    name: 'Unit',\n    test: _is.isUnit\n  }, {\n    name: 'string',\n    test: _is.isString\n  }, {\n    name: 'Chain',\n    test: _is.isChain\n  }, {\n    name: 'Array',\n    test: _is.isArray\n  }, {\n    name: 'Matrix',\n    test: _is.isMatrix\n  }, {\n    name: 'DenseMatrix',\n    test: _is.isDenseMatrix\n  }, {\n    name: 'SparseMatrix',\n    test: _is.isSparseMatrix\n  }, {\n    name: 'Range',\n    test: _is.isRange\n  }, {\n    name: 'Index',\n    test: _is.isIndex\n  }, {\n    name: 'boolean',\n    test: _is.isBoolean\n  }, {\n    name: 'ResultSet',\n    test: _is.isResultSet\n  }, {\n    name: 'Help',\n    test: _is.isHelp\n  }, {\n    name: 'function',\n    test: _is.isFunction\n  }, {\n    name: 'Date',\n    test: _is.isDate\n  }, {\n    name: 'RegExp',\n    test: _is.isRegExp\n  }, {\n    name: 'null',\n    test: _is.isNull\n  }, {\n    name: 'undefined',\n    test: _is.isUndefined\n  }, {\n    name: 'AccessorNode',\n    test: _is.isAccessorNode\n  }, {\n    name: 'ArrayNode',\n    test: _is.isArrayNode\n  }, {\n    name: 'AssignmentNode',\n    test: _is.isAssignmentNode\n  }, {\n    name: 'BlockNode',\n    test: _is.isBlockNode\n  }, {\n    name: 'ConditionalNode',\n    test: _is.isConditionalNode\n  }, {\n    name: 'ConstantNode',\n    test: _is.isConstantNode\n  }, {\n    name: 'FunctionNode',\n    test: _is.isFunctionNode\n  }, {\n    name: 'FunctionAssignmentNode',\n    test: _is.isFunctionAssignmentNode\n  }, {\n    name: 'IndexNode',\n    test: _is.isIndexNode\n  }, {\n    name: 'Node',\n    test: _is.isNode\n  }, {\n    name: 'ObjectNode',\n    test: _is.isObjectNode\n  }, {\n    name: 'OperatorNode',\n    test: _is.isOperatorNode\n  }, {\n    name: 'ParenthesisNode',\n    test: _is.isParenthesisNode\n  }, {\n    name: 'RangeNode',\n    test: _is.isRangeNode\n  }, {\n    name: 'SymbolNode',\n    test: _is.isSymbolNode\n  }, {\n    name: 'Object',\n    test: _is.isObject\n  } // order 'Object' last, it matches on other classes too\n  ];\n  typed.conversions = [{\n    from: 'number',\n    to: 'BigNumber',\n    convert: function convert(x) {\n      if (!BigNumber) {\n        throwNoBignumber(x);\n      } // note: conversion from number to BigNumber can fail if x has >15 digits\n\n\n      if ((0, _number.digits)(x) > 15) {\n        throw new TypeError('Cannot implicitly convert a number with >15 significant digits to BigNumber ' + '(value: ' + x + '). ' + 'Use function bignumber(x) to convert to BigNumber.');\n      }\n\n      return new BigNumber(x);\n    }\n  }, {\n    from: 'number',\n    to: 'Complex',\n    convert: function convert(x) {\n      if (!Complex) {\n        throwNoComplex(x);\n      }\n\n      return new Complex(x, 0);\n    }\n  }, {\n    from: 'number',\n    to: 'string',\n    convert: function convert(x) {\n      return x + '';\n    }\n  }, {\n    from: 'BigNumber',\n    to: 'Complex',\n    convert: function convert(x) {\n      if (!Complex) {\n        throwNoComplex(x);\n      }\n\n      return new Complex(x.toNumber(), 0);\n    }\n  }, {\n    from: 'Fraction',\n    to: 'BigNumber',\n    convert: function convert(x) {\n      throw new TypeError('Cannot implicitly convert a Fraction to BigNumber or vice versa. ' + 'Use function bignumber(x) to convert to BigNumber or fraction(x) to convert to Fraction.');\n    }\n  }, {\n    from: 'Fraction',\n    to: 'Complex',\n    convert: function convert(x) {\n      if (!Complex) {\n        throwNoComplex(x);\n      }\n\n      return new Complex(x.valueOf(), 0);\n    }\n  }, {\n    from: 'number',\n    to: 'Fraction',\n    convert: function convert(x) {\n      if (!Fraction) {\n        throwNoFraction(x);\n      }\n\n      var f = new Fraction(x);\n\n      if (f.valueOf() !== x) {\n        throw new TypeError('Cannot implicitly convert a number to a Fraction when there will be a loss of precision ' + '(value: ' + x + '). ' + 'Use function fraction(x) to convert to Fraction.');\n      }\n\n      return f;\n    }\n  }, {\n    // FIXME: add conversion from Fraction to number, for example for `sqrt(fraction(1,3))`\n    //  from: 'Fraction',\n    //  to: 'number',\n    //  convert: function (x) {\n    //    return x.valueOf()\n    //  }\n    // }, {\n    from: 'string',\n    to: 'number',\n    convert: function convert(x) {\n      var n = Number(x);\n\n      if (isNaN(n)) {\n        throw new Error('Cannot convert \"' + x + '\" to a number');\n      }\n\n      return n;\n    }\n  }, {\n    from: 'string',\n    to: 'BigNumber',\n    convert: function convert(x) {\n      if (!BigNumber) {\n        throwNoBignumber(x);\n      }\n\n      try {\n        return new BigNumber(x);\n      } catch (err) {\n        throw new Error('Cannot convert \"' + x + '\" to BigNumber');\n      }\n    }\n  }, {\n    from: 'string',\n    to: 'Fraction',\n    convert: function convert(x) {\n      if (!Fraction) {\n        throwNoFraction(x);\n      }\n\n      try {\n        return new Fraction(x);\n      } catch (err) {\n        throw new Error('Cannot convert \"' + x + '\" to Fraction');\n      }\n    }\n  }, {\n    from: 'string',\n    to: 'Complex',\n    convert: function convert(x) {\n      if (!Complex) {\n        throwNoComplex(x);\n      }\n\n      try {\n        return new Complex(x);\n      } catch (err) {\n        throw new Error('Cannot convert \"' + x + '\" to Complex');\n      }\n    }\n  }, {\n    from: 'boolean',\n    to: 'number',\n    convert: function convert(x) {\n      return +x;\n    }\n  }, {\n    from: 'boolean',\n    to: 'BigNumber',\n    convert: function convert(x) {\n      if (!BigNumber) {\n        throwNoBignumber(x);\n      }\n\n      return new BigNumber(+x);\n    }\n  }, {\n    from: 'boolean',\n    to: 'Fraction',\n    convert: function convert(x) {\n      if (!Fraction) {\n        throwNoFraction(x);\n      }\n\n      return new Fraction(+x);\n    }\n  }, {\n    from: 'boolean',\n    to: 'string',\n    convert: function convert(x) {\n      return String(x);\n    }\n  }, {\n    from: 'Array',\n    to: 'Matrix',\n    convert: function convert(array) {\n      if (!DenseMatrix) {\n        throwNoMatrix();\n      }\n\n      return new DenseMatrix(array);\n    }\n  }, {\n    from: 'Matrix',\n    to: 'Array',\n    convert: function convert(matrix) {\n      return matrix.valueOf();\n    }\n  }];\n  return typed;\n});\nexports.createTyped = createTyped;\n\nfunction throwNoBignumber(x) {\n  throw new Error(\"Cannot convert value \".concat(x, \" into a BigNumber: no class 'BigNumber' provided\"));\n}\n\nfunction throwNoComplex(x) {\n  throw new Error(\"Cannot convert value \".concat(x, \" into a Complex number: no class 'Complex' provided\"));\n}\n\nfunction throwNoMatrix() {\n  throw new Error('Cannot convert array into a Matrix: no class \\'DenseMatrix\\' provided');\n}\n\nfunction throwNoFraction(x) {\n  throw new Error(\"Cannot convert value \".concat(x, \" into a Fraction, no class 'Fraction' provided.\"));\n}\n};"],
"names":["shadow$provide","global","require","module","exports","throwNoBignumber","x","Error","concat","throwNoComplex","throwNoFraction","Object","defineProperty","value","createTyped","_is","_typedFunction","_interopRequireDefault","obj","__esModule","_number","_factory","_createTyped2","create","factory","dependencies","_ref","BigNumber","Complex","DenseMatrix","Fraction","typed","types","name","test","isNumber","isComplex","isBigNumber","isFraction","isUnit","isString","isChain","isArray","isMatrix","isDenseMatrix","isSparseMatrix","isRange","isIndex","isBoolean","isResultSet","isHelp","isFunction","isDate","isRegExp","isNull","isUndefined","isAccessorNode","isArrayNode","isAssignmentNode","isBlockNode","isConditionalNode","isConstantNode","isFunctionNode","isFunctionAssignmentNode","isIndexNode","isNode","isObjectNode","isOperatorNode","isParenthesisNode","isRangeNode","isSymbolNode","isObject","conversions","from","to","convert","digits","TypeError","toNumber","valueOf","f","n","Number","isNaN","err","String","array","matrix"]
}
