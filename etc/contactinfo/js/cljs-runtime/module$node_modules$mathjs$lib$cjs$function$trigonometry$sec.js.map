{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$trigonometry$sec.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,4DAAA,CAAiF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGzHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,SAAR,CAAoB,IAAK,EAErBC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAEf,KAAIQ,YAAcR,OAAA,CAAQ,qDAAR,CAAlB,CAEIS,OAAST,OAAA,CAAQ,uDAAR,CAITM,QAAAA,CAA2B,CAAC,CAAA,CAAGC,MAASG,CAAAA,OAAb,EAFpBC,KAEoB,CADZC,CAAC,OAADA,CAAU,WAAVA,CACY,CAA0C,QAAS,CAACC,IAAD,CAAO,CAAA,IACnFC,MAAQD,IAAKC,CAAAA,KADsE;AAEnFC,WAAaF,IAAKG,CAAAA,SAuBtB,OAAOF,MAAA,CA3BEH,KA2BF,CAAY,CACjBM,OAAQR,MAAOS,CAAAA,SADE,CAEjBC,QAASA,QAAgB,CAACC,CAAD,CAAI,CAC3B,MAAOA,EAAEC,CAAAA,GAAF,EADoB,CAFZ,CAKjBL,UAAWA,QAAkB,CAACI,CAAD,CAAI,CAC/B,MAAyBE,CAAlB,IAAIP,UAAJ,CAAe,CAAf,CAAkBO,EAAAA,GAAlB,CAAsBF,CAAEG,CAAAA,GAAF,EAAtB,CADwB,CALhB,CAQjBC,KAAMA,QAAa,CAACJ,CAAD,CAAI,CACrB,GAAI,CAACA,CAAEK,CAAAA,OAAF,CAAUL,CAAEM,CAAAA,WAAYC,CAAAA,UAAWC,CAAAA,KAAnC,CAAL,CACE,KAAM,KAAIC,SAAJ,CAAc,kCAAd,CAAN,CAGF,MAAO,KAAA,CAAKT,CAAEf,CAAAA,KAAP,CALc,CARN,CAejB,iBAAkByB,QAAoB,CAACV,CAAD,CAAI,CACxC,MAAO,CAAC,CAAA,CAAGZ,WAAYuB,CAAAA,OAAhB,EAAyBX,CAAzB,CAA4B,IAA5B,CADiC,CAfzB,CAAZ,CAzBgF,CAA1D,CA6C/BlB,QAAQI,CAAAA,SAAR,CAAoBA,OA7DqG;",
"sources":["node_modules/mathjs/lib/cjs/function/trigonometry/sec.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$trigonometry$sec\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSec = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _index = require(\"../../plain/number/index.js\");\n\nvar name = 'sec';\nvar dependencies = ['typed', 'BigNumber'];\nvar createSec = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      _BigNumber = _ref.BigNumber;\n\n  /**\n   * Calculate the secant of a value, defined as `sec(x) = 1/cos(x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.sec(x)\n   *\n   * Examples:\n   *\n   *    math.sec(2)      // returns number -2.4029979617223822\n   *    1 / math.cos(2)  // returns number -2.4029979617223822\n   *\n   * See also:\n   *\n   *    cos, csc, cot\n   *\n   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Secant of x\n   */\n  return typed(name, {\n    number: _index.secNumber,\n    Complex: function Complex(x) {\n      return x.sec();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(1).div(x.cos());\n    },\n    Unit: function Unit(x) {\n      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {\n        throw new TypeError('Unit in function sec is no angle');\n      }\n\n      return this(x.value);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n});\nexports.createSec = createSec;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createSec","_factory","_collection","_index","factory","name","dependencies","_ref","typed","_BigNumber","BigNumber","number","secNumber","Complex","x","sec","div","cos","Unit","hasBase","constructor","BASE_UNITS","ANGLE","TypeError","ArrayMatrix","deepMap"]
}
