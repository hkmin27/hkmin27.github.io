{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$expression$node$AssignmentNode.js",
"lineCount":12,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/expression/node/AssignmentNode.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$expression$node$AssignmentNode\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAssignmentNode = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _customs = require(\"../../utils/customs.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _access = require(\"./utils/access.js\");\n\nvar _assign = require(\"./utils/assign.js\");\n\nvar _operators = require(\"../operators.js\");\n\nvar name = 'AssignmentNode';\nvar dependencies = ['subset', '?matrix', // FIXME: should not be needed at all, should be handled by subset\n'Node'];\nvar createAssignmentNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var subset = _ref.subset,\n      matrix = _ref.matrix,\n      Node = _ref.Node;\n  var access = (0, _access.accessFactory)({\n    subset: subset\n  });\n  var assign = (0, _assign.assignFactory)({\n    subset: subset,\n    matrix: matrix\n  });\n  /**\n   * @constructor AssignmentNode\n   * @extends {Node}\n   *\n   * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or\n   * replace a subset of a matrix like `A[2,2]=42`.\n   *\n   * Syntax:\n   *\n   *     new AssignmentNode(symbol, value)\n   *     new AssignmentNode(object, index, value)\n   *\n   * Usage:\n   *\n   *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2))                       // a=2\n   *    new AssignmentNode(new SymbolNode('a'), new IndexNode('b'), new ConstantNode(2))   // a.b=2\n   *    new AssignmentNode(new SymbolNode('a'), new IndexNode(1, 2), new ConstantNode(3))  // a[1,2]=3\n   *\n   * @param {SymbolNode | AccessorNode} object  Object on which to assign a value\n   * @param {IndexNode} [index=null]            Index, property name or matrix\n   *                                            index. Optional. If not provided\n   *                                            and `object` is a SymbolNode,\n   *                                            the property is assigned to the\n   *                                            global scope.\n   * @param {Node} value                        The value to be assigned\n   */\n\n  function AssignmentNode(object, index, value) {\n    if (!(this instanceof AssignmentNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.object = object;\n    this.index = value ? index : null;\n    this.value = value || index; // validate input\n\n    if (!(0, _is.isSymbolNode)(object) && !(0, _is.isAccessorNode)(object)) {\n      throw new TypeError('SymbolNode or AccessorNode expected as \"object\"');\n    }\n\n    if ((0, _is.isSymbolNode)(object) && object.name === 'end') {\n      throw new Error('Cannot assign to symbol \"end\"');\n    }\n\n    if (this.index && !(0, _is.isIndexNode)(this.index)) {\n      // index is optional\n      throw new TypeError('IndexNode expected as \"index\"');\n    }\n\n    if (!(0, _is.isNode)(this.value)) {\n      throw new TypeError('Node expected as \"value\"');\n    } // readonly property name\n\n\n    Object.defineProperty(this, 'name', {\n      get: function () {\n        if (this.index) {\n          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\n        } else {\n          return this.object.name || '';\n        }\n      }.bind(this),\n      set: function set() {\n        throw new Error('Cannot assign a new name, name is read-only');\n      }\n    });\n  }\n\n  AssignmentNode.prototype = new Node();\n  AssignmentNode.prototype.type = 'AssignmentNode';\n  AssignmentNode.prototype.isAssignmentNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  AssignmentNode.prototype._compile = function (math, argNames) {\n    var evalObject = this.object._compile(math, argNames);\n\n    var evalIndex = this.index ? this.index._compile(math, argNames) : null;\n\n    var evalValue = this.value._compile(math, argNames);\n\n    var name = this.object.name;\n\n    if (!this.index) {\n      // apply a variable to the scope, for example `a=2`\n      if (!(0, _is.isSymbolNode)(this.object)) {\n        throw new TypeError('SymbolNode expected as object');\n      }\n\n      return function evalAssignmentNode(scope, args, context) {\n        return (0, _customs.setSafeProperty)(scope, name, evalValue(scope, args, context));\n      };\n    } else if (this.index.isObjectProperty()) {\n      // apply an object property for example `a.b=2`\n      var prop = this.index.getObjectProperty();\n      return function evalAssignmentNode(scope, args, context) {\n        var object = evalObject(scope, args, context);\n        var value = evalValue(scope, args, context);\n        return (0, _customs.setSafeProperty)(object, prop, value);\n      };\n    } else if ((0, _is.isSymbolNode)(this.object)) {\n      // update a matrix subset, for example `a[2]=3`\n      return function evalAssignmentNode(scope, args, context) {\n        var childObject = evalObject(scope, args, context);\n        var value = evalValue(scope, args, context);\n        var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context\n\n        (0, _customs.setSafeProperty)(scope, name, assign(childObject, index, value));\n        return value;\n      };\n    } else {\n      // isAccessorNode(node.object) === true\n      // update a matrix subset, for example `a.b[2]=3`\n      // we will not use the compile function of the AccessorNode, but compile it\n      // ourselves here as we need the parent object of the AccessorNode:\n      // wee need to apply the updated object to parent object\n      var evalParentObject = this.object.object._compile(math, argNames);\n\n      if (this.object.index.isObjectProperty()) {\n        var parentProp = this.object.index.getObjectProperty();\n        return function evalAssignmentNode(scope, args, context) {\n          var parent = evalParentObject(scope, args, context);\n          var childObject = (0, _customs.getSafeProperty)(parent, parentProp);\n          var index = evalIndex(scope, args, childObject); // Important: we pass childObject instead of context\n\n          var value = evalValue(scope, args, context);\n          (0, _customs.setSafeProperty)(parent, parentProp, assign(childObject, index, value));\n          return value;\n        };\n      } else {\n        // if some parameters use the 'end' parameter, we need to calculate the size\n        var evalParentIndex = this.object.index._compile(math, argNames);\n\n        return function evalAssignmentNode(scope, args, context) {\n          var parent = evalParentObject(scope, args, context);\n          var parentIndex = evalParentIndex(scope, args, parent); // Important: we pass parent instead of context\n\n          var childObject = access(parent, parentIndex);\n          var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context\n\n          var value = evalValue(scope, args, context);\n          assign(parent, parentIndex, assign(childObject, index, value));\n          return value;\n        };\n      }\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  AssignmentNode.prototype.forEach = function (callback) {\n    callback(this.object, 'object', this);\n\n    if (this.index) {\n      callback(this.index, 'index', this);\n    }\n\n    callback(this.value, 'value', this);\n  };\n  /**\n   * Create a new AssignmentNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {AssignmentNode} Returns a transformed copy of the node\n   */\n\n\n  AssignmentNode.prototype.map = function (callback) {\n    var object = this._ifNode(callback(this.object, 'object', this));\n\n    var index = this.index ? this._ifNode(callback(this.index, 'index', this)) : null;\n\n    var value = this._ifNode(callback(this.value, 'value', this));\n\n    return new AssignmentNode(object, index, value);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {AssignmentNode}\n   */\n\n\n  AssignmentNode.prototype.clone = function () {\n    return new AssignmentNode(this.object, this.index, this.value);\n  };\n  /*\n   * Is parenthesis needed?\n   * @param {node} node\n   * @param {string} [parenthesis='keep']\n   * @private\n   */\n\n\n  function needParenthesis(node, parenthesis) {\n    if (!parenthesis) {\n      parenthesis = 'keep';\n    }\n\n    var precedence = (0, _operators.getPrecedence)(node, parenthesis);\n    var exprPrecedence = (0, _operators.getPrecedence)(node.value, parenthesis);\n    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;\n  }\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AssignmentNode.prototype._toString = function (options) {\n    var object = this.object.toString(options);\n    var index = this.index ? this.index.toString(options) : '';\n    var value = this.value.toString(options);\n\n    if (needParenthesis(this, options && options.parenthesis)) {\n      value = '(' + value + ')';\n    }\n\n    return object + index + ' = ' + value;\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  AssignmentNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'AssignmentNode',\n      object: this.object,\n      index: this.index,\n      value: this.value\n    };\n  };\n  /**\n   * Instantiate an AssignmentNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"AssignmentNode\", object: ..., index: ..., value: ...}`,\n   *                       where mathjs is optional\n   * @returns {AssignmentNode}\n   */\n\n\n  AssignmentNode.fromJSON = function (json) {\n    return new AssignmentNode(json.object, json.index, json.value);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AssignmentNode.prototype.toHTML = function (options) {\n    var object = this.object.toHTML(options);\n    var index = this.index ? this.index.toHTML(options) : '';\n    var value = this.value.toHTML(options);\n\n    if (needParenthesis(this, options && options.parenthesis)) {\n      value = '<span class=\"math-paranthesis math-round-parenthesis\">(</span>' + value + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n    }\n\n    return object + index + '<span class=\"math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator\">=</span>' + value;\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AssignmentNode.prototype._toTex = function (options) {\n    var object = this.object.toTex(options);\n    var index = this.index ? this.index.toTex(options) : '';\n    var value = this.value.toTex(options);\n\n    if (needParenthesis(this, options && options.parenthesis)) {\n      value = \"\\\\left(\".concat(value, \"\\\\right)\");\n    }\n\n    return object + index + ':=' + value;\n  };\n\n  return AssignmentNode;\n}, {\n  isClass: true,\n  isNode: true\n});\nexports.createAssignmentNode = createAssignmentNode;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createAssignmentNode","_is","_customs","_factory","_access","_assign","_operators","factory","name","dependencies","_ref","AssignmentNode","object","index","SyntaxError","isSymbolNode","isAccessorNode","TypeError","Error","isIndexNode","isNode","get","isObjectProperty","getObjectProperty","bind","set","needParenthesis","node","parenthesis","precedence","getPrecedence","exprPrecedence","subset","matrix","Node","access","accessFactory","assign","assignFactory","prototype","type","isAssignmentNode","_compile","AssignmentNode.prototype._compile","math","argNames","evalObject","evalIndex","evalValue","prop","evalAssignmentNode","scope","args","context","setSafeProperty","childObject","evalParentObject","parentProp","parent","getSafeProperty","evalParentIndex","parentIndex","forEach","AssignmentNode.prototype.forEach","callback","map","AssignmentNode.prototype.map","_ifNode","clone","AssignmentNode.prototype.clone","_toString","AssignmentNode.prototype._toString","options","toString","toJSON","AssignmentNode.prototype.toJSON","mathjs","fromJSON","AssignmentNode.fromJSON","json","toHTML","AssignmentNode.prototype.toHTML","_toTex","AssignmentNode.prototype._toTex","toTex","concat","isClass"]
}
