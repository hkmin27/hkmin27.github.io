{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$matrix$diff.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/function/matrix/diff.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$matrix$diff\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createDiff = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _number = require(\"../../utils/number.js\");\n\nvar _is = require(\"../../utils/is.js\");\n\nvar name = 'diff';\nvar dependencies = ['typed', 'matrix', 'subtract', 'number'];\nvar createDiff = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      subtract = _ref.subtract,\n      number = _ref.number;\n\n  /**\n   * Create a new matrix or array of the difference between elements of the given array\n   * The optional dim parameter lets you specify the dimension to evaluate the difference of\n   * If no dimension parameter is passed it is assumed as dimension 0\n   *\n   * Dimension is zero-based in javascript and one-based in the parser and can be a number or bignumber\n   * Arrays must be 'rectangular' meaning arrays like [1, 2]\n   * If something is passed as a matrix it will be returned as a matrix but other than that all matrices are converted to arrays\n   *\n   * Syntax:\n   *\n   *     math.diff(arr)\n   *     math.diff(arr, dim)\n   *\n   * Examples:\n   *\n   *     const arr = [1, 2, 4, 7, 0]\n   *     math.diff(arr) // returns [1, 2, 3, -7] (no dimension passed so 0 is assumed)\n   *     math.diff(math.matrix(arr)) // returns math.matrix([1, 2, 3, -7])\n   *\n   *     const arr = [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [9, 8, 7, 6, 4]]\n   *     math.diff(arr) // returns [[0, 0, 0, 0, 0], [8, 6, 4, 2, -1]]\n   *     math.diff(arr, 0) // returns [[0, 0, 0, 0, 0], [8, 6, 4, 2, -1]]\n   *     math.diff(arr, 1) // returns [[1, 1, 1, 1], [1, 1, 1, 1], [-1, -1, -1, -2]]\n   *     math.diff(arr, math.bignumber(1)) // returns [[1, 1, 1, 1], [1, 1, 1, 1], [-1, -1, -1, -2]]\n   *\n   *     math.diff(arr, 2) // throws RangeError as arr is 2 dimensional not 3\n   *     math.diff(arr, -1) // throws RangeError as negative dimensions are not allowed\n   *\n   *     // These will all produce the same result\n   *     math.diff([[1, 2], [3, 4]])\n   *     math.diff([math.matrix([1, 2]), math.matrix([3, 4])])\n   *     math.diff([[1, 2], math.matrix([3, 4])])\n   *     math.diff([math.matrix([1, 2]), [3, 4]])\n   *     // They do not produce the same result as  math.diff(math.matrix([[1, 2], [3, 4]])) as this returns a matrix\n   *\n   * See Also:\n   *\n   *      sum\n   *      subtract\n   *      partitionSelect\n   *\n   * @param {Array | Matrix} arr    An array or matrix\n   * @param {number} dim            Dimension\n   * @return {Array | Matrix}       Difference between array elements in given dimension\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(arr) {\n      // No dimension specified => assume dimension 0\n      if ((0, _is.isMatrix)(arr)) {\n        return matrix(_diff(arr.toArray()));\n      } else {\n        return _diff(arr);\n      }\n    },\n    'Array | Matrix, number': function ArrayMatrixNumber(arr, dim) {\n      if (!(0, _number.isInteger)(dim)) throw new RangeError('Dimension must be a whole number');\n\n      if ((0, _is.isMatrix)(arr)) {\n        return matrix(_recursive(arr.toArray(), dim));\n      } else {\n        return _recursive(arr, dim);\n      }\n    },\n    'Array | Matrix, BigNumber': function ArrayMatrixBigNumber(arr, dim) {\n      return this(arr, number(dim));\n    }\n  });\n  /**\n   * Recursively find the correct dimension in the array/matrix\n   * Then Apply _diff to that dimension\n   *\n   * @param {Array} arr      The array\n   * @param {number} dim     Dimension\n   * @return {Array}         resulting array\n   */\n\n  function _recursive(arr, dim) {\n    if ((0, _is.isMatrix)(arr)) {\n      arr = arr.toArray(); // Makes sure arrays like [ matrix([0, 1]), matrix([1, 0]) ] are processed properly\n    }\n\n    if (!Array.isArray(arr)) {\n      throw RangeError('Array/Matrix does not have that many dimensions');\n    }\n\n    if (dim > 0) {\n      var result = [];\n      arr.forEach(function (element) {\n        result.push(_recursive(element, dim - 1));\n      });\n      return result;\n    } else if (dim === 0) {\n      return _diff(arr);\n    } else {\n      throw RangeError('Cannot have negative dimension');\n    }\n  }\n  /**\n   * Difference between elements in the array\n   *\n   * @param {Array} arr      An array\n   * @return {Array}         resulting array\n   */\n\n\n  function _diff(arr) {\n    var result = [];\n    var size = arr.length;\n\n    if (size < 2) {\n      return arr;\n    }\n\n    for (var i = 1; i < size; i++) {\n      result.push(_ElementDiff(arr[i - 1], arr[i]));\n    }\n\n    return result;\n  }\n  /**\n   * Difference between 2 objects\n   *\n   * @param {Object} obj1    First object\n   * @param {Object} obj2    Second object\n   * @return {Array}         resulting array\n   */\n\n\n  function _ElementDiff(obj1, obj2) {\n    // Convert matrices to arrays\n    if ((0, _is.isMatrix)(obj1)) obj1 = obj1.toArray();\n    if ((0, _is.isMatrix)(obj2)) obj2 = obj2.toArray();\n    var obj1IsArray = Array.isArray(obj1);\n    var obj2IsArray = Array.isArray(obj2);\n\n    if (obj1IsArray && obj2IsArray) {\n      return _ArrayDiff(obj1, obj2);\n    }\n\n    if (!obj1IsArray && !obj2IsArray) {\n      return subtract(obj2, obj1); // Difference is (second - first) NOT (first - second)\n    }\n\n    throw TypeError('Cannot calculate difference between 1 array and 1 non-array');\n  }\n  /**\n   * Difference of elements in 2 arrays\n   *\n   * @param {Array} arr1     Array 1\n   * @param {Array} arr2     Array 2\n   * @return {Array}         resulting array\n   */\n\n\n  function _ArrayDiff(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n      throw RangeError('Not all sub-arrays have the same length');\n    }\n\n    var result = [];\n    var size = arr1.length;\n\n    for (var i = 0; i < size; i++) {\n      result.push(_ElementDiff(arr1[i], arr2[i]));\n    }\n\n    return result;\n  }\n});\nexports.createDiff = createDiff;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createDiff","_factory","_number","_is","factory","name","dependencies","_ref","_recursive","arr","dim","isMatrix","toArray","Array","isArray","RangeError","result","forEach","element","push","_diff","size","length","i","_ElementDiff","obj1","obj2","obj1IsArray","obj2IsArray","arr1","arr2","subtract","TypeError","typed","matrix","number","ArrayMatrix","ArrayMatrixNumber","isInteger","ArrayMatrixBigNumber"]
}
