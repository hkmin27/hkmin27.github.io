{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$type$unit$function$unit.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,0DAAA,CAA+E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGvHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,kBAAR,CAA6B,IAAK,EAE9BC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAEf,KAAIQ,YAAcR,OAAA,CAAQ,qDAAR,CAKdM,QAAAA,CAAoC,CAAC,CAAA,CAAGC,MAASE,CAAAA,OAAb,EAH7BC,MAG6B,CAFrBC,CAAC,OAADA,CAAU,MAAVA,CAEqB,CAA0C,QAAS,CAACC,IAAD,CAAO,CAAA,IAC5FC,MAAQD,IAAKC,CAAAA,KAD+E,CAE5FC,KAAOF,IAAKE,CAAAA,IAyBhB,OAAOD,MAAA,CA9BEH,MA8BF,CAAY,CACjBI,KAAMA,QAAa,CAACC,CAAD,CAAI,CACrB,MAAOA,EAAEC,CAAAA,KAAF,EADc,CADN;AAIjBC,OAAQA,QAAe,CAACF,CAAD,CAAI,CACzB,MAAID,KAAKI,CAAAA,eAAL,CAAqBH,CAArB,CAAJ,CACS,IAAID,IAAJ,CAAS,IAAT,CAAeC,CAAf,CADT,CAIOD,IAAKK,CAAAA,KAAL,CAAWJ,CAAX,CAAc,CACnBK,aAAc,CAAA,CADK,CAAd,CALkB,CAJV,CAajB,kDAAmDC,QAA6C,CAAChB,KAAD,CAAQiB,IAAR,CAAc,CAC5G,MAAO,KAAIR,IAAJ,CAAST,KAAT,CAAgBiB,IAAhB,CADqG,CAb7F,CAgBjB,iBAAkBC,QAAoB,CAACR,CAAD,CAAI,CACxC,MAAO,CAAC,CAAA,CAAGP,WAAYgB,CAAAA,OAAhB,EAAyBT,CAAzB,CAA4B,IAA5B,CADiC,CAhBzB,CAAZ,CA3ByF,CAA1D,CAgDxCb,QAAQI,CAAAA,kBAAR,CAA6BA,OA/D0F;",
"sources":["node_modules/mathjs/lib/cjs/type/unit/function/unit.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$type$unit$function$unit\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createUnitFunction = void 0;\n\nvar _factory = require(\"../../../utils/factory.js\");\n\nvar _collection = require(\"../../../utils/collection.js\");\n\nvar name = 'unit';\nvar dependencies = ['typed', 'Unit']; // This function is named createUnitFunction to prevent a naming conflict with createUnit\n\nvar createUnitFunction = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      Unit = _ref.Unit;\n\n  /**\n   * Create a unit. Depending on the passed arguments, the function\n   * will create and return a new math.Unit object.\n   * When a matrix is provided, all elements will be converted to units.\n   *\n   * Syntax:\n   *\n   *     math.unit(unit : string)\n   *     math.unit(value : number, unit : string)\n   *\n   * Examples:\n   *\n   *    const a = math.unit(5, 'cm')    // returns Unit 50 mm\n   *    const b = math.unit('23 kg')    // returns Unit 23 kg\n   *    a.to('m')                       // returns Unit 0.05 m\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, matrix, number, string, createUnit\n   *\n   * @param {* | Array | Matrix} args   A number and unit.\n   * @return {Unit | Array | Matrix}    The created unit\n   */\n  return typed(name, {\n    Unit: function Unit(x) {\n      return x.clone();\n    },\n    string: function string(x) {\n      if (Unit.isValuelessUnit(x)) {\n        return new Unit(null, x); // a pure unit\n      }\n\n      return Unit.parse(x, {\n        allowNoUnits: true\n      }); // a unit with value, like '5cm'\n    },\n    'number | BigNumber | Fraction | Complex, string': function numberBigNumberFractionComplexString(value, unit) {\n      return new Unit(value, unit);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n});\nexports.createUnitFunction = createUnitFunction;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createUnitFunction","_factory","_collection","factory","name","dependencies","_ref","typed","Unit","x","clone","string","isValuelessUnit","parse","allowNoUnits","numberBigNumberFractionComplexString","unit","ArrayMatrix","deepMap"]
}
