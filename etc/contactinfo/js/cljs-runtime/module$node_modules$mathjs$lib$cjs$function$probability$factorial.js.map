{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$probability$factorial.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,iEAAA,CAAsF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG9HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,eAAR,CAA0B,IAAK,EAE/B,KAAIC,YAAcP,OAAA,CAAQ,qDAAR,CAEdQ,OAAAA,CAAWR,OAAA,CAAQ,kDAAR,CAIXM,OAAAA,CAAiC,CAAC,CAAA,CAAGE,MAASC,CAAAA,OAAb,EAF1BC,WAE0B,CADlBC,CAAC,OAADA,CAAU,OAAVA,CACkB,CAA0C,QAAS,CAACC,IAAD,CAAO,CAAA,IACzFC,MAAQD,IAAKC,CAAAA,KAD4E,CAEzFC,MAAQF,IAAKE,CAAAA,KAwBjB,OAAOD,MAAA,CA5BEH,WA4BF,CAAY,CACjBK,OAAQA,QAAe,CAACC,CAAD,CAAI,CACzB,GAAQ,CAAR;AAAIA,CAAJ,CACE,KAAUC,MAAJ,CAAU,4BAAV,CAAN,CAGF,MAAOH,MAAA,CAAME,CAAN,CAAU,CAAV,CALkB,CADV,CAQjBE,UAAWA,QAAkB,CAACF,CAAD,CAAI,CAC/B,GAAIA,CAAEG,CAAAA,UAAF,EAAJ,CACE,KAAUF,MAAJ,CAAU,4BAAV,CAAN,CAGF,MAAOH,MAAA,CAAME,CAAEI,CAAAA,IAAF,CAAO,CAAP,CAAN,CALwB,CARhB,CAejB,iBAAkBC,QAAoB,CAACL,CAAD,CAAI,CACxC,MAAO,CAAC,CAAA,CAAGT,WAAYe,CAAAA,OAAhB,EAAyBN,CAAzB,CAA4B,IAA5B,CADiC,CAfzB,CAAZ,CA1BsF,CAA1D,CA8CrCd,QAAQI,CAAAA,eAAR,CAA0BA,MA5DoG;",
"sources":["node_modules/mathjs/lib/cjs/function/probability/factorial.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$probability$factorial\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createFactorial = void 0;\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'factorial';\nvar dependencies = ['typed', 'gamma'];\nvar createFactorial = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      gamma = _ref.gamma;\n\n  /**\n   * Compute the factorial of a value\n   *\n   * Factorial only supports an integer value as argument.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.factorial(n)\n   *\n   * Examples:\n   *\n   *    math.factorial(5)    // returns 120\n   *    math.factorial(3)    // returns 6\n   *\n   * See also:\n   *\n   *    combinations, combinationsWithRep, gamma, permutations\n   *\n   * @param {number | BigNumber | Array | Matrix} n   An integer number\n   * @return {number | BigNumber | Array | Matrix}    The factorial of `n`\n   */\n  return typed(name, {\n    number: function number(n) {\n      if (n < 0) {\n        throw new Error('Value must be non-negative');\n      }\n\n      return gamma(n + 1);\n    },\n    BigNumber: function BigNumber(n) {\n      if (n.isNegative()) {\n        throw new Error('Value must be non-negative');\n      }\n\n      return gamma(n.plus(1));\n    },\n    'Array | Matrix': function ArrayMatrix(n) {\n      return (0, _collection.deepMap)(n, this);\n    }\n  });\n});\nexports.createFactorial = createFactorial;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createFactorial","_collection","_factory","factory","name","dependencies","_ref","typed","gamma","number","n","Error","BigNumber","isNegative","plus","ArrayMatrix","deepMap"]
}
