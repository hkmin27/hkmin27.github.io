{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$matrix$reshape.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,0DAAA,CAA+E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGvHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,aAAR,CAAwB,IAAK,EAE7B,KAAIC,OAASP,OAAA,CAAQ,gDAAR,CAETQ,OAAAA,CAAWR,OAAA,CAAQ,kDAAR,CAIXM,OAAAA,CAA+B,CAAC,CAAA,CAAGE,MAASC,CAAAA,OAAb,EAFxBC,SAEwB,CADhBC,CAAC,OAADA,CAAU,WAAVA,CAAuB,QAAvBA,CACgB,CAA0C,QAAS,CAACC,IAAD,CAAO,CAAA,IACvFC,MAAQD,IAAKC,CAAAA,KAD0E,CAEvFC,UAAYF,IAAKE,CAAAA,SA0CrB,OAAOD,MAAA,CA9CEH,SA8CF,CAAY,CACjB,gBAAiBK,QAAoB,CAACC,CAAD;AAAIC,KAAJ,CAAW,CAC9C,MAAOD,EAAEE,CAAAA,OAAF,CAAUD,KAAV,CADuC,CAD/B,CAIjB,eAAgBE,QAAmB,CAACH,CAAD,CAAIC,KAAJ,CAAW,CAC5CA,KAAMG,CAAAA,OAAN,CAAc,QAAS,CAACC,IAAD,CAAO,CAC5B,GAAI,CAACP,SAAA,CAAUO,IAAV,CAAL,CACE,KAAM,KAAIC,SAAJ,CAAc,8BAAd,CAA+CD,IAA/C,CAAN,CAF0B,CAA9B,CAKA,OAAO,CAAC,CAAA,CAAGd,MAAOW,CAAAA,OAAX,EAAoBF,CAApB,CAAuBC,KAAvB,CANqC,CAJ7B,CAAZ,CA5CoF,CAA1D,CA0DnCf,QAAQI,CAAAA,aAAR,CAAwBA,MAxE+F;",
"sources":["node_modules/mathjs/lib/cjs/function/matrix/reshape.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$matrix$reshape\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createReshape = void 0;\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'reshape';\nvar dependencies = ['typed', 'isInteger', 'matrix'];\nvar createReshape = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      isInteger = _ref.isInteger;\n\n  /**\n   * Reshape a multi dimensional array to fit the specified dimensions\n   *\n   * Syntax:\n   *\n   *     math.reshape(x, sizes)\n   *\n   * Examples:\n   *\n   *     math.reshape([1, 2, 3, 4, 5, 6], [2, 3])\n   *     // returns Array  [[1, 2, 3], [4, 5, 6]]\n   *\n   *     math.reshape([[1, 2], [3, 4]], [1, 4])\n   *     // returns Array  [[1, 2, 3, 4]]\n   *\n   *     math.reshape([[1, 2], [3, 4]], [4])\n   *     // returns Array [1, 2, 3, 4]\n   *\n   *     const x = math.matrix([1, 2, 3, 4, 5, 6, 7, 8])\n   *     math.reshape(x, [2, 2, 2])\n   *     // returns Matrix [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]\n   *\n   *    math.reshape([1, 2, 3, 4], [-1, 2])\n   *    // returns Matrix [[1, 2], [3, 4]]\n   *\n   * See also:\n   *\n   *     size, squeeze, resize\n   *\n   * @param {Array | Matrix | *} x  Matrix to be reshaped\n   * @param {number[]} sizes        One dimensional array with integral sizes for\n   *                                each dimension. One -1 is allowed as wildcard,\n   *                                which calculates this dimension automatically.\n   *\n   * @return {* | Array | Matrix}   A reshaped clone of matrix `x`\n   *\n   * @throws {TypeError}            If `sizes` does not contain solely integers\n   * @throws {DimensionError}       If the product of the new dimension sizes does\n   *                                not equal that of the old ones\n   */\n  return typed(name, {\n    'Matrix, Array': function MatrixArray(x, sizes) {\n      return x.reshape(sizes);\n    },\n    'Array, Array': function ArrayArray(x, sizes) {\n      sizes.forEach(function (size) {\n        if (!isInteger(size)) {\n          throw new TypeError('Invalid size for dimension: ' + size);\n        }\n      });\n      return (0, _array.reshape)(x, sizes);\n    }\n  });\n});\nexports.createReshape = createReshape;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createReshape","_array","_factory","factory","name","dependencies","_ref","typed","isInteger","MatrixArray","x","sizes","reshape","ArrayArray","forEach","size","TypeError"]
}
