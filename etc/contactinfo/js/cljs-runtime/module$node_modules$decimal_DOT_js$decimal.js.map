{
"version":3,
"file":"module$node_modules$decimal_DOT_js$decimal.js",
"lineCount":78,
"mappings":"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",
"sources":["node_modules/decimal_DOT_js/decimal.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$decimal_DOT_js$decimal\"] = function(global,require,module,exports) {\n;(function (globalScope) {\r\n  'use strict';\r\n\r\n\r\n  /*\r\n   *  decimal.js v10.2.1\r\n   *  An arbitrary-precision Decimal type for JavaScript.\r\n   *  https://github.com/MikeMcl/decimal.js\r\n   *  Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n   *  MIT Licence\r\n   */\r\n\r\n\r\n  // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\r\n\r\n\r\n    // The maximum exponent magnitude.\r\n    // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\r\n  var EXP_LIMIT = 9e15,                      // 0 to 9e15\r\n\r\n    // The limit on the value of `precision`, and on the value of the first argument to\r\n    // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n    MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n    // Base conversion alphabet.\r\n    NUMERALS = '0123456789abcdef',\r\n\r\n    // The natural logarithm of 10 (1025 digits).\r\n    LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',\r\n\r\n    // Pi (1025 digits).\r\n    PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',\r\n\r\n\r\n    // The initial configuration properties of the Decimal constructor.\r\n    DEFAULTS = {\r\n\r\n      // These values must be integers within the stated ranges (inclusive).\r\n      // Most of these values can be changed at run-time using the `Decimal.config` method.\r\n\r\n      // The maximum number of significant digits of the result of a calculation or base conversion.\r\n      // E.g. `Decimal.config({ precision: 20 });`\r\n      precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n      // The rounding mode used when rounding to `precision`.\r\n      //\r\n      // ROUND_UP         0 Away from zero.\r\n      // ROUND_DOWN       1 Towards zero.\r\n      // ROUND_CEIL       2 Towards +Infinity.\r\n      // ROUND_FLOOR      3 Towards -Infinity.\r\n      // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      //\r\n      // E.g.\r\n      // `Decimal.rounding = 4;`\r\n      // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n      rounding: 4,                           // 0 to 8\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP         0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\r\n      // FLOOR      3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN  6 The IEEE 754 remainder function.\r\n      // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\r\n      //\r\n      // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\r\n      // division (9) are commonly used for the modulus operation. The other rounding modes can also\r\n      // be used, but they may not give useful results.\r\n      modulo: 1,                             // 0 to 9\r\n\r\n      // The exponent value at and beneath which `toString` returns exponential notation.\r\n      // JavaScript numbers: -7\r\n      toExpNeg: -7,                          // 0 to -EXP_LIMIT\r\n\r\n      // The exponent value at and above which `toString` returns exponential notation.\r\n      // JavaScript numbers: 21\r\n      toExpPos:  21,                         // 0 to EXP_LIMIT\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // JavaScript numbers: -324  (5e-324)\r\n      minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // JavaScript numbers: 308  (1.7976931348623157e+308)\r\n      maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      crypto: false                          // true/false\r\n    },\r\n\r\n\r\n  // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\r\n\r\n\r\n    Decimal, inexact, noConflict, quadrant,\r\n    external = true,\r\n\r\n    decimalError = '[DecimalError] ',\r\n    invalidArgument = decimalError + 'Invalid argument: ',\r\n    precisionLimitExceeded = decimalError + 'Precision limit exceeded',\r\n    cryptoUnavailable = decimalError + 'crypto unavailable',\r\n\r\n    mathfloor = Math.floor,\r\n    mathpow = Math.pow,\r\n\r\n    isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\r\n    isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\r\n    isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\r\n    isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n    BASE = 1e7,\r\n    LOG_BASE = 7,\r\n    MAX_SAFE_INTEGER = 9007199254740991,\r\n\r\n    LN10_PRECISION = LN10.length - 1,\r\n    PI_PRECISION = PI.length - 1,\r\n\r\n    // Decimal.prototype object\r\n    P = { name: '[object Decimal]' };\r\n\r\n\r\n  // Decimal prototype methods\r\n\r\n\r\n  /*\r\n   *  absoluteValue             abs\r\n   *  ceil\r\n   *  comparedTo                cmp\r\n   *  cosine                    cos\r\n   *  cubeRoot                  cbrt\r\n   *  decimalPlaces             dp\r\n   *  dividedBy                 div\r\n   *  dividedToIntegerBy        divToInt\r\n   *  equals                    eq\r\n   *  floor\r\n   *  greaterThan               gt\r\n   *  greaterThanOrEqualTo      gte\r\n   *  hyperbolicCosine          cosh\r\n   *  hyperbolicSine            sinh\r\n   *  hyperbolicTangent         tanh\r\n   *  inverseCosine             acos\r\n   *  inverseHyperbolicCosine   acosh\r\n   *  inverseHyperbolicSine     asinh\r\n   *  inverseHyperbolicTangent  atanh\r\n   *  inverseSine               asin\r\n   *  inverseTangent            atan\r\n   *  isFinite\r\n   *  isInteger                 isInt\r\n   *  isNaN\r\n   *  isNegative                isNeg\r\n   *  isPositive                isPos\r\n   *  isZero\r\n   *  lessThan                  lt\r\n   *  lessThanOrEqualTo         lte\r\n   *  logarithm                 log\r\n   *  [maximum]                 [max]\r\n   *  [minimum]                 [min]\r\n   *  minus                     sub\r\n   *  modulo                    mod\r\n   *  naturalExponential        exp\r\n   *  naturalLogarithm          ln\r\n   *  negated                   neg\r\n   *  plus                      add\r\n   *  precision                 sd\r\n   *  round\r\n   *  sine                      sin\r\n   *  squareRoot                sqrt\r\n   *  tangent                   tan\r\n   *  times                     mul\r\n   *  toBinary\r\n   *  toDecimalPlaces           toDP\r\n   *  toExponential\r\n   *  toFixed\r\n   *  toFraction\r\n   *  toHexadecimal             toHex\r\n   *  toNearest\r\n   *  toNumber\r\n   *  toOctal\r\n   *  toPower                   pow\r\n   *  toPrecision\r\n   *  toSignificantDigits       toSD\r\n   *  toString\r\n   *  truncated                 trunc\r\n   *  valueOf                   toJSON\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the absolute value of this Decimal.\r\n   *\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new this.constructor(this);\r\n    if (x.s < 0) x.s = 1;\r\n    return finalise(x);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n   * direction of positive Infinity.\r\n   *\r\n   */\r\n  P.ceil = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1    if the value of this Decimal is greater than the value of `y`,\r\n   *  -1    if the value of this Decimal is less than the value of `y`,\r\n   *   0    if they have the same value,\r\n   *   NaN  if the value of either Decimal is NaN.\r\n   *\r\n   */\r\n  P.comparedTo = P.cmp = function (y) {\r\n    var i, j, xdL, ydL,\r\n      x = this,\r\n      xd = x.d,\r\n      yd = (y = new x.constructor(y)).d,\r\n      xs = x.s,\r\n      ys = y.s;\r\n\r\n    // Either NaN or \u00b1Infinity?\r\n    if (!xd || !yd) {\r\n      return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\r\n    }\r\n\r\n    // Either zero?\r\n    if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\r\n\r\n    // Signs differ?\r\n    if (xs !== ys) return xs;\r\n\r\n    // Compare exponents.\r\n    if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\r\n\r\n    xdL = xd.length;\r\n    ydL = yd.length;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n      if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\r\n    }\r\n\r\n    // Compare lengths.\r\n    return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * cos(0)         = 1\r\n   * cos(-0)        = 1\r\n   * cos(Infinity)  = NaN\r\n   * cos(-Infinity) = NaN\r\n   * cos(NaN)       = NaN\r\n   *\r\n   */\r\n  P.cosine = P.cos = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.d) return new Ctor(NaN);\r\n\r\n    // cos(0) = cos(-0) = 1\r\n    if (!x.d[0]) return new Ctor(1);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n    Ctor.rounding = 1;\r\n\r\n    x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   *\r\n   * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   *  cbrt(0)  =  0\r\n   *  cbrt(-0) = -0\r\n   *  cbrt(1)  =  1\r\n   *  cbrt(-1) = -1\r\n   *  cbrt(N)  =  N\r\n   *  cbrt(-I) = -I\r\n   *  cbrt(I)  =  I\r\n   *\r\n   * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\r\n   *\r\n   */\r\n  P.cubeRoot = P.cbrt = function () {\r\n    var e, m, n, r, rep, s, sd, t, t3, t3plusx,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n    external = false;\r\n\r\n    // Initial estimate.\r\n    s = x.s * mathpow(x.s * x, 1 / 3);\r\n\r\n     // Math.cbrt underflow/overflow?\r\n     // Pass x to Math.pow as integer, then adjust the exponent of the result.\r\n    if (!s || Math.abs(s) == 1 / 0) {\r\n      n = digitsToString(x.d);\r\n      e = x.e;\r\n\r\n      // Adjust n exponent so it is a multiple of 3 away from x exponent.\r\n      if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');\r\n      s = mathpow(n, 1 / 3);\r\n\r\n      // Rarely, e may be one less than the result exponent value.\r\n      e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new Ctor(n);\r\n      r.s = x.s;\r\n    } else {\r\n      r = new Ctor(s.toString());\r\n    }\r\n\r\n    sd = (e = Ctor.precision) + 3;\r\n\r\n    // Halley's method.\r\n    // TODO? Compare Newton's method.\r\n    for (;;) {\r\n      t = r;\r\n      t3 = t.times(t).times(t);\r\n      t3plusx = t3.plus(x);\r\n      r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\r\n\r\n      // TODO? Replace with for-loop and checkRoundingDigits.\r\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n        n = n.slice(sd - 3, sd + 1);\r\n\r\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\r\n        // , i.e. approaching a rounding boundary, continue the iteration.\r\n        if (n == '9999' || !rep && n == '4999') {\r\n\r\n          // On the first iteration only, check to see if rounding up gives the exact result as the\r\n          // nines may infinitely repeat.\r\n          if (!rep) {\r\n            finalise(t, e + 1, 0);\r\n\r\n            if (t.times(t).times(t).eq(x)) {\r\n              r = t;\r\n              break;\r\n            }\r\n          }\r\n\r\n          sd += 4;\r\n          rep = 1;\r\n        } else {\r\n\r\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n          // If not, then there are further digits and m will be truthy.\r\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n            // Truncate to the first rounding digit.\r\n            finalise(r, e + 1, 1);\r\n            m = !r.times(r).times(r).eq(x);\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, e, Ctor.rounding, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the number of decimal places of the value of this Decimal.\r\n   *\r\n   */\r\n  P.decimalPlaces = P.dp = function () {\r\n    var w,\r\n      d = this.d,\r\n      n = NaN;\r\n\r\n    if (d) {\r\n      w = d.length - 1;\r\n      n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last word.\r\n      w = d[w];\r\n      if (w) for (; w % 10 == 0; w /= 10) n--;\r\n      if (n < 0) n = 0;\r\n    }\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.dividedBy = P.div = function (y) {\r\n    return divide(this, new this.constructor(y));\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n   * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.dividedToIntegerBy = P.divToInt = function (y) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n    return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.equals = P.eq = function (y) {\r\n    return this.cmp(y) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n   * direction of negative Infinity.\r\n   *\r\n   */\r\n  P.floor = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 3);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n   * false.\r\n   *\r\n   */\r\n  P.greaterThan = P.gt = function (y) {\r\n    return this.cmp(y) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n   * otherwise return false.\r\n   *\r\n   */\r\n  P.greaterThanOrEqualTo = P.gte = function (y) {\r\n    var k = this.cmp(y);\r\n    return k == 1 || k === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [1, Infinity]\r\n   *\r\n   * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\r\n   *\r\n   * cosh(0)         = 1\r\n   * cosh(-0)        = 1\r\n   * cosh(Infinity)  = Infinity\r\n   * cosh(-Infinity) = Infinity\r\n   * cosh(NaN)       = NaN\r\n   *\r\n   *  x        time taken (ms)   result\r\n   * 1000      9                 9.8503555700852349694e+433\r\n   * 10000     25                4.4034091128314607936e+4342\r\n   * 100000    171               1.4033316802130615897e+43429\r\n   * 1000000   3817              1.5166076984010437725e+434294\r\n   * 10000000  abandoned after 2 minute wait\r\n   *\r\n   * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\r\n   *\r\n   */\r\n  P.hyperbolicCosine = P.cosh = function () {\r\n    var k, n, pr, rm, len,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      one = new Ctor(1);\r\n\r\n    if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\r\n    if (x.isZero()) return one;\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    len = x.d.length;\r\n\r\n    // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\r\n    // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    // TODO? Estimation reused from cosine() and may not be optimal here.\r\n    if (len < 32) {\r\n      k = Math.ceil(len / 3);\r\n      n = (1 / tinyPow(4, k)).toString();\r\n    } else {\r\n      k = 16;\r\n      n = '2.3283064365386962890625e-10';\r\n    }\r\n\r\n    x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\r\n\r\n    // Reverse argument reduction\r\n    var cosh2_x,\r\n      i = k,\r\n      d8 = new Ctor(8);\r\n    for (; i--;) {\r\n      cosh2_x = x.times(x);\r\n      x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\r\n    }\r\n\r\n    return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\r\n   *\r\n   * sinh(0)         = 0\r\n   * sinh(-0)        = -0\r\n   * sinh(Infinity)  = Infinity\r\n   * sinh(-Infinity) = -Infinity\r\n   * sinh(NaN)       = NaN\r\n   *\r\n   * x        time taken (ms)\r\n   * 10       2 ms\r\n   * 100      5 ms\r\n   * 1000     14 ms\r\n   * 10000    82 ms\r\n   * 100000   886 ms            1.4033316802130615897e+43429\r\n   * 200000   2613 ms\r\n   * 300000   5407 ms\r\n   * 400000   8824 ms\r\n   * 500000   13026 ms          8.7080643612718084129e+217146\r\n   * 1000000  48543 ms\r\n   *\r\n   * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\r\n   *\r\n   */\r\n  P.hyperbolicSine = P.sinh = function () {\r\n    var k, pr, rm, len,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    len = x.d.length;\r\n\r\n    if (len < 3) {\r\n      x = taylorSeries(Ctor, 2, x, x, true);\r\n    } else {\r\n\r\n      // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\r\n      // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\r\n      // 3 multiplications and 1 addition\r\n\r\n      // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\r\n      // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\r\n      // 4 multiplications and 2 additions\r\n\r\n      // Estimate the optimum number of times to use the argument reduction.\r\n      k = 1.4 * Math.sqrt(len);\r\n      k = k > 16 ? 16 : k | 0;\r\n\r\n      x = x.times(1 / tinyPow(5, k));\r\n      x = taylorSeries(Ctor, 2, x, x, true);\r\n\r\n      // Reverse argument reduction\r\n      var sinh2_x,\r\n        d5 = new Ctor(5),\r\n        d16 = new Ctor(16),\r\n        d20 = new Ctor(20);\r\n      for (; k--;) {\r\n        sinh2_x = x.times(x);\r\n        x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\r\n      }\r\n    }\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * tanh(x) = sinh(x) / cosh(x)\r\n   *\r\n   * tanh(0)         = 0\r\n   * tanh(-0)        = -0\r\n   * tanh(Infinity)  = 1\r\n   * tanh(-Infinity) = -1\r\n   * tanh(NaN)       = NaN\r\n   *\r\n   */\r\n  P.hyperbolicTangent = P.tanh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(x.s);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 7;\r\n    Ctor.rounding = 1;\r\n\r\n    return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\r\n   * this Decimal.\r\n   *\r\n   * Domain: [-1, 1]\r\n   * Range: [0, pi]\r\n   *\r\n   * acos(x) = pi/2 - asin(x)\r\n   *\r\n   * acos(0)       = pi/2\r\n   * acos(-0)      = pi/2\r\n   * acos(1)       = 0\r\n   * acos(-1)      = pi\r\n   * acos(1/2)     = pi/3\r\n   * acos(-1/2)    = 2*pi/3\r\n   * acos(|x| > 1) = NaN\r\n   * acos(NaN)     = NaN\r\n   *\r\n   */\r\n  P.inverseCosine = P.acos = function () {\r\n    var halfPi,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      k = x.abs().cmp(1),\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding;\r\n\r\n    if (k !== -1) {\r\n      return k === 0\r\n        // |x| is 1\r\n        ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)\r\n        // |x| > 1 or x is NaN\r\n        : new Ctor(NaN);\r\n    }\r\n\r\n    if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n    // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\r\n\r\n    Ctor.precision = pr + 6;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.asin();\r\n    halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return halfPi.minus(x);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\r\n   * value of this Decimal.\r\n   *\r\n   * Domain: [1, Infinity]\r\n   * Range: [0, Infinity]\r\n   *\r\n   * acosh(x) = ln(x + sqrt(x^2 - 1))\r\n   *\r\n   * acosh(x < 1)     = NaN\r\n   * acosh(NaN)       = NaN\r\n   * acosh(Infinity)  = Infinity\r\n   * acosh(-Infinity) = NaN\r\n   * acosh(0)         = NaN\r\n   * acosh(-0)        = NaN\r\n   * acosh(1)         = 0\r\n   * acosh(-1)        = NaN\r\n   *\r\n   */\r\n  P.inverseHyperbolicCosine = P.acosh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\r\n    if (!x.isFinite()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    external = false;\r\n\r\n    x = x.times(x).minus(1).sqrt().plus(x);\r\n\r\n    external = true;\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.ln();\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\r\n   * of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * asinh(x) = ln(x + sqrt(x^2 + 1))\r\n   *\r\n   * asinh(NaN)       = NaN\r\n   * asinh(Infinity)  = Infinity\r\n   * asinh(-Infinity) = -Infinity\r\n   * asinh(0)         = 0\r\n   * asinh(-0)        = -0\r\n   *\r\n   */\r\n  P.inverseHyperbolicSine = P.asinh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\r\n    Ctor.rounding = 1;\r\n    external = false;\r\n\r\n    x = x.times(x).plus(1).sqrt().plus(x);\r\n\r\n    external = true;\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.ln();\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\r\n   * value of this Decimal.\r\n   *\r\n   * Domain: [-1, 1]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\r\n   *\r\n   * atanh(|x| > 1)   = NaN\r\n   * atanh(NaN)       = NaN\r\n   * atanh(Infinity)  = NaN\r\n   * atanh(-Infinity) = NaN\r\n   * atanh(0)         = 0\r\n   * atanh(-0)        = -0\r\n   * atanh(1)         = Infinity\r\n   * atanh(-1)        = -Infinity\r\n   *\r\n   */\r\n  P.inverseHyperbolicTangent = P.atanh = function () {\r\n    var pr, rm, wpr, xsd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    xsd = x.sd();\r\n\r\n    if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\r\n\r\n    Ctor.precision = wpr = xsd - x.e;\r\n\r\n    x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\r\n\r\n    Ctor.precision = pr + 4;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.ln();\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.times(0.5);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi/2, pi/2]\r\n   *\r\n   * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\r\n   *\r\n   * asin(0)       = 0\r\n   * asin(-0)      = -0\r\n   * asin(1/2)     = pi/6\r\n   * asin(-1/2)    = -pi/6\r\n   * asin(1)       = pi/2\r\n   * asin(-1)      = -pi/2\r\n   * asin(|x| > 1) = NaN\r\n   * asin(NaN)     = NaN\r\n   *\r\n   * TODO? Compare performance of Taylor series.\r\n   *\r\n   */\r\n  P.inverseSine = P.asin = function () {\r\n    var halfPi, k,\r\n      pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    k = x.abs().cmp(1);\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    if (k !== -1) {\r\n\r\n      // |x| is 1\r\n      if (k === 0) {\r\n        halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n        halfPi.s = x.s;\r\n        return halfPi;\r\n      }\r\n\r\n      // |x| > 1 or x is NaN\r\n      return new Ctor(NaN);\r\n    }\r\n\r\n    // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\r\n\r\n    Ctor.precision = pr + 6;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.times(2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\r\n   * of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi/2, pi/2]\r\n   *\r\n   * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n   *\r\n   * atan(0)         = 0\r\n   * atan(-0)        = -0\r\n   * atan(1)         = pi/4\r\n   * atan(-1)        = -pi/4\r\n   * atan(Infinity)  = pi/2\r\n   * atan(-Infinity) = -pi/2\r\n   * atan(NaN)       = NaN\r\n   *\r\n   */\r\n  P.inverseTangent = P.atan = function () {\r\n    var i, j, k, n, px, t, r, wpr, x2,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding;\r\n\r\n    if (!x.isFinite()) {\r\n      if (!x.s) return new Ctor(NaN);\r\n      if (pr + 4 <= PI_PRECISION) {\r\n        r = getPi(Ctor, pr + 4, rm).times(0.5);\r\n        r.s = x.s;\r\n        return r;\r\n      }\r\n    } else if (x.isZero()) {\r\n      return new Ctor(x);\r\n    } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\r\n      r = getPi(Ctor, pr + 4, rm).times(0.25);\r\n      r.s = x.s;\r\n      return r;\r\n    }\r\n\r\n    Ctor.precision = wpr = pr + 10;\r\n    Ctor.rounding = 1;\r\n\r\n    // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\r\n\r\n    // Argument reduction\r\n    // Ensure |x| < 0.42\r\n    // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\r\n\r\n    k = Math.min(28, wpr / LOG_BASE + 2 | 0);\r\n\r\n    for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));\r\n\r\n    external = false;\r\n\r\n    j = Math.ceil(wpr / LOG_BASE);\r\n    n = 1;\r\n    x2 = x.times(x);\r\n    r = new Ctor(x);\r\n    px = x;\r\n\r\n    // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n    for (; i !== -1;) {\r\n      px = px.times(x2);\r\n      t = r.minus(px.div(n += 2));\r\n\r\n      px = px.times(x2);\r\n      r = t.plus(px.div(n += 2));\r\n\r\n      if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);\r\n    }\r\n\r\n    if (k) r = r.times(2 << (k - 1));\r\n\r\n    external = true;\r\n\r\n    return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is a finite number, otherwise return false.\r\n   *\r\n   */\r\n  P.isFinite = function () {\r\n    return !!this.d;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is an integer, otherwise return false.\r\n   *\r\n   */\r\n  P.isInteger = P.isInt = function () {\r\n    return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is NaN, otherwise return false.\r\n   *\r\n   */\r\n  P.isNaN = function () {\r\n    return !this.s;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is negative, otherwise return false.\r\n   *\r\n   */\r\n  P.isNegative = P.isNeg = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is positive, otherwise return false.\r\n   *\r\n   */\r\n  P.isPositive = P.isPos = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is 0 or -0, otherwise return false.\r\n   *\r\n   */\r\n  P.isZero = function () {\r\n    return !!this.d && this.d[0] === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.lessThan = P.lt = function (y) {\r\n    return this.cmp(y) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.lessThanOrEqualTo = P.lte = function (y) {\r\n    return this.cmp(y) < 1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * If no base is specified, return log[10](arg).\r\n   *\r\n   * log[base](arg) = ln(arg) / ln(base)\r\n   *\r\n   * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\r\n   * otherwise:\r\n   *\r\n   * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\r\n   * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\r\n   * between the result and the correctly rounded result will be one ulp (unit in the last place).\r\n   *\r\n   * log[-b](a)       = NaN\r\n   * log[0](a)        = NaN\r\n   * log[1](a)        = NaN\r\n   * log[NaN](a)      = NaN\r\n   * log[Infinity](a) = NaN\r\n   * log[b](0)        = -Infinity\r\n   * log[b](-0)       = -Infinity\r\n   * log[b](-a)       = NaN\r\n   * log[b](1)        = 0\r\n   * log[b](Infinity) = Infinity\r\n   * log[b](NaN)      = NaN\r\n   *\r\n   * [base] {number|string|Decimal} The base of the logarithm.\r\n   *\r\n   */\r\n  P.logarithm = P.log = function (base) {\r\n    var isBase10, d, denominator, k, inf, num, sd, r,\r\n      arg = this,\r\n      Ctor = arg.constructor,\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding,\r\n      guard = 5;\r\n\r\n    // Default base is 10.\r\n    if (base == null) {\r\n      base = new Ctor(10);\r\n      isBase10 = true;\r\n    } else {\r\n      base = new Ctor(base);\r\n      d = base.d;\r\n\r\n      // Return NaN if base is negative, or non-finite, or is 0 or 1.\r\n      if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\r\n\r\n      isBase10 = base.eq(10);\r\n    }\r\n\r\n    d = arg.d;\r\n\r\n    // Is arg negative, non-finite, 0 or 1?\r\n    if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\r\n      return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\r\n    }\r\n\r\n    // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\r\n    // integer power of 10.\r\n    if (isBase10) {\r\n      if (d.length > 1) {\r\n        inf = true;\r\n      } else {\r\n        for (k = d[0]; k % 10 === 0;) k /= 10;\r\n        inf = k !== 1;\r\n      }\r\n    }\r\n\r\n    external = false;\r\n    sd = pr + guard;\r\n    num = naturalLogarithm(arg, sd);\r\n    denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n\r\n    // The result will have 5 rounding digits.\r\n    r = divide(num, denominator, sd, 1);\r\n\r\n    // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\r\n    // calculate 10 further digits.\r\n    //\r\n    // If the result is known to have an infinite decimal expansion, repeat this until it is clear\r\n    // that the result is above or below the boundary. Otherwise, if after calculating the 10\r\n    // further digits, the last 14 are nines, round up and assume the result is exact.\r\n    // Also assume the result is exact if the last 14 are zero.\r\n    //\r\n    // Example of a result that will be incorrectly rounded:\r\n    // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\r\n    // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\r\n    // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\r\n    // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\r\n    // place is still 2.6.\r\n    if (checkRoundingDigits(r.d, k = pr, rm)) {\r\n\r\n      do {\r\n        sd += 10;\r\n        num = naturalLogarithm(arg, sd);\r\n        denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n        r = divide(num, denominator, sd, 1);\r\n\r\n        if (!inf) {\r\n\r\n          // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\r\n          if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\r\n            r = finalise(r, pr + 1, 0);\r\n          }\r\n\r\n          break;\r\n        }\r\n      } while (checkRoundingDigits(r.d, k += 10, rm));\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, pr, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n  P.max = function () {\r\n    Array.prototype.push.call(arguments, this);\r\n    return maxOrMin(this.constructor, arguments, 'lt');\r\n  };\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n  P.min = function () {\r\n    Array.prototype.push.call(arguments, this);\r\n    return maxOrMin(this.constructor, arguments, 'gt');\r\n  };\r\n   */\r\n\r\n\r\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.minus = P.sub = function (y) {\r\n    var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // If either is not finite...\r\n    if (!x.d || !y.d) {\r\n\r\n      // Return NaN if either is NaN.\r\n      if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n      // Return y negated if x is finite and y is \u00b1Infinity.\r\n      else if (x.d) y.s = -y.s;\r\n\r\n      // Return x if y is finite and x is \u00b1Infinity.\r\n      // Return x if both are \u00b1Infinity with different signs.\r\n      // Return NaN if both are \u00b1Infinity with the same sign.\r\n      else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\r\n\r\n      return y;\r\n    }\r\n\r\n    // If signs differ...\r\n    if (x.s != y.s) {\r\n      y.s = -y.s;\r\n      return x.plus(y);\r\n    }\r\n\r\n    xd = x.d;\r\n    yd = y.d;\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    // If either is zero...\r\n    if (!xd[0] || !yd[0]) {\r\n\r\n      // Return y negated if x is zero and y is non-zero.\r\n      if (yd[0]) y.s = -y.s;\r\n\r\n      // Return x if y is zero and x is non-zero.\r\n      else if (xd[0]) y = new Ctor(x);\r\n\r\n      // Return zero if both are zero.\r\n      // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.\r\n      else return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n      return external ? finalise(y, pr, rm) : y;\r\n    }\r\n\r\n    // x and y are finite, non-zero numbers with the same sign.\r\n\r\n    // Calculate base 1e7 exponents.\r\n    e = mathfloor(y.e / LOG_BASE);\r\n    xe = mathfloor(x.e / LOG_BASE);\r\n\r\n    xd = xd.slice();\r\n    k = xe - e;\r\n\r\n    // If base 1e7 exponents differ...\r\n    if (k) {\r\n      xLTy = k < 0;\r\n\r\n      if (xLTy) {\r\n        d = xd;\r\n        k = -k;\r\n        len = yd.length;\r\n      } else {\r\n        d = yd;\r\n        e = xe;\r\n        len = xd.length;\r\n      }\r\n\r\n      // Numbers with massively different exponents would result in a very high number of\r\n      // zeros needing to be prepended, but this can be avoided while still ensuring correct\r\n      // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n      i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n      if (k > i) {\r\n        k = i;\r\n        d.length = 1;\r\n      }\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      d.reverse();\r\n      for (i = k; i--;) d.push(0);\r\n      d.reverse();\r\n\r\n    // Base 1e7 exponents equal.\r\n    } else {\r\n\r\n      // Check digits to determine which is the bigger number.\r\n\r\n      i = xd.length;\r\n      len = yd.length;\r\n      xLTy = i < len;\r\n      if (xLTy) len = i;\r\n\r\n      for (i = 0; i < len; i++) {\r\n        if (xd[i] != yd[i]) {\r\n          xLTy = xd[i] < yd[i];\r\n          break;\r\n        }\r\n      }\r\n\r\n      k = 0;\r\n    }\r\n\r\n    if (xLTy) {\r\n      d = xd;\r\n      xd = yd;\r\n      yd = d;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    len = xd.length;\r\n\r\n    // Append zeros to `xd` if shorter.\r\n    // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\r\n    for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n    // Subtract yd from xd.\r\n    for (i = yd.length; i > k;) {\r\n\r\n      if (xd[--i] < yd[i]) {\r\n        for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n        --xd[j];\r\n        xd[i] += BASE;\r\n      }\r\n\r\n      xd[i] -= yd[i];\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; xd[--len] === 0;) xd.pop();\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n    // Zero?\r\n    if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n    y.d = xd;\r\n    y.e = getBase10Exponent(xd, e);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * The result depends on the modulo mode.\r\n   *\r\n   */\r\n  P.modulo = P.mod = function (y) {\r\n    var q,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // Return NaN if x is \u00b1Infinity or NaN, or y is NaN or \u00b10.\r\n    if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\r\n\r\n    // Return x if y is \u00b1Infinity or x is \u00b10.\r\n    if (!y.d || x.d && !x.d[0]) {\r\n      return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\r\n    }\r\n\r\n    // Prevent rounding of intermediate calculations.\r\n    external = false;\r\n\r\n    if (Ctor.modulo == 9) {\r\n\r\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n      // result = x - q * y    where  0 <= result < abs(y)\r\n      q = divide(x, y.abs(), 0, 3, 1);\r\n      q.s *= y.s;\r\n    } else {\r\n      q = divide(x, y, 0, Ctor.modulo, 1);\r\n    }\r\n\r\n    q = q.times(y);\r\n\r\n    external = true;\r\n\r\n    return x.minus(q);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n   * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.naturalExponential = P.exp = function () {\r\n    return naturalExponential(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.naturalLogarithm = P.ln = function () {\r\n    return naturalLogarithm(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n   * -1.\r\n   *\r\n   */\r\n  P.negated = P.neg = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = -x.s;\r\n    return finalise(x);\r\n  };\r\n\r\n\r\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.plus = P.add = function (y) {\r\n    var carry, d, e, i, k, len, pr, rm, xd, yd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // If either is not finite...\r\n    if (!x.d || !y.d) {\r\n\r\n      // Return NaN if either is NaN.\r\n      if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n      // Return x if y is finite and x is \u00b1Infinity.\r\n      // Return x if both are \u00b1Infinity with the same sign.\r\n      // Return NaN if both are \u00b1Infinity with different signs.\r\n      // Return y if x is finite and y is \u00b1Infinity.\r\n      else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\r\n\r\n      return y;\r\n    }\r\n\r\n     // If signs differ...\r\n    if (x.s != y.s) {\r\n      y.s = -y.s;\r\n      return x.minus(y);\r\n    }\r\n\r\n    xd = x.d;\r\n    yd = y.d;\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    // If either is zero...\r\n    if (!xd[0] || !yd[0]) {\r\n\r\n      // Return x if y is zero.\r\n      // Return y if y is non-zero.\r\n      if (!yd[0]) y = new Ctor(x);\r\n\r\n      return external ? finalise(y, pr, rm) : y;\r\n    }\r\n\r\n    // x and y are finite, non-zero numbers with the same sign.\r\n\r\n    // Calculate base 1e7 exponents.\r\n    k = mathfloor(x.e / LOG_BASE);\r\n    e = mathfloor(y.e / LOG_BASE);\r\n\r\n    xd = xd.slice();\r\n    i = k - e;\r\n\r\n    // If base 1e7 exponents differ...\r\n    if (i) {\r\n\r\n      if (i < 0) {\r\n        d = xd;\r\n        i = -i;\r\n        len = yd.length;\r\n      } else {\r\n        d = yd;\r\n        e = k;\r\n        len = xd.length;\r\n      }\r\n\r\n      // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n      k = Math.ceil(pr / LOG_BASE);\r\n      len = k > len ? k + 1 : len + 1;\r\n\r\n      if (i > len) {\r\n        i = len;\r\n        d.length = 1;\r\n      }\r\n\r\n      // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n      d.reverse();\r\n      for (; i--;) d.push(0);\r\n      d.reverse();\r\n    }\r\n\r\n    len = xd.length;\r\n    i = yd.length;\r\n\r\n    // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n    if (len - i < 0) {\r\n      i = len;\r\n      d = yd;\r\n      yd = xd;\r\n      xd = d;\r\n    }\r\n\r\n    // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n    for (carry = 0; i;) {\r\n      carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n      xd[i] %= BASE;\r\n    }\r\n\r\n    if (carry) {\r\n      xd.unshift(carry);\r\n      ++e;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n    y.d = xd;\r\n    y.e = getBase10Exponent(xd, e);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the number of significant digits of the value of this Decimal.\r\n   *\r\n   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n   *\r\n   */\r\n  P.precision = P.sd = function (z) {\r\n    var k,\r\n      x = this;\r\n\r\n    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n    if (x.d) {\r\n      k = getPrecision(x.d);\r\n      if (z && x.e + 1 > k) k = x.e + 1;\r\n    } else {\r\n      k = NaN;\r\n    }\r\n\r\n    return k;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n   * rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.round = function () {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n   *\r\n   * sin(0)         = 0\r\n   * sin(-0)        = -0\r\n   * sin(Infinity)  = NaN\r\n   * sin(-Infinity) = NaN\r\n   * sin(NaN)       = NaN\r\n   *\r\n   */\r\n  P.sine = P.sin = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n    Ctor.rounding = 1;\r\n\r\n    x = sine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N)  =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I)  =  I\r\n   *  sqrt(0)  =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var m, n, sd, r, rep, t,\r\n      x = this,\r\n      d = x.d,\r\n      e = x.e,\r\n      s = x.s,\r\n      Ctor = x.constructor;\r\n\r\n    // Negative/NaN/Infinity/zero?\r\n    if (s !== 1 || !d || !d[0]) {\r\n      return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\r\n    }\r\n\r\n    external = false;\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+x);\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = digitsToString(d);\r\n\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(n);\r\n      e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new Ctor(n);\r\n    } else {\r\n      r = new Ctor(s.toString());\r\n    }\r\n\r\n    sd = (e = Ctor.precision) + 3;\r\n\r\n    // Newton-Raphson iteration.\r\n    for (;;) {\r\n      t = r;\r\n      r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\r\n\r\n      // TODO? Replace with for-loop and checkRoundingDigits.\r\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n        n = n.slice(sd - 3, sd + 1);\r\n\r\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n        // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n        if (n == '9999' || !rep && n == '4999') {\r\n\r\n          // On the first iteration only, check to see if rounding up gives the exact result as the\r\n          // nines may infinitely repeat.\r\n          if (!rep) {\r\n            finalise(t, e + 1, 0);\r\n\r\n            if (t.times(t).eq(x)) {\r\n              r = t;\r\n              break;\r\n            }\r\n          }\r\n\r\n          sd += 4;\r\n          rep = 1;\r\n        } else {\r\n\r\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n          // If not, then there are further digits and m will be truthy.\r\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n            // Truncate to the first rounding digit.\r\n            finalise(r, e + 1, 1);\r\n            m = !r.times(r).eq(x);\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, e, Ctor.rounding, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * tan(0)         = 0\r\n   * tan(-0)        = -0\r\n   * tan(Infinity)  = NaN\r\n   * tan(-Infinity) = NaN\r\n   * tan(NaN)       = NaN\r\n   *\r\n   */\r\n  P.tangent = P.tan = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 10;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.sin();\r\n    x.s = 1;\r\n    x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.times = P.mul = function (y) {\r\n    var carry, e, i, k, r, rL, t, xdL, ydL,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      xd = x.d,\r\n      yd = (y = new Ctor(y)).d;\r\n\r\n    y.s *= x.s;\r\n\r\n     // If either is NaN, \u00b1Infinity or \u00b10...\r\n    if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n      return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd\r\n\r\n        // Return NaN if either is NaN.\r\n        // Return NaN if x is \u00b10 and y is \u00b1Infinity, or y is \u00b10 and x is \u00b1Infinity.\r\n        ? NaN\r\n\r\n        // Return \u00b1Infinity if either is \u00b1Infinity.\r\n        // Return \u00b10 if either is \u00b10.\r\n        : !xd || !yd ? y.s / 0 : y.s * 0);\r\n    }\r\n\r\n    e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\r\n    xdL = xd.length;\r\n    ydL = yd.length;\r\n\r\n    // Ensure xd points to the longer array.\r\n    if (xdL < ydL) {\r\n      r = xd;\r\n      xd = yd;\r\n      yd = r;\r\n      rL = xdL;\r\n      xdL = ydL;\r\n      ydL = rL;\r\n    }\r\n\r\n    // Initialise the result array with zeros.\r\n    r = [];\r\n    rL = xdL + ydL;\r\n    for (i = rL; i--;) r.push(0);\r\n\r\n    // Multiply!\r\n    for (i = ydL; --i >= 0;) {\r\n      carry = 0;\r\n      for (k = xdL + i; k > i;) {\r\n        t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n        r[k--] = t % BASE | 0;\r\n        carry = t / BASE | 0;\r\n      }\r\n\r\n      r[k] = (r[k] + carry) % BASE | 0;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; !r[--rL];) r.pop();\r\n\r\n    if (carry) ++e;\r\n    else r.shift();\r\n\r\n    y.d = r;\r\n    y.e = getBase10Exponent(r, e);\r\n\r\n    return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 2, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toBinary = function (sd, rm) {\r\n    return toStringBinary(this, 2, sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n   *\r\n   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toDecimalPlaces = P.toDP = function (dp, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    x = new Ctor(x);\r\n    if (dp === void 0) return x;\r\n\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    return finalise(x, dp + x.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in exponential notation rounded to\r\n   * `dp` fixed decimal places using rounding mode `rounding`.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    var str,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (dp === void 0) {\r\n      str = finiteToString(x, true);\r\n    } else {\r\n      checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      x = finalise(new Ctor(x), dp + 1, rm);\r\n      str = finiteToString(x, true, dp + 1);\r\n    }\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n   * omitted.\r\n   *\r\n   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   * (-0).toFixed(3) is '0.000'.\r\n   * (-0.5).toFixed(0) is '-0'.\r\n   *\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    var str, y,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (dp === void 0) {\r\n      str = finiteToString(x);\r\n    } else {\r\n      checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      y = finalise(new Ctor(x), dp + x.e + 1, rm);\r\n      str = finiteToString(y, false, dp + y.e + 1);\r\n    }\r\n\r\n    // To determine whether to add the minus sign look at the value before it was rounded,\r\n    // i.e. look at `x` rather than `y`.\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return an array representing the value of this Decimal as a simple fraction with an integer\r\n   * numerator and an integer denominator.\r\n   *\r\n   * The denominator will be a positive non-zero value less than or equal to the specified maximum\r\n   * denominator. If a maximum denominator is not specified, the denominator will be the lowest\r\n   * value necessary to represent the number exactly.\r\n   *\r\n   * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\r\n   *\r\n   */\r\n  P.toFraction = function (maxD) {\r\n    var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,\r\n      x = this,\r\n      xd = x.d,\r\n      Ctor = x.constructor;\r\n\r\n    if (!xd) return new Ctor(x);\r\n\r\n    n1 = d0 = new Ctor(1);\r\n    d1 = n0 = new Ctor(0);\r\n\r\n    d = new Ctor(d1);\r\n    e = d.e = getPrecision(xd) - x.e - 1;\r\n    k = e % LOG_BASE;\r\n    d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\r\n\r\n    if (maxD == null) {\r\n\r\n      // d is 10**e, the minimum max-denominator needed.\r\n      maxD = e > 0 ? d : n1;\r\n    } else {\r\n      n = new Ctor(maxD);\r\n      if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\r\n      maxD = n.gt(d) ? (e > 0 ? d : n1) : n;\r\n    }\r\n\r\n    external = false;\r\n    n = new Ctor(digitsToString(xd));\r\n    pr = Ctor.precision;\r\n    Ctor.precision = e = xd.length * LOG_BASE * 2;\r\n\r\n    for (;;)  {\r\n      q = divide(n, d, 0, 1, 1);\r\n      d2 = d0.plus(q.times(d1));\r\n      if (d2.cmp(maxD) == 1) break;\r\n      d0 = d1;\r\n      d1 = d2;\r\n      d2 = n1;\r\n      n1 = n0.plus(q.times(d2));\r\n      n0 = d2;\r\n      d2 = d;\r\n      d = n.minus(q.times(d2));\r\n      n = d2;\r\n    }\r\n\r\n    d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\r\n    n0 = n0.plus(d2.times(n1));\r\n    d0 = d0.plus(d2.times(d1));\r\n    n0.s = n1.s = x.s;\r\n\r\n    // Determine which fraction is closer to x, n0/d0 or n1/d1?\r\n    r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1\r\n        ? [n1, d1] : [n0, d0];\r\n\r\n    Ctor.precision = pr;\r\n    external = true;\r\n\r\n    return r;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 16, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toHexadecimal = P.toHex = function (sd, rm) {\r\n    return toStringBinary(this, 16, sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding\r\n   * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.\r\n   *\r\n   * The return value will always have the same sign as this Decimal, unless either this Decimal\r\n   * or `y` is NaN, in which case the return value will be also be NaN.\r\n   *\r\n   * The return value is not affected by the value of `precision`.\r\n   *\r\n   * y {number|string|Decimal} The magnitude to round to a multiple of.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * 'toNearest() rounding mode not an integer: {rm}'\r\n   * 'toNearest() rounding mode out of range: {rm}'\r\n   *\r\n   */\r\n  P.toNearest = function (y, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    x = new Ctor(x);\r\n\r\n    if (y == null) {\r\n\r\n      // If x is not finite, return x.\r\n      if (!x.d) return x;\r\n\r\n      y = new Ctor(1);\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      y = new Ctor(y);\r\n      if (rm === void 0) {\r\n        rm = Ctor.rounding;\r\n      } else {\r\n        checkInt32(rm, 0, 8);\r\n      }\r\n\r\n      // If x is not finite, return x if y is not NaN, else NaN.\r\n      if (!x.d) return y.s ? x : y;\r\n\r\n      // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\r\n      if (!y.d) {\r\n        if (y.s) y.s = x.s;\r\n        return y;\r\n      }\r\n    }\r\n\r\n    // If y is not zero, calculate the nearest multiple of y to x.\r\n    if (y.d[0]) {\r\n      external = false;\r\n      x = divide(x, y, 0, rm, 1).times(y);\r\n      external = true;\r\n      finalise(x);\r\n\r\n    // If y is zero, return zero with the sign of x.\r\n    } else {\r\n      y.s = x.s;\r\n      x = y;\r\n    }\r\n\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this Decimal converted to a number primitive.\r\n   * Zero keeps its sign.\r\n   *\r\n   */\r\n  P.toNumber = function () {\r\n    return +this;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 8, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toOctal = function (sd, rm) {\r\n    return toStringBinary(this, 8, sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\r\n   * to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * ECMAScript compliant.\r\n   *\r\n   *   pow(x, NaN)                           = NaN\r\n   *   pow(x, \u00b10)                            = 1\r\n\r\n   *   pow(NaN, non-zero)                    = NaN\r\n   *   pow(abs(x) > 1, +Infinity)            = +Infinity\r\n   *   pow(abs(x) > 1, -Infinity)            = +0\r\n   *   pow(abs(x) == 1, \u00b1Infinity)           = NaN\r\n   *   pow(abs(x) < 1, +Infinity)            = +0\r\n   *   pow(abs(x) < 1, -Infinity)            = +Infinity\r\n   *   pow(+Infinity, y > 0)                 = +Infinity\r\n   *   pow(+Infinity, y < 0)                 = +0\r\n   *   pow(-Infinity, odd integer > 0)       = -Infinity\r\n   *   pow(-Infinity, even integer > 0)      = +Infinity\r\n   *   pow(-Infinity, odd integer < 0)       = -0\r\n   *   pow(-Infinity, even integer < 0)      = +0\r\n   *   pow(+0, y > 0)                        = +0\r\n   *   pow(+0, y < 0)                        = +Infinity\r\n   *   pow(-0, odd integer > 0)              = -0\r\n   *   pow(-0, even integer > 0)             = +0\r\n   *   pow(-0, odd integer < 0)              = -Infinity\r\n   *   pow(-0, even integer < 0)             = +Infinity\r\n   *   pow(finite x < 0, finite non-integer) = NaN\r\n   *\r\n   * For non-integer or very large exponents pow(x, y) is calculated using\r\n   *\r\n   *   x^y = exp(y*ln(x))\r\n   *\r\n   * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\r\n   * probability of an incorrectly rounded result\r\n   * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\r\n   * i.e. 1 in 250,000,000,000,000\r\n   *\r\n   * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\r\n   *\r\n   * y {number|string|Decimal} The power to which to raise this Decimal.\r\n   *\r\n   */\r\n  P.toPower = P.pow = function (y) {\r\n    var e, k, pr, r, rm, s,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      yn = +(y = new Ctor(y));\r\n\r\n    // Either \u00b1Infinity, NaN or \u00b10?\r\n    if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\r\n\r\n    x = new Ctor(x);\r\n\r\n    if (x.eq(1)) return x;\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    if (y.eq(1)) return finalise(x, pr, rm);\r\n\r\n    // y exponent\r\n    e = mathfloor(y.e / LOG_BASE);\r\n\r\n    // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n    if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n      r = intPow(Ctor, x, k, pr);\r\n      return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\r\n    }\r\n\r\n    s = x.s;\r\n\r\n    // if x is negative\r\n    if (s < 0) {\r\n\r\n      // if y is not an integer\r\n      if (e < y.d.length - 1) return new Ctor(NaN);\r\n\r\n      // Result is positive if x is negative and the last digit of integer y is even.\r\n      if ((y.d[e] & 1) == 0) s = 1;\r\n\r\n      // if x.eq(-1)\r\n      if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\r\n        x.s = s;\r\n        return x;\r\n      }\r\n    }\r\n\r\n    // Estimate result exponent.\r\n    // x^y = 10^e,  where e = y * log10(x)\r\n    // log10(x) = log10(x_significand) + x_exponent\r\n    // log10(x_significand) = ln(x_significand) / ln(10)\r\n    k = mathpow(+x, yn);\r\n    e = k == 0 || !isFinite(k)\r\n      ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))\r\n      : new Ctor(k + '').e;\r\n\r\n    // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\r\n\r\n    // Overflow/underflow?\r\n    if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\r\n\r\n    external = false;\r\n    Ctor.rounding = x.s = 1;\r\n\r\n    // Estimate the extra guard digits needed to ensure five correct rounding digits from\r\n    // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\r\n    // new Decimal(2.32456).pow('2087987436534566.46411')\r\n    // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\r\n    k = Math.min(12, (e + '').length);\r\n\r\n    // r = x^y = exp(y*ln(x))\r\n    r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\r\n\r\n    // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)\r\n    if (r.d) {\r\n\r\n      // Truncate to the required precision plus five rounding digits.\r\n      r = finalise(r, pr + 5, 1);\r\n\r\n      // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\r\n      // the result.\r\n      if (checkRoundingDigits(r.d, pr, rm)) {\r\n        e = pr + 10;\r\n\r\n        // Truncate to the increased precision plus five rounding digits.\r\n        r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\r\n\r\n        // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\r\n        if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\r\n          r = finalise(r, pr + 1, 0);\r\n        }\r\n      }\r\n    }\r\n\r\n    r.s = s;\r\n    external = true;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(r, pr, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    var str,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (sd === void 0) {\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n    } else {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      x = finalise(new Ctor(x), sd, rm);\r\n      str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\r\n    }\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n   * omitted.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * 'toSD() digits out of range: {sd}'\r\n   * 'toSD() digits not an integer: {sd}'\r\n   * 'toSD() rounding mode not an integer: {rm}'\r\n   * 'toSD() rounding mode out of range: {rm}'\r\n   *\r\n   */\r\n  P.toSignificantDigits = P.toSD = function (sd, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (sd === void 0) {\r\n      sd = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n    }\r\n\r\n    return finalise(new Ctor(x), sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   *\r\n   * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n   *\r\n   */\r\n  P.toString = function () {\r\n    var x = this,\r\n      Ctor = x.constructor,\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\r\n   *\r\n   */\r\n  P.truncated = P.trunc = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   * Unlike `toString`, negative zero will include the minus sign.\r\n   *\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    var x = this,\r\n      Ctor = x.constructor,\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n    return x.isNeg() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n  // Add aliases to match BigDecimal method names.\r\n  // P.add = P.plus;\r\n  P.subtract = P.minus;\r\n  P.multiply = P.times;\r\n  P.divide = P.div;\r\n  P.remainder = P.mod;\r\n  P.compareTo = P.cmp;\r\n  P.negate = P.neg;\r\n   */\r\n\r\n\r\n  // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n  /*\r\n   *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\r\n   *                           finiteToString, naturalExponential, naturalLogarithm\r\n   *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\r\n   *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\r\n   *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\r\n   *  convertBase              toStringBinary, parseOther\r\n   *  cos                      P.cos\r\n   *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\r\n   *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\r\n   *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\r\n   *                           taylorSeries, atan2, parseOther\r\n   *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\r\n   *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\r\n   *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\r\n   *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\r\n   *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\r\n   *                           P.truncated, divide, getLn10, getPi, naturalExponential,\r\n   *                           naturalLogarithm, ceil, floor, round, trunc\r\n   *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\r\n   *                           toStringBinary\r\n   *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\r\n   *  getLn10                  P.logarithm, naturalLogarithm\r\n   *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\r\n   *  getPrecision             P.precision, P.toFraction\r\n   *  getZeroString            digitsToString, finiteToString\r\n   *  intPow                   P.toPower, parseOther\r\n   *  isOdd                    toLessThanHalfPi\r\n   *  maxOrMin                 max, min\r\n   *  naturalExponential       P.naturalExponential, P.toPower\r\n   *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\r\n   *                           P.toPower, naturalExponential\r\n   *  nonFiniteToString        finiteToString, toStringBinary\r\n   *  parseDecimal             Decimal\r\n   *  parseOther               Decimal\r\n   *  sin                      P.sin\r\n   *  taylorSeries             P.cosh, P.sinh, cos, sin\r\n   *  toLessThanHalfPi         P.cos, P.sin\r\n   *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\r\n   *  truncate                 intPow\r\n   *\r\n   *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\r\n   *                           naturalLogarithm, config, parseOther, random, Decimal\r\n   */\r\n\r\n\r\n  function digitsToString(d) {\r\n    var i, k, ws,\r\n      indexOfLastWord = d.length - 1,\r\n      str = '',\r\n      w = d[0];\r\n\r\n    if (indexOfLastWord > 0) {\r\n      str += w;\r\n      for (i = 1; i < indexOfLastWord; i++) {\r\n        ws = d[i] + '';\r\n        k = LOG_BASE - ws.length;\r\n        if (k) str += getZeroString(k);\r\n        str += ws;\r\n      }\r\n\r\n      w = d[i];\r\n      ws = w + '';\r\n      k = LOG_BASE - ws.length;\r\n      if (k) str += getZeroString(k);\r\n    } else if (w === 0) {\r\n      return '0';\r\n    }\r\n\r\n    // Remove trailing zeros of last w.\r\n    for (; w % 10 === 0;) w /= 10;\r\n\r\n    return str + w;\r\n  }\r\n\r\n\r\n  function checkInt32(i, min, max) {\r\n    if (i !== ~~i || i < min || i > max) {\r\n      throw Error(invalidArgument + i);\r\n    }\r\n  }\r\n\r\n\r\n  /*\r\n   * Check 5 rounding digits if `repeating` is null, 4 otherwise.\r\n   * `repeating == null` if caller is `log` or `pow`,\r\n   * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\r\n   */\r\n  function checkRoundingDigits(d, i, rm, repeating) {\r\n    var di, k, r, rd;\r\n\r\n    // Get the length of the first word of the array d.\r\n    for (k = d[0]; k >= 10; k /= 10) --i;\r\n\r\n    // Is the rounding digit in the first word of d?\r\n    if (--i < 0) {\r\n      i += LOG_BASE;\r\n      di = 0;\r\n    } else {\r\n      di = Math.ceil((i + 1) / LOG_BASE);\r\n      i %= LOG_BASE;\r\n    }\r\n\r\n    // i is the index (0 - 6) of the rounding digit.\r\n    // E.g. if within the word 3487563 the first rounding digit is 5,\r\n    // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\r\n    k = mathpow(10, LOG_BASE - i);\r\n    rd = d[di] % k | 0;\r\n\r\n    if (repeating == null) {\r\n      if (i < 3) {\r\n        if (i == 0) rd = rd / 100 | 0;\r\n        else if (i == 1) rd = rd / 10 | 0;\r\n        r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\r\n      } else {\r\n        r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&\r\n          (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||\r\n            (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\r\n      }\r\n    } else {\r\n      if (i < 4) {\r\n        if (i == 0) rd = rd / 1000 | 0;\r\n        else if (i == 1) rd = rd / 100 | 0;\r\n        else if (i == 2) rd = rd / 10 | 0;\r\n        r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\r\n      } else {\r\n        r = ((repeating || rm < 4) && rd + 1 == k ||\r\n        (!repeating && rm > 3) && rd + 1 == k / 2) &&\r\n          (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\r\n      }\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  // Convert string of `baseIn` to an array of numbers of `baseOut`.\r\n  // Eg. convertBase('255', 10, 16) returns [15, 15].\r\n  // Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\n  function convertBase(str, baseIn, baseOut) {\r\n    var j,\r\n      arr = [0],\r\n      arrL,\r\n      i = 0,\r\n      strL = str.length;\r\n\r\n    for (; i < strL;) {\r\n      for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;\r\n      arr[0] += NUMERALS.indexOf(str.charAt(i++));\r\n      for (j = 0; j < arr.length; j++) {\r\n        if (arr[j] > baseOut - 1) {\r\n          if (arr[j + 1] === void 0) arr[j + 1] = 0;\r\n          arr[j + 1] += arr[j] / baseOut | 0;\r\n          arr[j] %= baseOut;\r\n        }\r\n      }\r\n    }\r\n\r\n    return arr.reverse();\r\n  }\r\n\r\n\r\n  /*\r\n   * cos(x) = 1 - x^2/2! + x^4/4! - ...\r\n   * |x| < pi/2\r\n   *\r\n   */\r\n  function cosine(Ctor, x) {\r\n    var k, y,\r\n      len = x.d.length;\r\n\r\n    // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\r\n    // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    if (len < 32) {\r\n      k = Math.ceil(len / 3);\r\n      y = (1 / tinyPow(4, k)).toString();\r\n    } else {\r\n      k = 16;\r\n      y = '2.3283064365386962890625e-10';\r\n    }\r\n\r\n    Ctor.precision += k;\r\n\r\n    x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\r\n\r\n    // Reverse argument reduction\r\n    for (var i = k; i--;) {\r\n      var cos2x = x.times(x);\r\n      x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\r\n    }\r\n\r\n    Ctor.precision -= k;\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Perform division in the specified base.\r\n   */\r\n  var divide = (function () {\r\n\r\n    // Assumes non-zero x and k, and hence non-zero result.\r\n    function multiplyInteger(x, k, base) {\r\n      var temp,\r\n        carry = 0,\r\n        i = x.length;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        temp = x[i] * k + carry;\r\n        x[i] = temp % base | 0;\r\n        carry = temp / base | 0;\r\n      }\r\n\r\n      if (carry) x.unshift(carry);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, r;\r\n\r\n      if (aL != bL) {\r\n        r = aL > bL ? 1 : -1;\r\n      } else {\r\n        for (i = r = 0; i < aL; i++) {\r\n          if (a[i] != b[i]) {\r\n            r = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return r;\r\n    }\r\n\r\n    function subtract(a, b, aL, base) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * base + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1;) a.shift();\r\n    }\r\n\r\n    return function (x, y, pr, rm, dp, base) {\r\n      var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,\r\n        yL, yz,\r\n        Ctor = x.constructor,\r\n        sign = x.s == y.s ? 1 : -1,\r\n        xd = x.d,\r\n        yd = y.d;\r\n\r\n      // Either NaN, Infinity or 0?\r\n      if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n        return new Ctor(// Return NaN if either NaN, or both Infinity or 0.\r\n          !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :\r\n\r\n          // Return \u00b10 if x is 0 or y is \u00b1Infinity, or return \u00b1Infinity as y is 0.\r\n          xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\r\n      }\r\n\r\n      if (base) {\r\n        logBase = 1;\r\n        e = x.e - y.e;\r\n      } else {\r\n        base = BASE;\r\n        logBase = LOG_BASE;\r\n        e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\r\n      }\r\n\r\n      yL = yd.length;\r\n      xL = xd.length;\r\n      q = new Ctor(sign);\r\n      qd = q.d = [];\r\n\r\n      // Result exponent may be one less than e.\r\n      // The digit array of a Decimal from toStringBinary may have trailing zeros.\r\n      for (i = 0; yd[i] == (xd[i] || 0); i++);\r\n\r\n      if (yd[i] > (xd[i] || 0)) e--;\r\n\r\n      if (pr == null) {\r\n        sd = pr = Ctor.precision;\r\n        rm = Ctor.rounding;\r\n      } else if (dp) {\r\n        sd = pr + (x.e - y.e) + 1;\r\n      } else {\r\n        sd = pr;\r\n      }\r\n\r\n      if (sd < 0) {\r\n        qd.push(1);\r\n        more = true;\r\n      } else {\r\n\r\n        // Convert precision in number of base 10 digits to base 1e7 digits.\r\n        sd = sd / logBase + 2 | 0;\r\n        i = 0;\r\n\r\n        // divisor < 1e7\r\n        if (yL == 1) {\r\n          k = 0;\r\n          yd = yd[0];\r\n          sd++;\r\n\r\n          // k is the carry.\r\n          for (; (i < xL || k) && sd--; i++) {\r\n            t = k * base + (xd[i] || 0);\r\n            qd[i] = t / yd | 0;\r\n            k = t % yd | 0;\r\n          }\r\n\r\n          more = k || i < xL;\r\n\r\n        // divisor >= 1e7\r\n        } else {\r\n\r\n          // Normalise xd and yd so highest order digit of yd is >= base/2\r\n          k = base / (yd[0] + 1) | 0;\r\n\r\n          if (k > 1) {\r\n            yd = multiplyInteger(yd, k, base);\r\n            xd = multiplyInteger(xd, k, base);\r\n            yL = yd.length;\r\n            xL = xd.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xd.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL;) rem[remL++] = 0;\r\n\r\n          yz = yd.slice();\r\n          yz.unshift(0);\r\n          yd0 = yd[0];\r\n\r\n          if (yd[1] >= base / 2) ++yd0;\r\n\r\n          do {\r\n            k = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yd, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, k.\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // k will be how many times the divisor goes into the current remainder.\r\n              k = rem0 / yd0 | 0;\r\n\r\n              //  Algorithm:\r\n              //  1. product = divisor * trial digit (k)\r\n              //  2. if product > remainder: product -= divisor, k--\r\n              //  3. remainder -= product\r\n              //  4. if product was < remainder at 2:\r\n              //    5. compare new remainder and divisor\r\n              //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n              if (k > 1) {\r\n                if (k >= base) k = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiplyInteger(yd, k, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                cmp = compare(prod, rem, prodL, remL);\r\n\r\n                // product > remainder.\r\n                if (cmp == 1) {\r\n                  k--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yd, prodL, base);\r\n                }\r\n              } else {\r\n\r\n                // cmp is -1.\r\n                // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n                // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n                if (k == 0) cmp = k = 1;\r\n                prod = yd.slice();\r\n              }\r\n\r\n              prodL = prod.length;\r\n              if (prodL < remL) prod.unshift(0);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n\r\n              // If product was < previous remainder.\r\n              if (cmp == -1) {\r\n                remL = rem.length;\r\n\r\n                // Compare divisor and new remainder.\r\n                cmp = compare(yd, rem, yL, remL);\r\n\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                if (cmp < 1) {\r\n                  k++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yd, remL, base);\r\n                }\r\n              }\r\n\r\n              remL = rem.length;\r\n            } else if (cmp === 0) {\r\n              k++;\r\n              rem = [0];\r\n            }    // if cmp === 1, k will be 0\r\n\r\n            // Add the next digit, k, to the result array.\r\n            qd[i++] = k;\r\n\r\n            // Update the remainder.\r\n            if (cmp && rem[0]) {\r\n              rem[remL++] = xd[xi] || 0;\r\n            } else {\r\n              rem = [xd[xi]];\r\n              remL = 1;\r\n            }\r\n\r\n          } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n\r\n          more = rem[0] !== void 0;\r\n        }\r\n\r\n        // Leading zero?\r\n        if (!qd[0]) qd.shift();\r\n      }\r\n\r\n      // logBase is 1 when divide is being used for base conversion.\r\n      if (logBase == 1) {\r\n        q.e = e;\r\n        inexact = more;\r\n      } else {\r\n\r\n        // To calculate q.e, first get the number of digits of qd[0].\r\n        for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;\r\n        q.e = i + e * logBase - 1;\r\n\r\n        finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\r\n      }\r\n\r\n      return q;\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Round `x` to `sd` significant digits using rounding mode `rm`.\r\n   * Check for over/under-flow.\r\n   */\r\n   function finalise(x, sd, rm, isTruncated) {\r\n    var digits, i, j, k, rd, roundUp, w, xd, xdi,\r\n      Ctor = x.constructor;\r\n\r\n    // Don't round if sd is null or undefined.\r\n    out: if (sd != null) {\r\n      xd = x.d;\r\n\r\n      // Infinity/NaN.\r\n      if (!xd) return x;\r\n\r\n      // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      // w: the word of xd containing rd, a base 1e7 number.\r\n      // xdi: the index of w within xd.\r\n      // digits: the number of digits of w.\r\n      // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n      // they had leading zeros)\r\n      // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n      // Get the length of the first word of the digits array xd.\r\n      for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;\r\n      i = sd - digits;\r\n\r\n      // Is the rounding digit in the first word of xd?\r\n      if (i < 0) {\r\n        i += LOG_BASE;\r\n        j = sd;\r\n        w = xd[xdi = 0];\r\n\r\n        // Get the rounding digit at index j of w.\r\n        rd = w / mathpow(10, digits - j - 1) % 10 | 0;\r\n      } else {\r\n        xdi = Math.ceil((i + 1) / LOG_BASE);\r\n        k = xd.length;\r\n        if (xdi >= k) {\r\n          if (isTruncated) {\r\n\r\n            // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\r\n            for (; k++ <= xdi;) xd.push(0);\r\n            w = rd = 0;\r\n            digits = 1;\r\n            i %= LOG_BASE;\r\n            j = i - LOG_BASE + 1;\r\n          } else {\r\n            break out;\r\n          }\r\n        } else {\r\n          w = k = xd[xdi];\r\n\r\n          // Get the number of digits of w.\r\n          for (digits = 1; k >= 10; k /= 10) digits++;\r\n\r\n          // Get the index of rd within w.\r\n          i %= LOG_BASE;\r\n\r\n          // Get the index of rd within w, adjusted for leading zeros.\r\n          // The number of leading zeros of w is given by LOG_BASE - digits.\r\n          j = i - LOG_BASE + digits;\r\n\r\n          // Get the rounding digit at index j of w.\r\n          rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\r\n        }\r\n      }\r\n\r\n      // Are there any non-zero digits after the rounding digit?\r\n      isTruncated = isTruncated || sd < 0 ||\r\n        xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\r\n\r\n      // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\r\n      // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\r\n      // will give 714.\r\n\r\n      roundUp = rm < 4\r\n        ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n        : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n            rm == (x.s < 0 ? 8 : 7));\r\n\r\n      if (sd < 1 || !xd[0]) {\r\n        xd.length = 0;\r\n        if (roundUp) {\r\n\r\n          // Convert sd to decimal places.\r\n          sd -= x.e + 1;\r\n\r\n          // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n          xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n          x.e = -sd || 0;\r\n        } else {\r\n\r\n          // Zero.\r\n          xd[0] = x.e = 0;\r\n        }\r\n\r\n        return x;\r\n      }\r\n\r\n      // Remove excess digits.\r\n      if (i == 0) {\r\n        xd.length = xdi;\r\n        k = 1;\r\n        xdi--;\r\n      } else {\r\n        xd.length = xdi + 1;\r\n        k = mathpow(10, LOG_BASE - i);\r\n\r\n        // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n        // j > 0 means i > number of leading zeros of w.\r\n        xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\r\n      }\r\n\r\n      if (roundUp) {\r\n        for (;;) {\r\n\r\n          // Is the digit to be rounded up in the first word of xd?\r\n          if (xdi == 0) {\r\n\r\n            // i will be the length of xd[0] before k is added.\r\n            for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;\r\n            j = xd[0] += k;\r\n            for (k = 1; j >= 10; j /= 10) k++;\r\n\r\n            // if i != k the length has increased.\r\n            if (i != k) {\r\n              x.e++;\r\n              if (xd[0] == BASE) xd[0] = 1;\r\n            }\r\n\r\n            break;\r\n          } else {\r\n            xd[xdi] += k;\r\n            if (xd[xdi] != BASE) break;\r\n            xd[xdi--] = 0;\r\n            k = 1;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Remove trailing zeros.\r\n      for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n    }\r\n\r\n    if (external) {\r\n\r\n      // Overflow?\r\n      if (x.e > Ctor.maxE) {\r\n\r\n        // Infinity.\r\n        x.d = null;\r\n        x.e = NaN;\r\n\r\n      // Underflow?\r\n      } else if (x.e < Ctor.minE) {\r\n\r\n        // Zero.\r\n        x.e = 0;\r\n        x.d = [0];\r\n        // Ctor.underflow = true;\r\n      } // else Ctor.underflow = false;\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  function finiteToString(x, isExp, sd) {\r\n    if (!x.isFinite()) return nonFiniteToString(x);\r\n    var k,\r\n      e = x.e,\r\n      str = digitsToString(x.d),\r\n      len = str.length;\r\n\r\n    if (isExp) {\r\n      if (sd && (k = sd - len) > 0) {\r\n        str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n      } else if (len > 1) {\r\n        str = str.charAt(0) + '.' + str.slice(1);\r\n      }\r\n\r\n      str = str + (x.e < 0 ? 'e' : 'e+') + x.e;\r\n    } else if (e < 0) {\r\n      str = '0.' + getZeroString(-e - 1) + str;\r\n      if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n    } else if (e >= len) {\r\n      str += getZeroString(e + 1 - len);\r\n      if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n    } else {\r\n      if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n      if (sd && (k = sd - len) > 0) {\r\n        if (e + 1 === len) str += '.';\r\n        str += getZeroString(k);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // Calculate the base 10 exponent from the base 1e7 exponent.\r\n  function getBase10Exponent(digits, e) {\r\n    var w = digits[0];\r\n\r\n    // Add the number of digits of the first word of the digits array.\r\n    for ( e *= LOG_BASE; w >= 10; w /= 10) e++;\r\n    return e;\r\n  }\r\n\r\n\r\n  function getLn10(Ctor, sd, pr) {\r\n    if (sd > LN10_PRECISION) {\r\n\r\n      // Reset global state in case the exception is caught.\r\n      external = true;\r\n      if (pr) Ctor.precision = pr;\r\n      throw Error(precisionLimitExceeded);\r\n    }\r\n    return finalise(new Ctor(LN10), sd, 1, true);\r\n  }\r\n\r\n\r\n  function getPi(Ctor, sd, rm) {\r\n    if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\r\n    return finalise(new Ctor(PI), sd, rm, true);\r\n  }\r\n\r\n\r\n  function getPrecision(digits) {\r\n    var w = digits.length - 1,\r\n      len = w * LOG_BASE + 1;\r\n\r\n    w = digits[w];\r\n\r\n    // If non-zero...\r\n    if (w) {\r\n\r\n      // Subtract the number of trailing zeros of the last word.\r\n      for (; w % 10 == 0; w /= 10) len--;\r\n\r\n      // Add the number of digits of the first word.\r\n      for (w = digits[0]; w >= 10; w /= 10) len++;\r\n    }\r\n\r\n    return len;\r\n  }\r\n\r\n\r\n  function getZeroString(k) {\r\n    var zs = '';\r\n    for (; k--;) zs += '0';\r\n    return zs;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\r\n   * integer of type number.\r\n   *\r\n   * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\r\n   *\r\n   */\r\n  function intPow(Ctor, x, n, pr) {\r\n    var isTruncated,\r\n      r = new Ctor(1),\r\n\r\n      // Max n of 9007199254740991 takes 53 loop iterations.\r\n      // Maximum digits array length; leaves [28, 34] guard digits.\r\n      k = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n    external = false;\r\n\r\n    for (;;) {\r\n      if (n % 2) {\r\n        r = r.times(x);\r\n        if (truncate(r.d, k)) isTruncated = true;\r\n      }\r\n\r\n      n = mathfloor(n / 2);\r\n      if (n === 0) {\r\n\r\n        // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\r\n        n = r.d.length - 1;\r\n        if (isTruncated && r.d[n] === 0) ++r.d[n];\r\n        break;\r\n      }\r\n\r\n      x = x.times(x);\r\n      truncate(x.d, k);\r\n    }\r\n\r\n    external = true;\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  function isOdd(n) {\r\n    return n.d[n.d.length - 1] & 1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.\r\n   */\r\n  function maxOrMin(Ctor, args, ltgt) {\r\n    var y,\r\n      x = new Ctor(args[0]),\r\n      i = 0;\r\n\r\n    for (; ++i < args.length;) {\r\n      y = new Ctor(args[i]);\r\n      if (!y.s) {\r\n        x = y;\r\n        break;\r\n      } else if (x[ltgt](y)) {\r\n        x = y;\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\r\n   * digits.\r\n   *\r\n   * Taylor/Maclaurin series.\r\n   *\r\n   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n   *\r\n   * Argument reduction:\r\n   *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n   *   exp(x) = exp(x / 2^k)^(2^k)\r\n   *\r\n   * Previously, the argument was initially reduced by\r\n   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n   * found to be slower than just dividing repeatedly by 32 as above.\r\n   *\r\n   * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\r\n   * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\r\n   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n   *\r\n   *  exp(Infinity)  = Infinity\r\n   *  exp(-Infinity) = 0\r\n   *  exp(NaN)       = NaN\r\n   *  exp(\u00b10)        = 1\r\n   *\r\n   *  exp(x) is non-terminating for any finite, non-zero x.\r\n   *\r\n   *  The result will always be correctly rounded.\r\n   *\r\n   */\r\n  function naturalExponential(x, sd) {\r\n    var denominator, guard, j, pow, sum, t, wpr,\r\n      rep = 0,\r\n      i = 0,\r\n      k = 0,\r\n      Ctor = x.constructor,\r\n      rm = Ctor.rounding,\r\n      pr = Ctor.precision;\r\n\r\n    // 0/NaN/Infinity?\r\n    if (!x.d || !x.d[0] || x.e > 17) {\r\n\r\n      return new Ctor(x.d\r\n        ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0\r\n        : x.s ? x.s < 0 ? 0 : x : 0 / 0);\r\n    }\r\n\r\n    if (sd == null) {\r\n      external = false;\r\n      wpr = pr;\r\n    } else {\r\n      wpr = sd;\r\n    }\r\n\r\n    t = new Ctor(0.03125);\r\n\r\n    // while abs(x) >= 0.1\r\n    while (x.e > -2) {\r\n\r\n      // x = x / 2^5\r\n      x = x.times(t);\r\n      k += 5;\r\n    }\r\n\r\n    // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\r\n    // necessary to ensure the first 4 rounding digits are correct.\r\n    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n    wpr += guard;\r\n    denominator = pow = sum = new Ctor(1);\r\n    Ctor.precision = wpr;\r\n\r\n    for (;;) {\r\n      pow = finalise(pow.times(x), wpr, 1);\r\n      denominator = denominator.times(++i);\r\n      t = sum.plus(divide(pow, denominator, wpr, 1));\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n        j = k;\r\n        while (j--) sum = finalise(sum.times(sum), wpr, 1);\r\n\r\n        // Check to see if the first 4 rounding digits are [49]999.\r\n        // If so, repeat the summation with a higher precision, otherwise\r\n        // e.g. with precision: 18, rounding: 1\r\n        // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\r\n        // `wpr - guard` is the index of first rounding digit.\r\n        if (sd == null) {\r\n\r\n          if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n            Ctor.precision = wpr += 10;\r\n            denominator = pow = t = new Ctor(1);\r\n            i = 0;\r\n            rep++;\r\n          } else {\r\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n          }\r\n        } else {\r\n          Ctor.precision = pr;\r\n          return sum;\r\n        }\r\n      }\r\n\r\n      sum = t;\r\n    }\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\r\n   * digits.\r\n   *\r\n   *  ln(-n)        = NaN\r\n   *  ln(0)         = -Infinity\r\n   *  ln(-0)        = -Infinity\r\n   *  ln(1)         = 0\r\n   *  ln(Infinity)  = Infinity\r\n   *  ln(-Infinity) = NaN\r\n   *  ln(NaN)       = NaN\r\n   *\r\n   *  ln(n) (n != 1) is non-terminating.\r\n   *\r\n   */\r\n  function naturalLogarithm(y, sd) {\r\n    var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,\r\n      n = 1,\r\n      guard = 10,\r\n      x = y,\r\n      xd = x.d,\r\n      Ctor = x.constructor,\r\n      rm = Ctor.rounding,\r\n      pr = Ctor.precision;\r\n\r\n    // Is x negative or Infinity, NaN, 0 or 1?\r\n    if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\r\n      return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\r\n    }\r\n\r\n    if (sd == null) {\r\n      external = false;\r\n      wpr = pr;\r\n    } else {\r\n      wpr = sd;\r\n    }\r\n\r\n    Ctor.precision = wpr += guard;\r\n    c = digitsToString(xd);\r\n    c0 = c.charAt(0);\r\n\r\n    if (Math.abs(e = x.e) < 1.5e15) {\r\n\r\n      // Argument reduction.\r\n      // The series converges faster the closer the argument is to 1, so using\r\n      // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n      // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n      // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n      // later be divided by this number, then separate out the power of 10 using\r\n      // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n      // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n      //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n      // max n is 6 (gives 0.7 - 1.3)\r\n      while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n        x = x.times(y);\r\n        c = digitsToString(x.d);\r\n        c0 = c.charAt(0);\r\n        n++;\r\n      }\r\n\r\n      e = x.e;\r\n\r\n      if (c0 > 1) {\r\n        x = new Ctor('0.' + c);\r\n        e++;\r\n      } else {\r\n        x = new Ctor(c0 + '.' + c.slice(1));\r\n      }\r\n    } else {\r\n\r\n      // The argument reduction method above may result in overflow if the argument y is a massive\r\n      // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n      // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n      t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n      x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n      Ctor.precision = pr;\r\n\r\n      return sd == null ? finalise(x, pr, rm, external = true) : x;\r\n    }\r\n\r\n    // x1 is x reduced to a value near 1.\r\n    x1 = x;\r\n\r\n    // Taylor series.\r\n    // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n    // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n    sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\r\n    x2 = finalise(x.times(x), wpr, 1);\r\n    denominator = 3;\r\n\r\n    for (;;) {\r\n      numerator = finalise(numerator.times(x2), wpr, 1);\r\n      t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n        sum = sum.times(2);\r\n\r\n        // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\r\n        // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\r\n        if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n        sum = divide(sum, new Ctor(n), wpr, 1);\r\n\r\n        // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\r\n        // been repeated previously) and the first 4 rounding digits 9999?\r\n        // If so, restart the summation with a higher precision, otherwise\r\n        // e.g. with precision: 12, rounding: 1\r\n        // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\r\n        // `wpr - guard` is the index of first rounding digit.\r\n        if (sd == null) {\r\n          if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n            Ctor.precision = wpr += guard;\r\n            t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\r\n            x2 = finalise(x.times(x), wpr, 1);\r\n            denominator = rep = 1;\r\n          } else {\r\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n          }\r\n        } else {\r\n          Ctor.precision = pr;\r\n          return sum;\r\n        }\r\n      }\r\n\r\n      sum = t;\r\n      denominator += 2;\r\n    }\r\n  }\r\n\r\n\r\n  // \u00b1Infinity, NaN.\r\n  function nonFiniteToString(x) {\r\n    // Unsigned.\r\n    return String(x.s * x.s / 0);\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the value of a new Decimal `x` from string `str`.\r\n   */\r\n  function parseDecimal(x, str) {\r\n    var e, i, len;\r\n\r\n    // Decimal point?\r\n    if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n    // Exponential form?\r\n    if ((i = str.search(/e/i)) > 0) {\r\n\r\n      // Determine exponent.\r\n      if (e < 0) e = i;\r\n      e += +str.slice(i + 1);\r\n      str = str.substring(0, i);\r\n    } else if (e < 0) {\r\n\r\n      // Integer.\r\n      e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(len - 1) === 48; --len);\r\n    str = str.slice(i, len);\r\n\r\n    if (str) {\r\n      len -= i;\r\n      x.e = e = e - i - 1;\r\n      x.d = [];\r\n\r\n      // Transform base\r\n\r\n      // e is the base 10 exponent.\r\n      // i is where to slice str to get the first word of the digits array.\r\n      i = (e + 1) % LOG_BASE;\r\n      if (e < 0) i += LOG_BASE;\r\n\r\n      if (i < len) {\r\n        if (i) x.d.push(+str.slice(0, i));\r\n        for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n        str = str.slice(i);\r\n        i = LOG_BASE - str.length;\r\n      } else {\r\n        i -= len;\r\n      }\r\n\r\n      for (; i--;) str += '0';\r\n      x.d.push(+str);\r\n\r\n      if (external) {\r\n\r\n        // Overflow?\r\n        if (x.e > x.constructor.maxE) {\r\n\r\n          // Infinity.\r\n          x.d = null;\r\n          x.e = NaN;\r\n\r\n        // Underflow?\r\n        } else if (x.e < x.constructor.minE) {\r\n\r\n          // Zero.\r\n          x.e = 0;\r\n          x.d = [0];\r\n          // x.constructor.underflow = true;\r\n        } // else x.constructor.underflow = false;\r\n      }\r\n    } else {\r\n\r\n      // Zero.\r\n      x.e = 0;\r\n      x.d = [0];\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\r\n   */\r\n  function parseOther(x, str) {\r\n    var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\r\n\r\n    if (str === 'Infinity' || str === 'NaN') {\r\n      if (!+str) x.s = NaN;\r\n      x.e = NaN;\r\n      x.d = null;\r\n      return x;\r\n    }\r\n\r\n    if (isHex.test(str))  {\r\n      base = 16;\r\n      str = str.toLowerCase();\r\n    } else if (isBinary.test(str))  {\r\n      base = 2;\r\n    } else if (isOctal.test(str))  {\r\n      base = 8;\r\n    } else {\r\n      throw Error(invalidArgument + str);\r\n    }\r\n\r\n    // Is there a binary exponent part?\r\n    i = str.search(/p/i);\r\n\r\n    if (i > 0) {\r\n      p = +str.slice(i + 1);\r\n      str = str.substring(2, i);\r\n    } else {\r\n      str = str.slice(2);\r\n    }\r\n\r\n    // Convert `str` as an integer then divide the result by `base` raised to a power such that the\r\n    // fraction part will be restored.\r\n    i = str.indexOf('.');\r\n    isFloat = i >= 0;\r\n    Ctor = x.constructor;\r\n\r\n    if (isFloat) {\r\n      str = str.replace('.', '');\r\n      len = str.length;\r\n      i = len - i;\r\n\r\n      // log[10](16) = 1.2041... , log[10](88) = 1.9444....\r\n      divisor = intPow(Ctor, new Ctor(base), i, i * 2);\r\n    }\r\n\r\n    xd = convertBase(str, base, BASE);\r\n    xe = xd.length - 1;\r\n\r\n    // Remove trailing zeros.\r\n    for (i = xe; xd[i] === 0; --i) xd.pop();\r\n    if (i < 0) return new Ctor(x.s * 0);\r\n    x.e = getBase10Exponent(xd, xe);\r\n    x.d = xd;\r\n    external = false;\r\n\r\n    // At what precision to perform the division to ensure exact conversion?\r\n    // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\r\n    // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\r\n    // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\r\n    // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\r\n    // Therefore using 4 * the number of digits of str will always be enough.\r\n    if (isFloat) x = divide(x, divisor, len * 4);\r\n\r\n    // Multiply by the binary exponent part if present.\r\n    if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));\r\n    external = true;\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n   * |x| < pi/2\r\n   *\r\n   */\r\n  function sine(Ctor, x) {\r\n    var k,\r\n      len = x.d.length;\r\n\r\n    if (len < 3) return taylorSeries(Ctor, 2, x, x);\r\n\r\n    // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\r\n    // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\r\n    // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    k = 1.4 * Math.sqrt(len);\r\n    k = k > 16 ? 16 : k | 0;\r\n\r\n    x = x.times(1 / tinyPow(5, k));\r\n    x = taylorSeries(Ctor, 2, x, x);\r\n\r\n    // Reverse argument reduction\r\n    var sin2_x,\r\n      d5 = new Ctor(5),\r\n      d16 = new Ctor(16),\r\n      d20 = new Ctor(20);\r\n    for (; k--;) {\r\n      sin2_x = x.times(x);\r\n      x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  // Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\r\n  function taylorSeries(Ctor, n, x, y, isHyperbolic) {\r\n    var j, t, u, x2,\r\n      i = 1,\r\n      pr = Ctor.precision,\r\n      k = Math.ceil(pr / LOG_BASE);\r\n\r\n    external = false;\r\n    x2 = x.times(x);\r\n    u = new Ctor(y);\r\n\r\n    for (;;) {\r\n      t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\r\n      u = isHyperbolic ? y.plus(t) : y.minus(t);\r\n      y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\r\n      t = u.plus(y);\r\n\r\n      if (t.d[k] !== void 0) {\r\n        for (j = k; t.d[j] === u.d[j] && j--;);\r\n        if (j == -1) break;\r\n      }\r\n\r\n      j = u;\r\n      u = y;\r\n      y = t;\r\n      t = j;\r\n      i++;\r\n    }\r\n\r\n    external = true;\r\n    t.d.length = k + 1;\r\n\r\n    return t;\r\n  }\r\n\r\n\r\n  // Exponent e must be positive and non-zero.\r\n  function tinyPow(b, e) {\r\n    var n = b;\r\n    while (--e) n *= b;\r\n    return n;\r\n  }\r\n\r\n\r\n  // Return the absolute value of `x` reduced to less than or equal to half pi.\r\n  function toLessThanHalfPi(Ctor, x) {\r\n    var t,\r\n      isNeg = x.s < 0,\r\n      pi = getPi(Ctor, Ctor.precision, 1),\r\n      halfPi = pi.times(0.5);\r\n\r\n    x = x.abs();\r\n\r\n    if (x.lte(halfPi)) {\r\n      quadrant = isNeg ? 4 : 1;\r\n      return x;\r\n    }\r\n\r\n    t = x.divToInt(pi);\r\n\r\n    if (t.isZero()) {\r\n      quadrant = isNeg ? 3 : 2;\r\n    } else {\r\n      x = x.minus(t.times(pi));\r\n\r\n      // 0 <= x < pi\r\n      if (x.lte(halfPi)) {\r\n        quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);\r\n        return x;\r\n      }\r\n\r\n      quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);\r\n    }\r\n\r\n    return x.minus(pi).abs();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return the value of Decimal `x` as a string in base `baseOut`.\r\n   *\r\n   * If the optional `sd` argument is present include a binary exponent suffix.\r\n   */\r\n  function toStringBinary(x, baseOut, sd, rm) {\r\n    var base, e, i, k, len, roundUp, str, xd, y,\r\n      Ctor = x.constructor,\r\n      isExp = sd !== void 0;\r\n\r\n    if (isExp) {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n    } else {\r\n      sd = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    }\r\n\r\n    if (!x.isFinite()) {\r\n      str = nonFiniteToString(x);\r\n    } else {\r\n      str = finiteToString(x);\r\n      i = str.indexOf('.');\r\n\r\n      // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\r\n      // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\r\n      // minBinaryExponent = floor(decimalExponent * log[2](10))\r\n      // log[2](10) = 3.321928094887362347870319429489390175864\r\n\r\n      if (isExp) {\r\n        base = 2;\r\n        if (baseOut == 16) {\r\n          sd = sd * 4 - 3;\r\n        } else if (baseOut == 8) {\r\n          sd = sd * 3 - 2;\r\n        }\r\n      } else {\r\n        base = baseOut;\r\n      }\r\n\r\n      // Convert the number as an integer then divide the result by its base raised to a power such\r\n      // that the fraction part will be restored.\r\n\r\n      // Non-integer.\r\n      if (i >= 0) {\r\n        str = str.replace('.', '');\r\n        y = new Ctor(1);\r\n        y.e = str.length - i;\r\n        y.d = convertBase(finiteToString(y), 10, base);\r\n        y.e = y.d.length;\r\n      }\r\n\r\n      xd = convertBase(str, 10, base);\r\n      e = len = xd.length;\r\n\r\n      // Remove trailing zeros.\r\n      for (; xd[--len] == 0;) xd.pop();\r\n\r\n      if (!xd[0]) {\r\n        str = isExp ? '0p+0' : '0';\r\n      } else {\r\n        if (i < 0) {\r\n          e--;\r\n        } else {\r\n          x = new Ctor(x);\r\n          x.d = xd;\r\n          x.e = e;\r\n          x = divide(x, y, sd, rm, 0, base);\r\n          xd = x.d;\r\n          e = x.e;\r\n          roundUp = inexact;\r\n        }\r\n\r\n        // The rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        i = xd[sd];\r\n        k = base / 2;\r\n        roundUp = roundUp || xd[sd + 1] !== void 0;\r\n\r\n        roundUp = rm < 4\r\n          ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))\r\n          : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||\r\n            rm === (x.s < 0 ? 8 : 7));\r\n\r\n        xd.length = sd;\r\n\r\n        if (roundUp) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up and so on.\r\n          for (; ++xd[--sd] > base - 1;) {\r\n            xd[sd] = 0;\r\n            if (!sd) {\r\n              ++e;\r\n              xd.unshift(1);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n        // E.g. [4, 11, 15] becomes 4bf.\r\n        for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n\r\n        // Add binary exponent suffix?\r\n        if (isExp) {\r\n          if (len > 1) {\r\n            if (baseOut == 16 || baseOut == 8) {\r\n              i = baseOut == 16 ? 4 : 3;\r\n              for (--len; len % i; len++) str += '0';\r\n              xd = convertBase(str, base, baseOut);\r\n              for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n              // xd[0] will always be be 1\r\n              for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n            } else {\r\n              str = str.charAt(0) + '.' + str.slice(1);\r\n            }\r\n          }\r\n\r\n          str =  str + (e < 0 ? 'p' : 'p+') + e;\r\n        } else if (e < 0) {\r\n          for (; ++e;) str = '0' + str;\r\n          str = '0.' + str;\r\n        } else {\r\n          if (++e > len) for (e -= len; e-- ;) str += '0';\r\n          else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);\r\n        }\r\n      }\r\n\r\n      str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;\r\n    }\r\n\r\n    return x.s < 0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Does not strip trailing zeros.\r\n  function truncate(arr, len) {\r\n    if (arr.length > len) {\r\n      arr.length = len;\r\n      return true;\r\n    }\r\n  }\r\n\r\n\r\n  // Decimal methods\r\n\r\n\r\n  /*\r\n   *  abs\r\n   *  acos\r\n   *  acosh\r\n   *  add\r\n   *  asin\r\n   *  asinh\r\n   *  atan\r\n   *  atanh\r\n   *  atan2\r\n   *  cbrt\r\n   *  ceil\r\n   *  clone\r\n   *  config\r\n   *  cos\r\n   *  cosh\r\n   *  div\r\n   *  exp\r\n   *  floor\r\n   *  hypot\r\n   *  ln\r\n   *  log\r\n   *  log2\r\n   *  log10\r\n   *  max\r\n   *  min\r\n   *  mod\r\n   *  mul\r\n   *  pow\r\n   *  random\r\n   *  round\r\n   *  set\r\n   *  sign\r\n   *  sin\r\n   *  sinh\r\n   *  sqrt\r\n   *  sub\r\n   *  tan\r\n   *  tanh\r\n   *  trunc\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the absolute value of `x`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function abs(x) {\r\n    return new this(x).abs();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arccosine in radians of `x`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function acos(x) {\r\n    return new this(x).acos();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function acosh(x) {\r\n    return new this(x).acosh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function add(x, y) {\r\n    return new this(x).plus(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function asin(x) {\r\n    return new this(x).asin();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function asinh(x) {\r\n    return new this(x).asinh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function atan(x) {\r\n    return new this(x).atan();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function atanh(x) {\r\n    return new this(x).atanh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\r\n   * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi, pi]\r\n   *\r\n   * y {number|string|Decimal} The y-coordinate.\r\n   * x {number|string|Decimal} The x-coordinate.\r\n   *\r\n   * atan2(\u00b10, -0)               = \u00b1pi\r\n   * atan2(\u00b10, +0)               = \u00b10\r\n   * atan2(\u00b10, -x)               = \u00b1pi for x > 0\r\n   * atan2(\u00b10, x)                = \u00b10 for x > 0\r\n   * atan2(-y, \u00b10)               = -pi/2 for y > 0\r\n   * atan2(y, \u00b10)                = pi/2 for y > 0\r\n   * atan2(\u00b1y, -Infinity)        = \u00b1pi for finite y > 0\r\n   * atan2(\u00b1y, +Infinity)        = \u00b10 for finite y > 0\r\n   * atan2(\u00b1Infinity, x)         = \u00b1pi/2 for finite x\r\n   * atan2(\u00b1Infinity, -Infinity) = \u00b13*pi/4\r\n   * atan2(\u00b1Infinity, +Infinity) = \u00b1pi/4\r\n   * atan2(NaN, x) = NaN\r\n   * atan2(y, NaN) = NaN\r\n   *\r\n   */\r\n  function atan2(y, x) {\r\n    y = new this(y);\r\n    x = new this(x);\r\n    var r,\r\n      pr = this.precision,\r\n      rm = this.rounding,\r\n      wpr = pr + 4;\r\n\r\n    // Either NaN\r\n    if (!y.s || !x.s) {\r\n      r = new this(NaN);\r\n\r\n    // Both \u00b1Infinity\r\n    } else if (!y.d && !x.d) {\r\n      r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\r\n      r.s = y.s;\r\n\r\n    // x is \u00b1Infinity or y is \u00b10\r\n    } else if (!x.d || y.isZero()) {\r\n      r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\r\n      r.s = y.s;\r\n\r\n    // y is \u00b1Infinity or x is \u00b10\r\n    } else if (!y.d || x.isZero()) {\r\n      r = getPi(this, wpr, 1).times(0.5);\r\n      r.s = y.s;\r\n\r\n    // Both non-zero and finite\r\n    } else if (x.s < 0) {\r\n      this.precision = wpr;\r\n      this.rounding = 1;\r\n      r = this.atan(divide(y, x, wpr, 1));\r\n      x = getPi(this, wpr, 1);\r\n      this.precision = pr;\r\n      this.rounding = rm;\r\n      r = y.s < 0 ? r.minus(x) : r.plus(x);\r\n    } else {\r\n      r = this.atan(divide(y, x, wpr, 1));\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function cbrt(x) {\r\n    return new this(x).cbrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function ceil(x) {\r\n    return finalise(x = new this(x), x.e + 1, 2);\r\n  }\r\n\r\n\r\n  /*\r\n   * Configure global settings for a Decimal constructor.\r\n   *\r\n   * `obj` is an object with one or more of the following properties,\r\n   *\r\n   *   precision  {number}\r\n   *   rounding   {number}\r\n   *   toExpNeg   {number}\r\n   *   toExpPos   {number}\r\n   *   maxE       {number}\r\n   *   minE       {number}\r\n   *   modulo     {number}\r\n   *   crypto     {boolean|number}\r\n   *   defaults   {true}\r\n   *\r\n   * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n   *\r\n   */\r\n  function config(obj) {\r\n    if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');\r\n    var i, p, v,\r\n      useDefaults = obj.defaults === true,\r\n      ps = [\r\n        'precision', 1, MAX_DIGITS,\r\n        'rounding', 0, 8,\r\n        'toExpNeg', -EXP_LIMIT, 0,\r\n        'toExpPos', 0, EXP_LIMIT,\r\n        'maxE', 0, EXP_LIMIT,\r\n        'minE', -EXP_LIMIT, 0,\r\n        'modulo', 0, 9\r\n      ];\r\n\r\n    for (i = 0; i < ps.length; i += 3) {\r\n      if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];\r\n      if ((v = obj[p]) !== void 0) {\r\n        if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n        else throw Error(invalidArgument + p + ': ' + v);\r\n      }\r\n    }\r\n\r\n    if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];\r\n    if ((v = obj[p]) !== void 0) {\r\n      if (v === true || v === false || v === 0 || v === 1) {\r\n        if (v) {\r\n          if (typeof crypto != 'undefined' && crypto &&\r\n            (crypto.getRandomValues || crypto.randomBytes)) {\r\n            this[p] = true;\r\n          } else {\r\n            throw Error(cryptoUnavailable);\r\n          }\r\n        } else {\r\n          this[p] = false;\r\n        }\r\n      } else {\r\n        throw Error(invalidArgument + p + ': ' + v);\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function cos(x) {\r\n    return new this(x).cos();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function cosh(x) {\r\n    return new this(x).cosh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n   * constructor.\r\n   *\r\n   */\r\n  function clone(obj) {\r\n    var i, p, ps;\r\n\r\n    /*\r\n     * The Decimal constructor and exported function.\r\n     * Return a new Decimal instance.\r\n     *\r\n     * v {number|string|Decimal} A numeric value.\r\n     *\r\n     */\r\n    function Decimal(v) {\r\n      var e, i, t,\r\n        x = this;\r\n\r\n      // Decimal called without new.\r\n      if (!(x instanceof Decimal)) return new Decimal(v);\r\n\r\n      // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n      // which points to Object.\r\n      x.constructor = Decimal;\r\n\r\n      // Duplicate.\r\n      if (v instanceof Decimal) {\r\n        x.s = v.s;\r\n\r\n        if (external) {\r\n          if (!v.d || v.e > Decimal.maxE) {\r\n\r\n            // Infinity.\r\n            x.e = NaN;\r\n            x.d = null;\r\n          } else if (v.e < Decimal.minE) {\r\n\r\n            // Zero.\r\n            x.e = 0;\r\n            x.d = [0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.d = v.d.slice();\r\n          }\r\n        } else {\r\n          x.e = v.e;\r\n          x.d = v.d ? v.d.slice() : v.d;\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      t = typeof v;\r\n\r\n      if (t === 'number') {\r\n        if (v === 0) {\r\n          x.s = 1 / v < 0 ? -1 : 1;\r\n          x.e = 0;\r\n          x.d = [0];\r\n          return;\r\n        }\r\n\r\n        if (v < 0) {\r\n          v = -v;\r\n          x.s = -1;\r\n        } else {\r\n          x.s = 1;\r\n        }\r\n\r\n        // Fast path for small integers.\r\n        if (v === ~~v && v < 1e7) {\r\n          for (e = 0, i = v; i >= 10; i /= 10) e++;\r\n\r\n          if (external) {\r\n            if (e > Decimal.maxE) {\r\n              x.e = NaN;\r\n              x.d = null;\r\n            } else if (e < Decimal.minE) {\r\n              x.e = 0;\r\n              x.d = [0];\r\n            } else {\r\n              x.e = e;\r\n              x.d = [v];\r\n            }\r\n          } else {\r\n            x.e = e;\r\n            x.d = [v];\r\n          }\r\n\r\n          return;\r\n\r\n        // Infinity, NaN.\r\n        } else if (v * 0 !== 0) {\r\n          if (!v) x.s = NaN;\r\n          x.e = NaN;\r\n          x.d = null;\r\n          return;\r\n        }\r\n\r\n        return parseDecimal(x, v.toString());\r\n\r\n      } else if (t !== 'string') {\r\n        throw Error(invalidArgument + v);\r\n      }\r\n\r\n      // Minus sign?\r\n      if ((i = v.charCodeAt(0)) === 45) {\r\n        v = v.slice(1);\r\n        x.s = -1;\r\n      } else {\r\n        // Plus sign?\r\n        if (i === 43) v = v.slice(1);\r\n        x.s = 1;\r\n      }\r\n\r\n      return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\r\n    }\r\n\r\n    Decimal.prototype = P;\r\n\r\n    Decimal.ROUND_UP = 0;\r\n    Decimal.ROUND_DOWN = 1;\r\n    Decimal.ROUND_CEIL = 2;\r\n    Decimal.ROUND_FLOOR = 3;\r\n    Decimal.ROUND_HALF_UP = 4;\r\n    Decimal.ROUND_HALF_DOWN = 5;\r\n    Decimal.ROUND_HALF_EVEN = 6;\r\n    Decimal.ROUND_HALF_CEIL = 7;\r\n    Decimal.ROUND_HALF_FLOOR = 8;\r\n    Decimal.EUCLID = 9;\r\n\r\n    Decimal.config = Decimal.set = config;\r\n    Decimal.clone = clone;\r\n    Decimal.isDecimal = isDecimalInstance;\r\n\r\n    Decimal.abs = abs;\r\n    Decimal.acos = acos;\r\n    Decimal.acosh = acosh;        // ES6\r\n    Decimal.add = add;\r\n    Decimal.asin = asin;\r\n    Decimal.asinh = asinh;        // ES6\r\n    Decimal.atan = atan;\r\n    Decimal.atanh = atanh;        // ES6\r\n    Decimal.atan2 = atan2;\r\n    Decimal.cbrt = cbrt;          // ES6\r\n    Decimal.ceil = ceil;\r\n    Decimal.cos = cos;\r\n    Decimal.cosh = cosh;          // ES6\r\n    Decimal.div = div;\r\n    Decimal.exp = exp;\r\n    Decimal.floor = floor;\r\n    Decimal.hypot = hypot;        // ES6\r\n    Decimal.ln = ln;\r\n    Decimal.log = log;\r\n    Decimal.log10 = log10;        // ES6\r\n    Decimal.log2 = log2;          // ES6\r\n    Decimal.max = max;\r\n    Decimal.min = min;\r\n    Decimal.mod = mod;\r\n    Decimal.mul = mul;\r\n    Decimal.pow = pow;\r\n    Decimal.random = random;\r\n    Decimal.round = round;\r\n    Decimal.sign = sign;          // ES6\r\n    Decimal.sin = sin;\r\n    Decimal.sinh = sinh;          // ES6\r\n    Decimal.sqrt = sqrt;\r\n    Decimal.sub = sub;\r\n    Decimal.tan = tan;\r\n    Decimal.tanh = tanh;          // ES6\r\n    Decimal.trunc = trunc;        // ES6\r\n\r\n    if (obj === void 0) obj = {};\r\n    if (obj) {\r\n      if (obj.defaults !== true) {\r\n        ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];\r\n        for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n      }\r\n    }\r\n\r\n    Decimal.config(obj);\r\n\r\n    return Decimal;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function div(x, y) {\r\n    return new this(x).div(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} The power to which to raise the base of the natural log.\r\n   *\r\n   */\r\n  function exp(x) {\r\n    return new this(x).exp();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function floor(x) {\r\n    return finalise(x = new this(x), x.e + 1, 3);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\r\n   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function hypot() {\r\n    var i, n,\r\n      t = new this(0);\r\n\r\n    external = false;\r\n\r\n    for (i = 0; i < arguments.length;) {\r\n      n = new this(arguments[i++]);\r\n      if (!n.d) {\r\n        if (n.s) {\r\n          external = true;\r\n          return new this(1 / 0);\r\n        }\r\n        t = n;\r\n      } else if (t.d) {\r\n        t = t.plus(n.times(n));\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return t.sqrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),\r\n   * otherwise return false.\r\n   *\r\n   */\r\n  function isDecimalInstance(obj) {\r\n    return obj instanceof Decimal || obj && obj.name === '[object Decimal]' || false;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function ln(x) {\r\n    return new this(x).ln();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\r\n   * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * log[y](x)\r\n   *\r\n   * x {number|string|Decimal} The argument of the logarithm.\r\n   * y {number|string|Decimal} The base of the logarithm.\r\n   *\r\n   */\r\n  function log(x, y) {\r\n    return new this(x).log(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function log2(x) {\r\n    return new this(x).log(2);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function log10(x) {\r\n    return new this(x).log(10);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function max() {\r\n    return maxOrMin(this, arguments, 'lt');\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function min() {\r\n    return maxOrMin(this, arguments, 'gt');\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function mod(x, y) {\r\n    return new this(x).mod(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function mul(x, y) {\r\n    return new this(x).mul(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} The base.\r\n   * y {number|string|Decimal} The exponent.\r\n   *\r\n   */\r\n  function pow(x, y) {\r\n    return new this(x).pow(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\r\n   * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\r\n   * are produced).\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\r\n   *\r\n   */\r\n  function random(sd) {\r\n    var d, e, k, n,\r\n      i = 0,\r\n      r = new this(1),\r\n      rd = [];\r\n\r\n    if (sd === void 0) sd = this.precision;\r\n    else checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    k = Math.ceil(sd / LOG_BASE);\r\n\r\n    if (!this.crypto) {\r\n      for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;\r\n\r\n    // Browsers supporting crypto.getRandomValues.\r\n    } else if (crypto.getRandomValues) {\r\n      d = crypto.getRandomValues(new Uint32Array(k));\r\n\r\n      for (; i < k;) {\r\n        n = d[i];\r\n\r\n        // 0 <= n < 4294967296\r\n        // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\r\n        if (n >= 4.29e9) {\r\n          d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\r\n        } else {\r\n\r\n          // 0 <= n <= 4289999999\r\n          // 0 <= (n % 1e7) <= 9999999\r\n          rd[i++] = n % 1e7;\r\n        }\r\n      }\r\n\r\n    // Node.js supporting crypto.randomBytes.\r\n    } else if (crypto.randomBytes) {\r\n\r\n      // buffer\r\n      d = crypto.randomBytes(k *= 4);\r\n\r\n      for (; i < k;) {\r\n\r\n        // 0 <= n < 2147483648\r\n        n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);\r\n\r\n        // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\r\n        if (n >= 2.14e9) {\r\n          crypto.randomBytes(4).copy(d, i);\r\n        } else {\r\n\r\n          // 0 <= n <= 2139999999\r\n          // 0 <= (n % 1e7) <= 9999999\r\n          rd.push(n % 1e7);\r\n          i += 4;\r\n        }\r\n      }\r\n\r\n      i = k / 4;\r\n    } else {\r\n      throw Error(cryptoUnavailable);\r\n    }\r\n\r\n    k = rd[--i];\r\n    sd %= LOG_BASE;\r\n\r\n    // Convert trailing digits to zeros according to sd.\r\n    if (k && sd) {\r\n      n = mathpow(10, LOG_BASE - sd);\r\n      rd[i] = (k / n | 0) * n;\r\n    }\r\n\r\n    // Remove trailing words which are zero.\r\n    for (; rd[i] === 0; i--) rd.pop();\r\n\r\n    // Zero?\r\n    if (i < 0) {\r\n      e = 0;\r\n      rd = [0];\r\n    } else {\r\n      e = -1;\r\n\r\n      // Remove leading words which are zero and adjust exponent accordingly.\r\n      for (; rd[0] === 0; e -= LOG_BASE) rd.shift();\r\n\r\n      // Count the digits of the first word of rd to determine leading zeros.\r\n      for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;\r\n\r\n      // Adjust the exponent for leading zeros of the first word of rd.\r\n      if (k < LOG_BASE) e -= LOG_BASE - k;\r\n    }\r\n\r\n    r.e = e;\r\n    r.d = rd;\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\r\n   *\r\n   * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function round(x) {\r\n    return finalise(x = new this(x), x.e + 1, this.rounding);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1    if x > 0,\r\n   *  -1    if x < 0,\r\n   *   0    if x is 0,\r\n   *  -0    if x is -0,\r\n   *   NaN  otherwise\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function sign(x) {\r\n    x = new this(x);\r\n    return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function sin(x) {\r\n    return new this(x).sin();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function sinh(x) {\r\n    return new this(x).sinh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function sqrt(x) {\r\n    return new this(x).sqrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function sub(x, y) {\r\n    return new this(x).sub(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function tan(x) {\r\n    return new this(x).tan();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function tanh(x) {\r\n    return new this(x).tanh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` truncated to an integer.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function trunc(x) {\r\n    return finalise(x = new this(x), x.e + 1, 1);\r\n  }\r\n\r\n\r\n  // Create and configure initial Decimal constructor.\r\n  Decimal = clone(DEFAULTS);\r\n\r\n  Decimal['default'] = Decimal.Decimal = Decimal;\r\n\r\n  // Create the internal constants from their string values.\r\n  LN10 = new Decimal(LN10);\r\n  PI = new Decimal(PI);\r\n\r\n\r\n  // Export.\r\n\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () {\r\n      return Decimal;\r\n    });\r\n\r\n  // Node and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    if (typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol') {\r\n      P[Symbol.for('nodejs.util.inspect.custom')] = P.toString;\r\n      P[Symbol.toStringTag] = 'Decimal';\r\n    }\r\n\r\n    module.exports = Decimal;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalScope) {\r\n      globalScope = typeof self != 'undefined' && self && self.self == self ? self : window;\r\n    }\r\n\r\n    noConflict = globalScope.Decimal;\r\n    Decimal.noConflict = function () {\r\n      globalScope.Decimal = noConflict;\r\n      return Decimal;\r\n    };\r\n\r\n    globalScope.Decimal = Decimal;\r\n  }\r\n})(this);\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","globalScope","digitsToString","d","k","indexOfLastWord","length","str","w","i","ws","LOG_BASE","getZeroString","checkInt32","min","max","Error","invalidArgument","checkRoundingDigits","rm","repeating","di","Math","ceil","mathpow","rd","r","convertBase","baseIn","baseOut","j","arr","strL","arrL","NUMERALS","indexOf","charAt","reverse","finalise","x","sd","isTruncated","xdi","Ctor","constructor","xd","digits","push","roundUp","s","e","BASE","pop","external","maxE","NaN","minE","finiteToString","isExp","isFinite","String","len","slice","getBase10Exponent","getLn10","pr","LN10_PRECISION","precision","precisionLimitExceeded","LN10","getPi","PI_PRECISION","PI","getPrecision","zs","intPow","n","times","truncate","mathfloor","maxOrMin","args","ltgt","y","naturalExponential","pow","sum","t","rep","rounding","wpr","guard","log","denominator","plus","divide","naturalLogarithm","c","c0","abs","x1","numerator","minus","x2","parseDecimal","replace","search","substring","charCodeAt","parseOther","isHex","test","base","toLowerCase","isBinary","isOctal","p","isFloat","divisor","xe","Decimal","taylorSeries","isHyperbolic","u","tinyPow","b","toLessThanHalfPi","isNeg","pi","halfPi","lte","quadrant","divToInt","isZero","toStringBinary","MAX_DIGITS","inexact","unshift","acos","acosh","add","asin","asinh","atan","atanh","atan2","cbrt","config","obj","v","useDefaults","defaults","ps","EXP_LIMIT","DEFAULTS","crypto","getRandomValues","randomBytes","cryptoUnavailable","cos","cosh","clone","toString","isDecimal","prototype","P","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","set","isDecimalInstance","div","exp","floor","hypot","ln","log10","log2","mod","mul","random","round","sign","sin","sinh","sqrt","sub","tan","tanh","trunc","hasOwnProperty","arguments","name","Uint32Array","copy","shift","modulo","toExpNeg","toExpPos","absoluteValue","P.abs","P.ceil","comparedTo","cmp","P.cmp","yd","xs","ys","xdL","ydL","cosine","P.cos","cos2x","neg","cubeRoot","P.cbrt","toExponential","t3","t3plusx","eq","m","decimalPlaces","dp","P.dp","dividedBy","P.div","dividedToIntegerBy","P.divToInt","equals","P.eq","P.floor","greaterThan","gt","P.gt","greaterThanOrEqualTo","gte","P.gte","hyperbolicCosine","P.cosh","one","d8","cosh2_x","hyperbolicSine","P.sinh","sinh2_x","d5","d16","d20","hyperbolicTangent","P.tanh","inverseCosine","P.acos","inverseHyperbolicCosine","P.acosh","inverseHyperbolicSine","P.asinh","inverseHyperbolicTangent","P.atanh","xsd","inverseSine","P.asin","inverseTangent","P.atan","px","P.isFinite","isInteger","isInt","P.isInt","isNaN","P.isNaN","isNegative","P.isNeg","isPositive","isPos","P.isPos","P.isZero","lessThan","lt","P.lt","lessThanOrEqualTo","P.lte","logarithm","P.log","arg","isBase10","inf","num","P.sub","xLTy","P.mod","q","P.exp","P.ln","negated","P.neg","P.add","carry","P.sd","z","P.round","sine","P.sin","sin2_x","squareRoot","P.sqrt","tangent","P.tan","P.mul","rL","toBinary","P.toBinary","toDecimalPlaces","toDP","P.toDP","P.toExponential","toFixed","P.toFixed","toFraction","P.toFraction","maxD","d0","n0","n1","d1","d2","toHexadecimal","toHex","P.toHex","toNearest","P.toNearest","toNumber","P.toNumber","toOctal","P.toOctal","toPower","P.pow","yn","MAX_SAFE_INTEGER","toPrecision","P.toPrecision","toSignificantDigits","toSD","P.toSD","P.toString","truncated","P.trunc","valueOf","toJSON","P.toJSON","multiplyInteger","temp","compare","a","aL","bL","subtract","remL","logBase","yL","xL","qd","more","xi","rem","yz","yd0","rem0","prod","prodL","define","amd","Symbol","iterator","for","toStringTag","self","window","noConflict","Decimal.noConflict"]
}
