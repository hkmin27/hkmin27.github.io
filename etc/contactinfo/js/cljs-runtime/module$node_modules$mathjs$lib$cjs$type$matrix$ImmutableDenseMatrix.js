shadow$provide.module$node_modules$mathjs$lib$cjs$type$matrix$ImmutableDenseMatrix=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.createImmutableDenseMatrixClass=void 0;var _is=require("module$node_modules$mathjs$lib$cjs$utils$is"),_object=require("module$node_modules$mathjs$lib$cjs$utils$object");global=require("module$node_modules$mathjs$lib$cjs$utils$factory");global=(0,global.factory)("ImmutableDenseMatrix",["smaller","DenseMatrix"],function(_ref){function ImmutableDenseMatrix(data,
datatype){if(!(this instanceof ImmutableDenseMatrix))throw new SyntaxError("Constructor must be called with the new operator");if(datatype&&!(0,_is.isString)(datatype))throw Error("Invalid datatype: "+datatype);if((0,_is.isMatrix)(data)||(0,_is.isArray)(data))data=new DenseMatrix(data,datatype),this._data=data._data,this._size=data._size,this._datatype=data._datatype,this._max=this._min=null;else if(data&&(0,_is.isArray)(data.data)&&(0,_is.isArray)(data.size))this._data=data.data,this._size=data.size,
this._datatype=data.datatype,this._min="undefined"!==typeof data.min?data.min:null,this._max="undefined"!==typeof data.max?data.max:null;else{if(data)throw new TypeError("Unsupported type of data ("+(0,_is.typeOf)(data)+")");this._data=[];this._size=[0];this._datatype=datatype;this._max=this._min=null}}var smaller=_ref.smaller,DenseMatrix=_ref.DenseMatrix;ImmutableDenseMatrix.prototype=new DenseMatrix;ImmutableDenseMatrix.prototype.type="ImmutableDenseMatrix";ImmutableDenseMatrix.prototype.isImmutableDenseMatrix=
!0;ImmutableDenseMatrix.prototype.subset=function(index){switch(arguments.length){case 1:var m=DenseMatrix.prototype.subset.call(this,index);return(0,_is.isMatrix)(m)?new ImmutableDenseMatrix({data:m._data,size:m._size,datatype:m._datatype}):m;case 2:case 3:throw Error("Cannot invoke set subset on an Immutable Matrix instance");default:throw new SyntaxError("Wrong number of arguments");}};ImmutableDenseMatrix.prototype.set=function(){throw Error("Cannot invoke set on an Immutable Matrix instance");
};ImmutableDenseMatrix.prototype.resize=function(){throw Error("Cannot invoke resize on an Immutable Matrix instance");};ImmutableDenseMatrix.prototype.reshape=function(){throw Error("Cannot invoke reshape on an Immutable Matrix instance");};ImmutableDenseMatrix.prototype.clone=function(){return new ImmutableDenseMatrix({data:(0,_object.clone)(this._data),size:(0,_object.clone)(this._size),datatype:this._datatype})};ImmutableDenseMatrix.prototype.toJSON=function(){return{mathjs:"ImmutableDenseMatrix",
data:this._data,size:this._size,datatype:this._datatype}};ImmutableDenseMatrix.fromJSON=function(json){return new ImmutableDenseMatrix(json)};ImmutableDenseMatrix.prototype.swapRows=function(){throw Error("Cannot invoke swapRows on an Immutable Matrix instance");};ImmutableDenseMatrix.prototype.min=function(){if(null===this._min){var m=null;this.forEach(function(v){if(null===m||smaller(v,m))m=v});this._min=null!==m?m:void 0}return this._min};ImmutableDenseMatrix.prototype.max=function(){if(null===
this._max){var m=null;this.forEach(function(v){if(null===m||smaller(m,v))m=v});this._max=null!==m?m:void 0}return this._max};return ImmutableDenseMatrix},{isClass:!0});exports.createImmutableDenseMatrixClass=global}
//# sourceMappingURL=module$node_modules$mathjs$lib$cjs$type$matrix$ImmutableDenseMatrix.js.map
