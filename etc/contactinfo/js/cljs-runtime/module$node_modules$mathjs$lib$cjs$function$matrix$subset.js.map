{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$matrix$subset.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/function/matrix/subset.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$matrix$subset\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSubset = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _object = require(\"../../utils/object.js\");\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _customs = require(\"../../utils/customs.js\");\n\nvar _DimensionError = require(\"../../error/DimensionError.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'subset';\nvar dependencies = ['typed', 'matrix'];\nvar createSubset = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix;\n\n  /**\n   * Get or set a subset of a matrix or string.\n   *\n   * Syntax:\n   *     math.subset(value, index)                                // retrieve a subset\n   *     math.subset(value, index, replacement [, defaultValue])  // replace a subset\n   *\n   * Examples:\n   *\n   *     // get a subset\n   *     const d = [[1, 2], [3, 4]]\n   *     math.subset(d, math.index(1, 0))        // returns 3\n   *     math.subset(d, math.index([0, 1], 1))   // returns [[2], [4]]\n   *\n   *     // replace a subset\n   *     const e = []\n   *     const f = math.subset(e, math.index(0, [0, 2]), [5, 6])  // f = [[5, 6]]\n   *     const g = math.subset(f, math.index(1, 1), 7, 0)         // g = [[5, 6], [0, 7]]\n   *\n   * See also:\n   *\n   *     size, resize, squeeze, index\n   *\n   * @param {Array | Matrix | string} matrix  An array, matrix, or string\n   * @param {Index} index                     An index containing ranges for each\n   *                                          dimension\n   * @param {*} [replacement]                 An array, matrix, or scalar.\n   *                                          If provided, the subset is replaced with replacement.\n   *                                          If not provided, the subset is returned\n   * @param {*} [defaultValue=undefined]      Default value, filled in on new entries when\n   *                                          the matrix is resized. If not provided,\n   *                                          math.matrix elements will be left undefined.\n   * @return {Array | Matrix | string} Either the retrieved subset or the updated matrix.\n   */\n  return typed(name, {\n    // get subset\n    'Array, Index': function ArrayIndex(value, index) {\n      var m = matrix(value);\n      var subset = m.subset(index); // returns a Matrix\n\n      return index.isScalar() ? subset : subset.valueOf(); // return an Array (like the input)\n    },\n    'Matrix, Index': function MatrixIndex(value, index) {\n      return value.subset(index);\n    },\n    'Object, Index': _getObjectProperty,\n    'string, Index': _getSubstring,\n    // set subset\n    'Array, Index, any': function ArrayIndexAny(value, index, replacement) {\n      return matrix((0, _object.clone)(value)).subset(index, replacement, undefined).valueOf();\n    },\n    'Array, Index, any, any': function ArrayIndexAnyAny(value, index, replacement, defaultValue) {\n      return matrix((0, _object.clone)(value)).subset(index, replacement, defaultValue).valueOf();\n    },\n    'Matrix, Index, any': function MatrixIndexAny(value, index, replacement) {\n      return value.clone().subset(index, replacement);\n    },\n    'Matrix, Index, any, any': function MatrixIndexAnyAny(value, index, replacement, defaultValue) {\n      return value.clone().subset(index, replacement, defaultValue);\n    },\n    'string, Index, string': _setSubstring,\n    'string, Index, string, string': _setSubstring,\n    'Object, Index, any': _setObjectProperty\n  });\n});\n/**\n * Retrieve a subset of a string\n * @param {string} str            string from which to get a substring\n * @param {Index} index           An index containing ranges for each dimension\n * @returns {string} substring\n * @private\n */\n\nexports.createSubset = createSubset;\n\nfunction _getSubstring(str, index) {\n  if (!(0, _is.isIndex)(index)) {\n    // TODO: better error message\n    throw new TypeError('Index expected');\n  }\n\n  if (index.size().length !== 1) {\n    throw new _DimensionError.DimensionError(index.size().length, 1);\n  } // validate whether the range is out of range\n\n\n  var strLen = str.length;\n  (0, _array.validateIndex)(index.min()[0], strLen);\n  (0, _array.validateIndex)(index.max()[0], strLen);\n  var range = index.dimension(0);\n  var substr = '';\n  range.forEach(function (v) {\n    substr += str.charAt(v);\n  });\n  return substr;\n}\n/**\n * Replace a substring in a string\n * @param {string} str            string to be replaced\n * @param {Index} index           An index containing ranges for each dimension\n * @param {string} replacement    Replacement string\n * @param {string} [defaultValue] Default value to be uses when resizing\n *                                the string. is ' ' by default\n * @returns {string} result\n * @private\n */\n\n\nfunction _setSubstring(str, index, replacement, defaultValue) {\n  if (!index || index.isIndex !== true) {\n    // TODO: better error message\n    throw new TypeError('Index expected');\n  }\n\n  if (index.size().length !== 1) {\n    throw new _DimensionError.DimensionError(index.size().length, 1);\n  }\n\n  if (defaultValue !== undefined) {\n    if (typeof defaultValue !== 'string' || defaultValue.length !== 1) {\n      throw new TypeError('Single character expected as defaultValue');\n    }\n  } else {\n    defaultValue = ' ';\n  }\n\n  var range = index.dimension(0);\n  var len = range.size()[0];\n\n  if (len !== replacement.length) {\n    throw new _DimensionError.DimensionError(range.size()[0], replacement.length);\n  } // validate whether the range is out of range\n\n\n  var strLen = str.length;\n  (0, _array.validateIndex)(index.min()[0]);\n  (0, _array.validateIndex)(index.max()[0]); // copy the string into an array with characters\n\n  var chars = [];\n\n  for (var i = 0; i < strLen; i++) {\n    chars[i] = str.charAt(i);\n  }\n\n  range.forEach(function (v, i) {\n    chars[v] = replacement.charAt(i[0]);\n  }); // initialize undefined characters with a space\n\n  if (chars.length > strLen) {\n    for (var _i = strLen - 1, _len = chars.length; _i < _len; _i++) {\n      if (!chars[_i]) {\n        chars[_i] = defaultValue;\n      }\n    }\n  }\n\n  return chars.join('');\n}\n/**\n * Retrieve a property from an object\n * @param {Object} object\n * @param {Index} index\n * @return {*} Returns the value of the property\n * @private\n */\n\n\nfunction _getObjectProperty(object, index) {\n  if (index.size().length !== 1) {\n    throw new _DimensionError.DimensionError(index.size(), 1);\n  }\n\n  var key = index.dimension(0);\n\n  if (typeof key !== 'string') {\n    throw new TypeError('String expected as index to retrieve an object property');\n  }\n\n  return (0, _customs.getSafeProperty)(object, key);\n}\n/**\n * Set a property on an object\n * @param {Object} object\n * @param {Index} index\n * @param {*} replacement\n * @return {*} Returns the updated object\n * @private\n */\n\n\nfunction _setObjectProperty(object, index, replacement) {\n  if (index.size().length !== 1) {\n    throw new _DimensionError.DimensionError(index.size(), 1);\n  }\n\n  var key = index.dimension(0);\n\n  if (typeof key !== 'string') {\n    throw new TypeError('String expected as index to retrieve an object property');\n  } // clone the object, and apply the property to the clone\n\n\n  var updated = (0, _object.clone)(object);\n  (0, _customs.setSafeProperty)(updated, key, replacement);\n  return updated;\n}\n};"],
"names":["shadow$provide","global","require","module","exports","_getSubstring","str","index","_is","isIndex","TypeError","size","length","_DimensionError","DimensionError","strLen","_array","validateIndex","min","max","substr","dimension","range","forEach","v","charAt","_setSubstring","replacement","defaultValue","undefined","len","chars","i","_i","_len","join","_getObjectProperty","object","key","_customs","getSafeProperty","_setObjectProperty","updated","_object","clone","setSafeProperty","Object","defineProperty","value","createSubset","_factory","factory","name","dependencies","_ref","typed","matrix","ArrayIndex","subset","m","isScalar","valueOf","MatrixIndex","ArrayIndexAny","ArrayIndexAnyAny","MatrixIndexAny","MatrixIndexAnyAny"]
}
