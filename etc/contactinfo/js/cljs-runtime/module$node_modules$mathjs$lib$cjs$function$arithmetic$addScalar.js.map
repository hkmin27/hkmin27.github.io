{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$arithmetic$addScalar.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,gEAAA,CAAqF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG7HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,eAAR,CAA0B,IAAK,EAE3BC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAEf,KAAIQ,OAASR,OAAA,CAAQ,uDAAR,CAITM,QAAAA,CAAiC,CAAC,CAAA,CAAGC,MAASE,CAAAA,OAAb,EAF1BC,WAE0B,CADlBC,CAAC,OAADA,CACkB,CAA0C,QAAS,CAACC,IAAD,CAAO,CACzFC,IAAAA,CAAQD,IAAKC,CAAAA,KAcjB,OAAOA,KAAA,CAjBEH,WAiBF,CAAY,CACjB,iBAAkBF,MAAOM,CAAAA,SADR,CAEjB,mBAAoBC,QAAuB,CAACC,CAAD;AAAIC,CAAJ,CAAO,CAChD,MAAOD,EAAEE,CAAAA,GAAF,CAAMD,CAAN,CADyC,CAFjC,CAKjB,uBAAwBE,QAA2B,CAACH,CAAD,CAAIC,CAAJ,CAAO,CACxD,MAAOD,EAAEI,CAAAA,IAAF,CAAOH,CAAP,CADiD,CALzC,CAQjB,qBAAsBI,QAAyB,CAACL,CAAD,CAAIC,CAAJ,CAAO,CACpD,MAAOD,EAAEE,CAAAA,GAAF,CAAMD,CAAN,CAD6C,CARrC,CAWjB,aAAcK,QAAiB,CAACN,CAAD,CAAIC,CAAJ,CAAO,CACpC,GAAgB,IAAhB,GAAID,CAAEX,CAAAA,KAAN,EAAoCkB,IAAAA,EAApC,GAAwBP,CAAEX,CAAAA,KAA1B,CAA+C,KAAUmB,MAAJ,CAAU,kDAAV,CAAN,CAC/C,GAAgB,IAAhB,GAAIP,CAAEZ,CAAAA,KAAN,EAAoCkB,IAAAA,EAApC,GAAwBN,CAAEZ,CAAAA,KAA1B,CAA+C,KAAUmB,MAAJ,CAAU,kDAAV,CAAN,CAC/C,GAAI,CAACR,CAAES,CAAAA,SAAF,CAAYR,CAAZ,CAAL,CAAqB,KAAUO,MAAJ,CAAU,oBAAV,CAAN,CACjBE,CAAAA,CAAMV,CAAEW,CAAAA,KAAF,EACVD,EAAIrB,CAAAA,KAAJ,CAAY,IAAA,CAAKqB,CAAIrB,CAAAA,KAAT,CAAgBY,CAAEZ,CAAAA,KAAlB,CACZqB,EAAIE,CAAAA,SAAJ,CAAgB,CAAA,CAChB,OAAOF,EAP6B,CAXrB,CAAZ,CAfsF,CAA1D,CAqCrCxB,QAAQI,CAAAA,eAAR;AAA0BA,OAnDmG;",
"sources":["node_modules/mathjs/lib/cjs/function/arithmetic/addScalar.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$arithmetic$addScalar\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAddScalar = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _index = require(\"../../plain/number/index.js\");\n\nvar name = 'addScalar';\nvar dependencies = ['typed'];\nvar createAddScalar = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Add two scalar values, `x + y`.\n   * This function is meant for internal use: it is used by the public function\n   * `add`\n   *\n   * This function does not support collections (Array or Matrix).\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add\n   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Sum of `x` and `y`\n   * @private\n   */\n  return typed(name, {\n    'number, number': _index.addNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.add(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.plus(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.add(y);\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (x.value === null || x.value === undefined) throw new Error('Parameter x contains a unit with undefined value');\n      if (y.value === null || y.value === undefined) throw new Error('Parameter y contains a unit with undefined value');\n      if (!x.equalBase(y)) throw new Error('Units do not match');\n      var res = x.clone();\n      res.value = this(res.value, y.value);\n      res.fixPrefix = false;\n      return res;\n    }\n  });\n});\nexports.createAddScalar = createAddScalar;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createAddScalar","_factory","_index","factory","name","dependencies","_ref","typed","addNumber","ComplexComplex","x","y","add","BigNumberBigNumber","plus","FractionFraction","UnitUnit","undefined","Error","equalBase","res","clone","fixPrefix"]
}
