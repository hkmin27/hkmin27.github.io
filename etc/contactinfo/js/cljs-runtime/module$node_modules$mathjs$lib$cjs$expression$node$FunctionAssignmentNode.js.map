{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$expression$node$FunctionAssignmentNode.js",
"lineCount":10,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/expression/node/FunctionAssignmentNode.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$expression$node$FunctionAssignmentNode\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createFunctionAssignmentNode = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _keywords = require(\"../keywords.js\");\n\nvar _string = require(\"../../utils/string.js\");\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _latex = require(\"../../utils/latex.js\");\n\nvar _operators = require(\"../operators.js\");\n\nvar _customs = require(\"../../utils/customs.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'FunctionAssignmentNode';\nvar dependencies = ['typed', 'Node'];\nvar createFunctionAssignmentNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      Node = _ref.Node;\n\n  /**\n   * @constructor FunctionAssignmentNode\n   * @extends {Node}\n   * Function assignment\n   *\n   * @param {string} name           Function name\n   * @param {string[] | Array.<{name: string, type: string}>} params\n   *                                Array with function parameter names, or an\n   *                                array with objects containing the name\n   *                                and type of the parameter\n   * @param {Node} expr             The function expression\n   */\n  function FunctionAssignmentNode(name, params, expr) {\n    if (!(this instanceof FunctionAssignmentNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    } // validate input\n\n\n    if (typeof name !== 'string') throw new TypeError('String expected for parameter \"name\"');\n    if (!Array.isArray(params)) throw new TypeError('Array containing strings or objects expected for parameter \"params\"');\n    if (!(0, _is.isNode)(expr)) throw new TypeError('Node expected for parameter \"expr\"');\n    if (name in _keywords.keywords) throw new Error('Illegal function name, \"' + name + '\" is a reserved keyword');\n    this.name = name;\n    this.params = params.map(function (param) {\n      return param && param.name || param;\n    });\n    this.types = params.map(function (param) {\n      return param && param.type || 'any';\n    });\n    this.expr = expr;\n  }\n\n  FunctionAssignmentNode.prototype = new Node();\n  FunctionAssignmentNode.prototype.type = 'FunctionAssignmentNode';\n  FunctionAssignmentNode.prototype.isFunctionAssignmentNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  FunctionAssignmentNode.prototype._compile = function (math, argNames) {\n    var childArgNames = Object.create(argNames);\n    (0, _array.forEach)(this.params, function (param) {\n      childArgNames[param] = true;\n    }); // compile the function expression with the child args\n\n    var evalExpr = this.expr._compile(math, childArgNames);\n\n    var name = this.name;\n    var params = this.params;\n    var signature = (0, _array.join)(this.types, ',');\n    var syntax = name + '(' + (0, _array.join)(this.params, ', ') + ')';\n    return function evalFunctionAssignmentNode(scope, args, context) {\n      var signatures = {};\n\n      signatures[signature] = function () {\n        var childArgs = Object.create(args);\n\n        for (var i = 0; i < params.length; i++) {\n          childArgs[params[i]] = arguments[i];\n        }\n\n        return evalExpr(scope, childArgs, context);\n      };\n\n      var fn = typed(name, signatures);\n      fn.syntax = syntax;\n      (0, _customs.setSafeProperty)(scope, name, fn);\n      return fn;\n    };\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  FunctionAssignmentNode.prototype.forEach = function (callback) {\n    callback(this.expr, 'expr', this);\n  };\n  /**\n   * Create a new FunctionAssignmentNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {FunctionAssignmentNode} Returns a transformed copy of the node\n   */\n\n\n  FunctionAssignmentNode.prototype.map = function (callback) {\n    var expr = this._ifNode(callback(this.expr, 'expr', this));\n\n    return new FunctionAssignmentNode(this.name, this.params.slice(0), expr);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {FunctionAssignmentNode}\n   */\n\n\n  FunctionAssignmentNode.prototype.clone = function () {\n    return new FunctionAssignmentNode(this.name, this.params.slice(0), this.expr);\n  };\n  /**\n   * Is parenthesis needed?\n   * @param {Node} node\n   * @param {Object} parenthesis\n   * @private\n   */\n\n\n  function needParenthesis(node, parenthesis) {\n    var precedence = (0, _operators.getPrecedence)(node, parenthesis);\n    var exprPrecedence = (0, _operators.getPrecedence)(node.expr, parenthesis);\n    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;\n  }\n  /**\n   * get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  FunctionAssignmentNode.prototype._toString = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var expr = this.expr.toString(options);\n\n    if (needParenthesis(this, parenthesis)) {\n      expr = '(' + expr + ')';\n    }\n\n    return this.name + '(' + this.params.join(', ') + ') = ' + expr;\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  FunctionAssignmentNode.prototype.toJSON = function () {\n    var types = this.types;\n    return {\n      mathjs: 'FunctionAssignmentNode',\n      name: this.name,\n      params: this.params.map(function (param, index) {\n        return {\n          name: param,\n          type: types[index]\n        };\n      }),\n      expr: this.expr\n    };\n  };\n  /**\n   * Instantiate an FunctionAssignmentNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"FunctionAssignmentNode\", name: ..., params: ..., expr: ...}`,\n   *                       where mathjs is optional\n   * @returns {FunctionAssignmentNode}\n   */\n\n\n  FunctionAssignmentNode.fromJSON = function (json) {\n    return new FunctionAssignmentNode(json.name, json.params, json.expr);\n  };\n  /**\n   * get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  FunctionAssignmentNode.prototype.toHTML = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var params = [];\n\n    for (var i = 0; i < this.params.length; i++) {\n      params.push('<span class=\"math-symbol math-parameter\">' + (0, _string.escape)(this.params[i]) + '</span>');\n    }\n\n    var expr = this.expr.toHTML(options);\n\n    if (needParenthesis(this, parenthesis)) {\n      expr = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + expr + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n\n    return '<span class=\"math-function\">' + (0, _string.escape)(this.name) + '</span>' + '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + params.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-round-parenthesis\">)</span><span class=\"math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator\">=</span>' + expr;\n  };\n  /**\n   * get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  FunctionAssignmentNode.prototype._toTex = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var expr = this.expr.toTex(options);\n\n    if (needParenthesis(this, parenthesis)) {\n      expr = \"\\\\left(\".concat(expr, \"\\\\right)\");\n    }\n\n    return '\\\\mathrm{' + this.name + '}\\\\left(' + this.params.map(_latex.toSymbol).join(',') + '\\\\right):=' + expr;\n  };\n\n  return FunctionAssignmentNode;\n}, {\n  isClass: true,\n  isNode: true\n});\nexports.createFunctionAssignmentNode = createFunctionAssignmentNode;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createFunctionAssignmentNode","_is","_keywords","_string","_array","_latex","_operators","_customs","_factory","factory","name","dependencies","_ref","FunctionAssignmentNode","params","expr","SyntaxError","TypeError","Array","isArray","isNode","keywords","Error","map","param","types","type","needParenthesis","node","parenthesis","precedence","getPrecedence","exprPrecedence","typed","prototype","Node","isFunctionAssignmentNode","_compile","FunctionAssignmentNode.prototype._compile","math","argNames","childArgNames","create","forEach","evalExpr","signature","join","syntax","evalFunctionAssignmentNode","scope","args","context","signatures","childArgs","i","length","arguments","fn","setSafeProperty","FunctionAssignmentNode.prototype.forEach","callback","FunctionAssignmentNode.prototype.map","_ifNode","slice","clone","FunctionAssignmentNode.prototype.clone","_toString","FunctionAssignmentNode.prototype._toString","options","toString","toJSON","FunctionAssignmentNode.prototype.toJSON","mathjs","index","fromJSON","FunctionAssignmentNode.fromJSON","json","toHTML","FunctionAssignmentNode.prototype.toHTML","push","escape","_toTex","FunctionAssignmentNode.prototype._toTex","toTex","concat","toSymbol","isClass"]
}
