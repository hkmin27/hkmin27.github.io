{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$expression$node$RelationalNode.js",
"lineCount":9,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/expression/node/RelationalNode.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$expression$node$RelationalNode\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createRelationalNode = void 0;\n\nvar _operators = require(\"../operators.js\");\n\nvar _string = require(\"../../utils/string.js\");\n\nvar _customs = require(\"../../utils/customs.js\");\n\nvar _latex = require(\"../../utils/latex.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'RelationalNode';\nvar dependencies = ['Node'];\nvar createRelationalNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var Node = _ref.Node;\n\n  /**\n   * A node representing a chained conditional expression, such as 'x > y > z'\n   *\n   * @param {String[]} conditionals   An array of conditional operators used to compare the parameters\n   * @param {Node[]} params   The parameters that will be compared\n   *\n   * @constructor RelationalNode\n   * @extends {Node}\n   */\n  function RelationalNode(conditionals, params) {\n    if (!(this instanceof RelationalNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (!Array.isArray(conditionals)) throw new TypeError('Parameter conditionals must be an array');\n    if (!Array.isArray(params)) throw new TypeError('Parameter params must be an array');\n    if (conditionals.length !== params.length - 1) throw new TypeError('Parameter params must contain exactly one more element than parameter conditionals');\n    this.conditionals = conditionals;\n    this.params = params;\n  }\n\n  RelationalNode.prototype = new Node();\n  RelationalNode.prototype.type = 'RelationalNode';\n  RelationalNode.prototype.isRelationalNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  RelationalNode.prototype._compile = function (math, argNames) {\n    var self = this;\n    var compiled = this.params.map(function (p) {\n      return p._compile(math, argNames);\n    });\n    return function evalRelationalNode(scope, args, context) {\n      var evalLhs;\n      var evalRhs = compiled[0](scope, args, context);\n\n      for (var i = 0; i < self.conditionals.length; i++) {\n        evalLhs = evalRhs;\n        evalRhs = compiled[i + 1](scope, args, context);\n        var condFn = (0, _customs.getSafeProperty)(math, self.conditionals[i]);\n\n        if (!condFn(evalLhs, evalRhs)) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  RelationalNode.prototype.forEach = function (callback) {\n    var _this = this;\n\n    this.params.forEach(function (n, i) {\n      return callback(n, 'params[' + i + ']', _this);\n    }, this);\n  };\n  /**\n   * Create a new RelationalNode having its childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {RelationalNode} Returns a transformed copy of the node\n   */\n\n\n  RelationalNode.prototype.map = function (callback) {\n    var _this2 = this;\n\n    return new RelationalNode(this.conditionals.slice(), this.params.map(function (n, i) {\n      return _this2._ifNode(callback(n, 'params[' + i + ']', _this2));\n    }, this));\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {RelationalNode}\n   */\n\n\n  RelationalNode.prototype.clone = function () {\n    return new RelationalNode(this.conditionals, this.params);\n  };\n  /**\n   * Get string representation.\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  RelationalNode.prototype._toString = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var precedence = (0, _operators.getPrecedence)(this, parenthesis);\n    var paramStrings = this.params.map(function (p, index) {\n      var paramPrecedence = (0, _operators.getPrecedence)(p, parenthesis);\n      return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '(' + p.toString(options) + ')' : p.toString(options);\n    });\n    var operatorMap = {\n      equal: '==',\n      unequal: '!=',\n      smaller: '<',\n      larger: '>',\n      smallerEq: '<=',\n      largerEq: '>='\n    };\n    var ret = paramStrings[0];\n\n    for (var i = 0; i < this.conditionals.length; i++) {\n      ret += ' ' + operatorMap[this.conditionals[i]] + ' ' + paramStrings[i + 1];\n    }\n\n    return ret;\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  RelationalNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'RelationalNode',\n      conditionals: this.conditionals,\n      params: this.params\n    };\n  };\n  /**\n   * Instantiate a RelationalNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"RelationalNode\", \"condition\": ..., \"trueExpr\": ..., \"falseExpr\": ...}`,\n   *                       where mathjs is optional\n   * @returns {RelationalNode}\n   */\n\n\n  RelationalNode.fromJSON = function (json) {\n    return new RelationalNode(json.conditionals, json.params);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  RelationalNode.prototype.toHTML = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var precedence = (0, _operators.getPrecedence)(this, parenthesis);\n    var paramStrings = this.params.map(function (p, index) {\n      var paramPrecedence = (0, _operators.getPrecedence)(p, parenthesis);\n      return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + p.toHTML(options) + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>' : p.toHTML(options);\n    });\n    var operatorMap = {\n      equal: '==',\n      unequal: '!=',\n      smaller: '<',\n      larger: '>',\n      smallerEq: '<=',\n      largerEq: '>='\n    };\n    var ret = paramStrings[0];\n\n    for (var i = 0; i < this.conditionals.length; i++) {\n      ret += '<span class=\"math-operator math-binary-operator math-explicit-binary-operator\">' + (0, _string.escape)(operatorMap[this.conditionals[i]]) + '</span>' + paramStrings[i + 1];\n    }\n\n    return ret;\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  RelationalNode.prototype._toTex = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var precedence = (0, _operators.getPrecedence)(this, parenthesis);\n    var paramStrings = this.params.map(function (p, index) {\n      var paramPrecedence = (0, _operators.getPrecedence)(p, parenthesis);\n      return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '\\\\left(' + p.toTex(options) + '\\right)' : p.toTex(options);\n    });\n    var ret = paramStrings[0];\n\n    for (var i = 0; i < this.conditionals.length; i++) {\n      ret += _latex.latexOperators[this.conditionals[i]] + paramStrings[i + 1];\n    }\n\n    return ret;\n  };\n\n  return RelationalNode;\n}, {\n  isClass: true,\n  isNode: true\n});\nexports.createRelationalNode = createRelationalNode;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createRelationalNode","_operators","_string","_customs","_latex","_factory","factory","name","dependencies","_ref","RelationalNode","conditionals","params","SyntaxError","Array","isArray","TypeError","length","prototype","Node","type","isRelationalNode","_compile","RelationalNode.prototype._compile","math","argNames","self","compiled","map","p","evalRelationalNode","scope","args","context","evalLhs","evalRhs","i","condFn","getSafeProperty","forEach","RelationalNode.prototype.forEach","callback","_this","n","RelationalNode.prototype.map","_this2","slice","_ifNode","clone","RelationalNode.prototype.clone","_toString","RelationalNode.prototype._toString","options","parenthesis","precedence","getPrecedence","paramStrings","index","paramPrecedence","toString","operatorMap","equal","unequal","smaller","larger","smallerEq","largerEq","ret","toJSON","RelationalNode.prototype.toJSON","mathjs","fromJSON","RelationalNode.fromJSON","json","toHTML","RelationalNode.prototype.toHTML","escape","_toTex","RelationalNode.prototype._toTex","toTex","latexOperators","isClass","isNode"]
}
