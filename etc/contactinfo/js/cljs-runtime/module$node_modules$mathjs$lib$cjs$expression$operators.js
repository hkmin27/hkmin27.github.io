shadow$provide.module$node_modules$mathjs$lib$cjs$expression$operators=function(global,require,module,exports){function getPrecedence(_node,parenthesis){var node=_node;"keep"!==parenthesis&&(node=_node.getContent());_node=node.getIdentifier();for(parenthesis=0;parenthesis<properties.length;parenthesis++)if(_node in properties[parenthesis])return parenthesis;return null}Object.defineProperty(exports,"__esModule",{value:!0});exports.getPrecedence=getPrecedence;exports.getAssociativity=function(_node,
parenthesis){var node=_node;"keep"!==parenthesis&&(node=_node.getContent());_node=node.getIdentifier();parenthesis=getPrecedence(node,parenthesis);if(null===parenthesis)return null;parenthesis=properties[parenthesis][_node];if((0,_object.hasOwnProperty)(parenthesis,"associativity")){if("left"===parenthesis.associativity)return"left";if("right"===parenthesis.associativity)return"right";throw Error("'"+_node+"' has the invalid associativity '"+parenthesis.associativity+"'.");}return null};exports.isAssociativeWith=
function(nodeA,nodeB,parenthesis){var a="keep"!==parenthesis?nodeA.getContent():nodeA;nodeA="keep"!==parenthesis?nodeA.getContent():nodeB;nodeB=a.getIdentifier();nodeA=nodeA.getIdentifier();parenthesis=getPrecedence(a,parenthesis);if(null===parenthesis)return null;parenthesis=properties[parenthesis][nodeB];if((0,_object.hasOwnProperty)(parenthesis,"associativeWith")&&parenthesis.associativeWith instanceof Array){for(a=0;a<parenthesis.associativeWith.length;a++)if(parenthesis.associativeWith[a]===
nodeA)return!0;return!1}return null};exports.properties=void 0;var _object=require("module$node_modules$mathjs$lib$cjs$utils$object"),properties=[{AssignmentNode:{},FunctionAssignmentNode:{}},{ConditionalNode:{latexLeftParens:!1,latexRightParens:!1,latexParens:!1}},{"OperatorNode:or":{associativity:"left",associativeWith:[]}},{"OperatorNode:xor":{associativity:"left",associativeWith:[]}},{"OperatorNode:and":{associativity:"left",associativeWith:[]}},{"OperatorNode:bitOr":{associativity:"left",associativeWith:[]}},
{"OperatorNode:bitXor":{associativity:"left",associativeWith:[]}},{"OperatorNode:bitAnd":{associativity:"left",associativeWith:[]}},{"OperatorNode:equal":{associativity:"left",associativeWith:[]},"OperatorNode:unequal":{associativity:"left",associativeWith:[]},"OperatorNode:smaller":{associativity:"left",associativeWith:[]},"OperatorNode:larger":{associativity:"left",associativeWith:[]},"OperatorNode:smallerEq":{associativity:"left",associativeWith:[]},"OperatorNode:largerEq":{associativity:"left",
associativeWith:[]},RelationalNode:{associativity:"left",associativeWith:[]}},{"OperatorNode:leftShift":{associativity:"left",associativeWith:[]},"OperatorNode:rightArithShift":{associativity:"left",associativeWith:[]},"OperatorNode:rightLogShift":{associativity:"left",associativeWith:[]}},{"OperatorNode:to":{associativity:"left",associativeWith:[]}},{RangeNode:{}},{"OperatorNode:add":{associativity:"left",associativeWith:["OperatorNode:add","OperatorNode:subtract"]},"OperatorNode:subtract":{associativity:"left",
associativeWith:[]}},{"OperatorNode:multiply":{associativity:"left",associativeWith:["OperatorNode:multiply","OperatorNode:divide","Operator:dotMultiply","Operator:dotDivide"]},"OperatorNode:divide":{associativity:"left",associativeWith:[],latexLeftParens:!1,latexRightParens:!1,latexParens:!1},"OperatorNode:dotMultiply":{associativity:"left",associativeWith:["OperatorNode:multiply","OperatorNode:divide","OperatorNode:dotMultiply","OperatorNode:doDivide"]},"OperatorNode:dotDivide":{associativity:"left",
associativeWith:[]},"OperatorNode:mod":{associativity:"left",associativeWith:[]}},{"OperatorNode:unaryPlus":{associativity:"right"},"OperatorNode:unaryMinus":{associativity:"right"},"OperatorNode:bitNot":{associativity:"right"},"OperatorNode:not":{associativity:"right"}},{"OperatorNode:pow":{associativity:"right",associativeWith:[],latexRightParens:!1},"OperatorNode:dotPow":{associativity:"right",associativeWith:[]}},{"OperatorNode:factorial":{associativity:"left"}},{"OperatorNode:transpose":{associativity:"left"}}];
exports.properties=properties}
//# sourceMappingURL=module$node_modules$mathjs$lib$cjs$expression$operators.js.map
