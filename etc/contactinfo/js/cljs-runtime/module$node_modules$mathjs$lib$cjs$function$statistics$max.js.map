{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$statistics$max.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,0DAAA,CAA+E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGvHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,SAAR,CAAoB,IAAK,EAEzB,KAAIC,YAAcP,OAAA,CAAQ,qDAAR,CAEdQ,OAAAA,CAAWR,OAAA,CAAQ,kDAAR,CAEf,KAAIS,qBAAuBT,OAAA,CAAQ,kFAAR,CAIvBM,QAAAA,CAA2B,CAAC,CAAA,CAAGE,MAASE,CAAAA,OAAb,EAFpBC,KAEoB,CADZC,CAAC,OAADA,CAAU,QAAVA;AAAoB,SAApBA,CAA+B,QAA/BA,CACY,CAA0C,QAAS,CAACC,IAAD,CAAO,CA6DvFC,QAASA,SAAQ,CAACC,CAAD,CAAIC,CAAJ,CAAO,CACtB,GAAI,CACF,MAAOC,OAAA,CAAOF,CAAP,CAAUC,CAAV,CAAA,CAAeD,CAAf,CAAmBC,CADxB,CAEF,MAAOE,GAAP,CAAY,CACZ,KAAM,CAAC,CAAA,CAAGT,oBAAqBU,CAAAA,mBAAzB,EAA8CD,GAA9C,CAAmD,KAAnD,CAA0DF,CAA1D,CAAN,CADY,CAHQ,CAexBI,QAASA,KAAI,CAACC,KAAD,CAAQ,CACnB,IAAIC,GACJ,EAAC,CAAA,CAAGf,WAAYgB,CAAAA,WAAhB,EAA6BF,KAA7B,CAAoC,QAAS,CAAChB,KAAD,CAAQ,CACnD,GAAI,CACF,GAAImB,KAAA,CAAMnB,KAAN,CAAJ,EAAqC,QAArC,GAAoB,MAAOA,MAA3B,CACEiB,GAAA,CAAMG,GADR,KAEO,IAAYC,IAAAA,EAAZ,GAAIJ,GAAJ,EAAyBL,MAAA,CAAOZ,KAAP,CAAciB,GAAd,CAAzB,CACLA,GAAA,CAAMjB,KAJN,CAMF,MAAOa,GAAP,CAAY,CACZ,KAAM,CAAC,CAAA,CAAGT,oBAAqBU,CAAAA,mBAAzB,EAA8CD,GAA9C,CAAmD,KAAnD,CAA0Db,KAA1D,CAAN,CADY,CAPqC,CAArD,CAYA,IAAYqB,IAAAA,EAAZ,GAAIJ,GAAJ,CACE,KAAUK,MAAJ,CAAU,wCAAV,CAAN,CAIiB,QAAnB;AAAI,MAAOL,IAAX,GACEA,GADF,CACQM,OAAA,CAAQN,GAAR,CAAaO,MAAOC,CAAAA,MAApB,CADR,CAIA,OAAOR,IAvBY,CA5EkE,IACnFS,MAAQlB,IAAKkB,CAAAA,KADsE,CAEnFF,OAAShB,IAAKgB,CAAAA,MAFqE,CAGnFD,QAAUf,IAAKe,CAAAA,OAHoE,CAInFX,OAASJ,IAAKI,CAAAA,MAiClB,OAAOc,MAAA,CAvCEpB,KAuCF,CAAY,CAEjB,iBAAkBS,IAFD,CAIjB,qCAAsCY,QAAmC,CAACX,KAAD,CAAQY,GAAR,CAAa,CACpF,MAAO,CAAC,CAAA,CAAG1B,WAAY2B,CAAAA,MAAhB,EAAwBb,KAAxB,CAA+BY,GAAIE,CAAAA,OAAJ,EAA/B,CAA8CrB,QAA9C,CAD6E,CAJrE,CAQjB,MAAOsB,QAAU,CAACC,IAAD,CAAO,CACtB,GAAI,CAAC,CAAA,CAAG9B,WAAY+B,CAAAA,mBAAhB,EAAqCD,IAArC,CAAJ,CACE,KAAM,KAAIE,SAAJ,CAAc,wCAAd,CAAN,CAGF,MAAOnB,KAAA,CAAKiB,IAAL,CALe,CARP,CAAZ,CArCgF,CAA1D,CAsG/BnC,QAAQI,CAAAA,SAAR,CAAoBA,OAtHmG;",
"sources":["node_modules/mathjs/lib/cjs/function/statistics/max.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$statistics$max\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMax = void 0;\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _improveErrorMessage = require(\"./utils/improveErrorMessage.js\");\n\nvar name = 'max';\nvar dependencies = ['typed', 'config', 'numeric', 'larger'];\nvar createMax = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      numeric = _ref.numeric,\n      larger = _ref.larger;\n\n  /**\n   * Compute the maximum value of a matrix or a  list with values.\n   * In case of a multi dimensional array, the maximum of the flattened array\n   * will be calculated. When `dim` is provided, the maximum over the selected\n   * dimension will be calculated. Parameter `dim` is zero-based.\n   *\n   * Syntax:\n   *\n   *     math.max(a, b, c, ...)\n   *     math.max(A)\n   *     math.max(A, dim)\n   *\n   * Examples:\n   *\n   *     math.max(2, 1, 4, 3)                  // returns 4\n   *     math.max([2, 1, 4, 3])                // returns 4\n   *\n   *     // maximum over a specified dimension (zero-based)\n   *     math.max([[2, 5], [4, 3], [1, 7]], 0) // returns [4, 7]\n   *     math.max([[2, 5], [4, 3]], [1, 7], 1) // returns [5, 4, 7]\n   *\n   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1\n   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5\n   *\n   * See also:\n   *\n   *    mean, median, min, prod, std, sum, variance\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The maximum value\n   */\n  return typed(name, {\n    // max([a, b, c, d, ...])\n    'Array | Matrix': _max,\n    // max([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      return (0, _collection.reduce)(array, dim.valueOf(), _largest);\n    },\n    // max(a, b, c, d, ...)\n    '...': function _(args) {\n      if ((0, _collection.containsCollections)(args)) {\n        throw new TypeError('Scalar values expected in function max');\n      }\n\n      return _max(args);\n    }\n  });\n  /**\n   * Return the largest of two values\n   * @param {*} x\n   * @param {*} y\n   * @returns {*} Returns x when x is largest, or y when y is largest\n   * @private\n   */\n\n  function _largest(x, y) {\n    try {\n      return larger(x, y) ? x : y;\n    } catch (err) {\n      throw (0, _improveErrorMessage.improveErrorMessage)(err, 'max', y);\n    }\n  }\n  /**\n   * Recursively calculate the maximum value in an n-dimensional array\n   * @param {Array} array\n   * @return {number} max\n   * @private\n   */\n\n\n  function _max(array) {\n    var res;\n    (0, _collection.deepForEach)(array, function (value) {\n      try {\n        if (isNaN(value) && typeof value === 'number') {\n          res = NaN;\n        } else if (res === undefined || larger(value, res)) {\n          res = value;\n        }\n      } catch (err) {\n        throw (0, _improveErrorMessage.improveErrorMessage)(err, 'max', value);\n      }\n    });\n\n    if (res === undefined) {\n      throw new Error('Cannot calculate max of an empty array');\n    } // make sure returning numeric value: parse a string into a numeric value\n\n\n    if (typeof res === 'string') {\n      res = numeric(res, config.number);\n    }\n\n    return res;\n  }\n});\nexports.createMax = createMax;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createMax","_collection","_factory","_improveErrorMessage","factory","name","dependencies","_ref","_largest","x","y","larger","err","improveErrorMessage","_max","array","res","deepForEach","isNaN","NaN","undefined","Error","numeric","config","number","typed","ArrayMatrixNumberBigNumber","dim","reduce","valueOf","_","args","containsCollections","TypeError"]
}
