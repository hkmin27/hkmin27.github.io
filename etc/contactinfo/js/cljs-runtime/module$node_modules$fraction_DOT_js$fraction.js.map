{
"version":3,
"file":"module$node_modules$fraction_DOT_js$fraction.js",
"lineCount":13,
"mappings":"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",
"sources":["node_modules/fraction_DOT_js/fraction.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$fraction_DOT_js$fraction\"] = function(global,require,module,exports) {\n/**\n * @license Fraction.js v4.0.12 09/09/2015\n * http://www.xarg.org/2014/03/rational-numbers-in-javascript/\n *\n * Copyright (c) 2015, Robert Eisele (robert@xarg.org)\n * Dual licensed under the MIT or GPL Version 2 licenses.\n **/\n\n\n/**\n *\n * This class offers the possibility to calculate fractions.\n * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.\n *\n * Array/Object form\n * [ 0 => <nominator>, 1 => <denominator> ]\n * [ n => <nominator>, d => <denominator> ]\n *\n * Integer form\n * - Single integer value\n *\n * Double form\n * - Single double value\n *\n * String form\n * 123.456 - a simple double\n * 123/456 - a string fraction\n * 123.'456' - a double with repeating decimal places\n * 123.(456) - synonym\n * 123.45'6' - a double with repeating last place\n * 123.45(6) - synonym\n *\n * Example:\n *\n * var f = new Fraction(\"9.4'31'\");\n * f.mul([-4, 3]).div(4.9);\n *\n */\n\n(function(root) {\n\n  \"use strict\";\n\n  // Maximum search depth for cyclic rational numbers. 2000 should be more than enough.\n  // Example: 1/7 = 0.(142857) has 6 repeating decimal places.\n  // If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits\n  var MAX_CYCLE_LEN = 2000;\n\n  // Parsed data to avoid calling \"new\" all the time\n  var P = {\n    \"s\": 1,\n    \"n\": 0,\n    \"d\": 1\n  };\n\n  function createError(name) {\n\n    function errorConstructor() {\n      var temp = Error.apply(this, arguments);\n      temp['name'] = this['name'] = name;\n      this['stack'] = temp['stack'];\n      this['message'] = temp['message'];\n    }\n\n    /**\n     * Error constructor\n     *\n     * @constructor\n     */\n    function IntermediateInheritor() { }\n    IntermediateInheritor.prototype = Error.prototype;\n    errorConstructor.prototype = new IntermediateInheritor();\n\n    return errorConstructor;\n  }\n\n  var DivisionByZero = Fraction['DivisionByZero'] = createError('DivisionByZero');\n  var InvalidParameter = Fraction['InvalidParameter'] = createError('InvalidParameter');\n\n  function assign(n, s) {\n\n    if (isNaN(n = parseInt(n, 10))) {\n      throwInvalidParam();\n    }\n    return n * s;\n  }\n\n  function throwInvalidParam() {\n    throw new InvalidParameter();\n  }\n\n  var parse = function(p1, p2) {\n\n    var n = 0, d = 1, s = 1;\n    var v = 0, w = 0, x = 0, y = 1, z = 1;\n\n    var A = 0, B = 1;\n    var C = 1, D = 1;\n\n    var N = 10000000;\n    var M;\n\n    if (p1 === undefined || p1 === null) {\n      /* void */\n    } else if (p2 !== undefined) {\n      n = p1;\n      d = p2;\n      s = n * d;\n    } else\n      switch (typeof p1) {\n\n        case \"object\":\n          {\n            if (\"d\" in p1 && \"n\" in p1) {\n              n = p1[\"n\"];\n              d = p1[\"d\"];\n              if (\"s\" in p1)\n                n *= p1[\"s\"];\n            } else if (0 in p1) {\n              n = p1[0];\n              if (1 in p1)\n                d = p1[1];\n            } else {\n              throwInvalidParam();\n            }\n            s = n * d;\n            break;\n          }\n        case \"number\":\n          {\n            if (p1 < 0) {\n              s = p1;\n              p1 = -p1;\n            }\n\n            if (p1 % 1 === 0) {\n              n = p1;\n            } else if (p1 > 0) { // check for != 0, scale would become NaN (log(0)), which converges really slow\n\n              if (p1 >= 1) {\n                z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));\n                p1 /= z;\n              }\n\n              // Using Farey Sequences\n              // http://www.johndcook.com/blog/2010/10/20/best-rational-approximation/\n\n              while (B <= N && D <= N) {\n                M = (A + C) / (B + D);\n\n                if (p1 === M) {\n                  if (B + D <= N) {\n                    n = A + C;\n                    d = B + D;\n                  } else if (D > B) {\n                    n = C;\n                    d = D;\n                  } else {\n                    n = A;\n                    d = B;\n                  }\n                  break;\n\n                } else {\n\n                  if (p1 > M) {\n                    A += C;\n                    B += D;\n                  } else {\n                    C += A;\n                    D += B;\n                  }\n\n                  if (B > N) {\n                    n = C;\n                    d = D;\n                  } else {\n                    n = A;\n                    d = B;\n                  }\n                }\n              }\n              n *= z;\n            } else if (isNaN(p1) || isNaN(p2)) {\n              d = n = NaN;\n            }\n            break;\n          }\n        case \"string\":\n          {\n            B = p1.match(/\\d+|./g);\n\n            if (B === null)\n              throwInvalidParam();\n\n            if (B[A] === '-') {// Check for minus sign at the beginning\n              s = -1;\n              A++;\n            } else if (B[A] === '+') {// Check for plus sign at the beginning\n              A++;\n            }\n\n            if (B.length === A + 1) { // Check if it's just a simple number \"1234\"\n              w = assign(B[A++], s);\n            } else if (B[A + 1] === '.' || B[A] === '.') { // Check if it's a decimal number\n\n              if (B[A] !== '.') { // Handle 0.5 and .5\n                v = assign(B[A++], s);\n              }\n              A++;\n\n              // Check for decimal places\n              if (A + 1 === B.length || B[A + 1] === '(' && B[A + 3] === ')' || B[A + 1] === \"'\" && B[A + 3] === \"'\") {\n                w = assign(B[A], s);\n                y = Math.pow(10, B[A].length);\n                A++;\n              }\n\n              // Check for repeating places\n              if (B[A] === '(' && B[A + 2] === ')' || B[A] === \"'\" && B[A + 2] === \"'\") {\n                x = assign(B[A + 1], s);\n                z = Math.pow(10, B[A + 1].length) - 1;\n                A += 3;\n              }\n\n            } else if (B[A + 1] === '/' || B[A + 1] === ':') { // Check for a simple fraction \"123/456\" or \"123:456\"\n              w = assign(B[A], s);\n              y = assign(B[A + 2], 1);\n              A += 3;\n            } else if (B[A + 3] === '/' && B[A + 1] === ' ') { // Check for a complex fraction \"123 1/2\"\n              v = assign(B[A], s);\n              w = assign(B[A + 2], s);\n              y = assign(B[A + 4], 1);\n              A += 5;\n            }\n\n            if (B.length <= A) { // Check for more tokens on the stack\n              d = y * z;\n              s = /* void */\n              n = x + d * v + z * w;\n              break;\n            }\n\n            /* Fall through on error */\n          }\n        default:\n          throwInvalidParam();\n      }\n\n    if (d === 0) {\n      throw new DivisionByZero();\n    }\n\n    P[\"s\"] = s < 0 ? -1 : 1;\n    P[\"n\"] = Math.abs(n);\n    P[\"d\"] = Math.abs(d);\n  };\n\n  function modpow(b, e, m) {\n\n    var r = 1;\n    for (; e > 0; b = (b * b) % m, e >>= 1) {\n\n      if (e & 1) {\n        r = (r * b) % m;\n      }\n    }\n    return r;\n  }\n\n\n  function cycleLen(n, d) {\n\n    for (; d % 2 === 0;\n      d /= 2) {\n    }\n\n    for (; d % 5 === 0;\n      d /= 5) {\n    }\n\n    if (d === 1) // Catch non-cyclic numbers\n      return 0;\n\n    // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:\n    // 10^(d-1) % d == 1\n    // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,\n    // as we want to translate the numbers to strings.\n\n    var rem = 10 % d;\n    var t = 1;\n\n    for (; rem !== 1; t++) {\n      rem = rem * 10 % d;\n\n      if (t > MAX_CYCLE_LEN)\n        return 0; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`\n    }\n    return t;\n  }\n\n\n  function cycleStart(n, d, len) {\n\n    var rem1 = 1;\n    var rem2 = modpow(10, len, d);\n\n    for (var t = 0; t < 300; t++) { // s < ~log10(Number.MAX_VALUE)\n      // Solve 10^s == 10^(s+t) (mod d)\n\n      if (rem1 === rem2)\n        return t;\n\n      rem1 = rem1 * 10 % d;\n      rem2 = rem2 * 10 % d;\n    }\n    return 0;\n  }\n\n  function gcd(a, b) {\n\n    if (!a)\n      return b;\n    if (!b)\n      return a;\n\n    while (1) {\n      a %= b;\n      if (!a)\n        return b;\n      b %= a;\n      if (!b)\n        return a;\n    }\n  };\n\n  /**\n   * Module constructor\n   *\n   * @constructor\n   * @param {number|Fraction=} a\n   * @param {number=} b\n   */\n  function Fraction(a, b) {\n\n    if (!(this instanceof Fraction)) {\n      return new Fraction(a, b);\n    }\n\n    parse(a, b);\n\n    if (Fraction['REDUCE']) {\n      a = gcd(P[\"d\"], P[\"n\"]); // Abuse a\n    } else {\n      a = 1;\n    }\n\n    this[\"s\"] = P[\"s\"];\n    this[\"n\"] = P[\"n\"] / a;\n    this[\"d\"] = P[\"d\"] / a;\n  }\n\n  /**\n   * Boolean global variable to be able to disable automatic reduction of the fraction\n   *\n   */\n  Fraction['REDUCE'] = 1;\n\n  Fraction.prototype = {\n\n    \"s\": 1,\n    \"n\": 0,\n    \"d\": 1,\n\n    /**\n     * Calculates the absolute value\n     *\n     * Ex: new Fraction(-4).abs() => 4\n     **/\n    \"abs\": function() {\n\n      return new Fraction(this[\"n\"], this[\"d\"]);\n    },\n\n    /**\n     * Inverts the sign of the current fraction\n     *\n     * Ex: new Fraction(-4).neg() => 4\n     **/\n    \"neg\": function() {\n\n      return new Fraction(-this[\"s\"] * this[\"n\"], this[\"d\"]);\n    },\n\n    /**\n     * Adds two rational numbers\n     *\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => 467 / 30\n     **/\n    \"add\": function(a, b) {\n\n      parse(a, b);\n      return new Fraction(\n        this[\"s\"] * this[\"n\"] * P[\"d\"] + P[\"s\"] * this[\"d\"] * P[\"n\"],\n        this[\"d\"] * P[\"d\"]\n      );\n    },\n\n    /**\n     * Subtracts two rational numbers\n     *\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => -427 / 30\n     **/\n    \"sub\": function(a, b) {\n\n      parse(a, b);\n      return new Fraction(\n        this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * this[\"d\"] * P[\"n\"],\n        this[\"d\"] * P[\"d\"]\n      );\n    },\n\n    /**\n     * Multiplies two rational numbers\n     *\n     * Ex: new Fraction(\"-17.(345)\").mul(3) => 5776 / 111\n     **/\n    \"mul\": function(a, b) {\n\n      parse(a, b);\n      return new Fraction(\n        this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"n\"],\n        this[\"d\"] * P[\"d\"]\n      );\n    },\n\n    /**\n     * Divides two rational numbers\n     *\n     * Ex: new Fraction(\"-17.(345)\").inverse().div(3)\n     **/\n    \"div\": function(a, b) {\n\n      parse(a, b);\n      return new Fraction(\n        this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"d\"],\n        this[\"d\"] * P[\"n\"]\n      );\n    },\n\n    /**\n     * Clones the actual object\n     *\n     * Ex: new Fraction(\"-17.(345)\").clone()\n     **/\n    \"clone\": function() {\n      return new Fraction(this);\n    },\n\n    /**\n     * Calculates the modulo of two rational numbers - a more precise fmod\n     *\n     * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)\n     **/\n    \"mod\": function(a, b) {\n\n      if (isNaN(this['n']) || isNaN(this['d'])) {\n        return new Fraction(NaN);\n      }\n\n      if (a === undefined) {\n        return new Fraction(this[\"s\"] * this[\"n\"] % this[\"d\"], 1);\n      }\n\n      parse(a, b);\n      if (0 === P[\"n\"] && 0 === this[\"d\"]) {\n        Fraction(0, 0); // Throw DivisionByZero\n      }\n\n      /*\n       * First silly attempt, kinda slow\n       *\n       return that[\"sub\"]({\n       \"n\": num[\"n\"] * Math.floor((this.n / this.d) / (num.n / num.d)),\n       \"d\": num[\"d\"],\n       \"s\": this[\"s\"]\n       });*/\n\n      /*\n       * New attempt: a1 / b1 = a2 / b2 * q + r\n       * => b2 * a1 = a2 * b1 * q + b1 * b2 * r\n       * => (b2 * a1 % a2 * b1) / (b1 * b2)\n       */\n      return new Fraction(\n        this[\"s\"] * (P[\"d\"] * this[\"n\"]) % (P[\"n\"] * this[\"d\"]),\n        P[\"d\"] * this[\"d\"]\n      );\n    },\n\n    /**\n     * Calculates the fractional gcd of two rational numbers\n     *\n     * Ex: new Fraction(5,8).gcd(3,7) => 1/56\n     */\n    \"gcd\": function(a, b) {\n\n      parse(a, b);\n\n      // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)\n\n      return new Fraction(gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]), P[\"d\"] * this[\"d\"]);\n    },\n\n    /**\n     * Calculates the fractional lcm of two rational numbers\n     *\n     * Ex: new Fraction(5,8).lcm(3,7) => 15\n     */\n    \"lcm\": function(a, b) {\n\n      parse(a, b);\n\n      // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)\n\n      if (P[\"n\"] === 0 && this[\"n\"] === 0) {\n        return new Fraction;\n      }\n      return new Fraction(P[\"n\"] * this[\"n\"], gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]));\n    },\n\n    /**\n     * Calculates the ceil of a rational number\n     *\n     * Ex: new Fraction('4.(3)').ceil() => (5 / 1)\n     **/\n    \"ceil\": function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n      return new Fraction(Math.ceil(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\n     * Calculates the floor of a rational number\n     *\n     * Ex: new Fraction('4.(3)').floor() => (4 / 1)\n     **/\n    \"floor\": function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n      return new Fraction(Math.floor(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\n     * Rounds a rational numbers\n     *\n     * Ex: new Fraction('4.(3)').round() => (4 / 1)\n     **/\n    \"round\": function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n      return new Fraction(Math.round(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\n     * Gets the inverse of the fraction, means numerator and denominator are exchanged\n     *\n     * Ex: new Fraction([-3, 4]).inverse() => -4 / 3\n     **/\n    \"inverse\": function() {\n\n      return new Fraction(this[\"s\"] * this[\"d\"], this[\"n\"]);\n    },\n\n    /**\n     * Calculates the fraction to some integer exponent\n     *\n     * Ex: new Fraction(-1,2).pow(-3) => -8\n     */\n    \"pow\": function(m) {\n\n      if (m < 0) {\n        return new Fraction(Math.pow(this['s'] * this[\"d\"], -m), Math.pow(this[\"n\"], -m));\n      } else {\n        return new Fraction(Math.pow(this['s'] * this[\"n\"], m), Math.pow(this[\"d\"], m));\n      }\n    },\n\n    /**\n     * Check if two rational numbers are the same\n     *\n     * Ex: new Fraction(19.6).equals([98, 5]);\n     **/\n    \"equals\": function(a, b) {\n\n      parse(a, b);\n      return this[\"s\"] * this[\"n\"] * P[\"d\"] === P[\"s\"] * P[\"n\"] * this[\"d\"]; // Same as compare() === 0\n    },\n\n    /**\n     * Check if two rational numbers are the same\n     *\n     * Ex: new Fraction(19.6).equals([98, 5]);\n     **/\n    \"compare\": function(a, b) {\n\n      parse(a, b);\n      var t = (this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * P[\"n\"] * this[\"d\"]);\n      return (0 < t) - (t < 0);\n    },\n\n    \"simplify\": function(eps) {\n\n      // First naive implementation, needs improvement\n\n      if (isNaN(this['n']) || isNaN(this['d'])) {\n        return this;\n      }\n\n      var cont = this['abs']()['toContinued']();\n\n      eps = eps || 0.001;\n\n      function rec(a) {\n        if (a.length === 1)\n          return new Fraction(a[0]);\n        return rec(a.slice(1))['inverse']()['add'](a[0]);\n      }\n\n      for (var i = 0; i < cont.length; i++) {\n        var tmp = rec(cont.slice(0, i + 1));\n        if (tmp['sub'](this['abs']())['abs']().valueOf() < eps) {\n          return tmp['mul'](this['s']);\n        }\n      }\n      return this;\n    },\n\n    /**\n     * Check if two rational numbers are divisible\n     *\n     * Ex: new Fraction(19.6).divisible(1.5);\n     */\n    \"divisible\": function(a, b) {\n\n      parse(a, b);\n      return !(!(P[\"n\"] * this[\"d\"]) || ((this[\"n\"] * P[\"d\"]) % (P[\"n\"] * this[\"d\"])));\n    },\n\n    /**\n     * Returns a decimal representation of the fraction\n     *\n     * Ex: new Fraction(\"100.'91823'\").valueOf() => 100.91823918239183\n     **/\n    'valueOf': function() {\n\n      return this[\"s\"] * this[\"n\"] / this[\"d\"];\n    },\n\n    /**\n     * Returns a string-fraction representation of a Fraction object\n     *\n     * Ex: new Fraction(\"1.'3'\").toFraction() => \"4 1/3\"\n     **/\n    'toFraction': function(excludeWhole) {\n\n      var whole, str = \"\";\n      var n = this[\"n\"];\n      var d = this[\"d\"];\n      if (this[\"s\"] < 0) {\n        str += '-';\n      }\n\n      if (d === 1) {\n        str += n;\n      } else {\n\n        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\n          str += whole;\n          str += \" \";\n          n %= d;\n        }\n\n        str += n;\n        str += '/';\n        str += d;\n      }\n      return str;\n    },\n\n    /**\n     * Returns a latex representation of a Fraction object\n     *\n     * Ex: new Fraction(\"1.'3'\").toLatex() => \"\\frac{4}{3}\"\n     **/\n    'toLatex': function(excludeWhole) {\n\n      var whole, str = \"\";\n      var n = this[\"n\"];\n      var d = this[\"d\"];\n      if (this[\"s\"] < 0) {\n        str += '-';\n      }\n\n      if (d === 1) {\n        str += n;\n      } else {\n\n        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\n          str += whole;\n          n %= d;\n        }\n\n        str += \"\\\\frac{\";\n        str += n;\n        str += '}{';\n        str += d;\n        str += '}';\n      }\n      return str;\n    },\n\n    /**\n     * Returns an array of continued fraction elements\n     *\n     * Ex: new Fraction(\"7/8\").toContinued() => [0,1,7]\n     */\n    'toContinued': function() {\n\n      var t;\n      var a = this['n'];\n      var b = this['d'];\n      var res = [];\n\n      if (isNaN(a) || isNaN(b)) {\n        return res;\n      }\n\n      do {\n        res.push(Math.floor(a / b));\n        t = a % b;\n        a = b;\n        b = t;\n      } while (a !== 1);\n\n      return res;\n    },\n\n    /**\n     * Creates a string representation of a fraction with all digits\n     *\n     * Ex: new Fraction(\"100.'91823'\").toString() => \"100.(91823)\"\n     **/\n    'toString': function(dec) {\n\n      var g;\n      var N = this[\"n\"];\n      var D = this[\"d\"];\n\n      if (isNaN(N) || isNaN(D)) {\n        return \"NaN\";\n      }\n\n      if (!Fraction['REDUCE']) {\n        g = gcd(N, D);\n        N /= g;\n        D /= g;\n      }\n\n      dec = dec || 15; // 15 = decimal places when no repitation\n\n      var cycLen = cycleLen(N, D); // Cycle length\n      var cycOff = cycleStart(N, D, cycLen); // Cycle start\n\n      var str = this['s'] === -1 ? \"-\" : \"\";\n\n      str += N / D | 0;\n\n      N %= D;\n      N *= 10;\n\n      if (N)\n        str += \".\";\n\n      if (cycLen) {\n\n        for (var i = cycOff; i--;) {\n          str += N / D | 0;\n          N %= D;\n          N *= 10;\n        }\n        str += \"(\";\n        for (var i = cycLen; i--;) {\n          str += N / D | 0;\n          N %= D;\n          N *= 10;\n        }\n        str += \")\";\n      } else {\n        for (var i = dec; N && i--;) {\n          str += N / D | 0;\n          N %= D;\n          N *= 10;\n        }\n      }\n      return str;\n    }\n  };\n\n  if (typeof define === \"function\" && define[\"amd\"]) {\n    define([], function() {\n      return Fraction;\n    });\n  } else if (typeof exports === \"object\") {\n    Object.defineProperty(Fraction, \"__esModule\", { 'value': true });\n    Fraction['default'] = Fraction;\n    Fraction['Fraction'] = Fraction;\n    module['exports'] = Fraction;\n  } else {\n    root['Fraction'] = Fraction;\n  }\n\n})(this);\n\n};"],
"names":["shadow$provide","global","require","module","exports","root","createError","name","errorConstructor","temp","Error","apply","arguments","IntermediateInheritor","prototype","assign","n","s","isNaN","parseInt","throwInvalidParam","InvalidParameter","gcd","a","b","Fraction","parse","P","DivisionByZero","p1","p2","d","v","w","x","y","z","A","B","C","D","undefined","Math","pow","floor","log","LN10","N","M","NaN","match","length","abs","neg","add","sub","mul","div","clone","mod","lcm","ceil","places","round","inverse","m","equals","compare","t","simplify","eps","rec","slice","cont","i","tmp","valueOf","divisible","toFraction","excludeWhole","whole","str","toLatex","toContinued","res","push","toString","dec","g","rem","MAX_CYCLE_LEN","rem1","cycLen","r","e","rem2","cycOff","define","Object","defineProperty"]
}
