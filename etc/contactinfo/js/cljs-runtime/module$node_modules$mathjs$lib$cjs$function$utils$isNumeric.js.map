{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$utils$isNumeric.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,2DAAA,CAAgF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGxHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,eAAR,CAA0B,IAAK,EAE/B,KAAIC,YAAcP,OAAA,CAAQ,qDAAR,CAEdQ,OAAAA,CAAWR,OAAA,CAAQ,kDAAR,CAIXM,OAAAA,CAAiC,CAAC,CAAA,CAAGE,MAASC,CAAAA,OAAb,EAF1BC,WAE0B,CADlBC,CAAC,OAADA,CACkB,CAA0C,QAAS,CAACC,IAAD,CAAO,CACzFC,IAAAA,CAAQD,IAAKC,CAAAA,KA+BjB,OAAOA,KAAA,CAlCEH,WAkCF,CAAY,CACjB,0CAA2CI,QAAuC,EAAG,CACnF,MAAO,CAAA,CAD4E,CADpE;AAIjB,oDAAqDC,QAA2C,EAAG,CACjG,MAAO,CAAA,CAD0F,CAJlF,CAOjB,iBAAkBC,QAAoB,CAACC,CAAD,CAAI,CACxC,MAAO,CAAC,CAAA,CAAGV,WAAYW,CAAAA,OAAhB,EAAyBD,CAAzB,CAA4B,IAA5B,CADiC,CAPzB,CAAZ,CAhCsF,CAA1D,CA4CrCf,QAAQI,CAAAA,eAAR,CAA0BA,MA1D8F;",
"sources":["node_modules/mathjs/lib/cjs/function/utils/isNumeric.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$utils$isNumeric\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createIsNumeric = void 0;\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'isNumeric';\nvar dependencies = ['typed'];\nvar createIsNumeric = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Test whether a value is an numeric value.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isNumeric(x)\n   *\n   * Examples:\n   *\n   *    math.isNumeric(2)                     // returns true\n   *    math.isNumeric('2')                   // returns false\n   *    math.hasNumericValue('2')             // returns true\n   *    math.isNumeric(0)                     // returns true\n   *    math.isNumeric(math.bignumber(500))   // returns true\n   *    math.isNumeric(math.fraction(4))      // returns true\n   *    math.isNumeric(math.complex('2-4i')   // returns false\n   *    math.isNumeric([2.3, 'foo', false])   // returns [true, false, true]\n   *\n   * See also:\n   *\n   *    isZero, isPositive, isNegative, isInteger, hasNumericValue\n   *\n   * @param {*} x       Value to be tested\n   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,\n   *                    `Fraction`, or `boolean`. Returns false for other types.\n   *                    Throws an error in case of unknown types.\n   */\n  return typed(name, {\n    'number | BigNumber | Fraction | boolean': function numberBigNumberFractionBoolean() {\n      return true;\n    },\n    'Complex | Unit | string | null | undefined | Node': function ComplexUnitStringNullUndefinedNode() {\n      return false;\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n});\nexports.createIsNumeric = createIsNumeric;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createIsNumeric","_collection","_factory","factory","name","dependencies","_ref","typed","numberBigNumberFractionBoolean","ComplexUnitStringNullUndefinedNode","ArrayMatrix","x","deepMap"]
}
