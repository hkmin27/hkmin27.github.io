{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$arithmetic$sign.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,2DAAA,CAAgF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGxHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,UAAR,CAAqB,IAAK,EAEtBC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAEf,KAAIQ,YAAcR,OAAA,CAAQ,qDAAR,CAAlB,CAEIS,OAAST,OAAA,CAAQ,uDAAR,CAITM,QAAAA,CAA4B,CAAC,CAAA,CAAGC,MAASG,CAAAA,OAAb,EAFrBC,MAEqB,CADbC,CAAC,OAADA,CAAU,WAAVA,CAAuB,UAAvBA,CAAmC,SAAnCA,CACa,CAA0C,QAAS,CAACC,IAAD,CAAO,CAAA,IACpFC;AAAQD,IAAKC,CAAAA,KADuE,CAEpFC,WAAaF,IAAKG,CAAAA,SAFkE,CAGpFC,QAAUJ,IAAKI,CAAAA,OAHqE,CAIpFC,UAAYL,IAAKM,CAAAA,QAgCrB,OAAOL,MAAA,CAtCEH,MAsCF,CAAY,CACjBS,OAAQX,MAAOY,CAAAA,UADE,CAEjBC,QAASA,QAAgB,CAACC,CAAD,CAAI,CAC3B,MAAgB,EAAT,GAAAA,CAAEC,CAAAA,EAAF,CAAaP,OAAA,CAAQ,CAAC,CAAA,CAAGR,MAAOY,CAAAA,UAAX,EAAuBE,CAAEE,CAAAA,EAAzB,CAAR,CAAb,CAAqDF,CAAEG,CAAAA,IAAF,EADjC,CAFZ,CAKjBV,UAAWA,QAAkB,CAACO,CAAD,CAAI,CAC/B,MAAO,KAAIR,UAAJ,CAAeQ,CAAEI,CAAAA,GAAF,CAAM,CAAN,CAAf,CADwB,CALhB,CAQjBR,SAAUA,QAAiB,CAACI,CAAD,CAAI,CAC7B,MAAO,KAAIL,SAAJ,CAAcK,CAAEK,CAAAA,CAAhB,CAAmB,CAAnB,CADsB,CARd,CAWjB,iBAAkBC,QAAoB,CAACN,CAAD,CAAI,CAExC,MAAO,CAAC,CAAA,CAAGf,WAAYsB,CAAAA,OAAhB,EAAyBP,CAAzB,CAA4B,IAA5B,CAAkC,CAAA,CAAlC,CAFiC,CAXzB,CAejBQ,KAAMA,QAAa,CAACR,CAAD,CAAI,CACrB,MAAO,KAAA,CAAKA,CAAElB,CAAAA,KAAP,CADc,CAfN,CAAZ,CApCiF,CAA1D,CAwDhCH,QAAQI,CAAAA,UAAR,CAAqBA,OAxEmG;",
"sources":["node_modules/mathjs/lib/cjs/function/arithmetic/sign.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$arithmetic$sign\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSign = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _index = require(\"../../plain/number/index.js\");\n\nvar name = 'sign';\nvar dependencies = ['typed', 'BigNumber', 'Fraction', 'complex'];\nvar createSign = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      _BigNumber = _ref.BigNumber,\n      complex = _ref.complex,\n      _Fraction = _ref.Fraction;\n\n  /**\n   * Compute the sign of a value. The sign of a value x is:\n   *\n   * -  1 when x > 0\n   * - -1 when x < 0\n   * -  0 when x == 0\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.sign(x)\n   *\n   * Examples:\n   *\n   *    math.sign(3.5)               // returns 1\n   *    math.sign(-4.2)              // returns -1\n   *    math.sign(0)                 // returns 0\n   *\n   *    math.sign([3, 5, -2, 0, 2])  // returns [1, 1, -1, 0, 1]\n   *\n   * See also:\n   *\n   *    abs\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\n   *            The number for which to determine the sign\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}e\n   *            The sign of `x`\n   */\n  return typed(name, {\n    number: _index.signNumber,\n    Complex: function Complex(x) {\n      return x.im === 0 ? complex((0, _index.signNumber)(x.re)) : x.sign();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(x.cmp(0));\n    },\n    Fraction: function Fraction(x) {\n      return new _Fraction(x.s, 1);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since sign(0) = 0\n      return (0, _collection.deepMap)(x, this, true);\n    },\n    Unit: function Unit(x) {\n      return this(x.value);\n    }\n  });\n});\nexports.createSign = createSign;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createSign","_factory","_collection","_index","factory","name","dependencies","_ref","typed","_BigNumber","BigNumber","complex","_Fraction","Fraction","number","signNumber","Complex","x","im","re","sign","cmp","s","ArrayMatrix","deepMap","Unit"]
}
