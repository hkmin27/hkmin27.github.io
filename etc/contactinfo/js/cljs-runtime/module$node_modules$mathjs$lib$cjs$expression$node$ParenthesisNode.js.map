{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$expression$node$ParenthesisNode.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/expression/node/ParenthesisNode.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$expression$node$ParenthesisNode\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createParenthesisNode = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'ParenthesisNode';\nvar dependencies = ['Node'];\nvar createParenthesisNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var Node = _ref.Node;\n\n  /**\n   * @constructor ParenthesisNode\n   * @extends {Node}\n   * A parenthesis node describes manual parenthesis from the user input\n   * @param {Node} content\n   * @extends {Node}\n   */\n  function ParenthesisNode(content) {\n    if (!(this instanceof ParenthesisNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    } // validate input\n\n\n    if (!(0, _is.isNode)(content)) {\n      throw new TypeError('Node expected for parameter \"content\"');\n    }\n\n    this.content = content;\n  }\n\n  ParenthesisNode.prototype = new Node();\n  ParenthesisNode.prototype.type = 'ParenthesisNode';\n  ParenthesisNode.prototype.isParenthesisNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  ParenthesisNode.prototype._compile = function (math, argNames) {\n    return this.content._compile(math, argNames);\n  };\n  /**\n   * Get the content of the current Node.\n   * @return {Node} content\n   * @override\n   **/\n\n\n  ParenthesisNode.prototype.getContent = function () {\n    return this.content.getContent();\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  ParenthesisNode.prototype.forEach = function (callback) {\n    callback(this.content, 'content', this);\n  };\n  /**\n   * Create a new ParenthesisNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node) : Node} callback\n   * @returns {ParenthesisNode} Returns a clone of the node\n   */\n\n\n  ParenthesisNode.prototype.map = function (callback) {\n    var content = callback(this.content, 'content', this);\n    return new ParenthesisNode(content);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {ParenthesisNode}\n   */\n\n\n  ParenthesisNode.prototype.clone = function () {\n    return new ParenthesisNode(this.content);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  ParenthesisNode.prototype._toString = function (options) {\n    if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n      return '(' + this.content.toString(options) + ')';\n    }\n\n    return this.content.toString(options);\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  ParenthesisNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'ParenthesisNode',\n      content: this.content\n    };\n  };\n  /**\n   * Instantiate an ParenthesisNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"ParenthesisNode\", \"content\": ...}`,\n   *                       where mathjs is optional\n   * @returns {ParenthesisNode}\n   */\n\n\n  ParenthesisNode.fromJSON = function (json) {\n    return new ParenthesisNode(json.content);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  ParenthesisNode.prototype.toHTML = function (options) {\n    if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n      return '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + this.content.toHTML(options) + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n\n    return this.content.toHTML(options);\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  ParenthesisNode.prototype._toTex = function (options) {\n    if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n      return \"\\\\left(\".concat(this.content.toTex(options), \"\\\\right)\");\n    }\n\n    return this.content.toTex(options);\n  };\n\n  return ParenthesisNode;\n}, {\n  isClass: true,\n  isNode: true\n});\nexports.createParenthesisNode = createParenthesisNode;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createParenthesisNode","_is","_factory","factory","name","dependencies","_ref","ParenthesisNode","content","SyntaxError","isNode","TypeError","prototype","Node","type","isParenthesisNode","_compile","ParenthesisNode.prototype._compile","math","argNames","getContent","ParenthesisNode.prototype.getContent","forEach","ParenthesisNode.prototype.forEach","callback","map","ParenthesisNode.prototype.map","clone","ParenthesisNode.prototype.clone","_toString","ParenthesisNode.prototype._toString","options","parenthesis","toString","toJSON","ParenthesisNode.prototype.toJSON","mathjs","fromJSON","ParenthesisNode.fromJSON","json","toHTML","ParenthesisNode.prototype.toHTML","_toTex","ParenthesisNode.prototype._toTex","concat","toTex","isClass"]
}
