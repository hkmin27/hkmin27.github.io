{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$utils$array.js",
"lineCount":14,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/utils/array.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$utils$array\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.arraySize = arraySize;\nexports.validate = validate;\nexports.validateIndex = validateIndex;\nexports.resize = resize;\nexports.reshape = reshape;\nexports.processSizesWildcard = processSizesWildcard;\nexports.squeeze = squeeze;\nexports.unsqueeze = unsqueeze;\nexports.flatten = flatten;\nexports.map = map;\nexports.forEach = forEach;\nexports.filter = filter;\nexports.filterRegExp = filterRegExp;\nexports.join = join;\nexports.identify = identify;\nexports.generalize = generalize;\nexports.getArrayDataType = getArrayDataType;\nexports.last = last;\nexports.initial = initial;\nexports.contains = contains;\n\nvar _number = require(\"./number.js\");\n\nvar _is = require(\"./is.js\");\n\nvar _string = require(\"./string.js\");\n\nvar _DimensionError = require(\"../error/DimensionError.js\");\n\nvar _IndexError = require(\"../error/IndexError.js\");\n\n/**\n * Calculate the size of a multi dimensional array.\n * This function checks the size of the first entry, it does not validate\n * whether all dimensions match. (use function `validate` for that)\n * @param {Array} x\n * @Return {Number[]} size\n */\nfunction arraySize(x) {\n  var s = [];\n\n  while (Array.isArray(x)) {\n    s.push(x.length);\n    x = x[0];\n  }\n\n  return s;\n}\n/**\n * Recursively validate whether each element in a multi dimensional array\n * has a size corresponding to the provided size array.\n * @param {Array} array    Array to be validated\n * @param {number[]} size  Array with the size of each dimension\n * @param {number} dim   Current dimension\n * @throws DimensionError\n * @private\n */\n\n\nfunction _validate(array, size, dim) {\n  var i;\n  var len = array.length;\n\n  if (len !== size[dim]) {\n    throw new _DimensionError.DimensionError(len, size[dim]);\n  }\n\n  if (dim < size.length - 1) {\n    // recursively validate each child array\n    var dimNext = dim + 1;\n\n    for (i = 0; i < len; i++) {\n      var child = array[i];\n\n      if (!Array.isArray(child)) {\n        throw new _DimensionError.DimensionError(size.length - 1, size.length, '<');\n      }\n\n      _validate(array[i], size, dimNext);\n    }\n  } else {\n    // last dimension. none of the childs may be an array\n    for (i = 0; i < len; i++) {\n      if (Array.isArray(array[i])) {\n        throw new _DimensionError.DimensionError(size.length + 1, size.length, '>');\n      }\n    }\n  }\n}\n/**\n * Validate whether each element in a multi dimensional array has\n * a size corresponding to the provided size array.\n * @param {Array} array    Array to be validated\n * @param {number[]} size  Array with the size of each dimension\n * @throws DimensionError\n */\n\n\nfunction validate(array, size) {\n  var isScalar = size.length === 0;\n\n  if (isScalar) {\n    // scalar\n    if (Array.isArray(array)) {\n      throw new _DimensionError.DimensionError(array.length, 0);\n    }\n  } else {\n    // array\n    _validate(array, size, 0);\n  }\n}\n/**\n * Test whether index is an integer number with index >= 0 and index < length\n * when length is provided\n * @param {number} index    Zero-based index\n * @param {number} [length] Length of the array\n */\n\n\nfunction validateIndex(index, length) {\n  if (!(0, _is.isNumber)(index) || !(0, _number.isInteger)(index)) {\n    throw new TypeError('Index must be an integer (value: ' + index + ')');\n  }\n\n  if (index < 0 || typeof length === 'number' && index >= length) {\n    throw new _IndexError.IndexError(index, length);\n  }\n}\n/**\n * Resize a multi dimensional array. The resized array is returned.\n * @param {Array} array         Array to be resized\n * @param {Array.<number>} size Array with the size of each dimension\n * @param {*} [defaultValue=0]  Value to be filled in in new entries,\n *                              zero by default. Specify for example `null`,\n *                              to clearly see entries that are not explicitly\n *                              set.\n * @return {Array} array         The resized array\n */\n\n\nfunction resize(array, size, defaultValue) {\n  // TODO: add support for scalars, having size=[] ?\n  // check the type of the arguments\n  if (!Array.isArray(array) || !Array.isArray(size)) {\n    throw new TypeError('Array expected');\n  }\n\n  if (size.length === 0) {\n    throw new Error('Resizing to scalar is not supported');\n  } // check whether size contains positive integers\n\n\n  size.forEach(function (value) {\n    if (!(0, _is.isNumber)(value) || !(0, _number.isInteger)(value) || value < 0) {\n      throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + (0, _string.format)(size) + ')');\n    }\n  }); // recursively resize the array\n\n  var _defaultValue = defaultValue !== undefined ? defaultValue : 0;\n\n  _resize(array, size, 0, _defaultValue);\n\n  return array;\n}\n/**\n * Recursively resize a multi dimensional array\n * @param {Array} array         Array to be resized\n * @param {number[]} size       Array with the size of each dimension\n * @param {number} dim          Current dimension\n * @param {*} [defaultValue]    Value to be filled in in new entries,\n *                              undefined by default.\n * @private\n */\n\n\nfunction _resize(array, size, dim, defaultValue) {\n  var i;\n  var elem;\n  var oldLen = array.length;\n  var newLen = size[dim];\n  var minLen = Math.min(oldLen, newLen); // apply new length\n\n  array.length = newLen;\n\n  if (dim < size.length - 1) {\n    // non-last dimension\n    var dimNext = dim + 1; // resize existing child arrays\n\n    for (i = 0; i < minLen; i++) {\n      // resize child array\n      elem = array[i];\n\n      if (!Array.isArray(elem)) {\n        elem = [elem]; // add a dimension\n\n        array[i] = elem;\n      }\n\n      _resize(elem, size, dimNext, defaultValue);\n    } // create new child arrays\n\n\n    for (i = minLen; i < newLen; i++) {\n      // get child array\n      elem = [];\n      array[i] = elem; // resize new child array\n\n      _resize(elem, size, dimNext, defaultValue);\n    }\n  } else {\n    // last dimension\n    // remove dimensions of existing values\n    for (i = 0; i < minLen; i++) {\n      while (Array.isArray(array[i])) {\n        array[i] = array[i][0];\n      }\n    } // fill new elements with the default value\n\n\n    for (i = minLen; i < newLen; i++) {\n      array[i] = defaultValue;\n    }\n  }\n}\n/**\n * Re-shape a multi dimensional array to fit the specified dimensions\n * @param {Array} array           Array to be reshaped\n * @param {Array.<number>} sizes  List of sizes for each dimension\n * @returns {Array}               Array whose data has been formatted to fit the\n *                                specified dimensions\n *\n * @throws {DimensionError}       If the product of the new dimension sizes does\n *                                not equal that of the old ones\n */\n\n\nfunction reshape(array, sizes) {\n  var flatArray = flatten(array);\n  var currentLength = flatArray.length;\n\n  if (!Array.isArray(array) || !Array.isArray(sizes)) {\n    throw new TypeError('Array expected');\n  }\n\n  if (sizes.length === 0) {\n    throw new _DimensionError.DimensionError(0, currentLength, '!=');\n  }\n\n  sizes = processSizesWildcard(sizes, currentLength);\n  var newLength = product(sizes);\n\n  if (currentLength !== newLength) {\n    throw new _DimensionError.DimensionError(newLength, currentLength, '!=');\n  }\n\n  try {\n    return _reshape(flatArray, sizes);\n  } catch (e) {\n    if (e instanceof _DimensionError.DimensionError) {\n      throw new _DimensionError.DimensionError(newLength, currentLength, '!=');\n    }\n\n    throw e;\n  }\n}\n/**\n * Replaces the wildcard -1 in the sizes array.\n * @param {Array.<number>} sizes  List of sizes for each dimension. At most on wildcard.\n * @param {number} currentLength  Number of elements in the array.\n * @throws {Error}                If more than one wildcard or unable to replace it.\n * @returns {Array.<number>}      The sizes array with wildcard replaced.\n */\n\n\nfunction processSizesWildcard(sizes, currentLength) {\n  var newLength = product(sizes);\n  var processedSizes = sizes.slice();\n  var WILDCARD = -1;\n  var wildCardIndex = sizes.indexOf(WILDCARD);\n  var isMoreThanOneWildcard = sizes.indexOf(WILDCARD, wildCardIndex + 1) >= 0;\n\n  if (isMoreThanOneWildcard) {\n    throw new Error('More than one wildcard in sizes');\n  }\n\n  var hasWildcard = wildCardIndex >= 0;\n  var canReplaceWildcard = currentLength % newLength === 0;\n\n  if (hasWildcard) {\n    if (canReplaceWildcard) {\n      processedSizes[wildCardIndex] = -currentLength / newLength;\n    } else {\n      throw new Error('Could not replace wildcard, since ' + currentLength + ' is no multiple of ' + -newLength);\n    }\n  }\n\n  return processedSizes;\n}\n/**\n * Computes the product of all array elements.\n * @param {Array<number>} array Array of factors\n * @returns {number}            Product of all elements\n */\n\n\nfunction product(array) {\n  return array.reduce(function (prev, curr) {\n    return prev * curr;\n  }, 1);\n}\n/**\n * Iteratively re-shape a multi dimensional array to fit the specified dimensions\n * @param {Array} array           Array to be reshaped\n * @param {Array.<number>} sizes  List of sizes for each dimension\n * @returns {Array}               Array whose data has been formatted to fit the\n *                                specified dimensions\n */\n\n\nfunction _reshape(array, sizes) {\n  // testing if there are enough elements for the requested shape\n  var tmpArray = array;\n  var tmpArray2; // for each dimensions starting by the last one and ignoring the first one\n\n  for (var sizeIndex = sizes.length - 1; sizeIndex > 0; sizeIndex--) {\n    var size = sizes[sizeIndex];\n    tmpArray2 = []; // aggregate the elements of the current tmpArray in elements of the requested size\n\n    var length = tmpArray.length / size;\n\n    for (var i = 0; i < length; i++) {\n      tmpArray2.push(tmpArray.slice(i * size, (i + 1) * size));\n    } // set it as the new tmpArray for the next loop turn or for return\n\n\n    tmpArray = tmpArray2;\n  }\n\n  return tmpArray;\n}\n/**\n * Squeeze a multi dimensional array\n * @param {Array} array\n * @param {Array} [size]\n * @returns {Array} returns the array itself\n */\n\n\nfunction squeeze(array, size) {\n  var s = size || arraySize(array); // squeeze outer dimensions\n\n  while (Array.isArray(array) && array.length === 1) {\n    array = array[0];\n    s.shift();\n  } // find the first dimension to be squeezed\n\n\n  var dims = s.length;\n\n  while (s[dims - 1] === 1) {\n    dims--;\n  } // squeeze inner dimensions\n\n\n  if (dims < s.length) {\n    array = _squeeze(array, dims, 0);\n    s.length = dims;\n  }\n\n  return array;\n}\n/**\n * Recursively squeeze a multi dimensional array\n * @param {Array} array\n * @param {number} dims Required number of dimensions\n * @param {number} dim  Current dimension\n * @returns {Array | *} Returns the squeezed array\n * @private\n */\n\n\nfunction _squeeze(array, dims, dim) {\n  var i, ii;\n\n  if (dim < dims) {\n    var next = dim + 1;\n\n    for (i = 0, ii = array.length; i < ii; i++) {\n      array[i] = _squeeze(array[i], dims, next);\n    }\n  } else {\n    while (Array.isArray(array)) {\n      array = array[0];\n    }\n  }\n\n  return array;\n}\n/**\n * Unsqueeze a multi dimensional array: add dimensions when missing\n *\n * Paramter `size` will be mutated to match the new, unqueezed matrix size.\n *\n * @param {Array} array\n * @param {number} dims       Desired number of dimensions of the array\n * @param {number} [outer]    Number of outer dimensions to be added\n * @param {Array} [size] Current size of array.\n * @returns {Array} returns the array itself\n * @private\n */\n\n\nfunction unsqueeze(array, dims, outer, size) {\n  var s = size || arraySize(array); // unsqueeze outer dimensions\n\n  if (outer) {\n    for (var i = 0; i < outer; i++) {\n      array = [array];\n      s.unshift(1);\n    }\n  } // unsqueeze inner dimensions\n\n\n  array = _unsqueeze(array, dims, 0);\n\n  while (s.length < dims) {\n    s.push(1);\n  }\n\n  return array;\n}\n/**\n * Recursively unsqueeze a multi dimensional array\n * @param {Array} array\n * @param {number} dims Required number of dimensions\n * @param {number} dim  Current dimension\n * @returns {Array | *} Returns the squeezed array\n * @private\n */\n\n\nfunction _unsqueeze(array, dims, dim) {\n  var i, ii;\n\n  if (Array.isArray(array)) {\n    var next = dim + 1;\n\n    for (i = 0, ii = array.length; i < ii; i++) {\n      array[i] = _unsqueeze(array[i], dims, next);\n    }\n  } else {\n    for (var d = dim; d < dims; d++) {\n      array = [array];\n    }\n  }\n\n  return array;\n}\n/**\n * Flatten a multi dimensional array, put all elements in a one dimensional\n * array\n * @param {Array} array   A multi dimensional array\n * @return {Array}        The flattened array (1 dimensional)\n */\n\n\nfunction flatten(array) {\n  if (!Array.isArray(array)) {\n    // if not an array, return as is\n    return array;\n  }\n\n  var flat = [];\n  array.forEach(function callback(value) {\n    if (Array.isArray(value)) {\n      value.forEach(callback); // traverse through sub-arrays recursively\n    } else {\n      flat.push(value);\n    }\n  });\n  return flat;\n}\n/**\n * A safe map\n * @param {Array} array\n * @param {function} callback\n */\n\n\nfunction map(array, callback) {\n  return Array.prototype.map.call(array, callback);\n}\n/**\n * A safe forEach\n * @param {Array} array\n * @param {function} callback\n */\n\n\nfunction forEach(array, callback) {\n  Array.prototype.forEach.call(array, callback);\n}\n/**\n * A safe filter\n * @param {Array} array\n * @param {function} callback\n */\n\n\nfunction filter(array, callback) {\n  if (arraySize(array).length !== 1) {\n    throw new Error('Only one dimensional matrices supported');\n  }\n\n  return Array.prototype.filter.call(array, callback);\n}\n/**\n * Filter values in a callback given a regular expression\n * @param {Array} array\n * @param {RegExp} regexp\n * @return {Array} Returns the filtered array\n * @private\n */\n\n\nfunction filterRegExp(array, regexp) {\n  if (arraySize(array).length !== 1) {\n    throw new Error('Only one dimensional matrices supported');\n  }\n\n  return Array.prototype.filter.call(array, function (entry) {\n    return regexp.test(entry);\n  });\n}\n/**\n * A safe join\n * @param {Array} array\n * @param {string} separator\n */\n\n\nfunction join(array, separator) {\n  return Array.prototype.join.call(array, separator);\n}\n/**\n * Assign a numeric identifier to every element of a sorted array\n * @param {Array} a  An array\n * @return {Array} An array of objects containing the original value and its identifier\n */\n\n\nfunction identify(a) {\n  if (!Array.isArray(a)) {\n    throw new TypeError('Array input expected');\n  }\n\n  if (a.length === 0) {\n    return a;\n  }\n\n  var b = [];\n  var count = 0;\n  b[0] = {\n    value: a[0],\n    identifier: 0\n  };\n\n  for (var i = 1; i < a.length; i++) {\n    if (a[i] === a[i - 1]) {\n      count++;\n    } else {\n      count = 0;\n    }\n\n    b.push({\n      value: a[i],\n      identifier: count\n    });\n  }\n\n  return b;\n}\n/**\n * Remove the numeric identifier from the elements\n * @param {array} a  An array\n * @return {array} An array of values without identifiers\n */\n\n\nfunction generalize(a) {\n  if (!Array.isArray(a)) {\n    throw new TypeError('Array input expected');\n  }\n\n  if (a.length === 0) {\n    return a;\n  }\n\n  var b = [];\n\n  for (var i = 0; i < a.length; i++) {\n    b.push(a[i].value);\n  }\n\n  return b;\n}\n/**\n * Check the datatype of a given object\n * This is a low level implementation that should only be used by\n * parent Matrix classes such as SparseMatrix or DenseMatrix\n * This method does not validate Array Matrix shape\n * @param {Array} array\n * @param {function} typeOf   Callback function to use to determine the type of a value\n * @return string\n */\n\n\nfunction getArrayDataType(array, typeOf) {\n  var type; // to hold type info\n\n  var length = 0; // to hold length value to ensure it has consistent sizes\n\n  for (var i = 0; i < array.length; i++) {\n    var item = array[i];\n    var isArray = Array.isArray(item); // Saving the target matrix row size\n\n    if (i === 0 && isArray) {\n      length = item.length;\n    } // If the current item is an array but the length does not equal the targetVectorSize\n\n\n    if (isArray && item.length !== length) {\n      return undefined;\n    }\n\n    var itemType = isArray ? getArrayDataType(item, typeOf) // recurse into a nested array\n    : typeOf(item);\n\n    if (type === undefined) {\n      type = itemType; // first item\n    } else if (type !== itemType) {\n      return 'mixed';\n    } else {// we're good, everything has the same type so far\n    }\n  }\n\n  return type;\n}\n/**\n * Return the last item from an array\n * @param array\n * @returns {*}\n */\n\n\nfunction last(array) {\n  return array[array.length - 1];\n}\n/**\n * Get all but the last element of array.\n */\n\n\nfunction initial(array) {\n  return array.slice(0, array.length - 1);\n}\n/**\n * Test whether an array or string contains an item\n * @param {Array | string} array\n * @param {*} item\n * @return {boolean}\n */\n\n\nfunction contains(array, item) {\n  return array.indexOf(item) !== -1;\n}\n};"],
"names":["shadow$provide","global","require","module","exports","arraySize","x","s","Array","isArray","push","length","_validate","array","size","dim","len","_DimensionError","DimensionError","dimNext","i","child","_resize","defaultValue","newLen","minLen","Math","min","elem","processSizesWildcard","sizes","currentLength","newLength","product","processedSizes","slice","wildCardIndex","indexOf","WILDCARD","Error","reduce","prev","curr","_squeeze","dims","ii","next","_unsqueeze","d","flatten","flat","forEach","callback","value","getArrayDataType","typeOf","type","item","itemType","undefined","Object","defineProperty","validate","validateIndex","index","_is","isNumber","_number","isInteger","TypeError","_IndexError","IndexError","resize","_string","format","_defaultValue","reshape","flatArray","tmpArray2","sizeIndex","tmpArray","e","squeeze","shift","unsqueeze","outer","unshift","map","prototype","call","filter","filterRegExp","regexp","entry","test","join","separator","identify","a","b","count","identifier","generalize","last","initial","contains"]
}
