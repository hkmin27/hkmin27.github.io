{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$type$complex$function$complex.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,gEAAA,CAAqF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG7HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,aAAR,CAAwB,IAAK,EAEzBC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAEf,KAAIQ,YAAcR,OAAA,CAAQ,qDAAR,CAIdM,QAAAA,CAA+B,CAAC,CAAA,CAAGC,MAASE,CAAAA,OAAb,EAFxBC,SAEwB,CADhBC,CAAC,OAADA,CAAU,SAAVA,CACgB,CAA0C,QAAS,CAACC,IAAD,CAAO,CAAA,IACvFC,MAAQD,IAAKC,CAAAA,KAD0E,CAEvFC,QAAUF,IAAKE,CAAAA,OAwCnB,OAAOD,MAAA,CAAM,SAAN,CAAiB,CACtB,GAAIE,QAAU,EAAG,CACf,MAAOD,QAAQE,CAAAA,IADA,CADK;AAItBC,OAAQA,QAAe,CAACC,CAAD,CAAI,CACzB,MAAO,KAAIJ,OAAJ,CAAYI,CAAZ,CAAe,CAAf,CADkB,CAJL,CAOtB,iBAAkBC,QAAqB,CAACC,EAAD,CAAKC,EAAL,CAAS,CAC9C,MAAO,KAAIP,OAAJ,CAAYM,EAAZ,CAAgBC,EAAhB,CADuC,CAP1B,CAWtB,uBAAwBC,QAA2B,CAACF,EAAD,CAAKC,EAAL,CAAS,CAC1D,MAAO,KAAIP,OAAJ,CAAYM,EAAGG,CAAAA,QAAH,EAAZ,CAA2BF,EAAGE,CAAAA,QAAH,EAA3B,CADmD,CAXtC,CActBC,SAAUA,QAAiB,CAACN,CAAD,CAAI,CAC7B,MAAO,KAAIJ,OAAJ,CAAYI,CAAEO,CAAAA,OAAF,EAAZ,CAAyB,CAAzB,CADsB,CAdT,CAiBtBX,QAASA,QAAgB,CAACI,CAAD,CAAI,CAC3B,MAAOA,EAAEQ,CAAAA,KAAF,EADoB,CAjBP,CAoBtBC,OAAQA,QAAe,CAACT,CAAD,CAAI,CACzB,MAAOJ,QAAA,CAAQI,CAAR,CADkB,CApBL,CAuBtB,OAAQU,QAAc,CAACV,CAAD,CAAI,CACxB,MAAOJ,QAAA,CAAQ,CAAR,CADiB,CAvBJ,CA0BtBX,OAAQA,QAAe,CAACe,CAAD,CAAI,CACzB,GAAI,IAAJ,EAAYA,EAAZ,EAAiB,IAAjB,EAAyBA,EAAzB,CACE,MAAO,KAAIJ,OAAJ,CAAYI,CAAEE,CAAAA,EAAd,CAAkBF,CAAEG,CAAAA,EAApB,CAGT,IAAI,GAAJ,EAAWH,EAAX,EAAgB,KAAhB,EAAyBA,EAAzB,EAA8B,KAA9B,EAAuCA,EAAvC,EAA4C,KAA5C,EAAqDA,EAArD,CACE,MAAO,KAAIJ,OAAJ,CAAYI,CAAZ,CAGT,MAAUW,MAAJ,CAAU,6EAAV,CAAN;AATyB,CA1BL,CAqCtB,iBAAkBC,QAAoB,CAACZ,CAAD,CAAI,CACxC,MAAO,CAAC,CAAA,CAAGV,WAAYuB,CAAAA,OAAhB,EAAyBb,CAAzB,CAA4B,IAA5B,CADiC,CArCpB,CAAjB,CA1CoF,CAA1D,CAoFnChB,QAAQI,CAAAA,aAAR,CAAwBA,OAlGqG;",
"sources":["node_modules/mathjs/lib/cjs/type/complex/function/complex.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$type$complex$function$complex\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createComplex = void 0;\n\nvar _factory = require(\"../../../utils/factory.js\");\n\nvar _collection = require(\"../../../utils/collection.js\");\n\nvar name = 'complex';\nvar dependencies = ['typed', 'Complex'];\nvar createComplex = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      Complex = _ref.Complex;\n\n  /**\n   * Create a complex value or convert a value to a complex value.\n   *\n   * Syntax:\n   *\n   *     math.complex()                           // creates a complex value with zero\n   *                                              // as real and imaginary part.\n   *     math.complex(re : number, im : string)   // creates a complex value with provided\n   *                                              // values for real and imaginary part.\n   *     math.complex(re : number)                // creates a complex value with provided\n   *                                              // real value and zero imaginary part.\n   *     math.complex(complex : Complex)          // clones the provided complex value.\n   *     math.complex(arg : string)               // parses a string into a complex value.\n   *     math.complex(array : Array)              // converts the elements of the array\n   *                                              // or matrix element wise into a\n   *                                              // complex value.\n   *     math.complex({re: number, im: number})   // creates a complex value with provided\n   *                                              // values for real an imaginary part.\n   *     math.complex({r: number, phi: number})   // creates a complex value with provided\n   *                                              // polar coordinates\n   *\n   * Examples:\n   *\n   *    const a = math.complex(3, -4)     // a = Complex 3 - 4i\n   *    a.re = 5                          // a = Complex 5 - 4i\n   *    const i = a.im                    // Number -4\n   *    const b = math.complex('2 + 6i')  // Complex 2 + 6i\n   *    const c = math.complex()          // Complex 0 + 0i\n   *    const d = math.add(a, b)          // Complex 5 + 2i\n   *\n   * See also:\n   *\n   *    bignumber, boolean, index, matrix, number, string, unit\n   *\n   * @param {* | Array | Matrix} [args]\n   *            Arguments specifying the real and imaginary part of the complex number\n   * @return {Complex | Array | Matrix} Returns a complex value\n   */\n  return typed('complex', {\n    '': function _() {\n      return Complex.ZERO;\n    },\n    number: function number(x) {\n      return new Complex(x, 0);\n    },\n    'number, number': function numberNumber(re, im) {\n      return new Complex(re, im);\n    },\n    // TODO: this signature should be redundant\n    'BigNumber, BigNumber': function BigNumberBigNumber(re, im) {\n      return new Complex(re.toNumber(), im.toNumber());\n    },\n    Fraction: function Fraction(x) {\n      return new Complex(x.valueOf(), 0);\n    },\n    Complex: function Complex(x) {\n      return x.clone();\n    },\n    string: function string(x) {\n      return Complex(x); // for example '2 + 3i'\n    },\n    \"null\": function _null(x) {\n      return Complex(0);\n    },\n    Object: function Object(x) {\n      if ('re' in x && 'im' in x) {\n        return new Complex(x.re, x.im);\n      }\n\n      if ('r' in x && 'phi' in x || 'abs' in x && 'arg' in x) {\n        return new Complex(x);\n      }\n\n      throw new Error('Expected object with properties (re and im) or (r and phi) or (abs and arg)');\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n});\nexports.createComplex = createComplex;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createComplex","_factory","_collection","factory","name","dependencies","_ref","typed","Complex","_","ZERO","number","x","numberNumber","re","im","BigNumberBigNumber","toNumber","Fraction","valueOf","clone","string","_null","Error","ArrayMatrix","deepMap"]
}
