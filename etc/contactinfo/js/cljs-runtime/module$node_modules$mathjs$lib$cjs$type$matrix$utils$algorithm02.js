shadow$provide.module$node_modules$mathjs$lib$cjs$type$matrix$utils$algorithm02=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.createAlgorithm02=void 0;global=require("module$node_modules$mathjs$lib$cjs$utils$factory");var _DimensionError=require("module$node_modules$mathjs$lib$cjs$error$DimensionError");require=(0,global.factory)("algorithm02",["typed","equalScalar"],function(_ref){var typed=_ref.typed,equalScalar=_ref.equalScalar;return function(denseMatrix,
sparseMatrix,callback,inverse){var adata=denseMatrix._data,asize=denseMatrix._size,adt=denseMatrix._datatype;denseMatrix=sparseMatrix._values;var bindex=sparseMatrix._index,bptr=sparseMatrix._ptr,bsize=sparseMatrix._size,bdt=sparseMatrix._datatype;if(asize.length!==bsize.length)throw new _DimensionError.DimensionError(asize.length,bsize.length);if(asize[0]!==bsize[0]||asize[1]!==bsize[1])throw new RangeError("Dimension mismatch. Matrix A ("+asize+") must match Matrix B ("+bsize+")");if(!denseMatrix)throw Error("Cannot perform operation on Dense Matrix and Pattern Sparse Matrix");
bsize=asize[0];asize=asize[1];var eq=equalScalar,zero=0,cf=callback;if("string"===typeof adt&&adt===bdt){var dt=adt;eq=typed.find(equalScalar,[dt,dt]);zero=typed.convert(0,dt);cf=typed.find(callback,[dt,dt])}callback=[];adt=[];bdt=[];for(var j=0;j<asize;j++){bdt[j]=adt.length;for(var k1=bptr[j+1],k=bptr[j];k<k1;k++){var i=bindex[k],cij=inverse?cf(denseMatrix[k],adata[i][j]):cf(adata[i][j],denseMatrix[k]);eq(cij,zero)||(adt.push(i),callback.push(cij))}}bdt[asize]=adt.length;return sparseMatrix.createSparseMatrix({values:callback,
index:adt,ptr:bdt,size:[bsize,asize],datatype:dt})}});exports.createAlgorithm02=require}
//# sourceMappingURL=module$node_modules$mathjs$lib$cjs$type$matrix$utils$algorithm02.js.map
