{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$type$bignumber$function$bignumber.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,oEAAA,CAAyF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGjIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,eAAR,CAA0B,IAAK,EAE3BC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAEf,KAAIQ,YAAcR,OAAA,CAAQ,qDAAR,CAIdM,QAAAA,CAAiC,CAAC,CAAA,CAAGC,MAASE,CAAAA,OAAb,EAF1BC,WAE0B,CADlBC,CAAC,OAADA,CAAU,WAAVA,CACkB,CAA0C,QAAS,CAACC,IAAD,CAAO,CAAA,IACzFC,MAAQD,IAAKC,CAAAA,KAD4E,CAEzFC,UAAYF,IAAKE,CAAAA,SA2BrB,OAAOD,MAAA,CAAM,WAAN;AAAmB,CACxB,GAAIE,QAAU,EAAG,CACf,MAAO,KAAID,SAAJ,CAAc,CAAd,CADQ,CADO,CAIxBE,OAAQA,QAAe,CAACC,CAAD,CAAI,CAEzB,MAAO,KAAIH,SAAJ,CAAcG,CAAd,CAAkB,EAAlB,CAFkB,CAJH,CAQxBC,OAAQA,QAAe,CAACD,CAAD,CAAI,CACzB,IAAIE,oBAAsBF,CAAEG,CAAAA,KAAF,CAAQ,+BAAR,CAE1B,IAAID,mBAAJ,CAAyB,CAEvB,IAAIE,KAAOF,mBAAA,CAAoB,CAApB,CACPG,oBAAAA,CAAIR,SAAA,CAAUK,mBAAA,CAAoB,CAApB,CAAV,CACR,KAAII,WAA8BC,CAAjB,IAAIV,SAAJ,CAAc,CAAd,CAAiBU,EAAAA,GAAjB,CAAqBC,MAAA,CAAOJ,IAAP,CAArB,CAEjB,IAAIC,mBAAEI,CAAAA,EAAF,CAAKH,UAAWI,CAAAA,GAAX,CAAe,CAAf,CAAL,CAAJ,CACE,KAAM,KAAIC,WAAJ,CAAgB,UAAYC,CAAAA,MAAZ,CAAmBZ,CAAnB,CAAsB,mBAAtB,CAAhB,CAAN,CAGEa,CAAAA,CAAoCN,CAAjB,IAAIV,SAAJ,CAAc,CAAd,CAAiBU,EAAAA,GAAjB,CAAqBC,MAAA,CAAOJ,IAAP,CAArB,CAAoC,CAApC,CAEvB,OAAIC,oBAAES,CAAAA,GAAF,CAAMD,CAAN,CAAJ;AACSR,mBAAEK,CAAAA,GAAF,CAAMJ,UAAN,CADT,CAGSD,mBAfc,CAmBzB,MAAO,KAAIR,SAAJ,CAAcG,CAAd,CAtBkB,CARH,CAgCxBH,UAAWA,QAAkB,CAACG,CAAD,CAAI,CAE/B,MAAOA,EAFwB,CAhCT,CAoCxBe,SAAUA,QAAiB,CAACf,CAAD,CAAI,CAC7B,MAA0BgB,CAAnB,IAAInB,SAAJ,CAAcG,CAAEK,CAAAA,CAAhB,CAAmBW,EAAAA,GAAnB,CAAuBhB,CAAEiB,CAAAA,CAAzB,CAA4BC,CAAAA,KAA5B,CAAkClB,CAAEmB,CAAAA,CAApC,CADsB,CApCP,CAuCxB,OAAQC,QAAc,CAACpB,CAAD,CAAI,CACxB,MAAO,KAAIH,SAAJ,CAAc,CAAd,CADiB,CAvCF,CA0CxB,iBAAkBwB,QAAoB,CAACrB,CAAD,CAAI,CACxC,MAAO,CAAC,CAAA,CAAGT,WAAY+B,CAAAA,OAAhB,EAAyBtB,CAAzB,CAA4B,IAA5B,CADiC,CA1ClB,CAAnB,CA7BsF,CAA1D,CA4ErCf,QAAQI,CAAAA,eAAR,CAA0BA,OA1FuG;",
"sources":["node_modules/mathjs/lib/cjs/type/bignumber/function/bignumber.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$type$bignumber$function$bignumber\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createBignumber = void 0;\n\nvar _factory = require(\"../../../utils/factory.js\");\n\nvar _collection = require(\"../../../utils/collection.js\");\n\nvar name = 'bignumber';\nvar dependencies = ['typed', 'BigNumber'];\nvar createBignumber = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      BigNumber = _ref.BigNumber;\n\n  /**\n   * Create a BigNumber, which can store numbers with arbitrary precision.\n   * When a matrix is provided, all elements will be converted to BigNumber.\n   *\n   * Syntax:\n   *\n   *    math.bignumber(x)\n   *\n   * Examples:\n   *\n   *    0.1 + 0.2                                  // returns number 0.30000000000000004\n   *    math.bignumber(0.1) + math.bignumber(0.2)  // returns BigNumber 0.3\n   *\n   *\n   *    7.2e500                                    // returns number Infinity\n   *    math.bignumber('7.2e500')                  // returns BigNumber 7.2e500\n   *\n   * See also:\n   *\n   *    boolean, complex, index, matrix, string, unit\n   *\n   * @param {number | string | Fraction | BigNumber | Array | Matrix | boolean | null} [value]  Value for the big number,\n   *                                                    0 by default.\n   * @returns {BigNumber} The created bignumber\n   */\n  return typed('bignumber', {\n    '': function _() {\n      return new BigNumber(0);\n    },\n    number: function number(x) {\n      // convert to string to prevent errors in case of >15 digits\n      return new BigNumber(x + '');\n    },\n    string: function string(x) {\n      var wordSizeSuffixMatch = x.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);\n\n      if (wordSizeSuffixMatch) {\n        // x has a word size suffix\n        var size = wordSizeSuffixMatch[2];\n        var n = BigNumber(wordSizeSuffixMatch[1]);\n        var twoPowSize = new BigNumber(2).pow(Number(size));\n\n        if (n.gt(twoPowSize.sub(1))) {\n          throw new SyntaxError(\"String \\\"\".concat(x, \"\\\" is out of range\"));\n        }\n\n        var twoPowSizeSubOne = new BigNumber(2).pow(Number(size) - 1);\n\n        if (n.gte(twoPowSizeSubOne)) {\n          return n.sub(twoPowSize);\n        } else {\n          return n;\n        }\n      }\n\n      return new BigNumber(x);\n    },\n    BigNumber: function BigNumber(x) {\n      // we assume a BigNumber is immutable\n      return x;\n    },\n    Fraction: function Fraction(x) {\n      return new BigNumber(x.n).div(x.d).times(x.s);\n    },\n    \"null\": function _null(x) {\n      return new BigNumber(0);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n});\nexports.createBignumber = createBignumber;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createBignumber","_factory","_collection","factory","name","dependencies","_ref","typed","BigNumber","_","number","x","string","wordSizeSuffixMatch","match","size","n","twoPowSize","pow","Number","gt","sub","SyntaxError","concat","twoPowSizeSubOne","gte","Fraction","div","d","times","s","_null","ArrayMatrix","deepMap"]
}
