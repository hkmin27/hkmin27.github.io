{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$matrix$trace.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,CAAA,wDAAA,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGrHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,WAAR,CAAsB,IAAK,EAE3B,KAAIC,QAAUP,OAAA,CAAQ,iDAAR,CAAd,CAEIQ,QAAUR,OAAA,CAAQ,iDAAR,CAEVS,OAAAA,CAAWT,OAAA,CAAQ,kDAAR,CAIXM,OAAAA,CAA6B,CAAC,CAAA,CAAGG,MAASC,CAAAA,OAAb,EAFtBC,OAEsB,CADdC,CAAC,OAADA,CAAU,QAAVA,CAAoB,KAApBA,CACc,CAA0C,QAAS,CAACC,IAAD,CAAO,CA0CzFC,QAASA,YAAW,CAACC,CAAD,CAAI,CAEtB,IAAIC;AAAOD,CAAEE,CAAAA,KACTC,EAAAA,CAAOH,CAAEI,CAAAA,KAEb,QAAQH,IAAKI,CAAAA,MAAb,EACE,KAAK,CAAL,CAEE,GAAgB,CAAhB,GAAIJ,IAAA,CAAK,CAAL,CAAJ,CAEE,MAAO,CAAC,CAAA,CAAGT,OAAQc,CAAAA,KAAZ,EAAmBH,CAAA,CAAK,CAAL,CAAnB,CAGT,MAAM,KAAII,UAAJ,CAAe,+BAAf,CAAiD,CAAC,CAAA,CAAGd,OAAQe,CAAAA,MAAZ,EAAoBP,IAApB,CAAjD,CAA6E,GAA7E,CAAN,CAEF,KAAK,CAAL,CAGI,IAAIQ,KAAOR,IAAA,CAAK,CAAL,CAGX,IAAIQ,IAAJ,GAFWR,IAAAS,CAAK,CAALA,CAEX,CAAmB,CAIjB,IAAK,IAAIC,EAFLC,IAEKD,CAFC,CAEV,CAAgBA,CAAhB,CAAoBF,IAApB,CAA0BE,CAAA,EAA1B,CACEC,IAAA,CAAMC,GAAA,CAAID,IAAJ,CAAST,CAAA,CAAKQ,CAAL,CAAA,CAAQA,CAAR,CAAT,CAIR,OAAOC,KATU,CAWjB,KAAM,KAAIL,UAAJ,CAAe,+BAAf,CAAiD,CAAC,CAAA,CAAGd,OAAQe,CAAAA,MAAZ,EAAoBP,IAApB,CAAjD,CAA6E,GAA7E,CAAN,CAIN,QAEE,KAAM,KAAIM,UAAJ,CAAe,wCAAf,CAA0D,CAAC,CAAA,CAAGd,OAAQe,CAAAA,MAAZ,EAAoBP,IAApB,CAA1D,CAAsF,GAAtF,CAAN,CAjCJ,CALsB,CA1CiE,IACrFa,MAAQhB,IAAKgB,CAAAA,KADwE,CAErFC,OAASjB,IAAKiB,CAAAA,MAFuE;AAGrFF,IAAMf,IAAKe,CAAAA,GA6Bf,OAAOC,MAAA,CAAM,OAAN,CAAe,CACpBE,MAAOC,QAAoB,CAACC,CAAD,CAAI,CAE7B,MAAOnB,YAAA,CAAYgB,MAAA,CAAOG,CAAP,CAAZ,CAFsB,CADX,CAKpBC,aA+CFC,QAAqB,CAACpB,CAAD,CAAI,CAEvB,IAAIqB,OAASrB,CAAEsB,CAAAA,OAAf,CACIC,MAAQvB,CAAEwB,CAAAA,MADd,CAEIC,IAAMzB,CAAE0B,CAAAA,IAFZ,CAGIzB,KAAOD,CAAEE,CAAAA,KAGTyB,EAAAA,CAAU1B,IAAA,CAAK,CAAL,CAEd,IAHWA,IAAAQ,CAAK,CAALA,CAGX,GAAakB,CAAb,CAAsB,CAEhBf,IAAAA,CAAM,CAEV,IAAoB,CAApB,CAAIS,MAAOhB,CAAAA,MAAX,CAEE,IAAK,IAAIuB,EAAI,CAAb,CAAgBA,CAAhB,CAAoBD,CAApB,CAA6BC,CAAA,EAA7B,CAKE,IAFA,IAAIC,GAAKJ,GAAA,CAAIG,CAAJ,CAAQ,CAAR,CAAT,CAESE,EAHAL,GAAAM,CAAIH,CAAJG,CAGT,CAAiBD,CAAjB,CAAqBD,EAArB,CAAyBC,CAAA,EAAzB,CAA8B,CAE5B,IAAInB,EAAIY,KAAA,CAAMO,CAAN,CAER,IAAInB,CAAJ,GAAUiB,CAAV,CAAa,CAEXhB,IAAA,CAAMC,GAAA,CAAID,IAAJ,CAASS,MAAA,CAAOS,CAAP,CAAT,CAEN,MAJW,CAOb,GAAInB,CAAJ,CAAQiB,CAAR,CAEE,KAb0B,CAoBlC,MAAOhB,KA/Ba,CAkCtB,KAAM,KAAIL,UAAJ,CAAe,+BAAf,CAAiD,CAAC,CAAA,CAAGd,OAAQe,CAAAA,MAAZ,EAAoBP,IAApB,CAAjD,CAA6E,GAA7E,CAAN,CA5CuB,CApDH,CAMpB+B,YAAajC,WANO,CAOpBkC,IAAKzC,OAAQc,CAAAA,KAPO,CAAf,CAhCkF,CAA1D,CAmIjCnB,QAAQI,CAAAA,WAAR;AAAsBA,MAnJ+F;",
"sources":["node_modules/mathjs/lib/cjs/function/matrix/trace.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$matrix$trace\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createTrace = void 0;\n\nvar _object = require(\"../../utils/object.js\");\n\nvar _string = require(\"../../utils/string.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'trace';\nvar dependencies = ['typed', 'matrix', 'add'];\nvar createTrace = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      add = _ref.add;\n\n  /**\n   * Calculate the trace of a matrix: the sum of the elements on the main\n   * diagonal of a square matrix.\n   *\n   * Syntax:\n   *\n   *    math.trace(x)\n   *\n   * Examples:\n   *\n   *    math.trace([[1, 2], [3, 4]]) // returns 5\n   *\n   *    const A = [\n   *      [1, 2, 3],\n   *      [-1, 2, 3],\n   *      [2, 0, 3]\n   *    ]\n   *    math.trace(A) // returns 6\n   *\n   * See also:\n   *\n   *    diag\n   *\n   * @param {Array | Matrix} x  A matrix\n   *\n   * @return {number} The trace of `x`\n   */\n  return typed('trace', {\n    Array: function _arrayTrace(x) {\n      // use dense matrix implementation\n      return _denseTrace(matrix(x));\n    },\n    SparseMatrix: _sparseTrace,\n    DenseMatrix: _denseTrace,\n    any: _object.clone\n  });\n\n  function _denseTrace(m) {\n    // matrix size & data\n    var size = m._size;\n    var data = m._data; // process dimensions\n\n    switch (size.length) {\n      case 1:\n        // vector\n        if (size[0] === 1) {\n          // return data[0]\n          return (0, _object.clone)(data[0]);\n        }\n\n        throw new RangeError('Matrix must be square (size: ' + (0, _string.format)(size) + ')');\n\n      case 2:\n        {\n          // two dimensional\n          var rows = size[0];\n          var cols = size[1];\n\n          if (rows === cols) {\n            // calulate sum\n            var sum = 0; // loop diagonal\n\n            for (var i = 0; i < rows; i++) {\n              sum = add(sum, data[i][i]);\n            } // return trace\n\n\n            return sum;\n          } else {\n            throw new RangeError('Matrix must be square (size: ' + (0, _string.format)(size) + ')');\n          }\n        }\n\n      default:\n        // multi dimensional\n        throw new RangeError('Matrix must be two dimensional (size: ' + (0, _string.format)(size) + ')');\n    }\n  }\n\n  function _sparseTrace(m) {\n    // matrix arrays\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr;\n    var size = m._size; // check dimensions\n\n    var rows = size[0];\n    var columns = size[1]; // matrix must be square\n\n    if (rows === columns) {\n      // calulate sum\n      var sum = 0; // check we have data (avoid looping columns)\n\n      if (values.length > 0) {\n        // loop columns\n        for (var j = 0; j < columns; j++) {\n          // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n          var k0 = ptr[j];\n          var k1 = ptr[j + 1]; // loop k within [k0, k1[\n\n          for (var k = k0; k < k1; k++) {\n            // row index\n            var i = index[k]; // check row\n\n            if (i === j) {\n              // accumulate value\n              sum = add(sum, values[k]); // exit loop\n\n              break;\n            }\n\n            if (i > j) {\n              // exit loop, no value on the diagonal for column j\n              break;\n            }\n          }\n        }\n      } // return trace\n\n\n      return sum;\n    }\n\n    throw new RangeError('Matrix must be square (size: ' + (0, _string.format)(size) + ')');\n  }\n});\nexports.createTrace = createTrace;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createTrace","_object","_string","_factory","factory","name","dependencies","_ref","_denseTrace","m","size","_size","data","_data","length","clone","RangeError","format","rows","cols","i","sum","add","typed","matrix","Array","_arrayTrace","x","SparseMatrix","_sparseTrace","values","_values","index","_index","ptr","_ptr","columns","j","k1","k","k0","DenseMatrix","any"]
}
