{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$algebra$simplify$resolve.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,oEAAA,CAAyF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGjIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,aAAR,CAAwB,IAAK,EAE7B,KAAIC,IAAMP,OAAA,CAAQ,6CAAR,CAENQ,OAAAA,CAAWR,OAAA,CAAQ,kDAAR,CAIXM,OAAAA,CAA+B,CAAC,CAAA,CAAGE,MAASC,CAAAA,OAAb,EAFxBC,SAEwB,CADhBC,CAAC,OAADA,CAAU,cAAVA,CAA0B,cAA1BA,CAA0C,iBAA1CA,CACgB,CAA0C,QAAS,CAACC,IAAD,CAAO,CAuB3FC,QAASA,QAAO,CAACC,IAAD,CAAOC,KAAP,CAAc,CAC5B,GAAI,CAACA,KAAL,CACE,MAAOD,KAGT,IAAI,CAAC,CAAA;AAAGP,GAAIS,CAAAA,YAAR,EAAsBF,IAAtB,CAAJ,CAAiC,CAC/B,IAAIT,MAAQU,KAAA,CAAMD,IAAKJ,CAAAA,IAAX,CAEZ,IAAI,CAAC,CAAA,CAAGH,GAAIU,CAAAA,MAAR,EAAgBZ,KAAhB,CAAJ,CACE,MAAOQ,QAAA,CAAQR,KAAR,CAAeU,KAAf,CACF,IAAqB,QAArB,GAAI,MAAOV,MAAX,CACL,MAAOa,MAAA,CAAMC,MAAA,CAAOd,KAAP,CAAN,CANsB,CAAjC,IAQO,CAAA,GAAI,CAAC,CAAA,CAAGE,GAAIa,CAAAA,cAAR,EAAwBN,IAAxB,CAAJ,CAIL,MAHIO,MAGG,CAHIP,IAAKO,CAAAA,IAAKC,CAAAA,GAAV,CAAc,QAAS,CAACC,GAAD,CAAM,CACtC,MAAOV,QAAA,CAAQU,GAAR,CAAaR,KAAb,CAD+B,CAA7B,CAGJ,CAAA,IAAIS,YAAJ,CAAiBV,IAAKW,CAAAA,EAAtB,CAA0BX,IAAKY,CAAAA,EAA/B,CAAmCL,KAAnC,CAAyCP,IAAKa,CAAAA,QAA9C,CACF,IAAI,CAAC,CAAA,CAAGpB,GAAIqB,CAAAA,iBAAR,EAA2Bd,IAA3B,CAAJ,CACL,MAAO,KAAIe,eAAJ,CAAoBhB,OAAA,CAAQC,IAAKgB,CAAAA,OAAb,CAAsBf,KAAtB,CAApB,CACF,IAAI,CAAC,CAAA,CAAGR,GAAIwB,CAAAA,cAAR,EAAwBjB,IAAxB,CAAJ,CAKL,MAJIkB,MAIG,CAJKlB,IAAKO,CAAAA,IAAKC,CAAAA,GAAV,CAAc,QAAS,CAACC,GAAD,CAAM,CACvC,MAAOV,QAAA,CAAQU,GAAR;AAAaR,KAAb,CADgC,CAA7B,CAIL,CAAA,IAAIkB,YAAJ,CAAiBnB,IAAKJ,CAAAA,IAAtB,CAA4BsB,KAA5B,CAZF,CAeP,MAAOlB,KA5BqB,CAvB6D,IACvFI,MAAQN,IAAKM,CAAAA,KAD0E,CAEvFe,aAAerB,IAAKqB,CAAAA,YAFmE,CAGvFT,aAAeZ,IAAKY,CAAAA,YAHmE,CAIvFK,gBAAkBjB,IAAKiB,CAAAA,eAkD3B,OAAOhB,QAtDoF,CAA1D,CAwDnCX,QAAQI,CAAAA,aAAR,CAAwBA,MAtEyG;",
"sources":["node_modules/mathjs/lib/cjs/function/algebra/simplify/resolve.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$algebra$simplify$resolve\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createResolve = void 0;\n\nvar _is = require(\"../../../utils/is.js\");\n\nvar _factory = require(\"../../../utils/factory.js\");\n\nvar name = 'resolve';\nvar dependencies = ['parse', 'FunctionNode', 'OperatorNode', 'ParenthesisNode'];\nvar createResolve = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var parse = _ref.parse,\n      FunctionNode = _ref.FunctionNode,\n      OperatorNode = _ref.OperatorNode,\n      ParenthesisNode = _ref.ParenthesisNode;\n\n  /**\n   * resolve(expr, scope) replaces variable nodes with their scoped values\n   *\n   * Syntax:\n   *\n   *     simplify.resolve(expr, scope)\n   *\n   * Examples:\n   *\n   *     math.simplify.resolve('x + y', {x:1, y:2})           // Node {1 + 2}\n   *     math.simplify.resolve(math.parse('x+y'), {x:1, y:2}) // Node {1 + 2}\n   *     math.simplify('x+y', {x:2, y:'x+x'}).toString()      // \"6\"\n   *\n   * @param {Node} node\n   *     The expression tree to be simplified\n   * @param {Object} scope with variables to be resolved\n   */\n  function resolve(node, scope) {\n    if (!scope) {\n      return node;\n    }\n\n    if ((0, _is.isSymbolNode)(node)) {\n      var value = scope[node.name];\n\n      if ((0, _is.isNode)(value)) {\n        return resolve(value, scope);\n      } else if (typeof value === 'number') {\n        return parse(String(value));\n      }\n    } else if ((0, _is.isOperatorNode)(node)) {\n      var args = node.args.map(function (arg) {\n        return resolve(arg, scope);\n      });\n      return new OperatorNode(node.op, node.fn, args, node.implicit);\n    } else if ((0, _is.isParenthesisNode)(node)) {\n      return new ParenthesisNode(resolve(node.content, scope));\n    } else if ((0, _is.isFunctionNode)(node)) {\n      var _args = node.args.map(function (arg) {\n        return resolve(arg, scope);\n      });\n\n      return new FunctionNode(node.name, _args);\n    }\n\n    return node;\n  }\n\n  return resolve;\n});\nexports.createResolve = createResolve;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createResolve","_is","_factory","factory","name","dependencies","_ref","resolve","node","scope","isSymbolNode","isNode","parse","String","isOperatorNode","args","map","arg","OperatorNode","op","fn","implicit","isParenthesisNode","ParenthesisNode","content","isFunctionNode","_args","FunctionNode"]
}
