shadow$provide.module$node_modules$mathjs$lib$cjs$expression$transform$forEach_transform=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.createForEachTransform=void 0;var _is=require("module$node_modules$mathjs$lib$cjs$utils$is"),_function=require("module$node_modules$mathjs$lib$cjs$utils$function"),_array=require("module$node_modules$mathjs$lib$cjs$utils$array");global=require("module$node_modules$mathjs$lib$cjs$utils$factory");var _compileInlineExpression=
require("module$node_modules$mathjs$lib$cjs$expression$transform$utils$compileInlineExpression");require=(0,global.factory)("forEach",["typed"],function(_ref){function forEachTransform(args,math,scope){var x,callback;args[0]&&(x=args[0].compile().evaluate(scope));args[1]&&(callback=(0,_is.isSymbolNode)(args[1])||(0,_is.isFunctionAssignmentNode)(args[1])?args[1].compile().evaluate(scope):(0,_compileInlineExpression.compileInlineExpression)(args[1],math,scope));return _forEach(x,callback)}_ref=_ref.typed;
forEachTransform.rawArgs=!0;var _forEach=_ref("forEach",{"Array | Matrix, function":function(array,callback){var args=(0,_function.maxArgumentCount)(callback);(function recurse(value,index){Array.isArray(value)?(0,_array.forEach)(value,function(child,i){recurse(child,index.concat(i+1))}):1===args?callback(value):2===args?callback(value,index):callback(value,index,array)})(array.valueOf(),[])}});return forEachTransform},{isTransformFunction:!0});exports.createForEachTransform=require}
//# sourceMappingURL=module$node_modules$mathjs$lib$cjs$expression$transform$forEach_transform.js.map
