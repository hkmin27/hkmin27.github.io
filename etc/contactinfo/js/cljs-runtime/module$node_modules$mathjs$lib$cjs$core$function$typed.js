shadow$provide.module$node_modules$mathjs$lib$cjs$core$function$typed=function(global,require,module,exports){function throwNoBignumber(x){throw Error("Cannot convert value ".concat(x," into a BigNumber: no class 'BigNumber' provided"));}function throwNoComplex(x){throw Error("Cannot convert value ".concat(x," into a Complex number: no class 'Complex' provided"));}function throwNoFraction(x){throw Error("Cannot convert value ".concat(x," into a Fraction, no class 'Fraction' provided."));}Object.defineProperty(exports,
"__esModule",{value:!0});exports.createTyped=void 0;var _is=require("module$node_modules$mathjs$lib$cjs$utils$is"),_typedFunction=function(obj){return obj&&obj.__esModule?obj:{"default":obj}}(require("module$node_modules$typed_function$typed_function")),_number=require("module$node_modules$mathjs$lib$cjs$utils$number");global=require("module$node_modules$mathjs$lib$cjs$utils$factory");var _createTyped2=function(){_createTyped2=_typedFunction["default"].create;return _typedFunction["default"]};global=
(0,global.factory)("typed",["?BigNumber","?Complex","?DenseMatrix","?Fraction"],function(_ref){var BigNumber=_ref.BigNumber,Complex=_ref.Complex,DenseMatrix=_ref.DenseMatrix,Fraction=_ref.Fraction;_ref=_createTyped2();_ref.types=[{name:"number",test:_is.isNumber},{name:"Complex",test:_is.isComplex},{name:"BigNumber",test:_is.isBigNumber},{name:"Fraction",test:_is.isFraction},{name:"Unit",test:_is.isUnit},{name:"string",test:_is.isString},{name:"Chain",test:_is.isChain},{name:"Array",test:_is.isArray},
{name:"Matrix",test:_is.isMatrix},{name:"DenseMatrix",test:_is.isDenseMatrix},{name:"SparseMatrix",test:_is.isSparseMatrix},{name:"Range",test:_is.isRange},{name:"Index",test:_is.isIndex},{name:"boolean",test:_is.isBoolean},{name:"ResultSet",test:_is.isResultSet},{name:"Help",test:_is.isHelp},{name:"function",test:_is.isFunction},{name:"Date",test:_is.isDate},{name:"RegExp",test:_is.isRegExp},{name:"null",test:_is.isNull},{name:"undefined",test:_is.isUndefined},{name:"AccessorNode",test:_is.isAccessorNode},
{name:"ArrayNode",test:_is.isArrayNode},{name:"AssignmentNode",test:_is.isAssignmentNode},{name:"BlockNode",test:_is.isBlockNode},{name:"ConditionalNode",test:_is.isConditionalNode},{name:"ConstantNode",test:_is.isConstantNode},{name:"FunctionNode",test:_is.isFunctionNode},{name:"FunctionAssignmentNode",test:_is.isFunctionAssignmentNode},{name:"IndexNode",test:_is.isIndexNode},{name:"Node",test:_is.isNode},{name:"ObjectNode",test:_is.isObjectNode},{name:"OperatorNode",test:_is.isOperatorNode},{name:"ParenthesisNode",
test:_is.isParenthesisNode},{name:"RangeNode",test:_is.isRangeNode},{name:"SymbolNode",test:_is.isSymbolNode},{name:"Object",test:_is.isObject}];_ref.conversions=[{from:"number",to:"BigNumber",convert:function(x){BigNumber||throwNoBignumber(x);if(15<(0,_number.digits)(x))throw new TypeError("Cannot implicitly convert a number with \x3e15 significant digits to BigNumber (value: "+x+"). Use function bignumber(x) to convert to BigNumber.");return new BigNumber(x)}},{from:"number",to:"Complex",convert:function(x){Complex||
throwNoComplex(x);return new Complex(x,0)}},{from:"number",to:"string",convert:function(x){return x+""}},{from:"BigNumber",to:"Complex",convert:function(x){Complex||throwNoComplex(x);return new Complex(x.toNumber(),0)}},{from:"Fraction",to:"BigNumber",convert:function(x){throw new TypeError("Cannot implicitly convert a Fraction to BigNumber or vice versa. Use function bignumber(x) to convert to BigNumber or fraction(x) to convert to Fraction.");}},{from:"Fraction",to:"Complex",convert:function(x){Complex||
throwNoComplex(x);return new Complex(x.valueOf(),0)}},{from:"number",to:"Fraction",convert:function(x){Fraction||throwNoFraction(x);var f=new Fraction(x);if(f.valueOf()!==x)throw new TypeError("Cannot implicitly convert a number to a Fraction when there will be a loss of precision (value: "+x+"). Use function fraction(x) to convert to Fraction.");return f}},{from:"string",to:"number",convert:function(x){var n=Number(x);if(isNaN(n))throw Error('Cannot convert "'+x+'" to a number');return n}},{from:"string",
to:"BigNumber",convert:function(x){BigNumber||throwNoBignumber(x);try{return new BigNumber(x)}catch(err){throw Error('Cannot convert "'+x+'" to BigNumber');}}},{from:"string",to:"Fraction",convert:function(x){Fraction||throwNoFraction(x);try{return new Fraction(x)}catch(err){throw Error('Cannot convert "'+x+'" to Fraction');}}},{from:"string",to:"Complex",convert:function(x){Complex||throwNoComplex(x);try{return new Complex(x)}catch(err){throw Error('Cannot convert "'+x+'" to Complex');}}},{from:"boolean",
to:"number",convert:function(x){return+x}},{from:"boolean",to:"BigNumber",convert:function(x){BigNumber||throwNoBignumber(x);return new BigNumber(+x)}},{from:"boolean",to:"Fraction",convert:function(x){Fraction||throwNoFraction(x);return new Fraction(+x)}},{from:"boolean",to:"string",convert:function(x){return String(x)}},{from:"Array",to:"Matrix",convert:function(array){if(!DenseMatrix)throw Error("Cannot convert array into a Matrix: no class 'DenseMatrix' provided");return new DenseMatrix(array)}},
{from:"Matrix",to:"Array",convert:function(matrix){return matrix.valueOf()}}];return _ref});exports.createTyped=global}
//# sourceMappingURL=module$node_modules$mathjs$lib$cjs$core$function$typed.js.map
