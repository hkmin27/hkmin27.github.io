{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$set$setMultiplicity.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,+DAAA,CAAoF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG5HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,qBAAR,CAAgC,IAAK,EAErC,KAAIC,OAASP,OAAA,CAAQ,gDAAR,CAETQ,OAAAA,CAAWR,OAAA,CAAQ,kDAAR,CAIXM,OAAAA,CAAuC,CAAC,CAAA,CAAGE,MAASC,CAAAA,OAAb,EAFhCC,iBAEgC,CADxBC,CAAC,OAADA,CAAU,MAAVA,CAAkB,QAAlBA,CAA4B,gBAA5BA,CAA8C,OAA9CA,CACwB,CAA0C,QAAS,CAACC,IAAD,CAAO,CAAA,IAC/FC,MAAQD,IAAKC,CAAAA,KADkF,CAE/FC,KAAOF,IAAKE,CAAAA,IAFmF,CAG/FC,OAASH,IAAKG,CAAAA,MAHiF;AAI/FC,eAAiBJ,IAAKI,CAAAA,cAJyE,CAK/FC,MAAQL,IAAKK,CAAAA,KAuBjB,OAAOJ,MAAA,CA9BEH,iBA8BF,CAAY,CACjB,0DAA2DQ,QAAkD,CAACC,CAAD,CAAIC,CAAJ,CAAO,CAClH,GAAsC,CAAtC,GAAIL,MAAA,CAAOD,IAAA,CAAKM,CAAL,CAAP,CAAgB,IAAIH,KAAJ,CAAU,CAAV,CAAhB,CAAJ,CAEE,MAAO,EAGLI,EAAAA,CAAI,CAAC,CAAA,CAAGd,MAAOe,CAAAA,OAAX,EAAoBC,KAAMC,CAAAA,OAAN,CAAcJ,CAAd,CAAA,CAAmBA,CAAnB,CAAuBA,CAAEK,CAAAA,OAAF,EAA3C,CAGR,KAFA,IAAIC,MAAQ,CAAZ,CAESC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBN,CAAEO,CAAAA,MAAtB,CAA8BD,CAAA,EAA9B,CACkC,CAAhC,GAAIX,cAAA,CAAeK,CAAA,CAAEM,CAAF,CAAf,CAAqBR,CAArB,CAAJ,EACEO,KAAA,EAIJ,OAAOA,MAf2G,CADnG,CAAZ,CA5B4F,CAA1D,CAgD3CxB,QAAQI,CAAAA,qBAAR,CAAgCA,MA9D4F;",
"sources":["node_modules/mathjs/lib/cjs/function/set/setMultiplicity.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$set$setMultiplicity\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSetMultiplicity = void 0;\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'setMultiplicity';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index'];\nvar createSetMultiplicity = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      size = _ref.size,\n      subset = _ref.subset,\n      compareNatural = _ref.compareNatural,\n      Index = _ref.Index;\n\n  /**\n   * Count the multiplicity of an element in a multiset.\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setMultiplicity(element, set)\n   *\n   * Examples:\n   *\n   *    math.setMultiplicity(1, [1, 2, 2, 4])    // returns 1\n   *    math.setMultiplicity(2, [1, 2, 2, 4])    // returns 2\n   *\n   * See also:\n   *\n   *    setDistinct, setSize\n   *\n   * @param {number | BigNumber | Fraction | Complex} e  An element in the multiset\n   * @param {Array | Matrix}     a  A multiset\n   * @return {number}            The number of how many times the multiset contains the element\n   */\n  return typed(name, {\n    'number | BigNumber | Fraction | Complex, Array | Matrix': function numberBigNumberFractionComplexArrayMatrix(e, a) {\n      if (subset(size(a), new Index(0)) === 0) {\n        // if empty, return 0\n        return 0;\n      }\n\n      var b = (0, _array.flatten)(Array.isArray(a) ? a : a.toArray());\n      var count = 0;\n\n      for (var i = 0; i < b.length; i++) {\n        if (compareNatural(b[i], e) === 0) {\n          count++;\n        }\n      }\n\n      return count;\n    }\n  });\n});\nexports.createSetMultiplicity = createSetMultiplicity;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createSetMultiplicity","_array","_factory","factory","name","dependencies","_ref","typed","size","subset","compareNatural","Index","numberBigNumberFractionComplexArrayMatrix","e","a","b","flatten","Array","isArray","toArray","count","i","length"]
}
