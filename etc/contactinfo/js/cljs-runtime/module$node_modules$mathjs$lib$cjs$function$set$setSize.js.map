{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$set$setSize.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,uDAAA,CAA4E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGpHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,aAAR,CAAwB,IAAK,EAE7B,KAAIC,OAASP,OAAA,CAAQ,gDAAR,CAETQ,OAAAA,CAAWR,OAAA,CAAQ,kDAAR,CAIXM,OAAAA,CAA+B,CAAC,CAAA,CAAGE,MAASC,CAAAA,OAAb,EAFxBC,SAEwB,CADhBC,CAAC,OAADA,CAAU,gBAAVA,CACgB,CAA0C,QAAS,CAACC,IAAD,CAAO,CAAA,IACvFC,MAAQD,IAAKC,CAAAA,KAD0E,CAEvFC,eAAiBF,IAAKE,CAAAA,cAuB1B,OAAOD,MAAA,CA3BEH,SA2BF,CAAY,CACjB,iBAAkBK,QAAoB,CAACC,CAAD,CAAI,CACxC,MAAOC,MAAMC,CAAAA,OAAN,CAAcF,CAAd,CAAA;AAAmB,CAAC,CAAA,CAAGT,MAAOY,CAAAA,OAAX,EAAoBH,CAApB,CAAuBI,CAAAA,MAA1C,CAAmD,CAAC,CAAA,CAAGb,MAAOY,CAAAA,OAAX,EAAoBH,CAAEK,CAAAA,OAAF,EAApB,CAAiCD,CAAAA,MADnD,CADzB,CAIjB,0BAA2BE,QAA2B,CAACN,CAAD,CAAIO,MAAJ,CAAY,CAChE,GAAe,CAAA,CAAf,GAAIA,MAAJ,EAAqC,CAArC,GAAwBP,CAAEI,CAAAA,MAA1B,CACE,MAAOH,MAAMC,CAAAA,OAAN,CAAcF,CAAd,CAAA,CAAmB,CAAC,CAAA,CAAGT,MAAOY,CAAAA,OAAX,EAAoBH,CAApB,CAAuBI,CAAAA,MAA1C,CAAmD,CAAC,CAAA,CAAGb,MAAOY,CAAAA,OAAX,EAAoBH,CAAEK,CAAAA,OAAF,EAApB,CAAiCD,CAAAA,MAEvFI,EAAAA,CAAI,CAAC,CAAA,CAAGjB,MAAOY,CAAAA,OAAX,EAAoBF,KAAMC,CAAAA,OAAN,CAAcF,CAAd,CAAA,CAAmBA,CAAnB,CAAuBA,CAAEK,CAAAA,OAAF,EAA3C,CAAwDI,CAAAA,IAAxD,CAA6DX,cAA7D,CAGR,KAAK,IAAIY,EAFLC,MAEKD,CAFG,CAEZ,CAAgBA,CAAhB,CAAoBF,CAAEJ,CAAAA,MAAtB,CAA8BM,CAAA,EAA9B,CACyC,CAAvC,GAAIZ,cAAA,CAAeU,CAAA,CAAEE,CAAF,CAAf,CAAqBF,CAAA,CAAEE,CAAF,CAAM,CAAN,CAArB,CAAJ,EACEC,MAAA,EAIJ,OAAOA,OAbuD,CAJjD,CAAZ,CAzBoF,CAA1D,CA+CnCzB,QAAQI,CAAAA,aAAR,CAAwBA,MA7D4F;",
"sources":["node_modules/mathjs/lib/cjs/function/set/setSize.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$set$setSize\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSetSize = void 0;\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'setSize';\nvar dependencies = ['typed', 'compareNatural'];\nvar createSetSize = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      compareNatural = _ref.compareNatural;\n\n  /**\n   * Count the number of elements of a (multi)set. When a second parameter is 'true', count only the unique values.\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setSize(set)\n   *    math.setSize(set, unique)\n   *\n   * Examples:\n   *\n   *    math.setSize([1, 2, 2, 4])          // returns 4\n   *    math.setSize([1, 2, 2, 4], true)    // returns 3\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setDifference\n   *\n   * @param {Array | Matrix}    a  A multiset\n   * @return {number}            The number of elements of the (multi)set\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(a) {\n      return Array.isArray(a) ? (0, _array.flatten)(a).length : (0, _array.flatten)(a.toArray()).length;\n    },\n    'Array | Matrix, boolean': function ArrayMatrixBoolean(a, unique) {\n      if (unique === false || a.length === 0) {\n        return Array.isArray(a) ? (0, _array.flatten)(a).length : (0, _array.flatten)(a.toArray()).length;\n      } else {\n        var b = (0, _array.flatten)(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);\n        var count = 1;\n\n        for (var i = 1; i < b.length; i++) {\n          if (compareNatural(b[i], b[i - 1]) !== 0) {\n            count++;\n          }\n        }\n\n        return count;\n      }\n    }\n  });\n});\nexports.createSetSize = createSetSize;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createSetSize","_array","_factory","factory","name","dependencies","_ref","typed","compareNatural","ArrayMatrix","a","Array","isArray","flatten","length","toArray","ArrayMatrixBoolean","unique","b","sort","i","count"]
}
