shadow$provide.module$node_modules$mathjs$lib$cjs$plain$number$bitwise=function(global,require,module,exports){function bitAndNumber(x,y){if(!(0,_number.isInteger)(x)||!(0,_number.isInteger)(y))throw Error("Integers expected in function bitAnd");return x&y}function bitNotNumber(x){if(!(0,_number.isInteger)(x))throw Error("Integer expected in function bitNot");return~x}function bitOrNumber(x,y){if(!(0,_number.isInteger)(x)||!(0,_number.isInteger)(y))throw Error("Integers expected in function bitOr");
return x|y}function bitXorNumber(x,y){if(!(0,_number.isInteger)(x)||!(0,_number.isInteger)(y))throw Error("Integers expected in function bitXor");return x^y}function leftShiftNumber(x,y){if(!(0,_number.isInteger)(x)||!(0,_number.isInteger)(y))throw Error("Integers expected in function leftShift");return x<<y}function rightArithShiftNumber(x,y){if(!(0,_number.isInteger)(x)||!(0,_number.isInteger)(y))throw Error("Integers expected in function rightArithShift");return x>>y}function rightLogShiftNumber(x,
y){if(!(0,_number.isInteger)(x)||!(0,_number.isInteger)(y))throw Error("Integers expected in function rightLogShift");return x>>>y}Object.defineProperty(exports,"__esModule",{value:!0});exports.bitAndNumber=bitAndNumber;exports.bitNotNumber=bitNotNumber;exports.bitOrNumber=bitOrNumber;exports.bitXorNumber=bitXorNumber;exports.leftShiftNumber=leftShiftNumber;exports.rightArithShiftNumber=rightArithShiftNumber;exports.rightLogShiftNumber=rightLogShiftNumber;var _number=require("module$node_modules$mathjs$lib$cjs$utils$number");
bitAndNumber.signature="number, number";bitNotNumber.signature="number";bitOrNumber.signature="number, number";bitXorNumber.signature="number, number";leftShiftNumber.signature="number, number";rightArithShiftNumber.signature="number, number";rightLogShiftNumber.signature="number, number"}
//# sourceMappingURL=module$node_modules$mathjs$lib$cjs$plain$number$bitwise.js.map
