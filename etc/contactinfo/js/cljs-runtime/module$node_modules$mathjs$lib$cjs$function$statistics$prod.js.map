{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$statistics$prod.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,2DAAA,CAAgF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGxHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,UAAR,CAAqB,IAAK,EAE1B,KAAIC,YAAcP,OAAA,CAAQ,qDAAR,CAEdQ,OAAAA,CAAWR,OAAA,CAAQ,kDAAR,CAEf,KAAIS,qBAAuBT,OAAA,CAAQ,kFAAR,CAIvBM,QAAAA,CAA4B,CAAC,CAAA,CAAGE,MAASE,CAAAA,OAAb,EAFrBC,MAEqB,CADbC,CAAC,OAADA;AAAU,QAAVA,CAAoB,gBAApBA,CAAsC,SAAtCA,CACa,CAA0C,QAAS,CAACC,IAAD,CAAO,CAmDxFC,QAASA,MAAK,CAACC,KAAD,CAAQ,CACpB,IAAIC,IACJ,EAAC,CAAA,CAAGT,WAAYU,CAAAA,WAAhB,EAA6BF,KAA7B,CAAoC,QAAS,CAACV,KAAD,CAAQ,CACnD,GAAI,CACFW,IAAA,CAAgBE,IAAAA,EAAT,GAAAF,IAAA,CAAqBX,KAArB,CAA6Bc,cAAA,CAAeH,IAAf,CAAqBX,KAArB,CADlC,CAEF,MAAOe,GAAP,CAAY,CACZ,KAAM,CAAC,CAAA,CAAGX,oBAAqBY,CAAAA,mBAAzB,EAA8CD,GAA9C,CAAmD,MAAnD,CAA2Df,KAA3D,CAAN,CADY,CAHqC,CAArD,CAQoB,SAApB,GAAI,MAAOW,KAAX,GACEA,IADF,CACSM,OAAA,CAAQN,IAAR,CAAcO,MAAOC,CAAAA,MAArB,CADT,CAIA,IAAaN,IAAAA,EAAb,GAAIF,IAAJ,CACE,KAAUS,MAAJ,CAAU,yCAAV,CAAN,CAGF,MAAOT,KAlBa,CAnDkE,IACpFU,MAAQb,IAAKa,CAAAA,KADuE,CAEpFH,OAASV,IAAKU,CAAAA,MAFsE,CAGpFJ,eAAiBN,IAAKM,CAAAA,cAH8D,CAIpFG,QAAUT,IAAKS,CAAAA,OA2BnB;MAAOI,MAAA,CAjCEf,MAiCF,CAAY,CAEjB,iBAAkBG,KAFD,CAIjB,qCAAsCa,QAAmC,CAACZ,KAAD,CAAQa,GAAR,CAAa,CAEpF,KAAUH,MAAJ,CAAU,mCAAV,CAAN,CAFoF,CAJrE,CASjB,MAAOI,QAAU,CAACC,IAAD,CAAO,CACtB,MAAOhB,MAAA,CAAMgB,IAAN,CADe,CATP,CAAZ,CA/BiF,CAA1D,CAwEhC5B,QAAQI,CAAAA,UAAR,CAAqBA,OAxFmG;",
"sources":["node_modules/mathjs/lib/cjs/function/statistics/prod.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$statistics$prod\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createProd = void 0;\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _improveErrorMessage = require(\"./utils/improveErrorMessage.js\");\n\nvar name = 'prod';\nvar dependencies = ['typed', 'config', 'multiplyScalar', 'numeric'];\nvar createProd = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      multiplyScalar = _ref.multiplyScalar,\n      numeric = _ref.numeric;\n\n  /**\n   * Compute the product of a matrix or a list with values.\n   * In case of a (multi dimensional) array or matrix, the sum of all\n   * elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.prod(a, b, c, ...)\n   *     math.prod(A)\n   *\n   * Examples:\n   *\n   *     math.multiply(2, 3)           // returns 6\n   *     math.prod(2, 3)               // returns 6\n   *     math.prod(2, 3, 4)            // returns 24\n   *     math.prod([2, 3, 4])          // returns 24\n   *     math.prod([[2, 5], [4, 3]])   // returns 120\n   *\n   * See also:\n   *\n   *    mean, median, min, max, sum, std, variance\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The product of all values\n   */\n  return typed(name, {\n    // prod([a, b, c, d, ...])\n    'Array | Matrix': _prod,\n    // prod([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      // TODO: implement prod(A, dim)\n      throw new Error('prod(A, dim) is not yet supported'); // return reduce(arguments[0], arguments[1], math.prod)\n    },\n    // prod(a, b, c, d, ...)\n    '...': function _(args) {\n      return _prod(args);\n    }\n  });\n  /**\n   * Recursively calculate the product of an n-dimensional array\n   * @param {Array} array\n   * @return {number} prod\n   * @private\n   */\n\n  function _prod(array) {\n    var prod;\n    (0, _collection.deepForEach)(array, function (value) {\n      try {\n        prod = prod === undefined ? value : multiplyScalar(prod, value);\n      } catch (err) {\n        throw (0, _improveErrorMessage.improveErrorMessage)(err, 'prod', value);\n      }\n    }); // make sure returning numeric value: parse a string into a numeric value\n\n    if (typeof prod === 'string') {\n      prod = numeric(prod, config.number);\n    }\n\n    if (prod === undefined) {\n      throw new Error('Cannot calculate prod of an empty array');\n    }\n\n    return prod;\n  }\n});\nexports.createProd = createProd;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createProd","_collection","_factory","_improveErrorMessage","factory","name","dependencies","_ref","_prod","array","prod","deepForEach","undefined","multiplyScalar","err","improveErrorMessage","numeric","config","number","Error","typed","ArrayMatrixNumberBigNumber","dim","_","args"]
}
