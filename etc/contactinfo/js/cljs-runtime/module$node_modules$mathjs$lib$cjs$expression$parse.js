shadow$provide.module$node_modules$mathjs$lib$cjs$expression$parse=function(global,require,module,exports){function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i],key;for(key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target};return _extends.apply(this,arguments)}Object.defineProperty(exports,"__esModule",{value:!0});exports.createParse=void 0;global=require("module$node_modules$mathjs$lib$cjs$utils$factory");
var _is=require("module$node_modules$mathjs$lib$cjs$utils$is"),_collection=require("module$node_modules$mathjs$lib$cjs$utils$collection"),_object=require("module$node_modules$mathjs$lib$cjs$utils$object");require=(0,global.factory)("parse","typed numeric config AccessorNode ArrayNode AssignmentNode BlockNode ConditionalNode ConstantNode FunctionAssignmentNode FunctionNode IndexNode ObjectNode OperatorNode ParenthesisNode RangeNode RelationalNode SymbolNode".split(" "),function(_ref){function parseMultiple(expressions){var options=
1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},extraNodes=void 0!==options.nodes?options.nodes:{};return(0,_collection.deepMap)(expressions,function(elem){if("string"!==typeof elem)throw new TypeError("String expected");return parseStart(elem,extraNodes)})}function currentCharacter(state){return state.expression.substr(state.index,1)}function next(state){state.index++}function nextCharacter(state){return state.expression.charAt(state.index+1)}function getToken(state){state.tokenType=TOKENTYPE.NULL;
state.token="";for(state.comment="";parse.isWhitespace(currentCharacter(state),state.nestingLevel);)next(state);if("#"===currentCharacter(state))for(;"\n"!==currentCharacter(state)&&""!==currentCharacter(state);)state.comment+=currentCharacter(state),next(state);if(""===currentCharacter(state))state.tokenType=TOKENTYPE.DELIMITER;else if("\n"!==currentCharacter(state)||state.nestingLevel){var c1=currentCharacter(state),c2=state.expression.substr(state.index,2),c3=state.expression.substr(state.index,
3);if(3===c3.length&&DELIMITERS[c3])state.tokenType=TOKENTYPE.DELIMITER,state.token=c3,next(state),next(state),next(state);else if(2===c2.length&&DELIMITERS[c2])state.tokenType=TOKENTYPE.DELIMITER,state.token=c2,next(state),next(state);else if(DELIMITERS[c1])state.tokenType=TOKENTYPE.DELIMITER,state.token=c1,next(state);else if(parse.isDigitDot(c1))if(state.tokenType=TOKENTYPE.NUMBER,c1=state.expression.substr(state.index,2),"0b"===c1||"0o"===c1||"0x"===c1){state.token+=currentCharacter(state);next(state);
state.token+=currentCharacter(state);for(next(state);parse.isHexDigit(currentCharacter(state));)state.token+=currentCharacter(state),next(state);if("."===currentCharacter(state))for(state.token+=".",next(state);parse.isHexDigit(currentCharacter(state));)state.token+=currentCharacter(state),next(state);else if("i"===currentCharacter(state))for(state.token+="i",next(state);parse.isDigit(currentCharacter(state));)state.token+=currentCharacter(state),next(state)}else{if("."===currentCharacter(state))state.token+=
currentCharacter(state),next(state),parse.isDigit(currentCharacter(state))||(state.tokenType=TOKENTYPE.DELIMITER);else{for(;parse.isDigit(currentCharacter(state));)state.token+=currentCharacter(state),next(state);parse.isDecimalMark(currentCharacter(state),nextCharacter(state))&&(state.token+=currentCharacter(state),next(state))}for(;parse.isDigit(currentCharacter(state));)state.token+=currentCharacter(state),next(state);if("E"===currentCharacter(state)||"e"===currentCharacter(state))if(parse.isDigit(nextCharacter(state))||
"-"===nextCharacter(state)||"+"===nextCharacter(state)){state.token+=currentCharacter(state);next(state);if("+"===currentCharacter(state)||"-"===currentCharacter(state))state.token+=currentCharacter(state),next(state);if(!parse.isDigit(currentCharacter(state)))throw createSyntaxError(state,'Digit expected, got "'+currentCharacter(state)+'"');for(;parse.isDigit(currentCharacter(state));)state.token+=currentCharacter(state),next(state);if(parse.isDecimalMark(currentCharacter(state),nextCharacter(state)))throw createSyntaxError(state,
'Digit expected, got "'+currentCharacter(state)+'"');}else if("."===nextCharacter(state))throw next(state),createSyntaxError(state,'Digit expected, got "'+currentCharacter(state)+'"');}else if(parse.isAlpha(currentCharacter(state),state.expression.charAt(state.index-1),nextCharacter(state))){for(;parse.isAlpha(currentCharacter(state),state.expression.charAt(state.index-1),nextCharacter(state))||parse.isDigit(currentCharacter(state));)state.token+=currentCharacter(state),next(state);(0,_object.hasOwnProperty)(NAMED_DELIMITERS,
state.token)?state.tokenType=TOKENTYPE.DELIMITER:state.tokenType=TOKENTYPE.SYMBOL}else{for(state.tokenType=TOKENTYPE.UNKNOWN;""!==currentCharacter(state);)state.token+=currentCharacter(state),next(state);throw createSyntaxError(state,'Syntax error in part "'+state.token+'"');}}else state.tokenType=TOKENTYPE.DELIMITER,state.token=currentCharacter(state),next(state)}function getTokenSkipNewline(state){do getToken(state);while("\n"===state.token)}function parseStart(expression,extraNodes){var state=
{extraNodes:{},expression:"",comment:"",index:0,token:"",tokenType:TOKENTYPE.NULL,nestingLevel:0,conditionalLevel:null};_extends(state,{expression:expression,extraNodes:extraNodes});getToken(state);expression=[];if(""!==state.token&&"\n"!==state.token&&";"!==state.token){var node=parseAssignment(state);node.comment=state.comment}for(;"\n"===state.token||";"===state.token;)0===expression.length&&node&&(extraNodes=";"!==state.token,expression.push({node:node,visible:extraNodes})),getToken(state),"\n"!==
state.token&&";"!==state.token&&""!==state.token&&(node=parseAssignment(state),node.comment=state.comment,extraNodes=";"!==state.token,expression.push({node:node,visible:extraNodes}));0<expression.length?node=new BlockNode(expression):node||(node=new ConstantNode(void 0),node.comment=state.comment);if(""!==state.token){if(state.tokenType===TOKENTYPE.DELIMITER)throw createError(state,"Unexpected operator "+state.token);throw createSyntaxError(state,'Unexpected part "'+state.token+'"');}return node}
function parseAssignment(state){var node=parseConditional(state);if("\x3d"===state.token){if((0,_is.isSymbolNode)(node)){var name=node.name;getTokenSkipNewline(state);state=parseAssignment(state);return new AssignmentNode(new SymbolNode(name),state)}if((0,_is.isAccessorNode)(node))return getTokenSkipNewline(state),state=parseAssignment(state),new AssignmentNode(node.object,node.index,state);if((0,_is.isFunctionNode)(node)&&(0,_is.isSymbolNode)(node.fn)){var valid=!0;var args=[];name=node.name;node.args.forEach(function(arg,
index){(0,_is.isSymbolNode)(arg)?args[index]=arg.name:valid=!1});if(valid)return getTokenSkipNewline(state),state=parseAssignment(state),new FunctionAssignmentNode(name,args,state)}throw createSyntaxError(state,"Invalid left hand side of assignment operator \x3d");}return node}function parseConditional(state){for(var node,node$jscomp$0=parseLogicalXor(state);"or"===state.token;)getTokenSkipNewline(state),node$jscomp$0=new OperatorNode("or","or",[node$jscomp$0,parseLogicalXor(state)]);for(node=node$jscomp$0;"?"===
state.token;){node$jscomp$0=state.conditionalLevel;state.conditionalLevel=state.nestingLevel;getTokenSkipNewline(state);var trueExpr=parseAssignment(state);if(":"!==state.token)throw createSyntaxError(state,"False part of conditional expression expected");state.conditionalLevel=null;getTokenSkipNewline(state);var falseExpr=parseAssignment(state);node=new ConditionalNode(node,trueExpr,falseExpr);state.conditionalLevel=node$jscomp$0}return node}function parseLogicalXor(state){for(var node=parseLogicalAnd(state);"xor"===
state.token;)getTokenSkipNewline(state),node=new OperatorNode("xor","xor",[node,parseLogicalAnd(state)]);return node}function parseLogicalAnd(state){for(var node=parseBitwiseOr(state);"and"===state.token;)getTokenSkipNewline(state),node=new OperatorNode("and","and",[node,parseBitwiseOr(state)]);return node}function parseBitwiseOr(state){for(var node=parseBitwiseXor(state);"|"===state.token;)getTokenSkipNewline(state),node=new OperatorNode("|","bitOr",[node,parseBitwiseXor(state)]);return node}function parseBitwiseXor(state){for(var node=
parseBitwiseAnd(state);"^|"===state.token;)getTokenSkipNewline(state),node=new OperatorNode("^|","bitXor",[node,parseBitwiseAnd(state)]);return node}function parseBitwiseAnd(state){for(var node=parseRelational(state);"\x26"===state.token;)getTokenSkipNewline(state),node=new OperatorNode("\x26","bitAnd",[node,parseRelational(state)]);return node}function parseRelational(state){for(var params=[parseShift(state)],conditionals=[],operators={"\x3d\x3d":"equal","!\x3d":"unequal","\x3c":"smaller","\x3e":"larger",
"\x3c\x3d":"smallerEq","\x3e\x3d":"largerEq"};(0,_object.hasOwnProperty)(operators,state.token);)conditionals.push({name:state.token,fn:operators[state.token]}),getTokenSkipNewline(state),params.push(parseShift(state));return 1===params.length?params[0]:2===params.length?new OperatorNode(conditionals[0].name,conditionals[0].fn,params):new RelationalNode(conditionals.map(function(c){return c.fn}),params)}function parseShift(state){var node=parseConversion(state);for(var operators={"\x3c\x3c":"leftShift",
"\x3e\x3e":"rightArithShift","\x3e\x3e\x3e":"rightLogShift"};(0,_object.hasOwnProperty)(operators,state.token);){var name=state.token;var fn=operators[name];getTokenSkipNewline(state);node=[node,parseConversion(state)];node=new OperatorNode(name,fn,node)}return node}function parseConversion(state){var node=parseRange(state);for(var operators={to:"to","in":"to"};(0,_object.hasOwnProperty)(operators,state.token);){var name=state.token;var fn=operators[name];getTokenSkipNewline(state);"in"===name&&""===
state.token?node=new OperatorNode("*","multiply",[node,new SymbolNode("in")],!0):(node=[node,parseRange(state)],node=new OperatorNode(name,fn,node))}return node}function parseRange(state){var params=[];var node=":"===state.token?new ConstantNode(1):parseAddSubtract(state);if(":"===state.token&&state.conditionalLevel!==state.nestingLevel){for(params.push(node);":"===state.token&&3>params.length;)getTokenSkipNewline(state),")"===state.token||"]"===state.token||","===state.token||""===state.token?params.push(new SymbolNode("end")):
params.push(parseAddSubtract(state));node=3===params.length?new RangeNode(params[0],params[2],params[1]):new RangeNode(params[0],params[1])}return node}function parseAddSubtract(state){var node=parseMultiplyDivide(state);for(var operators={"+":"add","-":"subtract"};(0,_object.hasOwnProperty)(operators,state.token);){var name=state.token;var fn=operators[name];getTokenSkipNewline(state);node=[node,parseMultiplyDivide(state)];node=new OperatorNode(name,fn,node)}return node}function parseMultiplyDivide(state){var node=
parseImplicitMultiplication(state);for(var operators={"*":"multiply",".*":"dotMultiply","/":"divide","./":"dotDivide","%":"mod",mod:"mod"};;)if((0,_object.hasOwnProperty)(operators,state.token)){var name=state.token;var fn=operators[name];getTokenSkipNewline(state);var last=parseImplicitMultiplication(state);node=new OperatorNode(name,fn,[node,last])}else break;return node}function parseImplicitMultiplication(state){var node,last;for(last=node=parseRule2(state);;)if(state.tokenType===TOKENTYPE.SYMBOL||
"in"===state.token&&(0,_is.isConstantNode)(node)||!(state.tokenType!==TOKENTYPE.NUMBER||(0,_is.isConstantNode)(last)||(0,_is.isOperatorNode)(last)&&"!"!==last.op)||"("===state.token)last=parseRule2(state),node=new OperatorNode("*","multiply",[node,last],!0);else break;return node}function parseRule2(state){for(var node=parseUnary(state),last=node,tokenStates=[];;)if("/"===state.token&&(0,_is.isConstantNode)(last))if(tokenStates.push(_extends({},state)),getTokenSkipNewline(state),state.tokenType===
TOKENTYPE.NUMBER)if(tokenStates.push(_extends({},state)),getTokenSkipNewline(state),state.tokenType===TOKENTYPE.SYMBOL||"("===state.token)_extends(state,tokenStates.pop()),tokenStates.pop(),last=parseUnary(state),node=new OperatorNode("/","divide",[node,last]);else{tokenStates.pop();_extends(state,tokenStates.pop());break}else{_extends(state,tokenStates.pop());break}else break;return node}function parseUnary(state){var name={"-":"unaryMinus","+":"unaryPlus","~":"bitNot",not:"not"};if((0,_object.hasOwnProperty)(name,
state.token)){var fn=name[state.token];name=state.token;getTokenSkipNewline(state);state=[parseUnary(state)];return new OperatorNode(name,fn,state)}name=[];if(state.tokenType===TOKENTYPE.SYMBOL&&(0,_object.hasOwnProperty)(state.extraNodes,state.token)){fn=state.extraNodes[state.token];getToken(state);if("("===state.token){name=[];state.nestingLevel++;getToken(state);if(")"!==state.token)for(name.push(parseAssignment(state));","===state.token;)getToken(state),name.push(parseAssignment(state));if(")"!==
state.token)throw createSyntaxError(state,"Parenthesis ) expected");state.nestingLevel--;getToken(state)}var node=new fn(name)}else if(state.tokenType===TOKENTYPE.SYMBOL||state.tokenType===TOKENTYPE.DELIMITER&&state.token in NAMED_DELIMITERS)name=state.token,getToken(state),name=(0,_object.hasOwnProperty)(CONSTANTS,name)?new ConstantNode(CONSTANTS[name]):-1!==NUMERIC_CONSTANTS.indexOf(name)?new ConstantNode(numeric(name,"number")):new SymbolNode(name),node=name=parseAccessors(state,name);else{if('"'===
state.token)name=parseDoubleQuotesStringToken(state),name=new ConstantNode(name),name=parseAccessors(state,name);else if("'"===state.token)name=parseSingleQuotesStringToken(state),name=new ConstantNode(name),name=parseAccessors(state,name);else if("["===state.token){state.nestingLevel++;getToken(state);if("]"!==state.token)if(fn=parseRow(state),";"===state.token){name=1;for(fn=[fn];";"===state.token;)getToken(state),fn[name]=parseRow(state),name++;if("]"!==state.token)throw createSyntaxError(state,
"End of matrix ] expected");state.nestingLevel--;getToken(state);var node$jscomp$0=fn[0].items.length;for(node=1;node<name;node++)if(fn[node].items.length!==node$jscomp$0)throw createError(state,"Column dimensions mismatch ("+fn[node].items.length+" !\x3d\x3d "+node$jscomp$0+")");name=new ArrayNode(fn)}else{if("]"!==state.token)throw createSyntaxError(state,"End of matrix ] expected");state.nestingLevel--;getToken(state);name=fn}else state.nestingLevel--,getToken(state),name=new ArrayNode([]);name=
parseAccessors(state,name)}else if("{"===state.token){state.nestingLevel++;fn={};do if(getToken(state),"}"!==state.token){if('"'===state.token)name=parseDoubleQuotesStringToken(state);else if("'"===state.token)name=parseSingleQuotesStringToken(state);else if(state.tokenType===TOKENTYPE.SYMBOL||state.tokenType===TOKENTYPE.DELIMITER&&state.token in NAMED_DELIMITERS)name=state.token,getToken(state);else throw createSyntaxError(state,"Symbol or string expected as object key");if(":"!==state.token)throw createSyntaxError(state,
"Colon : expected after object key");getToken(state);fn[name]=parseAssignment(state)}while(","===state.token);if("}"!==state.token)throw createSyntaxError(state,"Comma , or bracket } expected after object value");state.nestingLevel--;getToken(state);name=new ObjectNode(fn);name=parseAccessors(state,name)}else if(state.tokenType===TOKENTYPE.NUMBER)name=state.token,getToken(state),name=new ConstantNode(numeric(name,config.number));else if("("===state.token){state.nestingLevel++;getToken(state);name=
parseAssignment(state);if(")"!==state.token)throw createSyntaxError(state,"Parenthesis ) expected");state.nestingLevel--;getToken(state);name=new ParenthesisNode(name);name=parseAccessors(state,name)}else{if(""===state.token)throw createSyntaxError(state,"Unexpected end of expression");throw createSyntaxError(state,"Value expected");}node=name}for(node$jscomp$0={"!":"factorial","'":"ctranspose"};(0,_object.hasOwnProperty)(node$jscomp$0,state.token);)name=state.token,fn=node$jscomp$0[name],getToken(state),
node=[node],node=new OperatorNode(name,fn,node),node=parseAccessors(state,node);node$jscomp$0=node;if("^"===state.token||".^"===state.token)name=state.token,fn="^"===name?"pow":"dotPow",getTokenSkipNewline(state),state=[node$jscomp$0,parseUnary(state)],node$jscomp$0=new OperatorNode(name,fn,state);return node$jscomp$0}function parseAccessors(state,node,types){for(var params;!("("!==state.token&&"["!==state.token&&"."!==state.token||types&&-1===types.indexOf(state.token));)if(params=[],"("===state.token)if((0,
_is.isSymbolNode)(node)||(0,_is.isAccessorNode)(node)){state.nestingLevel++;getToken(state);if(")"!==state.token)for(params.push(parseAssignment(state));","===state.token;)getToken(state),params.push(parseAssignment(state));if(")"!==state.token)throw createSyntaxError(state,"Parenthesis ) expected");state.nestingLevel--;getToken(state);node=new FunctionNode(node,params)}else break;else if("["===state.token){state.nestingLevel++;getToken(state);if("]"!==state.token)for(params.push(parseAssignment(state));","===
state.token;)getToken(state),params.push(parseAssignment(state));if("]"!==state.token)throw createSyntaxError(state,"Parenthesis ] expected");state.nestingLevel--;getToken(state);node=new AccessorNode(node,new IndexNode(params))}else{getToken(state);if(state.tokenType!==TOKENTYPE.SYMBOL)throw createSyntaxError(state,"Property name expected after dot");params.push(new ConstantNode(state.token));getToken(state);node=new AccessorNode(node,new IndexNode(params,!0))}return node}function parseDoubleQuotesStringToken(state){for(var str=
"";""!==currentCharacter(state)&&'"'!==currentCharacter(state);)"\\"===currentCharacter(state)&&(str+=currentCharacter(state),next(state)),str+=currentCharacter(state),next(state);getToken(state);if('"'!==state.token)throw createSyntaxError(state,'End of string " expected');getToken(state);return JSON.parse('"'+str+'"')}function parseSingleQuotesStringToken(state){for(var str="";""!==currentCharacter(state)&&"'"!==currentCharacter(state);)"\\"===currentCharacter(state)&&(str+=currentCharacter(state),
next(state)),str+=currentCharacter(state),next(state);getToken(state);if("'"!==state.token)throw createSyntaxError(state,"End of string ' expected");getToken(state);return JSON.parse('"'+str+'"')}function parseRow(state){for(var params=[parseAssignment(state)],len=1;","===state.token;)getToken(state),params[len]=parseAssignment(state),len++;return new ArrayNode(params)}function createSyntaxError(state,message){state=state.index-state.token.length+1;message=new SyntaxError(message+" (char "+state+
")");message["char"]=state;return message}function createError(state,message){state=state.index-state.token.length+1;message=new SyntaxError(message+" (char "+state+")");message["char"]=state;return message}var typed=_ref.typed,numeric=_ref.numeric,config=_ref.config,AccessorNode=_ref.AccessorNode,ArrayNode=_ref.ArrayNode,AssignmentNode=_ref.AssignmentNode,BlockNode=_ref.BlockNode,ConditionalNode=_ref.ConditionalNode,ConstantNode=_ref.ConstantNode,FunctionAssignmentNode=_ref.FunctionAssignmentNode,
FunctionNode=_ref.FunctionNode,IndexNode=_ref.IndexNode,ObjectNode=_ref.ObjectNode,OperatorNode=_ref.OperatorNode,ParenthesisNode=_ref.ParenthesisNode,RangeNode=_ref.RangeNode,RelationalNode=_ref.RelationalNode,SymbolNode=_ref.SymbolNode,parse=typed("parse",{string:function(expression){return parseStart(expression,{})},"Array | Matrix":function(expressions){return parseMultiple(expressions,{})},"string, Object":function(expression,options){return parseStart(expression,void 0!==options.nodes?options.nodes:
{})},"Array | Matrix, Object":parseMultiple}),TOKENTYPE={NULL:0,DELIMITER:1,NUMBER:2,SYMBOL:3,UNKNOWN:4},DELIMITERS={",":!0,"(":!0,")":!0,"[":!0,"]":!0,"{":!0,"}":!0,'"':!0,"'":!0,";":!0,"+":!0,"-":!0,"*":!0,".*":!0,"/":!0,"./":!0,"%":!0,"^":!0,".^":!0,"~":!0,"!":!0,"\x26":!0,"|":!0,"^|":!0,"\x3d":!0,":":!0,"?":!0,"\x3d\x3d":!0,"!\x3d":!0,"\x3c":!0,"\x3e":!0,"\x3c\x3d":!0,"\x3e\x3d":!0,"\x3c\x3c":!0,"\x3e\x3e":!0,"\x3e\x3e\x3e":!0},NAMED_DELIMITERS={mod:!0,to:!0,"in":!0,and:!0,xor:!0,or:!0,not:!0},
CONSTANTS={"true":!0,"false":!1,"null":null,undefined:void 0},NUMERIC_CONSTANTS=["NaN","Infinity"];parse.isAlpha=function(c,cPrev,cNext){return parse.isValidLatinOrGreek(c)||parse.isValidMathSymbol(c,cNext)||parse.isValidMathSymbol(cPrev,c)};parse.isValidLatinOrGreek=function(c){return/^[a-zA-Z_$\u00C0-\u02AF\u0370-\u03FF\u2100-\u214F]$/.test(c)};parse.isValidMathSymbol=function(high,low){return/^[\uD835]$/.test(high)&&/^[\uDC00-\uDFFF]$/.test(low)&&/^[^\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]$/.test(low)};
parse.isWhitespace=function(c,nestingLevel){return" "===c||"\t"===c||"\n"===c&&0<nestingLevel};parse.isDecimalMark=function(c,cNext){return"."===c&&"/"!==cNext&&"*"!==cNext&&"^"!==cNext};parse.isDigitDot=function(c){return"0"<=c&&"9">=c||"."===c};parse.isDigit=function(c){return"0"<=c&&"9">=c};parse.isHexDigit=function(c){return"0"<=c&&"9">=c||"a"<=c&&"f">=c||"A"<=c&&"F">=c};return parse});exports.createParse=require}
//# sourceMappingURL=module$node_modules$mathjs$lib$cjs$expression$parse.js.map
