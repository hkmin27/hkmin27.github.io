shadow$provide.module$node_modules$mathjs$lib$cjs$function$matrix$trace=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.createTrace=void 0;var _object=require("module$node_modules$mathjs$lib$cjs$utils$object"),_string=require("module$node_modules$mathjs$lib$cjs$utils$string");global=require("module$node_modules$mathjs$lib$cjs$utils$factory");global=(0,global.factory)("trace",["typed","matrix","add"],function(_ref){function _denseTrace(m){var size=
m._size;m=m._data;switch(size.length){case 1:if(1===size[0])return(0,_object.clone)(m[0]);throw new RangeError("Matrix must be square (size: "+(0,_string.format)(size)+")");case 2:var rows=size[0];if(rows===size[1]){for(var i=size=0;i<rows;i++)size=add(size,m[i][i]);return size}throw new RangeError("Matrix must be square (size: "+(0,_string.format)(size)+")");default:throw new RangeError("Matrix must be two dimensional (size: "+(0,_string.format)(size)+")");}}var typed=_ref.typed,matrix=_ref.matrix,
add=_ref.add;return typed("trace",{Array:function(x){return _denseTrace(matrix(x))},SparseMatrix:function(m){var values=m._values,index=m._index,ptr=m._ptr,size=m._size;m=size[1];if(size[0]===m){size=0;if(0<values.length)for(var j=0;j<m;j++)for(var k1=ptr[j+1],k=ptr[j];k<k1;k++){var i=index[k];if(i===j){size=add(size,values[k]);break}if(i>j)break}return size}throw new RangeError("Matrix must be square (size: "+(0,_string.format)(size)+")");},DenseMatrix:_denseTrace,any:_object.clone})});exports.createTrace=
global}
//# sourceMappingURL=module$node_modules$mathjs$lib$cjs$function$matrix$trace.js.map
