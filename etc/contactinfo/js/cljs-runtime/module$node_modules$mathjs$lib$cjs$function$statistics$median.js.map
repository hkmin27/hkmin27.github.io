{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$statistics$median.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/function/statistics/median.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$statistics$median\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMedian = void 0;\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _improveErrorMessage = require(\"./utils/improveErrorMessage.js\");\n\nvar name = 'median';\nvar dependencies = ['typed', 'add', 'divide', 'compare', 'partitionSelect'];\nvar createMedian = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      add = _ref.add,\n      divide = _ref.divide,\n      compare = _ref.compare,\n      partitionSelect = _ref.partitionSelect;\n\n  /**\n   * Recursively calculate the median of an n-dimensional array\n   * @param {Array} array\n   * @return {Number} median\n   * @private\n   */\n  function _median(array) {\n    try {\n      array = (0, _array.flatten)(array.valueOf());\n      var num = array.length;\n\n      if (num === 0) {\n        throw new Error('Cannot calculate median of an empty array');\n      }\n\n      if (num % 2 === 0) {\n        // even: return the average of the two middle values\n        var mid = num / 2 - 1;\n        var right = partitionSelect(array, mid + 1); // array now partitioned at mid + 1, take max of left part\n\n        var left = array[mid];\n\n        for (var i = 0; i < mid; ++i) {\n          if (compare(array[i], left) > 0) {\n            left = array[i];\n          }\n        }\n\n        return middle2(left, right);\n      } else {\n        // odd: return the middle value\n        var m = partitionSelect(array, (num - 1) / 2);\n        return middle(m);\n      }\n    } catch (err) {\n      throw (0, _improveErrorMessage.improveErrorMessage)(err, 'median');\n    }\n  } // helper function to type check the middle value of the array\n\n\n  var middle = typed({\n    'number | BigNumber | Complex | Unit': function numberBigNumberComplexUnit(value) {\n      return value;\n    }\n  }); // helper function to type check the two middle value of the array\n\n  var middle2 = typed({\n    'number | BigNumber | Complex | Unit, number | BigNumber | Complex | Unit': function numberBigNumberComplexUnitNumberBigNumberComplexUnit(left, right) {\n      return divide(add(left, right), 2);\n    }\n  });\n  /**\n   * Compute the median of a matrix or a list with values. The values are\n   * sorted and the middle value is returned. In case of an even number of\n   * values, the average of the two middle values is returned.\n   * Supported types of values are: Number, BigNumber, Unit\n   *\n   * In case of a (multi dimensional) array or matrix, the median of all\n   * elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.median(a, b, c, ...)\n   *     math.median(A)\n   *\n   * Examples:\n   *\n   *     math.median(5, 2, 7)        // returns 5\n   *     math.median([3, -1, 5, 7])  // returns 4\n   *\n   * See also:\n   *\n   *     mean, min, max, sum, prod, std, variance, quantileSeq\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The median\n   */\n\n  return typed(name, {\n    // median([a, b, c, d, ...])\n    'Array | Matrix': _median,\n    // median([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      // TODO: implement median(A, dim)\n      throw new Error('median(A, dim) is not yet supported'); // return reduce(arguments[0], arguments[1], ...)\n    },\n    // median(a, b, c, d, ...)\n    '...': function _(args) {\n      if ((0, _collection.containsCollections)(args)) {\n        throw new TypeError('Scalar values expected in function median');\n      }\n\n      return _median(args);\n    }\n  });\n});\nexports.createMedian = createMedian;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createMedian","_collection","_array","_factory","_improveErrorMessage","factory","name","dependencies","_ref","_median","array","flatten","valueOf","num","length","Error","mid","right","partitionSelect","left","i","compare","middle2","m","middle","err","improveErrorMessage","typed","add","divide","numberBigNumberComplexUnit","numberBigNumberComplexUnitNumberBigNumberComplexUnit","ArrayMatrixNumberBigNumber","dim","_","args","containsCollections","TypeError"]
}
