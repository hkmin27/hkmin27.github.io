{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$matrix$rotationMatrix.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/function/matrix/rotationMatrix.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$matrix$rotationMatrix\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createRotationMatrix = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'rotationMatrix';\nvar dependencies = ['typed', 'config', 'multiplyScalar', 'addScalar', 'unaryMinus', 'norm', 'matrix', 'BigNumber', 'DenseMatrix', 'SparseMatrix', 'cos', 'sin'];\nvar createRotationMatrix = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      multiplyScalar = _ref.multiplyScalar,\n      addScalar = _ref.addScalar,\n      unaryMinus = _ref.unaryMinus,\n      norm = _ref.norm,\n      BigNumber = _ref.BigNumber,\n      matrix = _ref.matrix,\n      DenseMatrix = _ref.DenseMatrix,\n      SparseMatrix = _ref.SparseMatrix,\n      cos = _ref.cos,\n      sin = _ref.sin;\n\n  /**\n   * Create a 2-dimensional counter-clockwise rotation matrix (2x2) for a given angle (expressed in radians).\n   * Create a 2-dimensional counter-clockwise rotation matrix (3x3) by a given angle (expressed in radians) around a given axis (1x3).\n   *\n   * Syntax:\n   *\n   *    math.rotationMatrix(theta)\n   *    math.rotationMatrix(theta, format)\n   *    math.rotationMatrix(theta, [v])\n   *    math.rotationMatrix(theta, [v], format)\n   *\n   * Examples:\n   *\n   *    math.rotationMatrix(math.pi / 2)                      // returns [[0, -1], [1, 0]]\n   *    math.rotationMatrix(math.bignumber(1))                // returns [[bignumber(cos(1)), bignumber(-sin(1))], [bignumber(sin(1)), bignumber(cos(1))]]\n   *    math.rotationMatrix(math.complex(1 + i))              // returns [[cos(1 + i), -sin(1 + i)], [sin(1 + i), cos(1 + i)]]\n   *    math.rotationMatrix(math.unit('1rad'))                // returns [[cos(1), -sin(1)], [sin(1), cos(1)]]\n   *\n   *    math.rotationMatrix(math.pi / 2, [0, 1, 0])           // returns [[0, 0, 1], [0, 1, 0], [-1, 0, 0]]\n   *    math.rotationMatrix(math.pi / 2, matrix([0, 1, 0]))   // returns matrix([[0, 0, 1], [0, 1, 0], [-1, 0, 0]])\n   *\n   *\n   * See also:\n   *\n   *    matrix, cos, sin\n   *\n   *\n   * @param {number | BigNumber | Complex | Unit} theta    Rotation angle\n   * @param {Array | Matrix} [v]                           Rotation axis\n   * @param {string} [format]                              Result Matrix storage format\n   * @return {Array | Matrix}                              Rotation matrix\n   */\n  return typed(name, {\n    '': function _() {\n      return config.matrix === 'Matrix' ? matrix([]) : [];\n    },\n    string: function string(format) {\n      return matrix(format);\n    },\n    'number | BigNumber | Complex | Unit': function numberBigNumberComplexUnit(theta) {\n      return _rotationMatrix2x2(theta, config.matrix === 'Matrix' ? 'dense' : undefined);\n    },\n    'number | BigNumber | Complex | Unit, string': function numberBigNumberComplexUnitString(theta, format) {\n      return _rotationMatrix2x2(theta, format);\n    },\n    'number | BigNumber | Complex | Unit, Array': function numberBigNumberComplexUnitArray(theta, v) {\n      var matrixV = matrix(v);\n\n      _validateVector(matrixV);\n\n      return _rotationMatrix3x3(theta, matrixV, undefined);\n    },\n    'number | BigNumber | Complex | Unit, Matrix': function numberBigNumberComplexUnitMatrix(theta, v) {\n      _validateVector(v);\n\n      var storageType = v.storage() || (config.matrix === 'Matrix' ? 'dense' : undefined);\n      return _rotationMatrix3x3(theta, v, storageType);\n    },\n    'number | BigNumber | Complex | Unit, Array, string': function numberBigNumberComplexUnitArrayString(theta, v, format) {\n      var matrixV = matrix(v);\n\n      _validateVector(matrixV);\n\n      return _rotationMatrix3x3(theta, matrixV, format);\n    },\n    'number | BigNumber | Complex | Unit, Matrix, string': function numberBigNumberComplexUnitMatrixString(theta, v, format) {\n      _validateVector(v);\n\n      return _rotationMatrix3x3(theta, v, format);\n    }\n  });\n  /**\n   * Returns 2x2 matrix of 2D rotation of angle theta\n   *\n   * @param {number | BigNumber | Complex | Unit} theta  The rotation angle\n   * @param {string} format                              The result Matrix storage format\n   * @returns {Matrix}\n   * @private\n   */\n\n  function _rotationMatrix2x2(theta, format) {\n    var Big = (0, _is.isBigNumber)(theta);\n    var minusOne = Big ? new BigNumber(-1) : -1;\n    var cosTheta = cos(theta);\n    var sinTheta = sin(theta);\n    var data = [[cosTheta, multiplyScalar(minusOne, sinTheta)], [sinTheta, cosTheta]];\n    return _convertToFormat(data, format);\n  }\n\n  function _validateVector(v) {\n    var size = v.size();\n\n    if (size.length < 1 || size[0] !== 3) {\n      throw new RangeError('Vector must be of dimensions 1x3');\n    }\n  }\n\n  function _mul(array) {\n    return array.reduce(function (p, curr) {\n      return multiplyScalar(p, curr);\n    });\n  }\n\n  function _convertToFormat(data, format) {\n    if (format) {\n      if (format === 'sparse') {\n        return new SparseMatrix(data);\n      }\n\n      if (format === 'dense') {\n        return new DenseMatrix(data);\n      }\n\n      throw new TypeError(\"Unknown matrix type \\\"\".concat(format, \"\\\"\"));\n    }\n\n    return data;\n  }\n  /**\n   * Returns a 3x3 matrix of rotation of angle theta around vector v\n   *\n   * @param {number | BigNumber | Complex | Unit} theta The rotation angle\n   * @param {Matrix} v                                  The rotation axis vector\n   * @param {string} format                             The storage format of the resulting matrix\n   * @returns {Matrix}\n   * @private\n   */\n\n\n  function _rotationMatrix3x3(theta, v, format) {\n    var normV = norm(v);\n\n    if (normV === 0) {\n      throw new RangeError('Rotation around zero vector');\n    }\n\n    var Big = (0, _is.isBigNumber)(theta) ? BigNumber : null;\n    var one = Big ? new Big(1) : 1;\n    var minusOne = Big ? new Big(-1) : -1;\n    var vx = Big ? new Big(v.get([0]) / normV) : v.get([0]) / normV;\n    var vy = Big ? new Big(v.get([1]) / normV) : v.get([1]) / normV;\n    var vz = Big ? new Big(v.get([2]) / normV) : v.get([2]) / normV;\n    var c = cos(theta);\n    var oneMinusC = addScalar(one, unaryMinus(c));\n    var s = sin(theta);\n    var r11 = addScalar(c, _mul([vx, vx, oneMinusC]));\n    var r12 = addScalar(_mul([vx, vy, oneMinusC]), _mul([minusOne, vz, s]));\n    var r13 = addScalar(_mul([vx, vz, oneMinusC]), _mul([vy, s]));\n    var r21 = addScalar(_mul([vx, vy, oneMinusC]), _mul([vz, s]));\n    var r22 = addScalar(c, _mul([vy, vy, oneMinusC]));\n    var r23 = addScalar(_mul([vy, vz, oneMinusC]), _mul([minusOne, vx, s]));\n    var r31 = addScalar(_mul([vx, vz, oneMinusC]), _mul([minusOne, vy, s]));\n    var r32 = addScalar(_mul([vy, vz, oneMinusC]), _mul([vx, s]));\n    var r33 = addScalar(c, _mul([vz, vz, oneMinusC]));\n    var data = [[r11, r12, r13], [r21, r22, r23], [r31, r32, r33]];\n    return _convertToFormat(data, format);\n  }\n});\nexports.createRotationMatrix = createRotationMatrix;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createRotationMatrix","_is","_factory","factory","name","dependencies","_ref","_rotationMatrix2x2","theta","format","minusOne","Big","isBigNumber","BigNumber","cosTheta","cos","sinTheta","sin","data","multiplyScalar","_convertToFormat","_validateVector","v","size","length","RangeError","_mul","array","reduce","p","curr","SparseMatrix","DenseMatrix","TypeError","concat","_rotationMatrix3x3","normV","norm","one","vx","get","vy","vz","c","oneMinusC","addScalar","unaryMinus","s","r11","r12","r13","r21","r22","r23","r31","r32","r33","typed","config","matrix","_","string","numberBigNumberComplexUnit","undefined","numberBigNumberComplexUnitString","numberBigNumberComplexUnitArray","matrixV","numberBigNumberComplexUnitMatrix","storageType","storage","numberBigNumberComplexUnitArrayString","numberBigNumberComplexUnitMatrixString"]
}
