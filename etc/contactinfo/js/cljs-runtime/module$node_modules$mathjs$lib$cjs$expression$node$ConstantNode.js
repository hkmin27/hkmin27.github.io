shadow$provide.module$node_modules$mathjs$lib$cjs$expression$node$ConstantNode=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.createConstantNode=void 0;var _string=require("module$node_modules$mathjs$lib$cjs$utils$string"),_is=require("module$node_modules$mathjs$lib$cjs$utils$is"),_latex=require("module$node_modules$mathjs$lib$cjs$utils$latex");global=require("module$node_modules$mathjs$lib$cjs$utils$factory");global=(0,global.factory)("ConstantNode",
["Node"],function(_ref){function ConstantNode(value){if(!(this instanceof ConstantNode))throw new SyntaxError("Constructor must be called with the new operator");this.value=value}ConstantNode.prototype=new _ref.Node;ConstantNode.prototype.type="ConstantNode";ConstantNode.prototype.isConstantNode=!0;ConstantNode.prototype._compile=function(math,argNames){var value=this.value;return function(){return value}};ConstantNode.prototype.forEach=function(callback){};ConstantNode.prototype.map=function(callback){return this.clone()};
ConstantNode.prototype.clone=function(){return new ConstantNode(this.value)};ConstantNode.prototype._toString=function(options){return(0,_string.format)(this.value,options)};ConstantNode.prototype.toHTML=function(options){options=this._toString(options);switch((0,_is.typeOf)(this.value)){case "number":case "BigNumber":case "Fraction":return'\x3cspan class\x3d"math-number"\x3e'+options+"\x3c/span\x3e";case "string":return'\x3cspan class\x3d"math-string"\x3e'+options+"\x3c/span\x3e";case "boolean":return'\x3cspan class\x3d"math-boolean"\x3e'+
options+"\x3c/span\x3e";case "null":return'\x3cspan class\x3d"math-null-symbol"\x3e'+options+"\x3c/span\x3e";case "undefined":return'\x3cspan class\x3d"math-undefined"\x3e'+options+"\x3c/span\x3e";default:return'\x3cspan class\x3d"math-symbol"\x3e'+options+"\x3c/span\x3e"}};ConstantNode.prototype.toJSON=function(){return{mathjs:"ConstantNode",value:this.value}};ConstantNode.fromJSON=function(json){return new ConstantNode(json.value)};ConstantNode.prototype._toTex=function(options){options=this._toString(options);
switch((0,_is.typeOf)(this.value)){case "string":return"\\mathtt{"+(0,_latex.escapeLatex)(options)+"}";case "number":case "BigNumber":if(!isFinite(this.value))return 0>this.value.valueOf()?"-\\infty":"\\infty";var index=options.toLowerCase().indexOf("e");return-1!==index?options.substring(0,index)+"\\cdot10^{"+options.substring(index+1)+"}":options;case "Fraction":return this.value.toLatex();default:return options}};return ConstantNode},{isClass:!0,isNode:!0});exports.createConstantNode=global}
//# sourceMappingURL=module$node_modules$mathjs$lib$cjs$expression$node$ConstantNode.js.map
