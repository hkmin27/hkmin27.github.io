{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$type$matrix$DenseMatrix.js",
"lineCount":21,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/type/matrix/DenseMatrix.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$type$matrix$DenseMatrix\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createDenseMatrixClass = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _string = require(\"../../utils/string.js\");\n\nvar _number = require(\"../../utils/number.js\");\n\nvar _object = require(\"../../utils/object.js\");\n\nvar _DimensionError = require(\"../../error/DimensionError.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'DenseMatrix';\nvar dependencies = ['Matrix'];\nvar createDenseMatrixClass = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var Matrix = _ref.Matrix;\n\n  /**\n   * Dense Matrix implementation. A regular, dense matrix, supporting multi-dimensional matrices. This is the default matrix type.\n   * @class DenseMatrix\n   */\n  function DenseMatrix(data, datatype) {\n    if (!(this instanceof DenseMatrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (datatype && !(0, _is.isString)(datatype)) {\n      throw new Error('Invalid datatype: ' + datatype);\n    }\n\n    if ((0, _is.isMatrix)(data)) {\n      // check data is a DenseMatrix\n      if (data.type === 'DenseMatrix') {\n        // clone data & size\n        this._data = (0, _object.clone)(data._data);\n        this._size = (0, _object.clone)(data._size);\n        this._datatype = datatype || data._datatype;\n      } else {\n        // build data from existing matrix\n        this._data = data.toArray();\n        this._size = data.size();\n        this._datatype = datatype || data._datatype;\n      }\n    } else if (data && (0, _is.isArray)(data.data) && (0, _is.isArray)(data.size)) {\n      // initialize fields from JSON representation\n      this._data = data.data;\n      this._size = data.size; // verify the dimensions of the array\n\n      (0, _array.validate)(this._data, this._size);\n      this._datatype = datatype || data.datatype;\n    } else if ((0, _is.isArray)(data)) {\n      // replace nested Matrices with Arrays\n      this._data = preprocess(data); // get the dimensions of the array\n\n      this._size = (0, _array.arraySize)(this._data); // verify the dimensions of the array, TODO: compute size while processing array\n\n      (0, _array.validate)(this._data, this._size); // data type unknown\n\n      this._datatype = datatype;\n    } else if (data) {\n      // unsupported type\n      throw new TypeError('Unsupported type of data (' + (0, _is.typeOf)(data) + ')');\n    } else {\n      // nothing provided\n      this._data = [];\n      this._size = [0];\n      this._datatype = datatype;\n    }\n  }\n\n  DenseMatrix.prototype = new Matrix();\n  /**\n   * Create a new DenseMatrix\n   */\n\n  DenseMatrix.prototype.createDenseMatrix = function (data, datatype) {\n    return new DenseMatrix(data, datatype);\n  };\n  /**\n   * Attach type information\n   */\n\n\n  DenseMatrix.prototype.type = 'DenseMatrix';\n  DenseMatrix.prototype.isDenseMatrix = true;\n  /**\n   * Get the matrix type\n   *\n   * Usage:\n   *    const matrixType = matrix.getDataType()  // retrieves the matrix type\n   *\n   * @memberOf DenseMatrix\n   * @return {string}   type information; if multiple types are found from the Matrix, it will return \"mixed\"\n   */\n\n  DenseMatrix.prototype.getDataType = function () {\n    return (0, _array.getArrayDataType)(this._data, _is.typeOf);\n  };\n  /**\n   * Get the storage format used by the matrix.\n   *\n   * Usage:\n   *     const format = matrix.storage()  // retrieve storage format\n   *\n   * @memberof DenseMatrix\n   * @return {string}           The storage format.\n   */\n\n\n  DenseMatrix.prototype.storage = function () {\n    return 'dense';\n  };\n  /**\n   * Get the datatype of the data stored in the matrix.\n   *\n   * Usage:\n   *     const format = matrix.datatype()   // retrieve matrix datatype\n   *\n   * @memberof DenseMatrix\n   * @return {string}           The datatype.\n   */\n\n\n  DenseMatrix.prototype.datatype = function () {\n    return this._datatype;\n  };\n  /**\n   * Create a new DenseMatrix\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {string} [datatype]\n   */\n\n\n  DenseMatrix.prototype.create = function (data, datatype) {\n    return new DenseMatrix(data, datatype);\n  };\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     const subset = matrix.subset(index)               // retrieve subset\n   *     const value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @memberof DenseMatrix\n   * @param {Index} index\n   * @param {Array | Matrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n\n\n  DenseMatrix.prototype.subset = function (index, replacement, defaultValue) {\n    switch (arguments.length) {\n      case 1:\n        return _get(this, index);\n      // intentional fall through\n\n      case 2:\n      case 3:\n        return _set(this, index, replacement, defaultValue);\n\n      default:\n        throw new SyntaxError('Wrong number of arguments');\n    }\n  };\n  /**\n   * Get a single element from the matrix.\n   * @memberof DenseMatrix\n   * @param {number[]} index   Zero-based index\n   * @return {*} value\n   */\n\n\n  DenseMatrix.prototype.get = function (index) {\n    if (!(0, _is.isArray)(index)) {\n      throw new TypeError('Array expected');\n    }\n\n    if (index.length !== this._size.length) {\n      throw new _DimensionError.DimensionError(index.length, this._size.length);\n    } // check index\n\n\n    for (var x = 0; x < index.length; x++) {\n      (0, _array.validateIndex)(index[x], this._size[x]);\n    }\n\n    var data = this._data;\n\n    for (var i = 0, ii = index.length; i < ii; i++) {\n      var indexI = index[i];\n      (0, _array.validateIndex)(indexI, data.length);\n      data = data[indexI];\n    }\n\n    return data;\n  };\n  /**\n   * Replace a single element in the matrix.\n   * @memberof DenseMatrix\n   * @param {number[]} index   Zero-based index\n   * @param {*} value\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be left undefined.\n   * @return {DenseMatrix} self\n   */\n\n\n  DenseMatrix.prototype.set = function (index, value, defaultValue) {\n    if (!(0, _is.isArray)(index)) {\n      throw new TypeError('Array expected');\n    }\n\n    if (index.length < this._size.length) {\n      throw new _DimensionError.DimensionError(index.length, this._size.length, '<');\n    }\n\n    var i, ii, indexI; // enlarge matrix when needed\n\n    var size = index.map(function (i) {\n      return i + 1;\n    });\n\n    _fit(this, size, defaultValue); // traverse over the dimensions\n\n\n    var data = this._data;\n\n    for (i = 0, ii = index.length - 1; i < ii; i++) {\n      indexI = index[i];\n      (0, _array.validateIndex)(indexI, data.length);\n      data = data[indexI];\n    } // set new value\n\n\n    indexI = index[index.length - 1];\n    (0, _array.validateIndex)(indexI, data.length);\n    data[indexI] = value;\n    return this;\n  };\n  /**\n   * Get a submatrix of this matrix\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix\n   * @param {Index} index   Zero-based index\n   * @private\n   */\n\n\n  function _get(matrix, index) {\n    if (!(0, _is.isIndex)(index)) {\n      throw new TypeError('Invalid index');\n    }\n\n    var isScalar = index.isScalar();\n\n    if (isScalar) {\n      // return a scalar\n      return matrix.get(index.min());\n    } else {\n      // validate dimensions\n      var size = index.size();\n\n      if (size.length !== matrix._size.length) {\n        throw new _DimensionError.DimensionError(size.length, matrix._size.length);\n      } // validate if any of the ranges in the index is out of range\n\n\n      var min = index.min();\n      var max = index.max();\n\n      for (var i = 0, ii = matrix._size.length; i < ii; i++) {\n        (0, _array.validateIndex)(min[i], matrix._size[i]);\n        (0, _array.validateIndex)(max[i], matrix._size[i]);\n      } // retrieve submatrix\n      // TODO: more efficient when creating an empty matrix and setting _data and _size manually\n\n\n      return new DenseMatrix(_getSubmatrix(matrix._data, index, size.length, 0), matrix._datatype);\n    }\n  }\n  /**\n   * Recursively get a submatrix of a multi dimensional matrix.\n   * Index is not checked for correct number or length of dimensions.\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {Index} index\n   * @param {number} dims   Total number of dimensions\n   * @param {number} dim    Current dimension\n   * @return {Array} submatrix\n   * @private\n   */\n\n\n  function _getSubmatrix(data, index, dims, dim) {\n    var last = dim === dims - 1;\n    var range = index.dimension(dim);\n\n    if (last) {\n      return range.map(function (i) {\n        (0, _array.validateIndex)(i, data.length);\n        return data[i];\n      }).valueOf();\n    } else {\n      return range.map(function (i) {\n        (0, _array.validateIndex)(i, data.length);\n        var child = data[i];\n        return _getSubmatrix(child, index, dims, dim + 1);\n      }).valueOf();\n    }\n  }\n  /**\n   * Replace a submatrix in this matrix\n   * Indexes are zero-based.\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix\n   * @param {Index} index\n   * @param {DenseMatrix | Array | *} submatrix\n   * @param {*} defaultValue          Default value, filled in on new entries when\n   *                                  the matrix is resized.\n   * @return {DenseMatrix} matrix\n   * @private\n   */\n\n\n  function _set(matrix, index, submatrix, defaultValue) {\n    if (!index || index.isIndex !== true) {\n      throw new TypeError('Invalid index');\n    } // get index size and check whether the index contains a single value\n\n\n    var iSize = index.size();\n    var isScalar = index.isScalar(); // calculate the size of the submatrix, and convert it into an Array if needed\n\n    var sSize;\n\n    if ((0, _is.isMatrix)(submatrix)) {\n      sSize = submatrix.size();\n      submatrix = submatrix.valueOf();\n    } else {\n      sSize = (0, _array.arraySize)(submatrix);\n    }\n\n    if (isScalar) {\n      // set a scalar\n      // check whether submatrix is a scalar\n      if (sSize.length !== 0) {\n        throw new TypeError('Scalar expected');\n      }\n\n      matrix.set(index.min(), submatrix, defaultValue);\n    } else {\n      // set a submatrix\n      // validate dimensions\n      if (iSize.length < matrix._size.length) {\n        throw new _DimensionError.DimensionError(iSize.length, matrix._size.length, '<');\n      }\n\n      if (sSize.length < iSize.length) {\n        // calculate number of missing outer dimensions\n        var i = 0;\n        var outer = 0;\n\n        while (iSize[i] === 1 && sSize[i] === 1) {\n          i++;\n        }\n\n        while (iSize[i] === 1) {\n          outer++;\n          i++;\n        } // unsqueeze both outer and inner dimensions\n\n\n        submatrix = (0, _array.unsqueeze)(submatrix, iSize.length, outer, sSize);\n      } // check whether the size of the submatrix matches the index size\n\n\n      if (!(0, _object.deepStrictEqual)(iSize, sSize)) {\n        throw new _DimensionError.DimensionError(iSize, sSize, '>');\n      } // enlarge matrix when needed\n\n\n      var size = index.max().map(function (i) {\n        return i + 1;\n      });\n\n      _fit(matrix, size, defaultValue); // insert the sub matrix\n\n\n      var dims = iSize.length;\n      var dim = 0;\n\n      _setSubmatrix(matrix._data, index, submatrix, dims, dim);\n    }\n\n    return matrix;\n  }\n  /**\n   * Replace a submatrix of a multi dimensional matrix.\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {Index} index\n   * @param {Array} submatrix\n   * @param {number} dims   Total number of dimensions\n   * @param {number} dim\n   * @private\n   */\n\n\n  function _setSubmatrix(data, index, submatrix, dims, dim) {\n    var last = dim === dims - 1;\n    var range = index.dimension(dim);\n\n    if (last) {\n      range.forEach(function (dataIndex, subIndex) {\n        (0, _array.validateIndex)(dataIndex);\n        data[dataIndex] = submatrix[subIndex[0]];\n      });\n    } else {\n      range.forEach(function (dataIndex, subIndex) {\n        (0, _array.validateIndex)(dataIndex);\n\n        _setSubmatrix(data[dataIndex], index, submatrix[subIndex[0]], dims, dim + 1);\n      });\n    }\n  }\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @memberof DenseMatrix\n   * @param {number[] || Matrix} size The new size the matrix should have.\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n\n\n  DenseMatrix.prototype.resize = function (size, defaultValue, copy) {\n    // validate arguments\n    if (!(0, _is.isCollection)(size)) {\n      throw new TypeError('Array or Matrix expected');\n    } // SparseMatrix input is always 2d, flatten this into 1d if it's indeed a vector\n\n\n    var sizeArray = size.valueOf().map(function (value) {\n      return Array.isArray(value) && value.length === 1 ? value[0] : value;\n    }); // matrix to resize\n\n    var m = copy ? this.clone() : this; // resize matrix\n\n    return _resize(m, sizeArray, defaultValue);\n  };\n\n  function _resize(matrix, size, defaultValue) {\n    // check size\n    if (size.length === 0) {\n      // first value in matrix\n      var v = matrix._data; // go deep\n\n      while ((0, _is.isArray)(v)) {\n        v = v[0];\n      }\n\n      return v;\n    } // resize matrix\n\n\n    matrix._size = size.slice(0); // copy the array\n\n    matrix._data = (0, _array.resize)(matrix._data, matrix._size, defaultValue); // return matrix\n\n    return matrix;\n  }\n  /**\n   * Reshape the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (reshape in place).\n   *\n   * NOTE: This might be better suited to copy by default, instead of modifying\n   *       in place. For now, it operates in place to remain consistent with\n   *       resize().\n   *\n   * @memberof DenseMatrix\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {boolean} [copy]          Return a reshaped copy of the matrix\n   *\n   * @return {Matrix}                 The reshaped matrix\n   */\n\n\n  DenseMatrix.prototype.reshape = function (size, copy) {\n    var m = copy ? this.clone() : this;\n    m._data = (0, _array.reshape)(m._data, size);\n\n    var currentLength = m._size.reduce(function (length, size) {\n      return length * size;\n    });\n\n    m._size = (0, _array.processSizesWildcard)(size, currentLength);\n    return m;\n  };\n  /**\n   * Enlarge the matrix when it is smaller than given size.\n   * If the matrix is larger or equal sized, nothing is done.\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix           The matrix to be resized\n   * @param {number[]} size\n   * @param {*} defaultValue          Default value, filled in on new entries.\n   * @private\n   */\n\n\n  function _fit(matrix, size, defaultValue) {\n    var // copy the array\n    newSize = matrix._size.slice(0);\n\n    var changed = false; // add dimensions when needed\n\n    while (newSize.length < size.length) {\n      newSize.push(0);\n      changed = true;\n    } // enlarge size when needed\n\n\n    for (var i = 0, ii = size.length; i < ii; i++) {\n      if (size[i] > newSize[i]) {\n        newSize[i] = size[i];\n        changed = true;\n      }\n    }\n\n    if (changed) {\n      // resize only when size is changed\n      _resize(matrix, newSize, defaultValue);\n    }\n  }\n  /**\n   * Create a clone of the matrix\n   * @memberof DenseMatrix\n   * @return {DenseMatrix} clone\n   */\n\n\n  DenseMatrix.prototype.clone = function () {\n    var m = new DenseMatrix({\n      data: (0, _object.clone)(this._data),\n      size: (0, _object.clone)(this._size),\n      datatype: this._datatype\n    });\n    return m;\n  };\n  /**\n   * Retrieve the size of the matrix.\n   * @memberof DenseMatrix\n   * @returns {number[]} size\n   */\n\n\n  DenseMatrix.prototype.size = function () {\n    return this._size.slice(0); // return a clone of _size\n  };\n  /**\n   * Create a new matrix with the results of the callback function executed on\n   * each entry of the matrix.\n   * @memberof DenseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   *\n   * @return {DenseMatrix} matrix\n   */\n\n\n  DenseMatrix.prototype.map = function (callback) {\n    // matrix instance\n    var me = this;\n\n    var recurse = function recurse(value, index) {\n      if ((0, _is.isArray)(value)) {\n        return value.map(function (child, i) {\n          return recurse(child, index.concat(i));\n        });\n      } else {\n        return callback(value, index, me);\n      }\n    }; // determine the new datatype when the original matrix has datatype defined\n    // TODO: should be done in matrix constructor instead\n\n\n    var data = recurse(this._data, []);\n    var datatype = this._datatype !== undefined ? (0, _array.getArrayDataType)(data, _is.typeOf) : undefined;\n    return new DenseMatrix(data, datatype);\n  };\n  /**\n   * Execute a callback function on each entry of the matrix.\n   * @memberof DenseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   */\n\n\n  DenseMatrix.prototype.forEach = function (callback) {\n    // matrix instance\n    var me = this;\n\n    var recurse = function recurse(value, index) {\n      if ((0, _is.isArray)(value)) {\n        value.forEach(function (child, i) {\n          recurse(child, index.concat(i));\n        });\n      } else {\n        callback(value, index, me);\n      }\n    };\n\n    recurse(this._data, []);\n  };\n  /**\n   * Create an Array with a copy of the data of the DenseMatrix\n   * @memberof DenseMatrix\n   * @returns {Array} array\n   */\n\n\n  DenseMatrix.prototype.toArray = function () {\n    return (0, _object.clone)(this._data);\n  };\n  /**\n   * Get the primitive value of the DenseMatrix: a multidimensional array\n   * @memberof DenseMatrix\n   * @returns {Array} array\n   */\n\n\n  DenseMatrix.prototype.valueOf = function () {\n    return this._data;\n  };\n  /**\n   * Get a string representation of the matrix, with optional formatting options.\n   * @memberof DenseMatrix\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n\n\n  DenseMatrix.prototype.format = function (options) {\n    return (0, _string.format)(this._data, options);\n  };\n  /**\n   * Get a string representation of the matrix\n   * @memberof DenseMatrix\n   * @returns {string} str\n   */\n\n\n  DenseMatrix.prototype.toString = function () {\n    return (0, _string.format)(this._data);\n  };\n  /**\n   * Get a JSON representation of the matrix\n   * @memberof DenseMatrix\n   * @returns {Object}\n   */\n\n\n  DenseMatrix.prototype.toJSON = function () {\n    return {\n      mathjs: 'DenseMatrix',\n      data: this._data,\n      size: this._size,\n      datatype: this._datatype\n    };\n  };\n  /**\n   * Get the kth Matrix diagonal.\n   *\n   * @memberof DenseMatrix\n   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.\n   *\n   * @returns {Matrix}                     The matrix with the diagonal values.\n   */\n\n\n  DenseMatrix.prototype.diagonal = function (k) {\n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if ((0, _is.isBigNumber)(k)) {\n        k = k.toNumber();\n      } // is must be an integer\n\n\n      if (!(0, _is.isNumber)(k) || !(0, _number.isInteger)(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    }\n\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0; // rows & columns\n\n    var rows = this._size[0];\n    var columns = this._size[1]; // number diagonal values\n\n    var n = Math.min(rows - kSub, columns - kSuper); // x is a matrix get diagonal from matrix\n\n    var data = []; // loop rows\n\n    for (var i = 0; i < n; i++) {\n      data[i] = this._data[i + kSub][i + kSuper];\n    } // create DenseMatrix\n\n\n    return new DenseMatrix({\n      data: data,\n      size: [n],\n      datatype: this._datatype\n    });\n  };\n  /**\n   * Create a diagonal matrix.\n   *\n   * @memberof DenseMatrix\n   * @param {Array} size                     The matrix size.\n   * @param {number | Matrix | Array } value The values for the diagonal.\n   * @param {number | BigNumber} [k=0]       The kth diagonal where the vector will be filled in.\n   * @param {number} [defaultValue]          The default value for non-diagonal\n   * @param {string} [datatype]              The datatype for the diagonal\n   *\n   * @returns {DenseMatrix}\n   */\n\n\n  DenseMatrix.diagonal = function (size, value, k, defaultValue) {\n    if (!(0, _is.isArray)(size)) {\n      throw new TypeError('Array expected, size parameter');\n    }\n\n    if (size.length !== 2) {\n      throw new Error('Only two dimensions matrix are supported');\n    } // map size & validate\n\n\n    size = size.map(function (s) {\n      // check it is a big number\n      if ((0, _is.isBigNumber)(s)) {\n        // convert it\n        s = s.toNumber();\n      } // validate arguments\n\n\n      if (!(0, _is.isNumber)(s) || !(0, _number.isInteger)(s) || s < 1) {\n        throw new Error('Size values must be positive integers');\n      }\n\n      return s;\n    }); // validate k if any\n\n    if (k) {\n      // convert BigNumber to a number\n      if ((0, _is.isBigNumber)(k)) {\n        k = k.toNumber();\n      } // is must be an integer\n\n\n      if (!(0, _is.isNumber)(k) || !(0, _number.isInteger)(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    }\n\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0; // rows and columns\n\n    var rows = size[0];\n    var columns = size[1]; // number of non-zero items\n\n    var n = Math.min(rows - kSub, columns - kSuper); // value extraction function\n\n    var _value; // check value\n\n\n    if ((0, _is.isArray)(value)) {\n      // validate array\n      if (value.length !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid value array length');\n      } // define function\n\n\n      _value = function _value(i) {\n        // return value @ i\n        return value[i];\n      };\n    } else if ((0, _is.isMatrix)(value)) {\n      // matrix size\n      var ms = value.size(); // validate matrix\n\n      if (ms.length !== 1 || ms[0] !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid matrix length');\n      } // define function\n\n\n      _value = function _value(i) {\n        // return value @ i\n        return value.get([i]);\n      };\n    } else {\n      // define function\n      _value = function _value() {\n        // return value\n        return value;\n      };\n    } // discover default value if needed\n\n\n    if (!defaultValue) {\n      // check first value in array\n      defaultValue = (0, _is.isBigNumber)(_value(0)) ? _value(0).mul(0) // trick to create a BigNumber with value zero\n      : 0;\n    } // empty array\n\n\n    var data = []; // check we need to resize array\n\n    if (size.length > 0) {\n      // resize array\n      data = (0, _array.resize)(data, size, defaultValue); // fill diagonal\n\n      for (var d = 0; d < n; d++) {\n        data[d + kSub][d + kSuper] = _value(d);\n      }\n    } // create DenseMatrix\n\n\n    return new DenseMatrix({\n      data: data,\n      size: [rows, columns]\n    });\n  };\n  /**\n   * Generate a matrix from a JSON object\n   * @memberof DenseMatrix\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"DenseMatrix\", data: [], size: []}`,\n   *                       where mathjs is optional\n   * @returns {DenseMatrix}\n   */\n\n\n  DenseMatrix.fromJSON = function (json) {\n    return new DenseMatrix(json);\n  };\n  /**\n   * Swap rows i and j in Matrix.\n   *\n   * @memberof DenseMatrix\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   *\n   * @return {Matrix}        The matrix reference\n   */\n\n\n  DenseMatrix.prototype.swapRows = function (i, j) {\n    // check index\n    if (!(0, _is.isNumber)(i) || !(0, _number.isInteger)(i) || !(0, _is.isNumber)(j) || !(0, _number.isInteger)(j)) {\n      throw new Error('Row index must be positive integers');\n    } // check dimensions\n\n\n    if (this._size.length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    } // validate index\n\n\n    (0, _array.validateIndex)(i, this._size[0]);\n    (0, _array.validateIndex)(j, this._size[0]); // swap rows\n\n    DenseMatrix._swapRows(i, j, this._data); // return current instance\n\n\n    return this;\n  };\n  /**\n   * Swap rows i and j in Dense Matrix data structure.\n   *\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   * @param {Array} data     Matrix data\n   */\n\n\n  DenseMatrix._swapRows = function (i, j, data) {\n    // swap values i <-> j\n    var vi = data[i];\n    data[i] = data[j];\n    data[j] = vi;\n  };\n  /**\n   * Preprocess data, which can be an Array or DenseMatrix with nested Arrays and\n   * Matrices. Replaces all nested Matrices with Arrays\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @return {Array} data\n   */\n\n\n  function preprocess(data) {\n    for (var i = 0, ii = data.length; i < ii; i++) {\n      var elem = data[i];\n\n      if ((0, _is.isArray)(elem)) {\n        data[i] = preprocess(elem);\n      } else if (elem && elem.isMatrix === true) {\n        data[i] = preprocess(elem.valueOf());\n      }\n    }\n\n    return data;\n  }\n\n  return DenseMatrix;\n}, {\n  isClass: true\n});\nexports.createDenseMatrixClass = createDenseMatrixClass;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createDenseMatrixClass","_is","_array","_string","_number","_object","_DimensionError","_factory","factory","name","dependencies","_ref","DenseMatrix","data","datatype","SyntaxError","isString","Error","isMatrix","type","_data","clone","_size","toArray","size","_datatype","isArray","validate","preprocess","arraySize","TypeError","typeOf","_getSubmatrix","index","dims","dim","last","range","dimension","map","i","validateIndex","length","valueOf","child","_set","matrix","submatrix","defaultValue","isIndex","iSize","isScalar","sSize","set","min","DimensionError","outer","unsqueeze","deepStrictEqual","max","_fit","_setSubmatrix","forEach","dataIndex","subIndex","_resize","v","slice","resize","newSize","changed","push","ii","elem","prototype","Matrix","createDenseMatrix","DenseMatrix.prototype.createDenseMatrix","isDenseMatrix","getDataType","DenseMatrix.prototype.getDataType","getArrayDataType","storage","DenseMatrix.prototype.storage","DenseMatrix.prototype.datatype","create","DenseMatrix.prototype.create","subset","DenseMatrix.prototype.subset","replacement","arguments","get","DenseMatrix.prototype.get","x","indexI","DenseMatrix.prototype.set","DenseMatrix.prototype.resize","copy","isCollection","sizeArray","Array","m","reshape","DenseMatrix.prototype.reshape","currentLength","reduce","processSizesWildcard","DenseMatrix.prototype.clone","DenseMatrix.prototype.size","DenseMatrix.prototype.map","callback","me","recurse","concat","undefined","DenseMatrix.prototype.forEach","DenseMatrix.prototype.toArray","DenseMatrix.prototype.valueOf","format","DenseMatrix.prototype.format","options","toString","DenseMatrix.prototype.toString","toJSON","DenseMatrix.prototype.toJSON","mathjs","diagonal","DenseMatrix.prototype.diagonal","k","isBigNumber","toNumber","isNumber","isInteger","kSuper","kSub","n","Math","rows","columns","DenseMatrix.diagonal","s","_value","ms","mul","d","fromJSON","DenseMatrix.fromJSON","json","swapRows","DenseMatrix.prototype.swapRows","j","_swapRows","DenseMatrix._swapRows","vi","isClass"]
}
