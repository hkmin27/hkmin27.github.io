shadow$provide.module$node_modules$mathjs$lib$cjs$type$matrix$utils$algorithm08=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.createAlgorithm08=void 0;global=require("module$node_modules$mathjs$lib$cjs$utils$factory");var _DimensionError=require("module$node_modules$mathjs$lib$cjs$error$DimensionError");require=(0,global.factory)("algorithm08",["typed","equalScalar"],function(_ref){var typed=_ref.typed,equalScalar=_ref.equalScalar;return function(a,
b,callback){var avalues=a._values,aindex=a._index,aptr=a._ptr,asize=a._size,adt=a._datatype,bvalues=b._values,bindex=b._index,bptr=b._ptr,bsize=b._size,bdt=b._datatype;if(asize.length!==bsize.length)throw new _DimensionError.DimensionError(asize.length,bsize.length);if(asize[0]!==bsize[0]||asize[1]!==bsize[1])throw new RangeError("Dimension mismatch. Matrix A ("+asize+") must match Matrix B ("+bsize+")");if(!avalues||!bvalues)throw Error("Cannot perform operation on Pattern Sparse Matrices");bsize=
asize[0];asize=asize[1];b=equalScalar;var zero=0,cf=callback;if("string"===typeof adt&&adt===bdt){var dt=adt;b=typed.find(equalScalar,[dt,dt]);zero=typed.convert(0,dt);cf=typed.find(callback,[dt,dt])}callback=[];adt=[];bdt=[];for(var x=[],w=[],k,k1,i,j=0;j<asize;j++){bdt[j]=adt.length;var mark=j+1;k=aptr[j];for(k1=aptr[j+1];k<k1;k++)i=aindex[k],w[i]=mark,x[i]=avalues[k],adt.push(i);k=bptr[j];for(k1=bptr[j+1];k<k1;k++)i=bindex[k],w[i]===mark&&(x[i]=cf(x[i],bvalues[k]));for(k=bdt[j];k<adt.length;)i=
adt[k],k1=x[i],b(k1,zero)?adt.splice(k,1):(callback.push(k1),k++)}bdt[asize]=adt.length;return a.createSparseMatrix({values:callback,index:adt,ptr:bdt,size:[bsize,asize],datatype:dt})}});exports.createAlgorithm08=require}
//# sourceMappingURL=module$node_modules$mathjs$lib$cjs$type$matrix$utils$algorithm08.js.map
