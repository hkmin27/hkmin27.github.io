shadow$provide.module$node_modules$mathjs$lib$cjs$plain$number$arithmetic=function(global,require,module,exports){function absNumber(a){return Math.abs(a)}function addNumber(a,b){return a+b}function subtractNumber(a,b){return a-b}function multiplyNumber(a,b){return a*b}function divideNumber(a,b){return a/b}function unaryMinusNumber(x){return-x}function unaryPlusNumber(x){return x}function cbrtNumber(x){return(0,_number.cbrt)(x)}function ceilNumber(x){return Math.ceil(x)}function cubeNumber(x){return x*
x*x}function expNumber(x){return Math.exp(x)}function expm1Number(x){return(0,_number.expm1)(x)}function fixNumber(x){return 0<x?Math.floor(x):Math.ceil(x)}function floorNumber(x){return Math.floor(x)}function gcdNumber(a,b){if(!(0,_number.isInteger)(a)||!(0,_number.isInteger)(b))throw Error("Parameters in function gcd must be integer numbers");for(var r;0!==b;)r=a%b,a=b,b=r;return 0>a?-a:a}function lcmNumber(a,b){if(!(0,_number.isInteger)(a)||!(0,_number.isInteger)(b))throw Error("Parameters in function lcm must be integer numbers");
if(0===a||0===b)return 0;for(var t,prod=a*b;0!==b;)t=b,b=a%t,a=t;return Math.abs(prod/a)}function logNumber(x){return Math.log(x)}function log10Number(x){return(0,_number.log10)(x)}function log2Number(x){return(0,_number.log2)(x)}function log1pNumber(x){return(0,_number.log1p)(x)}function modNumber(x,y){if(0<y)return x-y*Math.floor(x/y);if(0===y)return x;throw Error("Cannot calculate mod for a negative divisor");}function nthRootNumber(a,root){var inv=0>root;inv&&(root=-root);if(0===root)throw Error("Root must be non-zero");
if(0>a&&1!==Math.abs(root)%2)throw Error("Root must be odd when a is negative.");if(0===a)return inv?Infinity:0;if(!isFinite(a))return inv?0:a;root=Math.pow(Math.abs(a),1/root);root=0>a?-root:root;return inv?1/root:root}function signNumber(x){return(0,_number.sign)(x)}function sqrtNumber(x){return Math.sqrt(x)}function squareNumber(x){return x*x}function xgcdNumber(a,b){var x=0,lastx=1,y=1,lasty=0;if(!(0,_number.isInteger)(a)||!(0,_number.isInteger)(b))throw Error("Parameters in function xgcd must be integer numbers");
for(;b;){var q=Math.floor(a/b);var r=a-q*b;a=x;x=lastx-q*x;lastx=a;a=y;y=lasty-q*y;lasty=a;a=b;b=r}return 0>a?[-a,-lastx,-lasty]:[a,a?lastx:0,lasty]}function powNumber(x,y){return 1>x*x&&Infinity===y||1<x*x&&-Infinity===y?0:Math.pow(x,y)}function roundNumber(value){var decimals=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0;return parseFloat((0,_number.toFixed)(value,decimals))}function normNumber(x){return Math.abs(x)}Object.defineProperty(exports,"__esModule",{value:!0});exports.absNumber=
absNumber;exports.addNumber=addNumber;exports.subtractNumber=subtractNumber;exports.multiplyNumber=multiplyNumber;exports.divideNumber=divideNumber;exports.unaryMinusNumber=unaryMinusNumber;exports.unaryPlusNumber=unaryPlusNumber;exports.cbrtNumber=cbrtNumber;exports.ceilNumber=ceilNumber;exports.cubeNumber=cubeNumber;exports.expNumber=expNumber;exports.expm1Number=expm1Number;exports.fixNumber=fixNumber;exports.floorNumber=floorNumber;exports.gcdNumber=gcdNumber;exports.lcmNumber=lcmNumber;exports.logNumber=
logNumber;exports.log10Number=log10Number;exports.log2Number=log2Number;exports.log1pNumber=log1pNumber;exports.modNumber=modNumber;exports.nthRootNumber=nthRootNumber;exports.signNumber=signNumber;exports.sqrtNumber=sqrtNumber;exports.squareNumber=squareNumber;exports.xgcdNumber=xgcdNumber;exports.powNumber=powNumber;exports.roundNumber=roundNumber;exports.normNumber=normNumber;var _number=require("module$node_modules$mathjs$lib$cjs$utils$number");absNumber.signature="number";addNumber.signature=
"number, number";subtractNumber.signature="number, number";multiplyNumber.signature="number, number";divideNumber.signature="number, number";unaryMinusNumber.signature="number";unaryPlusNumber.signature="number";cbrtNumber.signature="number";ceilNumber.signature="number";cubeNumber.signature="number";expNumber.signature="number";expm1Number.signature="number";fixNumber.signature="number";floorNumber.signature="number";gcdNumber.signature="number, number";lcmNumber.signature="number, number";logNumber.signature=
"number";log10Number.signature="number";log2Number.signature="number";log1pNumber.signature="number";modNumber.signature="number, number";nthRootNumber.signature="number, number";signNumber.signature="number";sqrtNumber.signature="number";squareNumber.signature="number";xgcdNumber.signature="number, number";powNumber.signature="number, number";roundNumber.signature="number, number";normNumber.signature="number"}
//# sourceMappingURL=module$node_modules$mathjs$lib$cjs$plain$number$arithmetic.js.map
