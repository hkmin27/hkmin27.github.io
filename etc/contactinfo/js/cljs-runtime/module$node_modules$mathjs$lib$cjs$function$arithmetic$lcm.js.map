{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$arithmetic$lcm.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/function/arithmetic/lcm.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$arithmetic$lcm\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createLcm = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _algorithm = require(\"../../type/matrix/utils/algorithm02.js\");\n\nvar _algorithm2 = require(\"../../type/matrix/utils/algorithm06.js\");\n\nvar _algorithm3 = require(\"../../type/matrix/utils/algorithm11.js\");\n\nvar _algorithm4 = require(\"../../type/matrix/utils/algorithm13.js\");\n\nvar _algorithm5 = require(\"../../type/matrix/utils/algorithm14.js\");\n\nvar _index = require(\"../../plain/number/index.js\");\n\nvar name = 'lcm';\nvar dependencies = ['typed', 'matrix', 'equalScalar'];\nvar createLcm = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      equalScalar = _ref.equalScalar;\n  var algorithm02 = (0, _algorithm.createAlgorithm02)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm06 = (0, _algorithm2.createAlgorithm06)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm11 = (0, _algorithm3.createAlgorithm11)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm13 = (0, _algorithm4.createAlgorithm13)({\n    typed: typed\n  });\n  var algorithm14 = (0, _algorithm5.createAlgorithm14)({\n    typed: typed\n  });\n  /**\n   * Calculate the least common multiple for two or more values or arrays.\n   *\n   * lcm is defined as:\n   *\n   *     lcm(a, b) = abs(a * b) / gcd(a, b)\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.lcm(a, b)\n   *    math.lcm(a, b, c, ...)\n   *\n   * Examples:\n   *\n   *    math.lcm(4, 6)               // returns 12\n   *    math.lcm(6, 21)              // returns 42\n   *    math.lcm(6, 21, 5)           // returns 210\n   *\n   *    math.lcm([4, 6], [6, 21])    // returns [12, 42]\n   *\n   * See also:\n   *\n   *    gcd, xgcd\n   *\n   * @param {... number | BigNumber | Array | Matrix} args  Two or more integer numbers\n   * @return {number | BigNumber | Array | Matrix}                           The least common multiple\n   */\n\n  return typed(name, {\n    'number, number': _index.lcmNumber,\n    'BigNumber, BigNumber': _lcmBigNumber,\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.lcm(y);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm06(x, y, this);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm02(y, x, this, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm02(x, y, this, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, this);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return this(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y));\n    },\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\n      return algorithm11(x, y, this, false);\n    },\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\n      return algorithm14(x, y, this, false);\n    },\n    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {\n      return algorithm11(y, x, this, true);\n    },\n    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {\n      return algorithm14(y, x, this, true);\n    },\n    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, this, false).valueOf();\n    },\n    'number | BigNumber, Array': function numberBigNumberArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, this, true).valueOf();\n    },\n    // TODO: need a smarter notation here\n    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumberArrayMatrixNumberBigNumberArrayMatrixNumberBigNumber(a, b, args) {\n      var res = this(a, b);\n\n      for (var i = 0; i < args.length; i++) {\n        res = this(res, args[i]);\n      }\n\n      return res;\n    }\n  });\n  /**\n   * Calculate lcm for two BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @returns {BigNumber} Returns the least common multiple of a and b\n   * @private\n   */\n\n  function _lcmBigNumber(a, b) {\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function lcm must be integer numbers');\n    }\n\n    if (a.isZero()) {\n      return a;\n    }\n\n    if (b.isZero()) {\n      return b;\n    } // https://en.wikipedia.org/wiki/Euclidean_algorithm\n    // evaluate lcm here inline to reduce overhead\n\n\n    var prod = a.times(b);\n\n    while (!b.isZero()) {\n      var t = b;\n      b = a.mod(t);\n      a = t;\n    }\n\n    return prod.div(a).abs();\n  }\n});\nexports.createLcm = createLcm;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createLcm","_factory","_algorithm","_algorithm2","_algorithm3","_algorithm4","_algorithm5","_index","factory","name","dependencies","_ref","typed","matrix","equalScalar","algorithm02","createAlgorithm02","algorithm06","createAlgorithm06","algorithm11","createAlgorithm11","algorithm13","createAlgorithm13","algorithm14","createAlgorithm14","lcmNumber","_lcmBigNumber","a","b","isInt","Error","isZero","prod","times","t","mod","div","abs","FractionFraction","x","y","lcm","SparseMatrixSparseMatrix","SparseMatrixDenseMatrix","DenseMatrixSparseMatrix","DenseMatrixDenseMatrix","ArrayArray","valueOf","ArrayMatrix","MatrixArray","SparseMatrixNumberBigNumber","DenseMatrixNumberBigNumber","numberBigNumberSparseMatrix","numberBigNumberDenseMatrix","ArrayNumberBigNumber","numberBigNumberArray","ArrayMatrixNumberBigNumberArrayMatrixNumberBigNumberArrayMatrixNumberBigNumber","args","res","i","length"]
}
