{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$type$matrix$function$sparse.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,8DAAA,CAAmF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG3HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,YAAR,CAAuB,IAAK,EAExBC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAIXM,OAAAA,CAA8B,CAAC,CAAA,CAAGC,MAASC,CAAAA,OAAb,EAFvBC,QAEuB,CADfC,CAAC,OAADA,CAAU,cAAVA,CACe,CAA0C,QAAS,CAACC,IAAD,CAAO,CAAA,IACtFC,MAAQD,IAAKC,CAAAA,KADyE,CAEtFC,aAAeF,IAAKE,CAAAA,YA6BxB,OAAOD,MAAA,CAjCEH,QAiCF,CAAY,CACjB,GAAIK,QAAU,EAAG,CACf,MAAO,KAAID,YAAJ,CAAiB,EAAjB,CADQ,CADA,CAIjBE,OAAQA,QAAe,CAACC,QAAD,CAAW,CAChC,MAAO,KAAIH,YAAJ,CAAiB,EAAjB;AAAqBG,QAArB,CADyB,CAJjB,CAOjB,iBAAkBC,QAAoB,CAACC,IAAD,CAAO,CAC3C,MAAO,KAAIL,YAAJ,CAAiBK,IAAjB,CADoC,CAP5B,CAUjB,yBAA0BC,QAA0B,CAACD,IAAD,CAAOF,QAAP,CAAiB,CACnE,MAAO,KAAIH,YAAJ,CAAiBK,IAAjB,CAAuBF,QAAvB,CAD4D,CAVpD,CAAZ,CA/BmF,CAA1D,CA8ClCd,QAAQI,CAAAA,YAAR,CAAuBA,MA1DoG;",
"sources":["node_modules/mathjs/lib/cjs/type/matrix/function/sparse.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$type$matrix$function$sparse\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSparse = void 0;\n\nvar _factory = require(\"../../../utils/factory.js\");\n\nvar name = 'sparse';\nvar dependencies = ['typed', 'SparseMatrix'];\nvar createSparse = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      SparseMatrix = _ref.SparseMatrix;\n\n  /**\n   * Create a Sparse Matrix. The function creates a new `math.Matrix` object from\n   * an `Array`. A Matrix has utility functions to manipulate the data in the\n   * matrix, like getting the size and getting or setting values in the matrix.\n   *\n   * Syntax:\n   *\n   *    math.sparse()               // creates an empty sparse matrix.\n   *    math.sparse(data)           // creates a sparse matrix with initial data.\n   *    math.sparse(data, 'number') // creates a sparse matrix with initial data, number datatype.\n   *\n   * Examples:\n   *\n   *    let m = math.sparse([[1, 2], [3, 4]])\n   *    m.size()                        // Array [2, 2]\n   *    m.resize([3, 2], 5)\n   *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]\n   *    m.get([1, 0])                    // number 3\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, number, string, unit, matrix\n   *\n   * @param {Array | Matrix} [data]    A two dimensional array\n   *\n   * @return {Matrix} The created matrix\n   */\n  return typed(name, {\n    '': function _() {\n      return new SparseMatrix([]);\n    },\n    string: function string(datatype) {\n      return new SparseMatrix([], datatype);\n    },\n    'Array | Matrix': function ArrayMatrix(data) {\n      return new SparseMatrix(data);\n    },\n    'Array | Matrix, string': function ArrayMatrixString(data, datatype) {\n      return new SparseMatrix(data, datatype);\n    }\n  });\n});\nexports.createSparse = createSparse;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createSparse","_factory","factory","name","dependencies","_ref","typed","SparseMatrix","_","string","datatype","ArrayMatrix","data","ArrayMatrixString"]
}
