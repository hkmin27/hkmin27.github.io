{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$relational$equalScalar.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,kEAAA,CAAuF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG/HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,uBAAR,CAAkCJ,OAAQK,CAAAA,iBAA1C,CAA8D,IAAK,EAEnE,KAAIC,aAAeR,OAAA,CAAQ,gEAAR,CAAnB,CAEIS,QAAUT,OAAA,CAAQ,iDAAR,CAEVU,OAAAA,CAAWV,OAAA,CAAQ,kDAAR,CAEf,KAAIW,SAAWX,OAAA,CAAQ,kDAAR,CAIXO;OAAAA,CAAmC,CAAC,CAAA,CAAGG,MAASE,CAAAA,OAAb,EAF5BC,aAE4B,CADpBC,CAAC,OAADA,CAAU,QAAVA,CACoB,CAA0C,QAAS,CAACC,IAAD,CAAO,CAAA,IAC3FC,MAAQD,IAAKC,CAAAA,KAD8E,CAE3FC,OAASF,IAAKE,CAAAA,MAUlB,OAAOD,MAAA,CAdEH,aAcF,CAAY,CACjB,mBAAoBK,QAAuB,CAACC,CAAD,CAAIC,CAAJ,CAAO,CAChD,MAAOD,EAAP,GAAaC,CADmC,CADjC,CAIjB,iBAAkBC,QAAqB,CAACF,CAAD,CAAIC,CAAJ,CAAO,CAC5C,MAAO,CAAC,CAAA,CAAGX,OAAQa,CAAAA,WAAZ,EAAyBH,CAAzB,CAA4BC,CAA5B,CAA+BH,MAAOM,CAAAA,OAAtC,CADqC,CAJ7B,CAOjB,uBAAwBC,QAA2B,CAACL,CAAD,CAAIC,CAAJ,CAAO,CACxD,MAAOD,EAAEM,CAAAA,EAAF,CAAKL,CAAL,CAAP,EAAkB,CAAC,CAAA,CAAGZ,YAAac,CAAAA,WAAjB,EAA8BH,CAA9B,CAAiCC,CAAjC,CAAoCH,MAAOM,CAAAA,OAA3C,CADsC,CAPzC,CAUjB,qBAAsBG,QAAyB,CAACP,CAAD,CAAIC,CAAJ,CAAO,CACpD,MAAOD,EAAEQ,CAAAA,MAAF,CAASP,CAAT,CAD6C,CAVrC,CAajB,mBAAoBQ,QAAuB,CAACT,CAAD,CAAIC,CAAJ,CAAO,CAChD,MAAO,CAAC,CAAA,CAAGT,QAASkB,CAAAA,aAAb,EAA4BV,CAA5B,CAA+BC,CAA/B,CAAkCH,MAAOM,CAAAA,OAAzC,CADyC,CAbjC;AAgBjB,aAAcO,QAAiB,CAACX,CAAD,CAAIC,CAAJ,CAAO,CACpC,GAAI,CAACD,CAAEY,CAAAA,SAAF,CAAYX,CAAZ,CAAL,CACE,KAAUY,MAAJ,CAAU,0CAAV,CAAN,CAGF,MAAO,KAAA,CAAKb,CAAEd,CAAAA,KAAP,CAAce,CAAEf,CAAAA,KAAhB,CAL6B,CAhBrB,CAAZ,CAZwF,CAA1D,CAqCvCH,QAAQK,CAAAA,iBAAR,CAA4BA,OACxBD,QAAAA,CAA0B,CAAC,CAAA,CAAGI,MAASE,CAAAA,OAAb,EAxCnBC,aAwCmB,CAA4B,CAAC,OAAD,CAAU,QAAV,CAA5B,CAAiD,QAAS,CAACoB,KAAD,CAAQ,CAAA,IAC1FjB,MAAQiB,KAAMjB,CAAAA,KAD4E,CAE1FC,OAASgB,KAAMhB,CAAAA,MACnB,OAAOD,MAAA,CA3CEH,aA2CF,CAAY,CACjB,iBAAkBQ,QAAqB,CAACF,CAAD,CAAIC,CAAJ,CAAO,CAC5C,MAAO,CAAC,CAAA,CAAGX,OAAQa,CAAAA,WAAZ,EAAyBH,CAAzB,CAA4BC,CAA5B,CAA+BH,MAAOM,CAAAA,OAAtC,CADqC,CAD7B,CAAZ,CAHuF,CAAlE,CAS9BrB,QAAQI,CAAAA,uBAAR,CAAkCA,OAjE6F;",
"sources":["node_modules/mathjs/lib/cjs/function/relational/equalScalar.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$relational$equalScalar\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createEqualScalarNumber = exports.createEqualScalar = void 0;\n\nvar _nearlyEqual = require(\"../../utils/bignumber/nearlyEqual.js\");\n\nvar _number = require(\"../../utils/number.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _complex = require(\"../../utils/complex.js\");\n\nvar name = 'equalScalar';\nvar dependencies = ['typed', 'config'];\nvar createEqualScalar = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config;\n\n  /**\n   * Test whether two scalar values are nearly equal.\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare\n   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false\n   * @private\n   */\n  return typed(name, {\n    'boolean, boolean': function booleanBoolean(x, y) {\n      return x === y;\n    },\n    'number, number': function numberNumber(x, y) {\n      return (0, _number.nearlyEqual)(x, y, config.epsilon);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.eq(y) || (0, _nearlyEqual.nearlyEqual)(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.equals(y);\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return (0, _complex.complexEquals)(x, y, config.epsilon);\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n\n      return this(x.value, y.value);\n    }\n  });\n});\nexports.createEqualScalar = createEqualScalar;\nvar createEqualScalarNumber = (0, _factory.factory)(name, ['typed', 'config'], function (_ref2) {\n  var typed = _ref2.typed,\n      config = _ref2.config;\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return (0, _number.nearlyEqual)(x, y, config.epsilon);\n    }\n  });\n});\nexports.createEqualScalarNumber = createEqualScalarNumber;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createEqualScalarNumber","createEqualScalar","_nearlyEqual","_number","_factory","_complex","factory","name","dependencies","_ref","typed","config","booleanBoolean","x","y","numberNumber","nearlyEqual","epsilon","BigNumberBigNumber","eq","FractionFraction","equals","ComplexComplex","complexEquals","UnitUnit","equalBase","Error","_ref2"]
}
