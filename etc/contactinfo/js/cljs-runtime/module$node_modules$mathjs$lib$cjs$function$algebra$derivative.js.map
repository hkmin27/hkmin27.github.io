{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$algebra$derivative.js",
"lineCount":26,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/function/algebra/derivative.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$algebra$derivative\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createDerivative = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'derivative';\nvar dependencies = ['typed', 'config', 'parse', 'simplify', 'equal', 'isZero', 'numeric', 'ConstantNode', 'FunctionNode', 'OperatorNode', 'ParenthesisNode', 'SymbolNode'];\nvar createDerivative = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      parse = _ref.parse,\n      simplify = _ref.simplify,\n      equal = _ref.equal,\n      isZero = _ref.isZero,\n      numeric = _ref.numeric,\n      ConstantNode = _ref.ConstantNode,\n      FunctionNode = _ref.FunctionNode,\n      OperatorNode = _ref.OperatorNode,\n      ParenthesisNode = _ref.ParenthesisNode,\n      SymbolNode = _ref.SymbolNode;\n\n  /**\n   * Takes the derivative of an expression expressed in parser Nodes.\n   * The derivative will be taken over the supplied variable in the\n   * second parameter. If there are multiple variables in the expression,\n   * it will return a partial derivative.\n   *\n   * This uses rules of differentiation which can be found here:\n   *\n   * - [Differentiation rules (Wikipedia)](https://en.wikipedia.org/wiki/Differentiation_rules)\n   *\n   * Syntax:\n   *\n   *     derivative(expr, variable)\n   *     derivative(expr, variable, options)\n   *\n   * Examples:\n   *\n   *     math.derivative('x^2', 'x')                     // Node {2 * x}\n   *     math.derivative('x^2', 'x', {simplify: false})  // Node {2 * 1 * x ^ (2 - 1)\n   *     math.derivative('sin(2x)', 'x'))                // Node {2 * cos(2 * x)}\n   *     math.derivative('2*x', 'x').evaluate()          // number 2\n   *     math.derivative('x^2', 'x').evaluate({x: 4})    // number 8\n   *     const f = math.parse('x^2')\n   *     const x = math.parse('x')\n   *     math.derivative(f, x)                           // Node {2 * x}\n   *\n   * See also:\n   *\n   *     simplify, parse, evaluate\n   *\n   * @param  {Node | string} expr           The expression to differentiate\n   * @param  {SymbolNode | string} variable The variable over which to differentiate\n   * @param  {{simplify: boolean}} [options]\n   *                         There is one option available, `simplify`, which\n   *                         is true by default. When false, output will not\n   *                         be simplified.\n   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`\n   */\n  var derivative = typed('derivative', {\n    'Node, SymbolNode, Object': function NodeSymbolNodeObject(expr, variable, options) {\n      var constNodes = {};\n      constTag(constNodes, expr, variable.name);\n\n      var res = _derivative(expr, constNodes);\n\n      return options.simplify ? simplify(res) : res;\n    },\n    'Node, SymbolNode': function NodeSymbolNode(expr, variable) {\n      return this(expr, variable, {\n        simplify: true\n      });\n    },\n    'string, SymbolNode': function stringSymbolNode(expr, variable) {\n      return this(parse(expr), variable);\n    },\n    'string, SymbolNode, Object': function stringSymbolNodeObject(expr, variable, options) {\n      return this(parse(expr), variable, options);\n    },\n    'string, string': function stringString(expr, variable) {\n      return this(parse(expr), parse(variable));\n    },\n    'string, string, Object': function stringStringObject(expr, variable, options) {\n      return this(parse(expr), parse(variable), options);\n    },\n    'Node, string': function NodeString(expr, variable) {\n      return this(expr, parse(variable));\n    },\n    'Node, string, Object': function NodeStringObject(expr, variable, options) {\n      return this(expr, parse(variable), options);\n    } // TODO: replace the 8 signatures above with 4 as soon as typed-function supports optional arguments\n\n    /* TODO: implement and test syntax with order of derivatives -> implement as an option {order: number}\n    'Node, SymbolNode, ConstantNode': function (expr, variable, {order}) {\n      let res = expr\n      for (let i = 0; i < order; i++) {\n        let constNodes = {}\n        constTag(constNodes, expr, variable.name)\n        res = _derivative(res, constNodes)\n      }\n      return res\n    }\n    */\n\n  });\n  derivative._simplify = true;\n\n  derivative.toTex = function (deriv) {\n    return _derivTex.apply(null, deriv.args);\n  }; // FIXME: move the toTex method of derivative to latex.js. Difficulty is that it relies on parse.\n  // NOTE: the optional \"order\" parameter here is currently unused\n\n\n  var _derivTex = typed('_derivTex', {\n    'Node, SymbolNode': function NodeSymbolNode(expr, x) {\n      if ((0, _is.isConstantNode)(expr) && (0, _is.typeOf)(expr.value) === 'string') {\n        return _derivTex(parse(expr.value).toString(), x.toString(), 1);\n      } else {\n        return _derivTex(expr.toString(), x.toString(), 1);\n      }\n    },\n    'Node, ConstantNode': function NodeConstantNode(expr, x) {\n      if ((0, _is.typeOf)(x.value) === 'string') {\n        return _derivTex(expr, parse(x.value));\n      } else {\n        throw new Error(\"The second parameter to 'derivative' is a non-string constant\");\n      }\n    },\n    'Node, SymbolNode, ConstantNode': function NodeSymbolNodeConstantNode(expr, x, order) {\n      return _derivTex(expr.toString(), x.name, order.value);\n    },\n    'string, string, number': function stringStringNumber(expr, x, order) {\n      var d;\n\n      if (order === 1) {\n        d = '{d\\\\over d' + x + '}';\n      } else {\n        d = '{d^{' + order + '}\\\\over d' + x + '^{' + order + '}}';\n      }\n\n      return d + \"\\\\left[\".concat(expr, \"\\\\right]\");\n    }\n  });\n  /**\n   * Does a depth-first search on the expression tree to identify what Nodes\n   * are constants (e.g. 2 + 2), and stores the ones that are constants in\n   * constNodes. Classification is done as follows:\n   *\n   *   1. ConstantNodes are constants.\n   *   2. If there exists a SymbolNode, of which we are differentiating over,\n   *      in the subtree it is not constant.\n   *\n   * @param  {Object} constNodes  Holds the nodes that are constant\n   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @param  {string} varName     Variable that we are differentiating\n   * @return {boolean}  if node is constant\n   */\n  // TODO: can we rewrite constTag into a pure function?\n\n\n  var constTag = typed('constTag', {\n    'Object, ConstantNode, string': function ObjectConstantNodeString(constNodes, node) {\n      constNodes[node] = true;\n      return true;\n    },\n    'Object, SymbolNode, string': function ObjectSymbolNodeString(constNodes, node, varName) {\n      // Treat other variables like constants. For reasoning, see:\n      //   https://en.wikipedia.org/wiki/Partial_derivative\n      if (node.name !== varName) {\n        constNodes[node] = true;\n        return true;\n      }\n\n      return false;\n    },\n    'Object, ParenthesisNode, string': function ObjectParenthesisNodeString(constNodes, node, varName) {\n      return constTag(constNodes, node.content, varName);\n    },\n    'Object, FunctionAssignmentNode, string': function ObjectFunctionAssignmentNodeString(constNodes, node, varName) {\n      if (node.params.indexOf(varName) === -1) {\n        constNodes[node] = true;\n        return true;\n      }\n\n      return constTag(constNodes, node.expr, varName);\n    },\n    'Object, FunctionNode | OperatorNode, string': function ObjectFunctionNodeOperatorNodeString(constNodes, node, varName) {\n      if (node.args.length > 0) {\n        var isConst = constTag(constNodes, node.args[0], varName);\n\n        for (var i = 1; i < node.args.length; ++i) {\n          isConst = constTag(constNodes, node.args[i], varName) && isConst;\n        }\n\n        if (isConst) {\n          constNodes[node] = true;\n          return true;\n        }\n      }\n\n      return false;\n    }\n  });\n  /**\n   * Applies differentiation rules.\n   *\n   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @param  {Object} constNodes  Holds the nodes that are constant\n   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`\n   */\n\n  var _derivative = typed('_derivative', {\n    'ConstantNode, Object': function ConstantNodeObject(node) {\n      return createConstantNode(0);\n    },\n    'SymbolNode, Object': function SymbolNodeObject(node, constNodes) {\n      if (constNodes[node] !== undefined) {\n        return createConstantNode(0);\n      }\n\n      return createConstantNode(1);\n    },\n    'ParenthesisNode, Object': function ParenthesisNodeObject(node, constNodes) {\n      return new ParenthesisNode(_derivative(node.content, constNodes));\n    },\n    'FunctionAssignmentNode, Object': function FunctionAssignmentNodeObject(node, constNodes) {\n      if (constNodes[node] !== undefined) {\n        return createConstantNode(0);\n      }\n\n      return _derivative(node.expr, constNodes);\n    },\n    'FunctionNode, Object': function FunctionNodeObject(node, constNodes) {\n      if (node.args.length !== 1) {\n        funcArgsCheck(node);\n      }\n\n      if (constNodes[node] !== undefined) {\n        return createConstantNode(0);\n      }\n\n      var arg0 = node.args[0];\n      var arg1;\n      var div = false; // is output a fraction?\n\n      var negative = false; // is output negative?\n\n      var funcDerivative;\n\n      switch (node.name) {\n        case 'cbrt':\n          // d/dx(cbrt(x)) = 1 / (3x^(2/3))\n          div = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [createConstantNode(3), new OperatorNode('^', 'pow', [arg0, new OperatorNode('/', 'divide', [createConstantNode(2), createConstantNode(3)])])]);\n          break;\n\n        case 'sqrt':\n        case 'nthRoot':\n          // d/dx(sqrt(x)) = 1 / (2*sqrt(x))\n          if (node.args.length === 1) {\n            div = true;\n            funcDerivative = new OperatorNode('*', 'multiply', [createConstantNode(2), new FunctionNode('sqrt', [arg0])]);\n          } else if (node.args.length === 2) {\n            // Rearrange from nthRoot(x, a) -> x^(1/a)\n            arg1 = new OperatorNode('/', 'divide', [createConstantNode(1), node.args[1]]); // Is a variable?\n\n            constNodes[arg1] = constNodes[node.args[1]];\n            return _derivative(new OperatorNode('^', 'pow', [arg0, arg1]), constNodes);\n          }\n\n          break;\n\n        case 'log10':\n          arg1 = createConstantNode(10);\n\n        /* fall through! */\n\n        case 'log':\n          if (!arg1 && node.args.length === 1) {\n            // d/dx(log(x)) = 1 / x\n            funcDerivative = arg0.clone();\n            div = true;\n          } else if (node.args.length === 1 && arg1 || node.args.length === 2 && constNodes[node.args[1]] !== undefined) {\n            // d/dx(log(x, c)) = 1 / (x*ln(c))\n            funcDerivative = new OperatorNode('*', 'multiply', [arg0.clone(), new FunctionNode('log', [arg1 || node.args[1]])]);\n            div = true;\n          } else if (node.args.length === 2) {\n            // d/dx(log(f(x), g(x))) = d/dx(log(f(x)) / log(g(x)))\n            return _derivative(new OperatorNode('/', 'divide', [new FunctionNode('log', [arg0]), new FunctionNode('log', [node.args[1]])]), constNodes);\n          }\n\n          break;\n\n        case 'pow':\n          constNodes[arg1] = constNodes[node.args[1]]; // Pass to pow operator node parser\n\n          return _derivative(new OperatorNode('^', 'pow', [arg0, node.args[1]]), constNodes);\n\n        case 'exp':\n          // d/dx(e^x) = e^x\n          funcDerivative = new FunctionNode('exp', [arg0.clone()]);\n          break;\n\n        case 'sin':\n          // d/dx(sin(x)) = cos(x)\n          funcDerivative = new FunctionNode('cos', [arg0.clone()]);\n          break;\n\n        case 'cos':\n          // d/dx(cos(x)) = -sin(x)\n          funcDerivative = new OperatorNode('-', 'unaryMinus', [new FunctionNode('sin', [arg0.clone()])]);\n          break;\n\n        case 'tan':\n          // d/dx(tan(x)) = sec(x)^2\n          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('sec', [arg0.clone()]), createConstantNode(2)]);\n          break;\n\n        case 'sec':\n          // d/dx(sec(x)) = sec(x)tan(x)\n          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('tan', [arg0.clone()])]);\n          break;\n\n        case 'csc':\n          // d/dx(csc(x)) = -csc(x)cot(x)\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('cot', [arg0.clone()])]);\n          break;\n\n        case 'cot':\n          // d/dx(cot(x)) = -csc(x)^2\n          negative = true;\n          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('csc', [arg0.clone()]), createConstantNode(2)]);\n          break;\n\n        case 'asin':\n          // d/dx(asin(x)) = 1 / sqrt(1 - x^2)\n          div = true;\n          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])])]);\n          break;\n\n        case 'acos':\n          // d/dx(acos(x)) = -1 / sqrt(1 - x^2)\n          div = true;\n          negative = true;\n          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])])]);\n          break;\n\n        case 'atan':\n          // d/dx(atan(x)) = 1 / (x^2 + 1)\n          div = true;\n          funcDerivative = new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)]);\n          break;\n\n        case 'asec':\n          // d/dx(asec(x)) = 1 / (|x|*sqrt(x^2 - 1))\n          div = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [new FunctionNode('abs', [arg0.clone()]), new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);\n          break;\n\n        case 'acsc':\n          // d/dx(acsc(x)) = -1 / (|x|*sqrt(x^2 - 1))\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [new FunctionNode('abs', [arg0.clone()]), new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);\n          break;\n\n        case 'acot':\n          // d/dx(acot(x)) = -1 / (x^2 + 1)\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)]);\n          break;\n\n        case 'sinh':\n          // d/dx(sinh(x)) = cosh(x)\n          funcDerivative = new FunctionNode('cosh', [arg0.clone()]);\n          break;\n\n        case 'cosh':\n          // d/dx(cosh(x)) = sinh(x)\n          funcDerivative = new FunctionNode('sinh', [arg0.clone()]);\n          break;\n\n        case 'tanh':\n          // d/dx(tanh(x)) = sech(x)^2\n          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('sech', [arg0.clone()]), createConstantNode(2)]);\n          break;\n\n        case 'sech':\n          // d/dx(sech(x)) = -sech(x)tanh(x)\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('tanh', [arg0.clone()])]);\n          break;\n\n        case 'csch':\n          // d/dx(csch(x)) = -csch(x)coth(x)\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('coth', [arg0.clone()])]);\n          break;\n\n        case 'coth':\n          // d/dx(coth(x)) = -csch(x)^2\n          negative = true;\n          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('csch', [arg0.clone()]), createConstantNode(2)]);\n          break;\n\n        case 'asinh':\n          // d/dx(asinh(x)) = 1 / sqrt(x^2 + 1)\n          div = true;\n          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])]);\n          break;\n\n        case 'acosh':\n          // d/dx(acosh(x)) = 1 / sqrt(x^2 - 1); XXX potentially only for x >= 1 (the real spectrum)\n          div = true;\n          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])]);\n          break;\n\n        case 'atanh':\n          // d/dx(atanh(x)) = 1 / (1 - x^2)\n          div = true;\n          funcDerivative = new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])]);\n          break;\n\n        case 'asech':\n          // d/dx(asech(x)) = -1 / (x*sqrt(1 - x^2))\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [arg0.clone(), new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])])])]);\n          break;\n\n        case 'acsch':\n          // d/dx(acsch(x)) = -1 / (|x|*sqrt(x^2 + 1))\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [new FunctionNode('abs', [arg0.clone()]), new FunctionNode('sqrt', [new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);\n          break;\n\n        case 'acoth':\n          // d/dx(acoth(x)) = -1 / (1 - x^2)\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])]);\n          break;\n\n        case 'abs':\n          // d/dx(abs(x)) = abs(x)/x\n          funcDerivative = new OperatorNode('/', 'divide', [new FunctionNode(new SymbolNode('abs'), [arg0.clone()]), arg0.clone()]);\n          break;\n\n        case 'gamma': // Needs digamma function, d/dx(gamma(x)) = gamma(x)digamma(x)\n\n        default:\n          throw new Error('Function \"' + node.name + '\" is not supported by derivative, or a wrong number of arguments is passed');\n      }\n\n      var op, func;\n\n      if (div) {\n        op = '/';\n        func = 'divide';\n      } else {\n        op = '*';\n        func = 'multiply';\n      }\n      /* Apply chain rule to all functions:\n         F(x)  = f(g(x))\n         F'(x) = g'(x)*f'(g(x)) */\n\n\n      var chainDerivative = _derivative(arg0, constNodes);\n\n      if (negative) {\n        chainDerivative = new OperatorNode('-', 'unaryMinus', [chainDerivative]);\n      }\n\n      return new OperatorNode(op, func, [chainDerivative, funcDerivative]);\n    },\n    'OperatorNode, Object': function OperatorNodeObject(node, constNodes) {\n      if (constNodes[node] !== undefined) {\n        return createConstantNode(0);\n      }\n\n      if (node.op === '+') {\n        // d/dx(sum(f(x)) = sum(f'(x))\n        return new OperatorNode(node.op, node.fn, node.args.map(function (arg) {\n          return _derivative(arg, constNodes);\n        }));\n      }\n\n      if (node.op === '-') {\n        // d/dx(+/-f(x)) = +/-f'(x)\n        if (node.isUnary()) {\n          return new OperatorNode(node.op, node.fn, [_derivative(node.args[0], constNodes)]);\n        } // Linearity of differentiation, d/dx(f(x) +/- g(x)) = f'(x) +/- g'(x)\n\n\n        if (node.isBinary()) {\n          return new OperatorNode(node.op, node.fn, [_derivative(node.args[0], constNodes), _derivative(node.args[1], constNodes)]);\n        }\n      }\n\n      if (node.op === '*') {\n        // d/dx(c*f(x)) = c*f'(x)\n        var constantTerms = node.args.filter(function (arg) {\n          return constNodes[arg] !== undefined;\n        });\n\n        if (constantTerms.length > 0) {\n          var nonConstantTerms = node.args.filter(function (arg) {\n            return constNodes[arg] === undefined;\n          });\n          var nonConstantNode = nonConstantTerms.length === 1 ? nonConstantTerms[0] : new OperatorNode('*', 'multiply', nonConstantTerms);\n          var newArgs = constantTerms.concat(_derivative(nonConstantNode, constNodes));\n          return new OperatorNode('*', 'multiply', newArgs);\n        } // Product Rule, d/dx(f(x)*g(x)) = f'(x)*g(x) + f(x)*g'(x)\n\n\n        return new OperatorNode('+', 'add', node.args.map(function (argOuter) {\n          return new OperatorNode('*', 'multiply', node.args.map(function (argInner) {\n            return argInner === argOuter ? _derivative(argInner, constNodes) : argInner.clone();\n          }));\n        }));\n      }\n\n      if (node.op === '/' && node.isBinary()) {\n        var arg0 = node.args[0];\n        var arg1 = node.args[1]; // d/dx(f(x) / c) = f'(x) / c\n\n        if (constNodes[arg1] !== undefined) {\n          return new OperatorNode('/', 'divide', [_derivative(arg0, constNodes), arg1]);\n        } // Reciprocal Rule, d/dx(c / f(x)) = -c(f'(x)/f(x)^2)\n\n\n        if (constNodes[arg0] !== undefined) {\n          return new OperatorNode('*', 'multiply', [new OperatorNode('-', 'unaryMinus', [arg0]), new OperatorNode('/', 'divide', [_derivative(arg1, constNodes), new OperatorNode('^', 'pow', [arg1.clone(), createConstantNode(2)])])]);\n        } // Quotient rule, d/dx(f(x) / g(x)) = (f'(x)g(x) - f(x)g'(x)) / g(x)^2\n\n\n        return new OperatorNode('/', 'divide', [new OperatorNode('-', 'subtract', [new OperatorNode('*', 'multiply', [_derivative(arg0, constNodes), arg1.clone()]), new OperatorNode('*', 'multiply', [arg0.clone(), _derivative(arg1, constNodes)])]), new OperatorNode('^', 'pow', [arg1.clone(), createConstantNode(2)])]);\n      }\n\n      if (node.op === '^' && node.isBinary()) {\n        var _arg = node.args[0];\n        var _arg2 = node.args[1];\n\n        if (constNodes[_arg] !== undefined) {\n          // If is secretly constant; 0^f(x) = 1 (in JS), 1^f(x) = 1\n          if ((0, _is.isConstantNode)(_arg) && (isZero(_arg.value) || equal(_arg.value, 1))) {\n            return createConstantNode(0);\n          } // d/dx(c^f(x)) = c^f(x)*ln(c)*f'(x)\n\n\n          return new OperatorNode('*', 'multiply', [node, new OperatorNode('*', 'multiply', [new FunctionNode('log', [_arg.clone()]), _derivative(_arg2.clone(), constNodes)])]);\n        }\n\n        if (constNodes[_arg2] !== undefined) {\n          if ((0, _is.isConstantNode)(_arg2)) {\n            // If is secretly constant; f(x)^0 = 1 -> d/dx(1) = 0\n            if (isZero(_arg2.value)) {\n              return createConstantNode(0);\n            } // Ignore exponent; f(x)^1 = f(x)\n\n\n            if (equal(_arg2.value, 1)) {\n              return _derivative(_arg, constNodes);\n            }\n          } // Elementary Power Rule, d/dx(f(x)^c) = c*f'(x)*f(x)^(c-1)\n\n\n          var powMinusOne = new OperatorNode('^', 'pow', [_arg.clone(), new OperatorNode('-', 'subtract', [_arg2, createConstantNode(1)])]);\n          return new OperatorNode('*', 'multiply', [_arg2.clone(), new OperatorNode('*', 'multiply', [_derivative(_arg, constNodes), powMinusOne])]);\n        } // Functional Power Rule, d/dx(f^g) = f^g*[f'*(g/f) + g'ln(f)]\n\n\n        return new OperatorNode('*', 'multiply', [new OperatorNode('^', 'pow', [_arg.clone(), _arg2.clone()]), new OperatorNode('+', 'add', [new OperatorNode('*', 'multiply', [_derivative(_arg, constNodes), new OperatorNode('/', 'divide', [_arg2.clone(), _arg.clone()])]), new OperatorNode('*', 'multiply', [_derivative(_arg2, constNodes), new FunctionNode('log', [_arg.clone()])])])]);\n      }\n\n      throw new Error('Operator \"' + node.op + '\" is not supported by derivative, or a wrong number of arguments is passed');\n    }\n  });\n  /**\n   * Ensures the number of arguments for a function are correct,\n   * and will throw an error otherwise.\n   *\n   * @param {FunctionNode} node\n   */\n\n\n  function funcArgsCheck(node) {\n    // TODO add min, max etc\n    if ((node.name === 'log' || node.name === 'nthRoot' || node.name === 'pow') && node.args.length === 2) {\n      return;\n    } // There should be an incorrect number of arguments if we reach here\n    // Change all args to constants to avoid unidentified\n    // symbol error when compiling function\n\n\n    for (var i = 0; i < node.args.length; ++i) {\n      node.args[i] = createConstantNode(0);\n    }\n\n    node.compile().evaluate();\n    throw new Error('Expected TypeError, but none found');\n  }\n  /**\n   * Helper function to create a constant node with a specific type\n   * (number, BigNumber, Fraction)\n   * @param {number} value\n   * @param {string} [valueType]\n   * @return {ConstantNode}\n   */\n\n\n  function createConstantNode(value, valueType) {\n    return new ConstantNode(numeric(value, valueType || config.number));\n  }\n\n  return derivative;\n});\nexports.createDerivative = createDerivative;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createDerivative","_is","_factory","factory","name","dependencies","_ref","createConstantNode","valueType","ConstantNode","numeric","config","number","typed","parse","simplify","equal","isZero","FunctionNode","OperatorNode","ParenthesisNode","SymbolNode","derivative","NodeSymbolNodeObject","expr","variable","options","constNodes","constTag","res","_derivative","NodeSymbolNode","stringSymbolNode","stringSymbolNodeObject","stringString","stringStringObject","NodeString","NodeStringObject","_simplify","toTex","derivative.toTex","deriv","_derivTex","apply","args","x","isConstantNode","typeOf","toString","NodeConstantNode","Error","NodeSymbolNodeConstantNode","order","stringStringNumber","d","concat","ObjectConstantNodeString","node","ObjectSymbolNodeString","varName","ObjectParenthesisNodeString","content","ObjectFunctionAssignmentNodeString","params","indexOf","ObjectFunctionNodeOperatorNodeString","length","isConst","i","ConstantNodeObject","SymbolNodeObject","undefined","ParenthesisNodeObject","FunctionAssignmentNodeObject","FunctionNodeObject","compile","evaluate","arg0","div","negative","funcDerivative","arg1","clone","op","func","chainDerivative","OperatorNodeObject","fn","map","arg","isUnary","isBinary","constantTerms","filter","nonConstantTerms","nonConstantNode","newArgs","argOuter","argInner","_arg","_arg2","powMinusOne"]
}
