shadow$provide.module$node_modules$mathjs$lib$cjs$function$algebra$derivative=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.createDerivative=void 0;var _is=require("module$node_modules$mathjs$lib$cjs$utils$is");global=require("module$node_modules$mathjs$lib$cjs$utils$factory");global=(0,global.factory)("derivative","typed config parse simplify equal isZero numeric ConstantNode FunctionNode OperatorNode ParenthesisNode SymbolNode".split(" "),
function(_ref){function createConstantNode(value,valueType){return new ConstantNode(numeric(value,valueType||config.number))}var typed=_ref.typed,config=_ref.config,parse=_ref.parse,simplify=_ref.simplify,equal=_ref.equal,isZero=_ref.isZero,numeric=_ref.numeric,ConstantNode=_ref.ConstantNode,FunctionNode=_ref.FunctionNode,OperatorNode=_ref.OperatorNode,ParenthesisNode=_ref.ParenthesisNode,SymbolNode=_ref.SymbolNode;_ref=typed("derivative",{"Node, SymbolNode, Object":function(expr,variable,options){var constNodes=
{};constTag(constNodes,expr,variable.name);expr=_derivative(expr,constNodes);return options.simplify?simplify(expr):expr},"Node, SymbolNode":function(expr,variable){return this(expr,variable,{simplify:!0})},"string, SymbolNode":function(expr,variable){return this(parse(expr),variable)},"string, SymbolNode, Object":function(expr,variable,options){return this(parse(expr),variable,options)},"string, string":function(expr,variable){return this(parse(expr),parse(variable))},"string, string, Object":function(expr,
variable,options){return this(parse(expr),parse(variable),options)},"Node, string":function(expr,variable){return this(expr,parse(variable))},"Node, string, Object":function(expr,variable,options){return this(expr,parse(variable),options)}});_ref._simplify=!0;_ref.toTex=function(deriv){return _derivTex.apply(null,deriv.args)};var _derivTex=typed("_derivTex",{"Node, SymbolNode":function(expr,x){return(0,_is.isConstantNode)(expr)&&"string"===(0,_is.typeOf)(expr.value)?_derivTex(parse(expr.value).toString(),
x.toString(),1):_derivTex(expr.toString(),x.toString(),1)},"Node, ConstantNode":function(expr,x){if("string"===(0,_is.typeOf)(x.value))return _derivTex(expr,parse(x.value));throw Error("The second parameter to 'derivative' is a non-string constant");},"Node, SymbolNode, ConstantNode":function(expr,x,order){return _derivTex(expr.toString(),x.name,order.value)},"string, string, number":function(expr,x,order){return(1===order?"{d\\over d"+x+"}":"{d^{"+order+"}\\over d"+x+"^{"+order+"}}")+"\\left[".concat(expr,
"\\right]")}}),constTag=typed("constTag",{"Object, ConstantNode, string":function(constNodes,node){return constNodes[node]=!0},"Object, SymbolNode, string":function(constNodes,node,varName){return node.name!==varName?constNodes[node]=!0:!1},"Object, ParenthesisNode, string":function(constNodes,node,varName){return constTag(constNodes,node.content,varName)},"Object, FunctionAssignmentNode, string":function(constNodes,node,varName){return-1===node.params.indexOf(varName)?constNodes[node]=!0:constTag(constNodes,
node.expr,varName)},"Object, FunctionNode | OperatorNode, string":function(constNodes,node,varName){if(0<node.args.length){for(var isConst=constTag(constNodes,node.args[0],varName),i=1;i<node.args.length;++i)isConst=constTag(constNodes,node.args[i],varName)&&isConst;if(isConst)return constNodes[node]=!0}return!1}}),_derivative=typed("_derivative",{"ConstantNode, Object":function(node){return createConstantNode(0)},"SymbolNode, Object":function(node,constNodes){return void 0!==constNodes[node]?createConstantNode(0):
createConstantNode(1)},"ParenthesisNode, Object":function(node,constNodes){return new ParenthesisNode(_derivative(node.content,constNodes))},"FunctionAssignmentNode, Object":function(node,constNodes){return void 0!==constNodes[node]?createConstantNode(0):_derivative(node.expr,constNodes)},"FunctionNode, Object":function(node,constNodes){if(1!==node.args.length&&("log"!==node.name&&"nthRoot"!==node.name&&"pow"!==node.name||2!==node.args.length)){for(var i=0;i<node.args.length;++i)node.args[i]=createConstantNode(0);
node.compile().evaluate();throw Error("Expected TypeError, but none found");}if(void 0!==constNodes[node])return createConstantNode(0);var arg0=node.args[0],div=!1;i=!1;switch(node.name){case "cbrt":div=!0;var funcDerivative=new OperatorNode("*","multiply",[createConstantNode(3),new OperatorNode("^","pow",[arg0,new OperatorNode("/","divide",[createConstantNode(2),createConstantNode(3)])])]);break;case "sqrt":case "nthRoot":if(1===node.args.length)div=!0,funcDerivative=new OperatorNode("*","multiply",
[createConstantNode(2),new FunctionNode("sqrt",[arg0])]);else if(2===node.args.length){var arg1=new OperatorNode("/","divide",[createConstantNode(1),node.args[1]]);constNodes[arg1]=constNodes[node.args[1]];return _derivative(new OperatorNode("^","pow",[arg0,arg1]),constNodes)}break;case "log10":arg1=createConstantNode(10);case "log":if(!arg1&&1===node.args.length)funcDerivative=arg0.clone(),div=!0;else if(1===node.args.length&&arg1||2===node.args.length&&void 0!==constNodes[node.args[1]])funcDerivative=
new OperatorNode("*","multiply",[arg0.clone(),new FunctionNode("log",[arg1||node.args[1]])]),div=!0;else if(2===node.args.length)return _derivative(new OperatorNode("/","divide",[new FunctionNode("log",[arg0]),new FunctionNode("log",[node.args[1]])]),constNodes);break;case "pow":return constNodes[arg1]=constNodes[node.args[1]],_derivative(new OperatorNode("^","pow",[arg0,node.args[1]]),constNodes);case "exp":funcDerivative=new FunctionNode("exp",[arg0.clone()]);break;case "sin":funcDerivative=new FunctionNode("cos",
[arg0.clone()]);break;case "cos":funcDerivative=new OperatorNode("-","unaryMinus",[new FunctionNode("sin",[arg0.clone()])]);break;case "tan":funcDerivative=new OperatorNode("^","pow",[new FunctionNode("sec",[arg0.clone()]),createConstantNode(2)]);break;case "sec":funcDerivative=new OperatorNode("*","multiply",[node,new FunctionNode("tan",[arg0.clone()])]);break;case "csc":i=!0;funcDerivative=new OperatorNode("*","multiply",[node,new FunctionNode("cot",[arg0.clone()])]);break;case "cot":i=!0;funcDerivative=
new OperatorNode("^","pow",[new FunctionNode("csc",[arg0.clone()]),createConstantNode(2)]);break;case "asin":div=!0;funcDerivative=new FunctionNode("sqrt",[new OperatorNode("-","subtract",[createConstantNode(1),new OperatorNode("^","pow",[arg0.clone(),createConstantNode(2)])])]);break;case "acos":i=div=!0;funcDerivative=new FunctionNode("sqrt",[new OperatorNode("-","subtract",[createConstantNode(1),new OperatorNode("^","pow",[arg0.clone(),createConstantNode(2)])])]);break;case "atan":div=!0;funcDerivative=
new OperatorNode("+","add",[new OperatorNode("^","pow",[arg0.clone(),createConstantNode(2)]),createConstantNode(1)]);break;case "asec":div=!0;funcDerivative=new OperatorNode("*","multiply",[new FunctionNode("abs",[arg0.clone()]),new FunctionNode("sqrt",[new OperatorNode("-","subtract",[new OperatorNode("^","pow",[arg0.clone(),createConstantNode(2)]),createConstantNode(1)])])]);break;case "acsc":i=div=!0;funcDerivative=new OperatorNode("*","multiply",[new FunctionNode("abs",[arg0.clone()]),new FunctionNode("sqrt",
[new OperatorNode("-","subtract",[new OperatorNode("^","pow",[arg0.clone(),createConstantNode(2)]),createConstantNode(1)])])]);break;case "acot":i=div=!0;funcDerivative=new OperatorNode("+","add",[new OperatorNode("^","pow",[arg0.clone(),createConstantNode(2)]),createConstantNode(1)]);break;case "sinh":funcDerivative=new FunctionNode("cosh",[arg0.clone()]);break;case "cosh":funcDerivative=new FunctionNode("sinh",[arg0.clone()]);break;case "tanh":funcDerivative=new OperatorNode("^","pow",[new FunctionNode("sech",
[arg0.clone()]),createConstantNode(2)]);break;case "sech":i=!0;funcDerivative=new OperatorNode("*","multiply",[node,new FunctionNode("tanh",[arg0.clone()])]);break;case "csch":i=!0;funcDerivative=new OperatorNode("*","multiply",[node,new FunctionNode("coth",[arg0.clone()])]);break;case "coth":i=!0;funcDerivative=new OperatorNode("^","pow",[new FunctionNode("csch",[arg0.clone()]),createConstantNode(2)]);break;case "asinh":div=!0;funcDerivative=new FunctionNode("sqrt",[new OperatorNode("+","add",[new OperatorNode("^",
"pow",[arg0.clone(),createConstantNode(2)]),createConstantNode(1)])]);break;case "acosh":div=!0;funcDerivative=new FunctionNode("sqrt",[new OperatorNode("-","subtract",[new OperatorNode("^","pow",[arg0.clone(),createConstantNode(2)]),createConstantNode(1)])]);break;case "atanh":div=!0;funcDerivative=new OperatorNode("-","subtract",[createConstantNode(1),new OperatorNode("^","pow",[arg0.clone(),createConstantNode(2)])]);break;case "asech":i=div=!0;funcDerivative=new OperatorNode("*","multiply",[arg0.clone(),
new FunctionNode("sqrt",[new OperatorNode("-","subtract",[createConstantNode(1),new OperatorNode("^","pow",[arg0.clone(),createConstantNode(2)])])])]);break;case "acsch":i=div=!0;funcDerivative=new OperatorNode("*","multiply",[new FunctionNode("abs",[arg0.clone()]),new FunctionNode("sqrt",[new OperatorNode("+","add",[new OperatorNode("^","pow",[arg0.clone(),createConstantNode(2)]),createConstantNode(1)])])]);break;case "acoth":i=div=!0;funcDerivative=new OperatorNode("-","subtract",[createConstantNode(1),
new OperatorNode("^","pow",[arg0.clone(),createConstantNode(2)])]);break;case "abs":funcDerivative=new OperatorNode("/","divide",[new FunctionNode(new SymbolNode("abs"),[arg0.clone()]),arg0.clone()]);break;default:throw Error('Function "'+node.name+'" is not supported by derivative, or a wrong number of arguments is passed');}div?(node="/",arg1="divide"):(node="*",arg1="multiply");constNodes=_derivative(arg0,constNodes);i&&(constNodes=new OperatorNode("-","unaryMinus",[constNodes]));return new OperatorNode(node,
arg1,[constNodes,funcDerivative])},"OperatorNode, Object":function(node,constNodes){if(void 0!==constNodes[node])return createConstantNode(0);if("+"===node.op)return new OperatorNode(node.op,node.fn,node.args.map(function(arg){return _derivative(arg,constNodes)}));if("-"===node.op){if(node.isUnary())return new OperatorNode(node.op,node.fn,[_derivative(node.args[0],constNodes)]);if(node.isBinary())return new OperatorNode(node.op,node.fn,[_derivative(node.args[0],constNodes),_derivative(node.args[1],
constNodes)])}if("*"===node.op){var constantTerms=node.args.filter(function(arg){return void 0!==constNodes[arg]});if(0<constantTerms.length){var nonConstantTerms=node.args.filter(function(arg){return void 0===constNodes[arg]});nonConstantTerms=1===nonConstantTerms.length?nonConstantTerms[0]:new OperatorNode("*","multiply",nonConstantTerms);constantTerms=constantTerms.concat(_derivative(nonConstantTerms,constNodes));return new OperatorNode("*","multiply",constantTerms)}return new OperatorNode("+",
"add",node.args.map(function(argOuter){return new OperatorNode("*","multiply",node.args.map(function(argInner){return argInner===argOuter?_derivative(argInner,constNodes):argInner.clone()}))}))}if("/"===node.op&&node.isBinary())return constantTerms=node.args[0],nonConstantTerms=node.args[1],void 0!==constNodes[nonConstantTerms]?new OperatorNode("/","divide",[_derivative(constantTerms,constNodes),nonConstantTerms]):void 0!==constNodes[constantTerms]?new OperatorNode("*","multiply",[new OperatorNode("-",
"unaryMinus",[constantTerms]),new OperatorNode("/","divide",[_derivative(nonConstantTerms,constNodes),new OperatorNode("^","pow",[nonConstantTerms.clone(),createConstantNode(2)])])]):new OperatorNode("/","divide",[new OperatorNode("-","subtract",[new OperatorNode("*","multiply",[_derivative(constantTerms,constNodes),nonConstantTerms.clone()]),new OperatorNode("*","multiply",[constantTerms.clone(),_derivative(nonConstantTerms,constNodes)])]),new OperatorNode("^","pow",[nonConstantTerms.clone(),createConstantNode(2)])]);
if("^"===node.op&&node.isBinary()){constantTerms=node.args[0];nonConstantTerms=node.args[1];if(void 0!==constNodes[constantTerms])return(0,_is.isConstantNode)(constantTerms)&&(isZero(constantTerms.value)||equal(constantTerms.value,1))?createConstantNode(0):new OperatorNode("*","multiply",[node,new OperatorNode("*","multiply",[new FunctionNode("log",[constantTerms.clone()]),_derivative(nonConstantTerms.clone(),constNodes)])]);if(void 0!==constNodes[nonConstantTerms]){if((0,_is.isConstantNode)(nonConstantTerms)){if(isZero(nonConstantTerms.value))return createConstantNode(0);
if(equal(nonConstantTerms.value,1))return _derivative(constantTerms,constNodes)}var powMinusOne=new OperatorNode("^","pow",[constantTerms.clone(),new OperatorNode("-","subtract",[nonConstantTerms,createConstantNode(1)])]);return new OperatorNode("*","multiply",[nonConstantTerms.clone(),new OperatorNode("*","multiply",[_derivative(constantTerms,constNodes),powMinusOne])])}return new OperatorNode("*","multiply",[new OperatorNode("^","pow",[constantTerms.clone(),nonConstantTerms.clone()]),new OperatorNode("+",
"add",[new OperatorNode("*","multiply",[_derivative(constantTerms,constNodes),new OperatorNode("/","divide",[nonConstantTerms.clone(),constantTerms.clone()])]),new OperatorNode("*","multiply",[_derivative(nonConstantTerms,constNodes),new FunctionNode("log",[constantTerms.clone()])])])])}throw Error('Operator "'+node.op+'" is not supported by derivative, or a wrong number of arguments is passed');}});return _ref});exports.createDerivative=global}
//# sourceMappingURL=module$node_modules$mathjs$lib$cjs$function$algebra$derivative.js.map
