shadow$provide.module$node_modules$mathjs$lib$cjs$function$statistics$max=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.createMax=void 0;var _collection=require("module$node_modules$mathjs$lib$cjs$utils$collection");global=require("module$node_modules$mathjs$lib$cjs$utils$factory");var _improveErrorMessage=require("module$node_modules$mathjs$lib$cjs$function$statistics$utils$improveErrorMessage");require=(0,global.factory)("max",["typed","config",
"numeric","larger"],function(_ref){function _largest(x,y){try{return larger(x,y)?x:y}catch(err){throw(0,_improveErrorMessage.improveErrorMessage)(err,"max",y);}}function _max(array){var res;(0,_collection.deepForEach)(array,function(value){try{if(isNaN(value)&&"number"===typeof value)res=NaN;else if(void 0===res||larger(value,res))res=value}catch(err){throw(0,_improveErrorMessage.improveErrorMessage)(err,"max",value);}});if(void 0===res)throw Error("Cannot calculate max of an empty array");"string"===
typeof res&&(res=numeric(res,config.number));return res}var typed=_ref.typed,config=_ref.config,numeric=_ref.numeric,larger=_ref.larger;return typed("max",{"Array | Matrix":_max,"Array | Matrix, number | BigNumber":function(array,dim){return(0,_collection.reduce)(array,dim.valueOf(),_largest)},"...":function(args){if((0,_collection.containsCollections)(args))throw new TypeError("Scalar values expected in function max");return _max(args)}})});exports.createMax=require}
//# sourceMappingURL=module$node_modules$mathjs$lib$cjs$function$statistics$max.js.map
