shadow$provide.module$node_modules$mathjs$lib$cjs$function$matrix$resize=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.createResize=void 0;var _is=require("module$node_modules$mathjs$lib$cjs$utils$is"),_DimensionError=require("module$node_modules$mathjs$lib$cjs$error$DimensionError"),_ArgumentsError=require("module$node_modules$mathjs$lib$cjs$error$ArgumentsError"),_number=require("module$node_modules$mathjs$lib$cjs$utils$number"),_string=require("module$node_modules$mathjs$lib$cjs$utils$string"),
_object=require("module$node_modules$mathjs$lib$cjs$utils$object"),_array=require("module$node_modules$mathjs$lib$cjs$utils$array");global=require("module$node_modules$mathjs$lib$cjs$utils$factory");global=(0,global.factory)("resize",["config","matrix"],function(_ref){function _resizeString(str,size,defaultChar){if(void 0!==defaultChar){if("string"!==typeof defaultChar||1!==defaultChar.length)throw new TypeError("Single character expected as defaultValue");}else defaultChar=" ";if(1!==size.length)throw new _DimensionError.DimensionError(size.length,
1);var len=size[0];if("number"!==typeof len||!(0,_number.isInteger)(len))throw new TypeError("Invalid size, must contain positive integers (size: "+(0,_string.format)(size)+")");if(str.length>len)return str.substring(0,len);if(str.length<len){size=str;var i=0;for(str=len-str.length;i<str;i++)size+=defaultChar;return size}return str}var config=_ref.config,matrix=_ref.matrix;return function(x,size,defaultValue){if(2!==arguments.length&&3!==arguments.length)throw new _ArgumentsError.ArgumentsError("resize",
arguments.length,2,3);(0,_is.isMatrix)(size)&&(size=size.valueOf());(0,_is.isBigNumber)(size[0])&&(size=size.map(function(value){return(0,_is.isBigNumber)(value)?value.toNumber():value}));if((0,_is.isMatrix)(x))return x.resize(size,defaultValue,!0);if("string"===typeof x)return _resizeString(x,size,defaultValue);var asMatrix=Array.isArray(x)?!1:"Array"!==config.matrix;if(0===size.length){for(;Array.isArray(x);)x=x[0];return(0,_object.clone)(x)}Array.isArray(x)||(x=[x]);x=(0,_object.clone)(x);var res=
(0,_array.resize)(x,size,defaultValue);return asMatrix?matrix(res):res}});exports.createResize=global}
//# sourceMappingURL=module$node_modules$mathjs$lib$cjs$function$matrix$resize.js.map
