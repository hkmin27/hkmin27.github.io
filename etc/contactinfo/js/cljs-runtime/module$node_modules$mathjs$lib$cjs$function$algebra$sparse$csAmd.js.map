{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$algebra$sparse$csAmd.js",
"lineCount":12,
"mappings":"AAAAA,cAAA,CAAA,gEAAA,CAAqF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG7HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,WAAR,CAAsB,IAAK,EAEvBC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAEf,KAAIQ,SAAWR,OAAA,CAAQ,oEAAR,CAAf,CAEIS,QAAUT,OAAA,CAAQ,mEAAR,CAFd,CAIIU,QAAUV,OAAA,CAAQ,mEAAR,CAIVM;OAAAA,CAA6B,CAAC,CAAA,CAAGC,MAASI,CAAAA,OAAb,EAFtBC,OAEsB,CADdC,CAAC,KAADA,CAAQ,UAARA,CAAoB,WAApBA,CACc,CAA0C,QAAS,CAACC,IAAD,CAAO,CAylBzFC,QAASA,QAAO,CAACC,IAAD,CAAOC,KAAP,CAAcC,CAAd,CAAiBC,CAAjB,CAAoBC,CAApB,CAAuB,CACrC,GAAW,CAAX,CAAIJ,IAAJ,EAA+B,CAA/B,CAAgBA,IAAhB,CAAuBC,KAAvB,CAAkC,CAChC,IAASI,IAAT,CAAa,CAAb,CAAgBA,IAAhB,CAAoBD,CAApB,CAAuBC,IAAA,EAAvB,CACmB,CAAjB,GAAIH,CAAA,CAAEC,CAAF,CAAME,IAAN,CAAJ,GACEH,CAAA,CAAEC,CAAF,CAAME,IAAN,CADF,CACa,CADb,CAKFL,KAAA,CAAO,CAPyB,CAWlC,MAAOA,KAZ8B,CAevCM,QAASA,MAAK,CAACC,CAAD,CAAIC,CAAJ,CAAO,CACnB,MAAOD,EAAP,GAAaC,CADM,CAxmBoE,IACrFC,IAAMX,IAAKW,CAAAA,GAD0E,CAErFC,SAAWZ,IAAKY,CAAAA,QAFqE,CAGrFC,UAAYb,IAAKa,CAAAA,SAarB,OAAOC,SAAc,CAACC,KAAD,CAAQC,UAAR,CAAW,CAE9B,GAAI,CAACA,UAAL,EAAmB,CAAnB,EAAUD,KAAV,EAAgC,CAAhC,CAAwBA,KAAxB,CACE,MAAO,KAIT,KAAIE,MAAQD,UAAEE,CAAAA,KAAd,CAEIC,EAAIF,KAAA,CAAM,CAAN,CACJX,MAAAA,CAAIW,KAAA,CAAM,CAAN,CAER,KAAId,MAAQ,CAAZ,CAEIiB,MAAQC,IAAKC,CAAAA,GAAL,CAAS,EAAT,CAAa,EAAb,CAAkBD,IAAKE,CAAAA,IAAL,CAAUjB,KAAV,CAAlB,CACZc,MAAA;AAAQC,IAAKG,CAAAA,GAAL,CAASlB,KAAT,CAAa,CAAb,CAAgBc,KAAhB,CAE4BJ,KAAAA,EAAAA,UAASI,WAAAA,CAAAA,KAib7C,KAAIK,GAAKZ,SAAA,CAAUG,CAAV,CAET,IAAc,CAAd,GAnb6BD,KAmb7B,EAnb0CT,KAmb1C,GAnbuCa,CAmbvC,CAEE,UAAA,CAAOR,GAAA,CAAIK,CAAJ,CAAOS,EAAP,CAFT,KAAA,CAMA,GAAc,CAAd,GAzb6BV,KAyb7B,CAAiB,CAEXW,KAAAA,CAASD,EAAGE,CAAAA,MACZC,EAAAA,CAAOH,EAAGI,CAAAA,IAId,KAFA,IAAIC,GAAK,CAAT,CAESpB,EAAI,CAAb,CAAgBA,CAAhB,CAhcqCS,CAgcrC,CAAuBT,CAAA,EAAvB,CAA4B,CAE1B,IAAIqB,EAAIH,CAAA,CAAKlB,CAAL,CAERkB,EAAA,CAAKlB,CAAL,CAAA,CAAUoB,EAEV,IAAI,EAAAF,CAAA,CAAKlB,CAAL,CAAS,CAAT,CAAA,CAAcqB,CAAd,CAAkBX,UAAlB,CAAJ,CAKA,IAAK,IAAIY,GAAKJ,CAAA,CAAKlB,CAAL,CAAS,CAAT,CAAd,CAA2BqB,CAA3B,CAA+BC,EAA/B,CAAmCD,CAAA,EAAnC,CACEL,KAAA,CAAOI,EAAA,EAAP,CAAA,CAAeJ,KAAA,CAAOK,CAAP,CAZS,CAiB5BH,CAAA,CAjdqCT,CAidrC,CAAA,CAAUW,EAEVd,EAAA,CAAIH,SAAA,CAAUY,EAAV,CA1BW,CA4Bf,UAAA,CAAOb,QAAA,CAASa,EAAT,CAAaT,CAAb,CAlCT,CAhbA,CAAC,CAAA,CAAGtB,QAASuC,CAAAA,OAAb,EAAsBC,UAAtB,CAA0B1B,KAA1B,CAAiC,IAAjC,CAEI2B,EAAAA,CAASD,UAAGP,CAAAA,MACZS,WAAAA,CAAOF,UAAGL,CAAAA,IAEVQ,GAAAA,CAAMD,UAAA,CAAK9B,KAAL,CAENgC,MAAAA,CAAI,EAEJlC,EAAAA,CAAI,EAGJmC,GAAAA,CAAKjC,KAALiC,CAAS,CAETC,EAAAA,CAAO,CAAPA,EAAYlC,KAAZkC,CAAgB,CAAhBA,CAEAC,EAAAA,CAAO,CAAPA,EAAYnC,KAAZmC,CAAgB,CAAhBA,CAEAC;EAAAA,CAAO,CAAPA,EAAYpC,KAAZoC,CAAgB,CAAhBA,CAEJ,KAAIC,OAAS,CAATA,EAAcrC,KAAdqC,CAAkB,CAAlBA,CAAJ,CAEItC,EAAI,CAAJA,EAASC,KAATD,CAAa,CAAbA,CAFJ,CAIIuC,MAAQ,CAARA,EAAatC,KAAbsC,CAAiB,CAAjBA,CAJJ,CASI1C,IAucJ,KAASK,IAAT,CAAa,CAAb,CAAgBA,IAAhB,CAvcoCD,KAucpC,CAAuBC,IAAA,EAAvB,CAvc6CH,CAwc3C,CA3dQyC,CA2dR,CAAQtC,IAAR,CAAA,CAxcqC6B,UAwcxB,CAAK7B,IAAL,CAAS,CAAT,CAAb,CAxcqC6B,UAwcV,CAAK7B,IAAL,CAK7B,KAASE,IAAT,CA7c6CL,CA2c7C,CA9dUyC,CA8dV,CA3coCvC,KA2cpC,CAEA,CAFa,CAEb,CAAgBG,IAAhB,EA7coCH,KA6cpC,CAAwBG,IAAA,EAAxB,CA7c6CL,CA+c3C,CA/cmDqC,CA+cnD,CAAShC,IAAT,CAYA,CAZc,EAYd,CA7dS6B,KAkdT,CAAK7B,IAAL,CAWA,CAXU,EAWV,CA3d2CL,CAid3C,CAjd+DoC,CAid/D,CAAS/B,IAAT,CAUA,CAVc,EAUd,CA3d2CL,CAmd3C,CAndqEwC,KAmdrE,CAAUnC,IAAV,CAQA,CARe,EAQf,CA3d2CL,CAqd3C,CArd4EmC,EAqd5E,CAAO9B,IAAP,CAMA,CANY,CAMZ,CA3d2CL,CAud3C,CAvdgFC,CAudhF,CAAMI,IAAN,CAIA,CAJW,CAIX,CA3d2CL,CAyd3C,CAzdmFsC,EAydnF,CAASjC,IAAT,CAEA,CAFc,CAEd,CA3d2CL,CA2d3C,CA3dyFuC,MA2dzF,CAAWlC,IAAX,CAAA,CA3d2CL,CA2d3B,CA9eRyC,CA8eQ,CAAQpC,IAAR,CAIdP,KAAAA,CAAOD,OAAA,CAAQ,CAAR,CAAW,CAAX,CA/dkCG,CA+dlC,CA/duEC,CA+dvE,CA/dyBC,KA+dzB,CA/dkCF,EAke7C,CAleqFsC,EAkerF,CAleoCpC,KAkepC,CAAA,CAAc,EAleyB8B,WAoevC,CApeoC9B,KAoepC,CAAA,CAAU,EAiBV,KAFA,IAAIwC,IAnfyC1C,CAse7C,CAtekFC,CAselF,CAteoCC,KAsepC,CAaIwC,CAbO,CAaX,CAESrC,EAAI,CAAb,CAAgBA,CAAhB,CAlfiCH,KAkfjC,CAAuBG,CAAA,EAAvB,CAA4B,CAE1B,IAAIsC,EApfoC3C,CAofhC,CApfmCuC,MAofnC,CAAWlC,CAAX,CAER,IAAU,CAAV,GAAIsC,CAAJ,CAtfwC3C,CAwftC,CAxfiDsC,EAwfjD,CAASjC,CAAT,CAIA,CAJc,EAId,CAHAqC,GAAA,EAGA,CA5fgCV,UA2fhC,CAAK3B,CAAL,CACA,CADU,EACV,CA5fsCL,CA4ftC,CA5fuDC,CA4fvD,CAAMI,CAAN,CAAA,CAAW,CANb,KAOO,IAAIsC,CAAJ,CAAQ3B,KAAR,CA7fiChB,CA+ftC,CA/fiEmC,EA+fjE;AAAO9B,CAAP,CAKA,CALY,CAKZ,CApgBsCL,CAigBtC,CAjgBiDsC,EAigBjD,CAASjC,CAAT,CAGA,CAHc,EAGd,CAFAqC,GAAA,EAEA,CApgBgCV,UAmgBhC,CAAK3B,CAAL,CACA,CADU,CAAC,CAAA,CAAGd,OAAQqD,CAAAA,MAAZ,EAngBmB1C,KAmgBnB,CACV,CApgBsCF,CAogBtC,CApgBiEmC,EAogBjE,CApgB6BjC,KAogB7B,CAAA,EAPK,KAQA,CACL,IAAI2C,EAtgBkC7C,CAsgB9B,CAtgB6DqC,CAsgB7D,CAASM,CAAT,CAEE,GAAV,GAAIE,CAAJ,GA7gBOX,KA8gBL,CAAKW,CAAL,CADF,CACYxC,CADZ,CAxgBsCL,EA6gBtC,CA7gBiFoC,CA6gBjF,CAAS/B,CAAT,CAAA,CA7gBsCL,CA6gBxB,CA7gBuDqC,CA6gBvD,CAASM,CAAT,CA7gBwB3C,EA8gBtC,CA9gBqEqC,CA8gBrE,CAASM,CAAT,CAAA,CAActC,CATT,CAnBmB,CAgC5B,KAAA,CAAOqC,GA/gBHI,IAAAA,CAAS,CAIb,KA3D8B,IAyDvBxC,UAzDuB,CAyDjByC,EAzDiB,CAyDbC,EAzDa,CAyDNC,EAzDM,CAyDFC,EAzDE,CAyDEC,GAzDF,CAyDoBzB,WAElD,CAAOgB,KAAP,CAAaxC,KAAb,CAAA,CAAgB,CAId,IAAKC,CAAL,CAAS,EAAT,CAAa2C,GAAb,CAAsB5C,KAAtB,EAAsD,EAAtD,IAA4BC,CAA5B,CAAgCH,CAAA,CAAEqC,CAAF,CAASS,GAAT,CAAhC,EAA0DA,GAAA,EAA1D,EAIoB,EAApB,GAAI9C,CAAA,CAAEoC,CAAF,CAASjC,CAAT,CAAJ,GApBS+B,KAqBP,CAAKlC,CAAA,CAAEoC,CAAF,CAASjC,CAAT,CAAL,CADF,CACsB,EADtB,CAKAH,EAAA,CAAEqC,CAAF,CAASS,GAAT,CAAA,CAAmB9C,CAAA,CAAEoC,CAAF,CAASjC,CAAT,CAEfiD,EAAAA,CAAQpD,CAAA,CAAEsC,EAAF,CAASnC,CAAT,CAEZ,KAAIkD,IAAMrD,CAAA,CAAEmC,EAAF,CAAOhC,CAAP,CAEVuC,MAAA,EAAOW,GAIP,KAAIC,GAAK,CAETtD,EAAA,CAAEmC,EAAF,CAAOhC,CAAP,CAAA,CAAY,CAACkD,GACb,KAAI1B,WAAIK,UAAA,CAAK7B,CAAL,CAAR,CAEIoD,IAAgB,CAAV,GAAAH,CAAA,CAAczB,UAAd,CAAkBM,EAF5B,CAGIuB,IAAMD,GAEV,KAAKR,EAAL,CAAU,CAAV,CAAaA,EAAb,EAAmBK,CAAnB,CAA2B,CAA3B,CAA8BL,EAAA,EAA9B,CAAoC,CAC9BA,EAAJ,CAASK,CAAT,EAEEK,UAIA,CAJItD,CAIJ,CAFA8C,EAEA,CAFKtB,UAEL,CAAAuB,EAAA,CAAKlD,CAAA,CAnEDyC,CAmEC,CAAQtC,CAAR,CAAL,CAAkBiD,CANpB,GASEK,UAGA;AAHI1B,CAAA,CAAOJ,UAAA,EAAP,CAGJ,CAFAsB,EAEA,CAFKjB,UAAA,CAAKyB,UAAL,CAEL,CAAAP,EAAA,CAAKlD,CAAA,CAzEDyC,CAyEC,CAAQgB,UAAR,CAZP,CAeA,KAAKT,EAAL,CAAU,CAAV,CAAaA,EAAb,EAAmBE,EAAnB,CAAuBF,EAAA,EAAvB,CACE3C,CAEA,CAFI0B,CAAA,CAAOkB,EAAA,EAAP,CAEJ,CAAyB,CAAzB,GAAKE,GAAL,CAAWnD,CAAA,CAAEmC,EAAF,CAAO9B,CAAP,CAAX,IAKAiD,EAWA,EAXMH,GAWN,CATAnD,CAAA,CAAEmC,EAAF,CAAO9B,CAAP,CASA,CATY,CAAC8C,GASb,CAPApB,CAAA,CAAOyB,GAAA,EAAP,CAOA,CAPgBnD,CAOhB,CALoB,EAKpB,GALIL,CAAA,CAAEoC,CAAF,CAAS/B,CAAT,CAKJ,GA9EK6B,KA0EH,CAAKlC,CAAA,CAAEoC,CAAF,CAAS/B,CAAT,CAAL,CAIF,CA9EK6B,KA0EiB,CAAK7B,CAAL,CAItB,EAAgB,EAAhB,GA9EK6B,KA8ED,CAAK7B,CAAL,CAAJ,CACEL,CAAA,CAAEoC,CAAF,CA/EGF,KA+EM,CAAK7B,CAAL,CAAT,CADF,CACsBL,CAAA,CAAEoC,CAAF,CAAS/B,CAAT,CADtB,CAGEL,CAAA,CAAEqC,CAAF,CAASrC,CAAA,CAAEuC,MAAF,CAAWlC,CAAX,CAAT,CAHF,CAG4BL,CAAA,CAAEoC,CAAF,CAAS/B,CAAT,CAnB5B,CAuBEoD,WAAJ,GAAUtD,CAAV,GAEE6B,UAAA,CAAKyB,UAAL,CAEA,CAFU,CAAC,CAAA,CAAGlE,OAAQqD,CAAAA,MAAZ,EAAoBzC,CAApB,CAEV,CAAAH,CAAA,CAAEC,CAAF,CAAMwD,UAAN,CAAA,CAAW,CAJb,CA1CkC,CAmDtB,CAAd,GAAIL,CAAJ,GACEnB,EADF,CACQuB,GADR,CAKAxD,EAAA,CAAEuC,MAAF,CAAWpC,CAAX,CAAA,CAAgBmD,EAEhBtB,WAAA,CAAK7B,CAAL,CAAA,CAAUoD,GACVvD,EAAA,CAvHQyC,CAuHR,CAAQtC,CAAR,CAAA,CAAaqD,GAAb,CAAmBD,GAEnBvD,EAAA,CAAEsC,EAAF,CAASnC,CAAT,CAAA,CAAc,EAIdL,KAAA,CAAOD,OAAA,CAAQC,IAAR,CAAcC,KAAd,CAAqBC,CAArB,CAAwBC,CAAxB,CAA2BC,KAA3B,CAEP,KAAKwD,EAAL,CAAUH,GAAV,CAAeG,EAAf,CAAoBF,GAApB,CAAyBE,EAAA,EAAzB,CAGE,GAFArD,CAEI,CAFA0B,CAAA,CAAO2B,EAAP,CAEA,CAAA,EAAuB,CAAvB,GAACC,EAAD,CAAO3D,CAAA,CAAEsC,EAAF,CAASjC,CAAT,CAAP,EAAJ,CAQA,IAHA8C,GAGkB,CAHZ,CAACnD,CAAA,CAAEmC,EAAF,CAAO9B,CAAP,CAGW;AAFduD,EAEc,CAFP9D,IAEO,CAFAqD,GAEA,CAAbxB,UAAa,CAATK,UAAA,CAAK3B,CAAL,CAAS,CAAAuB,EAAA,CAAKI,UAAA,CAAK3B,CAAL,CAAL,CAAesD,EAAf,CAAqB,CAAvC,CAA0ChC,UAA1C,EAA+CC,EAA/C,CAAmDD,UAAA,EAAnD,CACE8B,UAEA,CAFI1B,CAAA,CAAOJ,UAAP,CAEJ,CAAI3B,CAAA,CAAEC,CAAF,CAAMwD,UAAN,CAAJ,EAAgB3D,IAAhB,CAEEE,CAAA,CAAEC,CAAF,CAAMwD,UAAN,CAFF,EAEcN,GAFd,CAGwB,CAHxB,GAGWnD,CAAA,CAAEC,CAAF,CAAMwD,UAAN,CAHX,GAKEzD,CAAA,CAAEC,CAAF,CAAMwD,UAAN,CALF,CAKazD,CAAA,CAAEuC,MAAF,CAAWkB,UAAX,CALb,CAK6BG,EAL7B,CAcJ,KAAKF,EAAL,CAAUH,GAAV,CAAeG,EAAf,CAAoBF,GAApB,CAAyBE,EAAA,EAAzB,CAA+B,CAE7BrD,CAAA,CAAI0B,CAAA,CAAO2B,EAAP,CACJ9B,GAAA,CAAKI,UAAA,CAAK3B,CAAL,CACLqB,YAAA,CAAKE,EAAL,CAAU5B,CAAA,CAAEsC,EAAF,CAASjC,CAAT,CAAV,CAAwB,CACxBwD,IAAA,CAAKjC,EAEOe,GAAP,CAAAE,EAAA,CAAI,CAAT,KAAmBlB,UAAnB,CAAuBC,EAAvB,CAA2BD,UAA3B,EAAgCD,WAAhC,CAAoCC,UAAA,EAApC,CAGE,GAFA8B,UAEI,CAFA1B,CAAA,CAAOJ,UAAP,CAEA,CAAa,CAAb,GAAA3B,CAAA,CAAEC,CAAF,CAAMwD,UAAN,CAAJ,CAAoB,CAElB,IAAIK,KAAO9D,CAAA,CAAEC,CAAF,CAAMwD,UAAN,CAAPK,CAAkBhE,IAEX,EAAX,CAAIgE,IAAJ,EAEEnB,EAIA,EAJKmB,IAIL,CAFA/B,CAAA,CAAO8B,GAAA,EAAP,CAEA,CAFeJ,UAEf,CAAAZ,EAAA,EAAKY,UANP,GASEzB,UAAA,CAAKyB,UAAL,CAEA;AAFU,CAAC,CAAA,CAAGlE,OAAQqD,CAAAA,MAAZ,EAAoBzC,CAApB,CAEV,CAAAH,CAAA,CAAEC,CAAF,CAAMwD,UAAN,CAAA,CAAW,CAXb,CAJkB,CAqBtBzD,CAAA,CAAEsC,EAAF,CAASjC,CAAT,CAAA,CAAcwD,GAAd,CAAmBjC,EAAnB,CAAwB,CACpBmC,KAAAA,CAAKF,GACT,KAAIG,GAAKpC,EAALoC,CAAUhE,CAAA,CA5LRyC,CA4LQ,CAAQpC,CAAR,CAEd,KAAKsB,UAAL,CAASD,WAAT,CAAc,CAAd,CAAiBC,UAAjB,CAAqBqC,EAArB,CAAyBrC,UAAA,EAAzB,CACErB,UAIA,CAJIyB,CAAA,CAAOJ,UAAP,CAIJ,CAFIsC,WAEJ,CAFUjE,CAAA,CAAEmC,EAAF,CAAO7B,UAAP,CAEV,CAAW,CAAX,EAAI2D,WAAJ,GAKAtB,EAIA,EAJKsB,WAIL,CAFAlC,CAAA,CAAO8B,GAAA,EAAP,CAEA,CAFevD,UAEf,CAAAuC,EAAA,EAAKvC,UATL,CAaQ,EAAV,GAAIqC,EAAJ,EAEEX,UAAA,CAAK3B,CAAL,CASA,CATU,CAAC,CAAA,CAAGd,OAAQqD,CAAAA,MAAZ,EAAoBzC,CAApB,CASV,CARAgD,GAQA,CARM,CAACnD,CAAA,CAAEmC,EAAF,CAAO9B,CAAP,CAQP,CANAiD,EAMA,EANMH,GAMN,CAJAE,GAIA,EAJOF,GAIP,CAHAT,KAGA,EAHOS,GAGP,CAFAnD,CAAA,CAAEmC,EAAF,CAAO9B,CAAP,CAEA,CAFY,CAEZ,CAAAL,CAAA,CAAEsC,EAAF,CAASjC,CAAT,CAAA,CAAc,EAXhB,GAcEL,CAAA,CAAEuC,MAAF,CAAWlC,CAAX,CAeA,CAfgBY,IAAKG,CAAAA,GAAL,CAASpB,CAAA,CAAEuC,MAAF,CAAWlC,CAAX,CAAT,CAAwBsC,EAAxB,CAehB,CAbAZ,CAAA,CAAO8B,GAAP,CAaA,CAba9B,CAAA,CAAOgC,IAAP,CAab,CAXAhC,CAAA,CAAOgC,IAAP,CAWA,CAXahC,CAAA,CAAOH,EAAP,CAWb,CATAG,CAAA,CAAOH,EAAP,CASA,CATazB,CASb,CAPAH,CAAA,CAtOIyC,CAsOJ,CAAQpC,CAAR,CAOA,CAPawD,GAOb,CAPkBjC,EAOlB,CAPuB,CAOvB,CALAiB,EAKA,EALS,CAAJ,CAAAA,EAAA,CAAQ,CAACA,EAAT,CAAaA,EAKlB,EALuB3C,KAKvB,CAHAF,CAAA,CAAEoC,CAAF,CAAS/B,CAAT,CAGA,CAHcL,CAAA,CAAEwC,KAAF,CAAUK,EAAV,CAGd;AAFA7C,CAAA,CAAEwC,KAAF,CAAUK,EAAV,CAEA,CAFexC,CAEf,CA5NK6B,KA4NL,CAAK7B,CAAL,CAAA,CAAUwC,EA7BZ,CArD6B,CAuF/B7C,CAAA,CAAEuC,MAAF,CAAWpC,CAAX,CAAA,CAAgBmD,EAChBvD,MAAA,CAAQkB,IAAKC,CAAAA,GAAL,CAASnB,KAAT,CAAgBuD,EAAhB,CAERxD,KAAA,CAAOD,OAAA,CAAQC,IAAR,CAAeC,KAAf,CAAsBA,KAAtB,CAA6BC,CAA7B,CAAgCC,CAAhC,CAAmCC,KAAnC,CAGP,KAAKwD,EAAL,CAAUH,GAAV,CAAeG,EAAf,CAAoBF,GAApB,CAAyBE,EAAA,EAAzB,CAGE,GAFArD,CAEI,CAFA0B,CAAA,CAAO2B,EAAP,CAEA,CAAA,EAAa,CAAb,EAAA1D,CAAA,CAAEmC,EAAF,CAAO9B,CAAP,CAAA,CAAJ,CAUA,IALAwC,EAGA,CAlPOX,KA+OH,CAAK7B,CAAL,CAGJ,CAFAA,CAEA,CAFIL,CAAA,CAAEwC,KAAF,CAAUK,EAAV,CAEJ,CAAA7C,CAAA,CAAEwC,KAAF,CAAUK,EAAV,CAAA,CAAe,EAEf,CAAa,EAAb,GAAOxC,CAAP,EAAmC,EAAnC,GAAmBL,CAAA,CAAEoC,CAAF,CAAS/B,CAAT,CAAnB,CAAuCA,CAAA,CAAIL,CAAA,CAAEoC,CAAF,CAAS/B,CAAT,CAAJ,CAAiBP,IAAA,EAAxD,CAAgE,CAC9DoD,EAAA,CAAKlD,CAAA,CAtQDyC,CAsQC,CAAQpC,CAAR,CACLsD,GAAA,CAAM3D,CAAA,CAAEsC,EAAF,CAASjC,CAAT,CAEN,KAAKsB,UAAL,CAASK,UAAA,CAAK3B,CAAL,CAAT,CAAmB,CAAnB,CAAsBsB,UAAtB,EAA2BK,UAAA,CAAK3B,CAAL,CAA3B,CAAqC6C,EAArC,CAA0C,CAA1C,CAA6CvB,UAAA,EAA7C,CACE3B,CAAA,CAAEC,CAAF,CAAM8B,CAAA,CAAOJ,UAAP,CAAN,CAAA,CAAmB7B,IAGjBoE,IAAAA,CAAQ7D,CAEZ,KAAKC,UAAL,CAASN,CAAA,CAAEoC,CAAF,CAAS/B,CAAT,CAAT,CAA4B,EAA5B,GAAsBC,UAAtB,CAAA,CAAiC,CAC3B6D,EAAAA,CAAKnE,CAAA,CAhRPyC,CAgRO,CAAQnC,UAAR,CAAL6D,GAAoBjB,EAApBiB,EAA0BnE,CAAA,CAAEsC,EAAF,CAAShC,UAAT,CAA1B6D,GAA0CR,EAE9C,KAAKhC,UAAL,CAASK,UAAA,CAAK1B,UAAL,CAAT,CAAmB,CAAnB,CAAsB6D,EAAtB,EAA4BxC,UAA5B;AAAiCK,UAAA,CAAK1B,UAAL,CAAjC,CAA2C4C,EAA3C,CAAgD,CAAhD,CAAmDvB,UAAA,EAAnD,CAEM3B,CAAA,CAAEC,CAAF,CAAM8B,CAAA,CAAOJ,UAAP,CAAN,CAAJ,GAAyB7B,IAAzB,GACEqE,EADF,CACO,CADP,CAMEA,GAAJ,EAEEnC,UAAA,CAAK1B,UAAL,CAOA,CAPU,CAAC,CAAA,CAAGf,OAAQqD,CAAAA,MAAZ,EAAoBvC,CAApB,CAOV,CANAL,CAAA,CAAEmC,EAAF,CAAO9B,CAAP,CAMA,EANaL,CAAA,CAAEmC,EAAF,CAAO7B,UAAP,CAMb,CALAN,CAAA,CAAEmC,EAAF,CAAO7B,UAAP,CAKA,CALY,CAKZ,CAHAN,CAAA,CAAEsC,EAAF,CAAShC,UAAT,CAGA,CAHc,EAGd,CADAA,UACA,CADIN,CAAA,CAAEoC,CAAF,CAAS9B,UAAT,CACJ,CAAAN,CAAA,CAAEoC,CAAF,CAAS8B,GAAT,CAAA,CAAkB5D,UATpB,GAYE4D,GACA,CADQ5D,UACR,CAAAA,UAAA,CAAIN,CAAA,CAAEoC,CAAF,CAAS9B,UAAT,CAbN,CAX+B,CAV6B,CA0ClE,IAAcoD,EAAd,CAAK/B,UAAL,CAAS4B,GAAT,CAAwBG,EAAxB,CAA6BF,GAA7B,CAAkCE,EAAA,EAAlC,CACErD,CAEA,CAFI0B,CAAA,CAAO2B,EAAP,CAEJ,CAA0B,CAA1B,GAAKP,GAAL,CAAW,CAACnD,CAAA,CAAEmC,EAAF,CAAO9B,CAAP,CAAZ,IAKAL,CAAA,CAAEmC,EAAF,CAAO9B,CAAP,CAiBA,CAjBY8C,GAiBZ,CAfAR,EAeA,CAfI3C,CAAA,CAAEuC,MAAF,CAAWlC,CAAX,CAeJ,CAfoBiD,EAepB,CAfyBH,GAezB,CAdAR,EAcA,CAdI1B,IAAKG,CAAAA,GAAL,CAASuB,EAAT,CAAYzC,KAAZ,CAAgBwC,KAAhB,CAAsBS,GAAtB,CAcJ,CAZoB,EAYpB,GAZInD,CAAA,CAAEqC,CAAF,CAASM,EAAT,CAYJ,GAvTOT,KA4SL,CAAKlC,CAAA,CAAEqC,CAAF,CAASM,EAAT,CAAL,CAWF,CAXsBtC,CAWtB,EAPAL,CAAA,CAAEoC,CAAF,CAAS/B,CAAT,CAOA,CAPcL,CAAA,CAAEqC,CAAF,CAASM,EAAT,CAOd,CAvTOT,KAiTP,CAAK7B,CAAL,CAMA,CANU,EAMV,CALAL,CAAA,CAAEqC,CAAF,CAASM,EAAT,CAKA,CALctC,CAKd,CAHAyC,GAGA,CAHS7B,IAAKG,CAAAA,GAAL,CAAS0B,GAAT,CAAiBH,EAAjB,CAGT;AAFA3C,CAAA,CAAEuC,MAAF,CAAWlC,CAAX,CAEA,CAFgBsC,EAEhB,CAAAZ,CAAA,CAAOJ,UAAA,EAAP,CAAA,CAActB,CAtBd,CA0BFL,EAAA,CAAEmC,EAAF,CAAOhC,CAAP,CAAA,CAAYkD,GAEmB,EAA/B,IAAKrD,CAAA,CA9UGyC,CA8UH,CAAQtC,CAAR,CAAL,CAAkBwB,UAAlB,CAAsB4B,GAAtB,IAEEvB,UAAA,CAAK7B,CAAL,CAEA,CAFU,EAEV,CAAAH,CAAA,CAAEC,CAAF,CAAME,CAAN,CAAA,CAAW,CAJb,CAOc,EAAd,GAAIiD,CAAJ,GAEEnB,EAFF,CAEQN,UAFR,CAxTc,CAmUhB,IAAKtB,CAAL,CAAS,CAAT,CAAYA,CAAZ,CAAgBH,KAAhB,CAAmBG,CAAA,EAAnB,CACE2B,UAAA,CAAK3B,CAAL,CAAA,CAAU,CAAC,CAAA,CAAGd,OAAQqD,CAAAA,MAAZ,EAAoBZ,UAAA,CAAK3B,CAAL,CAApB,CAGZ,KAAKC,UAAL,CAAS,CAAT,CAAYA,UAAZ,EAAiBJ,KAAjB,CAAoBI,UAAA,EAApB,CACEN,CAAA,CAAEqC,CAAF,CAAS/B,UAAT,CAAA,CAAc,EAIhB,KAAKA,UAAL,CAASJ,KAAT,CAAiB,CAAjB,EAAYI,UAAZ,CAAoBA,UAAA,EAApB,CAEkB,CAAhB,CAAIN,CAAA,CAAEmC,EAAF,CAAO7B,UAAP,CAAJ,GAKAN,CAAA,CAAEoC,CAAF,CAAS9B,UAAT,CACA,CADcN,CAAA,CAAEqC,CAAF,CAASL,UAAA,CAAK1B,UAAL,CAAT,CACd,CAAAN,CAAA,CAAEqC,CAAF,CAASL,UAAA,CAAK1B,UAAL,CAAT,CAAA,CAAoBA,UANpB,CAUF,KAAKmD,UAAL,CAASvD,KAAT,CAAiB,CAAjB,EAAYuD,UAAZ,CAAoBA,UAAA,EAApB,CAEmB,CAAjB,EAAIzD,CAAA,CAAEmC,EAAF,CAAOsB,UAAP,CAAJ,EAIgB,EAJhB,GAIIzB,UAAA,CAAKyB,UAAL,CAJJ;CAMEzD,CAAA,CAAEoC,CAAF,CAASqB,UAAT,CACA,CADczD,CAAA,CAAEqC,CAAF,CAASL,UAAA,CAAKyB,UAAL,CAAT,CACd,CAAAzD,CAAA,CAAEqC,CAAF,CAASL,UAAA,CAAKyB,UAAL,CAAT,CAAA,CAAoBA,UAPtB,CAYF,KAAYpD,CAAZ,CAAKF,CAAL,CAAS,CAAT,CAAmBE,CAAnB,EAAwBH,KAAxB,CAA2BG,CAAA,EAA3B,CACkB,EAAhB,GAAI2B,UAAA,CAAK3B,CAAL,CAAJ,GACEF,CADF,CACM,CAAC,CAAA,CAAGX,OAAQ4E,CAAAA,MAAZ,EAAoB/D,CAApB,CAAuBF,CAAvB,CAA0BH,CAA1B,CAA6BqC,CAA7B,CAAmCD,CAAnC,CAAyCF,KAAzC,CAA4CjC,CAA5C,CADN,CAMFiC,MAAEmC,CAAAA,MAAF,CAASnC,KAAEoC,CAAAA,MAAX,CAAoB,CAApB,CAAuB,CAAvB,CAEA,OAAOpC,MA1auB,CAhByD,CAA1D,CA4mBjClD,QAAQI,CAAAA,WAAR,CAAsBA,OA9nBuG;",
"sources":["node_modules/mathjs/lib/cjs/function/algebra/sparse/csAmd.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$algebra$sparse$csAmd\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCsAmd = void 0;\n\nvar _factory = require(\"../../../utils/factory.js\");\n\nvar _csFkeep = require(\"./csFkeep.js\");\n\nvar _csFlip = require(\"./csFlip.js\");\n\nvar _csTdfs = require(\"./csTdfs.js\");\n\nvar name = 'csAmd';\nvar dependencies = ['add', 'multiply', 'transpose'];\nvar createCsAmd = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var add = _ref.add,\n      multiply = _ref.multiply,\n      transpose = _ref.transpose;\n\n  /**\n   * Approximate minimum degree ordering. The minimum degree algorithm is a widely used\n   * heuristic for finding a permutation P so that P*A*P' has fewer nonzeros in its factorization\n   * than A. It is a gready method that selects the sparsest pivot row and column during the course\n   * of a right looking sparse Cholesky factorization.\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   *\n   * @param {Number} order    0: Natural, 1: Cholesky, 2: LU, 3: QR\n   * @param {Matrix} m        Sparse Matrix\n   */\n  return function csAmd(order, a) {\n    // check input parameters\n    if (!a || order <= 0 || order > 3) {\n      return null;\n    } // a matrix arrays\n\n\n    var asize = a._size; // rows and columns\n\n    var m = asize[0];\n    var n = asize[1]; // initialize vars\n\n    var lemax = 0; // dense threshold\n\n    var dense = Math.max(16, 10 * Math.sqrt(n));\n    dense = Math.min(n - 2, dense); // create target matrix C\n\n    var cm = _createTargetMatrix(order, a, m, n, dense); // drop diagonal entries\n\n\n    (0, _csFkeep.csFkeep)(cm, _diag, null); // C matrix arrays\n\n    var cindex = cm._index;\n    var cptr = cm._ptr; // number of nonzero elements in C\n\n    var cnz = cptr[n]; // allocate result (n+1)\n\n    var P = []; // create workspace (8 * (n + 1))\n\n    var W = [];\n    var len = 0; // first n + 1 entries\n\n    var nv = n + 1; // next n + 1 entries\n\n    var next = 2 * (n + 1); // next n + 1 entries\n\n    var head = 3 * (n + 1); // next n + 1 entries\n\n    var elen = 4 * (n + 1); // next n + 1 entries\n\n    var degree = 5 * (n + 1); // next n + 1 entries\n\n    var w = 6 * (n + 1); // next n + 1 entries\n\n    var hhead = 7 * (n + 1); // last n + 1 entries\n    // use P as workspace for last\n\n    var last = P; // initialize quotient graph\n\n    var mark = _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree); // initialize degree lists\n\n\n    var nel = _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next); // minimum degree node\n\n\n    var mindeg = 0; // vars\n\n    var i, j, k, k1, k2, e, pj, ln, nvi, pk, eln, p1, p2, pn, h, d; // while (selecting pivots) do\n\n    while (nel < n) {\n      // select node of minimum approximate degree. amd() is now ready to start eliminating the graph. It first\n      // finds a node k of minimum degree and removes it from its degree list. The variable nel keeps track of thow\n      // many nodes have been eliminated.\n      for (k = -1; mindeg < n && (k = W[head + mindeg]) === -1; mindeg++) {\n        ;\n      }\n\n      if (W[next + k] !== -1) {\n        last[W[next + k]] = -1;\n      } // remove k from degree list\n\n\n      W[head + mindeg] = W[next + k]; // elenk = |Ek|\n\n      var elenk = W[elen + k]; // # of nodes k represents\n\n      var nvk = W[nv + k]; // W[nv + k] nodes of A eliminated\n\n      nel += nvk; // Construct a new element. The new element Lk is constructed in place if |Ek| = 0. nv[i] is\n      // negated for all nodes i in Lk to flag them as members of this set. Each node i is removed from the\n      // degree lists. All elements e in Ek are absorved into element k.\n\n      var dk = 0; // flag k as in Lk\n\n      W[nv + k] = -nvk;\n      var p = cptr[k]; // do in place if W[elen + k] === 0\n\n      var pk1 = elenk === 0 ? p : cnz;\n      var pk2 = pk1;\n\n      for (k1 = 1; k1 <= elenk + 1; k1++) {\n        if (k1 > elenk) {\n          // search the nodes in k\n          e = k; // list of nodes starts at cindex[pj]\n\n          pj = p; // length of list of nodes in k\n\n          ln = W[len + k] - elenk;\n        } else {\n          // search the nodes in e\n          e = cindex[p++];\n          pj = cptr[e]; // length of list of nodes in e\n\n          ln = W[len + e];\n        }\n\n        for (k2 = 1; k2 <= ln; k2++) {\n          i = cindex[pj++]; // check  node i dead, or seen\n\n          if ((nvi = W[nv + i]) <= 0) {\n            continue;\n          } // W[degree + Lk] += size of node i\n\n\n          dk += nvi; // negate W[nv + i] to denote i in Lk\n\n          W[nv + i] = -nvi; // place i in Lk\n\n          cindex[pk2++] = i;\n\n          if (W[next + i] !== -1) {\n            last[W[next + i]] = last[i];\n          } // check we need to remove i from degree list\n\n\n          if (last[i] !== -1) {\n            W[next + last[i]] = W[next + i];\n          } else {\n            W[head + W[degree + i]] = W[next + i];\n          }\n        }\n\n        if (e !== k) {\n          // absorb e into k\n          cptr[e] = (0, _csFlip.csFlip)(k); // e is now a dead element\n\n          W[w + e] = 0;\n        }\n      } // cindex[cnz...nzmax] is free\n\n\n      if (elenk !== 0) {\n        cnz = pk2;\n      } // external degree of k - |Lk\\i|\n\n\n      W[degree + k] = dk; // element k is in cindex[pk1..pk2-1]\n\n      cptr[k] = pk1;\n      W[len + k] = pk2 - pk1; // k is now an element\n\n      W[elen + k] = -2; // Find set differences. The scan1 function now computes the set differences |Le \\ Lk| for all elements e. At the start of the\n      // scan, no entry in the w array is greater than or equal to mark.\n      // clear w if necessary\n\n      mark = _wclear(mark, lemax, W, w, n); // scan 1: find |Le\\Lk|\n\n      for (pk = pk1; pk < pk2; pk++) {\n        i = cindex[pk]; // check if W[elen + i] empty, skip it\n\n        if ((eln = W[elen + i]) <= 0) {\n          continue;\n        } // W[nv + i] was negated\n\n\n        nvi = -W[nv + i];\n        var wnvi = mark - nvi; // scan Ei\n\n        for (p = cptr[i], p1 = cptr[i] + eln - 1; p <= p1; p++) {\n          e = cindex[p];\n\n          if (W[w + e] >= mark) {\n            // decrement |Le\\Lk|\n            W[w + e] -= nvi;\n          } else if (W[w + e] !== 0) {\n            // ensure e is a live element, 1st time e seen in scan 1\n            W[w + e] = W[degree + e] + wnvi;\n          }\n        }\n      } // degree update\n      // The second pass computes the approximate degree di, prunes the sets Ei and Ai, and computes a hash\n      // function h(i) for all nodes in Lk.\n      // scan2: degree update\n\n\n      for (pk = pk1; pk < pk2; pk++) {\n        // consider node i in Lk\n        i = cindex[pk];\n        p1 = cptr[i];\n        p2 = p1 + W[elen + i] - 1;\n        pn = p1; // scan Ei\n\n        for (h = 0, d = 0, p = p1; p <= p2; p++) {\n          e = cindex[p]; // check e is an unabsorbed element\n\n          if (W[w + e] !== 0) {\n            // dext = |Le\\Lk|\n            var dext = W[w + e] - mark;\n\n            if (dext > 0) {\n              // sum up the set differences\n              d += dext; // keep e in Ei\n\n              cindex[pn++] = e; // compute the hash of node i\n\n              h += e;\n            } else {\n              // aggressive absorb. e->k\n              cptr[e] = (0, _csFlip.csFlip)(k); // e is a dead element\n\n              W[w + e] = 0;\n            }\n          }\n        } // W[elen + i] = |Ei|\n\n\n        W[elen + i] = pn - p1 + 1;\n        var p3 = pn;\n        var p4 = p1 + W[len + i]; // prune edges in Ai\n\n        for (p = p2 + 1; p < p4; p++) {\n          j = cindex[p]; // check node j dead or in Lk\n\n          var nvj = W[nv + j];\n\n          if (nvj <= 0) {\n            continue;\n          } // degree(i) += |j|\n\n\n          d += nvj; // place j in node list of i\n\n          cindex[pn++] = j; // compute hash for node i\n\n          h += j;\n        } // check for mass elimination\n\n\n        if (d === 0) {\n          // absorb i into k\n          cptr[i] = (0, _csFlip.csFlip)(k);\n          nvi = -W[nv + i]; // |Lk| -= |i|\n\n          dk -= nvi; // |k| += W[nv + i]\n\n          nvk += nvi;\n          nel += nvi;\n          W[nv + i] = 0; // node i is dead\n\n          W[elen + i] = -1;\n        } else {\n          // update degree(i)\n          W[degree + i] = Math.min(W[degree + i], d); // move first node to end\n\n          cindex[pn] = cindex[p3]; // move 1st el. to end of Ei\n\n          cindex[p3] = cindex[p1]; // add k as 1st element in of Ei\n\n          cindex[p1] = k; // new len of adj. list of node i\n\n          W[len + i] = pn - p1 + 1; // finalize hash of i\n\n          h = (h < 0 ? -h : h) % n; // place i in hash bucket\n\n          W[next + i] = W[hhead + h];\n          W[hhead + h] = i; // save hash of i in last[i]\n\n          last[i] = h;\n        }\n      } // finalize |Lk|\n\n\n      W[degree + k] = dk;\n      lemax = Math.max(lemax, dk); // clear w\n\n      mark = _wclear(mark + lemax, lemax, W, w, n); // Supernode detection. Supernode detection relies on the hash function h(i) computed for each node i.\n      // If two nodes have identical adjacency lists, their hash functions wil be identical.\n\n      for (pk = pk1; pk < pk2; pk++) {\n        i = cindex[pk]; // check i is dead, skip it\n\n        if (W[nv + i] >= 0) {\n          continue;\n        } // scan hash bucket of node i\n\n\n        h = last[i];\n        i = W[hhead + h]; // hash bucket will be empty\n\n        W[hhead + h] = -1;\n\n        for (; i !== -1 && W[next + i] !== -1; i = W[next + i], mark++) {\n          ln = W[len + i];\n          eln = W[elen + i];\n\n          for (p = cptr[i] + 1; p <= cptr[i] + ln - 1; p++) {\n            W[w + cindex[p]] = mark;\n          }\n\n          var jlast = i; // compare i with all j\n\n          for (j = W[next + i]; j !== -1;) {\n            var ok = W[len + j] === ln && W[elen + j] === eln;\n\n            for (p = cptr[j] + 1; ok && p <= cptr[j] + ln - 1; p++) {\n              // compare i and j\n              if (W[w + cindex[p]] !== mark) {\n                ok = 0;\n              }\n            } // check i and j are identical\n\n\n            if (ok) {\n              // absorb j into i\n              cptr[j] = (0, _csFlip.csFlip)(i);\n              W[nv + i] += W[nv + j];\n              W[nv + j] = 0; // node j is dead\n\n              W[elen + j] = -1; // delete j from hash bucket\n\n              j = W[next + j];\n              W[next + jlast] = j;\n            } else {\n              // j and i are different\n              jlast = j;\n              j = W[next + j];\n            }\n          }\n        }\n      } // Finalize new element. The elimination of node k is nearly complete. All nodes i in Lk are scanned one last time.\n      // Node i is removed from Lk if it is dead. The flagged status of nv[i] is cleared.\n\n\n      for (p = pk1, pk = pk1; pk < pk2; pk++) {\n        i = cindex[pk]; // check  i is dead, skip it\n\n        if ((nvi = -W[nv + i]) <= 0) {\n          continue;\n        } // restore W[nv + i]\n\n\n        W[nv + i] = nvi; // compute external degree(i)\n\n        d = W[degree + i] + dk - nvi;\n        d = Math.min(d, n - nel - nvi);\n\n        if (W[head + d] !== -1) {\n          last[W[head + d]] = i;\n        } // put i back in degree list\n\n\n        W[next + i] = W[head + d];\n        last[i] = -1;\n        W[head + d] = i; // find new minimum degree\n\n        mindeg = Math.min(mindeg, d);\n        W[degree + i] = d; // place i in Lk\n\n        cindex[p++] = i;\n      } // # nodes absorbed into k\n\n\n      W[nv + k] = nvk; // length of adj list of element k\n\n      if ((W[len + k] = p - pk1) === 0) {\n        // k is a root of the tree\n        cptr[k] = -1; // k is now a dead element\n\n        W[w + k] = 0;\n      }\n\n      if (elenk !== 0) {\n        // free unused space in Lk\n        cnz = p;\n      }\n    } // Postordering. The elimination is complete, but no permutation has been computed. All that is left\n    // of the graph is the assembly tree (ptr) and a set of dead nodes and elements (i is a dead node if\n    // nv[i] is zero and a dead element if nv[i] > 0). It is from this information only that the final permutation\n    // is computed. The tree is restored by unflipping all of ptr.\n    // fix assembly tree\n\n\n    for (i = 0; i < n; i++) {\n      cptr[i] = (0, _csFlip.csFlip)(cptr[i]);\n    }\n\n    for (j = 0; j <= n; j++) {\n      W[head + j] = -1;\n    } // place unordered nodes in lists\n\n\n    for (j = n; j >= 0; j--) {\n      // skip if j is an element\n      if (W[nv + j] > 0) {\n        continue;\n      } // place j in list of its parent\n\n\n      W[next + j] = W[head + cptr[j]];\n      W[head + cptr[j]] = j;\n    } // place elements in lists\n\n\n    for (e = n; e >= 0; e--) {\n      // skip unless e is an element\n      if (W[nv + e] <= 0) {\n        continue;\n      }\n\n      if (cptr[e] !== -1) {\n        // place e in list of its parent\n        W[next + e] = W[head + cptr[e]];\n        W[head + cptr[e]] = e;\n      }\n    } // postorder the assembly tree\n\n\n    for (k = 0, i = 0; i <= n; i++) {\n      if (cptr[i] === -1) {\n        k = (0, _csTdfs.csTdfs)(i, k, W, head, next, P, w);\n      }\n    } // remove last item in array\n\n\n    P.splice(P.length - 1, 1); // return P\n\n    return P;\n  };\n  /**\n   * Creates the matrix that will be used by the approximate minimum degree ordering algorithm. The function accepts the matrix M as input and returns a permutation\n   * vector P. The amd algorithm operates on a symmetrix matrix, so one of three symmetric matrices is formed.\n   *\n   * Order: 0\n   *   A natural ordering P=null matrix is returned.\n   *\n   * Order: 1\n   *   Matrix must be square. This is appropriate for a Cholesky or LU factorization.\n   *   P = M + M'\n   *\n   * Order: 2\n   *   Dense columns from M' are dropped, M recreated from M'. This is appropriatefor LU factorization of unsymmetric matrices.\n   *   P = M' * M\n   *\n   * Order: 3\n   *   This is best used for QR factorization or LU factorization is matrix M has no dense rows. A dense row is a row with more than 10*sqr(columns) entries.\n   *   P = M' * M\n   */\n\n  function _createTargetMatrix(order, a, m, n, dense) {\n    // compute A'\n    var at = transpose(a); // check order = 1, matrix must be square\n\n    if (order === 1 && n === m) {\n      // C = A + A'\n      return add(a, at);\n    } // check order = 2, drop dense columns from M'\n\n\n    if (order === 2) {\n      // transpose arrays\n      var tindex = at._index;\n      var tptr = at._ptr; // new column index\n\n      var p2 = 0; // loop A' columns (rows)\n\n      for (var j = 0; j < m; j++) {\n        // column j of AT starts here\n        var p = tptr[j]; // new column j starts here\n\n        tptr[j] = p2; // skip dense col j\n\n        if (tptr[j + 1] - p > dense) {\n          continue;\n        } // map rows in column j of A\n\n\n        for (var p1 = tptr[j + 1]; p < p1; p++) {\n          tindex[p2++] = tindex[p];\n        }\n      } // finalize AT\n\n\n      tptr[m] = p2; // recreate A from new transpose matrix\n\n      a = transpose(at); // use A' * A\n\n      return multiply(at, a);\n    } // use A' * A, square or rectangular matrix\n\n\n    return multiply(at, a);\n  }\n  /**\n   * Initialize quotient graph. There are four kind of nodes and elements that must be represented:\n   *\n   *  - A live node is a node i (or a supernode) that has not been selected as a pivot nad has not been merged into another supernode.\n   *  - A dead node i is one that has been removed from the graph, having been absorved into r = flip(ptr[i]).\n   *  - A live element e is one that is in the graph, having been formed when node e was selected as the pivot.\n   *  - A dead element e is one that has benn absorved into a subsequent element s = flip(ptr[e]).\n   */\n\n\n  function _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree) {\n    // Initialize quotient graph\n    for (var k = 0; k < n; k++) {\n      W[len + k] = cptr[k + 1] - cptr[k];\n    }\n\n    W[len + n] = 0; // initialize workspace\n\n    for (var i = 0; i <= n; i++) {\n      // degree list i is empty\n      W[head + i] = -1;\n      last[i] = -1;\n      W[next + i] = -1; // hash list i is empty\n\n      W[hhead + i] = -1; // node i is just one node\n\n      W[nv + i] = 1; // node i is alive\n\n      W[w + i] = 1; // Ek of node i is empty\n\n      W[elen + i] = 0; // degree of node i\n\n      W[degree + i] = W[len + i];\n    } // clear w\n\n\n    var mark = _wclear(0, 0, W, w, n); // n is a dead element\n\n\n    W[elen + n] = -2; // n is a root of assembly tree\n\n    cptr[n] = -1; // n is a dead element\n\n    W[w + n] = 0; // return mark\n\n    return mark;\n  }\n  /**\n   * Initialize degree lists. Each node is placed in its degree lists. Nodes of zero degree are eliminated immediately. Nodes with\n   * degree >= dense are alsol eliminated and merged into a placeholder node n, a dead element. Thes nodes will appera last in the\n   * output permutation p.\n   */\n\n\n  function _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next) {\n    // result\n    var nel = 0; // loop columns\n\n    for (var i = 0; i < n; i++) {\n      // degree @ i\n      var d = W[degree + i]; // check node i is empty\n\n      if (d === 0) {\n        // element i is dead\n        W[elen + i] = -2;\n        nel++; // i is a root of assembly tree\n\n        cptr[i] = -1;\n        W[w + i] = 0;\n      } else if (d > dense) {\n        // absorb i into element n\n        W[nv + i] = 0; // node i is dead\n\n        W[elen + i] = -1;\n        nel++;\n        cptr[i] = (0, _csFlip.csFlip)(n);\n        W[nv + n]++;\n      } else {\n        var h = W[head + d];\n\n        if (h !== -1) {\n          last[h] = i;\n        } // put node i in degree list d\n\n\n        W[next + i] = W[head + d];\n        W[head + d] = i;\n      }\n    }\n\n    return nel;\n  }\n\n  function _wclear(mark, lemax, W, w, n) {\n    if (mark < 2 || mark + lemax < 0) {\n      for (var k = 0; k < n; k++) {\n        if (W[w + k] !== 0) {\n          W[w + k] = 1;\n        }\n      }\n\n      mark = 2;\n    } // at this point, W [0..n-1] < mark holds\n\n\n    return mark;\n  }\n\n  function _diag(i, j) {\n    return i !== j;\n  }\n});\nexports.createCsAmd = createCsAmd;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createCsAmd","_factory","_csFkeep","_csFlip","_csTdfs","factory","name","dependencies","_ref","_wclear","mark","lemax","W","w","n","k","_diag","i","j","add","multiply","transpose","csAmd","order","a","asize","_size","m","dense","Math","max","sqrt","min","at","tindex","_index","tptr","_ptr","p2","p","p1","csFkeep","cm","cindex","cptr","cnz","P","nv","next","head","elen","degree","hhead","len","nel","d","csFlip","h","mindeg","k1","k2","pj","ln","nvi","elenk","nvk","dk","pk1","pk2","e","pk","eln","wnvi","pn","dext","p3","p4","nvj","jlast","ok","csTdfs","splice","length"]
}
