{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$matrix$row.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,sDAAA,CAA2E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGnHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,SAAR,CAAoB,IAAK,EAErBC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAEf,KAAIQ,QAAUR,OAAA,CAAQ,iDAAR,CAAd,CAEIS,OAAST,OAAA,CAAQ,gDAAR,CAITM,QAAAA,CAA2B,CAAC,CAAA,CAAGC,MAASG,CAAAA,OAAb,EAFpBC,KAEoB,CADZC,CAAC,OAADA,CAAU,OAAVA,CAAmB,QAAnBA,CAA6B,OAA7BA,CACY,CAA0C,QAAS,CAACC,IAAD,CAAO,CAwCvFC,QAASA,KAAI,CAACT,KAAD,CAAQU,GAAR,CAAa,CAExB,GAA4B,CAA5B;AAAIV,KAAMW,CAAAA,IAAN,EAAaC,CAAAA,MAAjB,CACE,KAAUC,MAAJ,CAAU,0CAAV,CAAN,CAGF,CAAC,CAAA,CAAGT,MAAOU,CAAAA,aAAX,EAA0BJ,GAA1B,CAA+BV,KAAMW,CAAAA,IAAN,EAAA,CAAa,CAAb,CAA/B,CACA,KAAII,YAAcC,KAAA,CAAM,CAAN,CAAShB,KAAMW,CAAAA,IAAN,EAAA,CAAa,CAAb,CAAT,CACdM,IAAAA,CAAQ,IAAIC,KAAJ,CAAUR,GAAV,CAAeK,WAAf,CACZ,OAAOf,MAAMmB,CAAAA,MAAN,CAAaF,GAAb,CATiB,CAxC6D,IACnFG,MAAQZ,IAAKY,CAAAA,KADsE,CAEnFF,MAAQV,IAAKU,CAAAA,KAFsE,CAGnFG,OAASb,IAAKa,CAAAA,MAHqE,CAInFL,MAAQR,IAAKQ,CAAAA,KAuBjB,OAAOI,MAAA,CA7BEd,KA6BF,CAAY,CACjB,iBAAkBG,IADD,CAEjB,gBAAiBa,QAAoB,CAACtB,KAAD,CAAQU,GAAR,CAAa,CAChD,MAAOD,KAAA,CAAKY,MAAA,CAAO,CAAC,CAAA,CAAGlB,OAAQoB,CAAAA,KAAZ,EAAmBvB,KAAnB,CAAP,CAAL,CAAwCU,GAAxC,CAA6Cc,CAAAA,OAA7C,EADyC,CAFjC,CAAZ,CA3BgF,CAA1D,CAoD/B3B,QAAQI,CAAAA,SAAR,CAAoBA,OApE+F;",
"sources":["node_modules/mathjs/lib/cjs/function/matrix/row.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$matrix$row\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createRow = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _object = require(\"../../utils/object.js\");\n\nvar _array = require(\"../../utils/array.js\");\n\nvar name = 'row';\nvar dependencies = ['typed', 'Index', 'matrix', 'range'];\nvar createRow = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      Index = _ref.Index,\n      matrix = _ref.matrix,\n      range = _ref.range;\n\n  /**\n   * Return a row from a Matrix.\n   *\n   * Syntax:\n   *\n   *     math.row(value, index)\n   *\n   * Example:\n   *\n   *     // get a row\n   *     const d = [[1, 2], [3, 4]]\n   *     math.row(d, 1) // returns [[3, 4]]\n   *\n   * See also:\n   *\n   *     column\n   *\n   * @param {Array | Matrix } value   An array or matrix\n   * @param {number} row              The index of the row\n   * @return {Array | Matrix}         The retrieved row\n   */\n  return typed(name, {\n    'Matrix, number': _row,\n    'Array, number': function ArrayNumber(value, row) {\n      return _row(matrix((0, _object.clone)(value)), row).valueOf();\n    }\n  });\n  /**\n   * Retrieve a row of a matrix\n   * @param {Matrix } value  A matrix\n   * @param {number} row     The index of the row\n   * @return {Matrix}        The retrieved row\n   */\n\n  function _row(value, row) {\n    // check dimensions\n    if (value.size().length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    }\n\n    (0, _array.validateIndex)(row, value.size()[0]);\n    var columnRange = range(0, value.size()[1]);\n    var index = new Index(row, columnRange);\n    return value.subset(index);\n  }\n});\nexports.createRow = createRow;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createRow","_factory","_object","_array","factory","name","dependencies","_ref","_row","row","size","length","Error","validateIndex","columnRange","range","index","Index","subset","typed","matrix","ArrayNumber","clone","valueOf"]
}
