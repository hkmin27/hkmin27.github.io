{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$algebra$simplify$simplifyCore.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/function/algebra/simplify/simplifyCore.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$algebra$simplify$simplifyCore\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSimplifyCore = void 0;\n\nvar _is = require(\"../../../utils/is.js\");\n\nvar _factory = require(\"../../../utils/factory.js\");\n\nvar name = 'simplifyCore';\nvar dependencies = ['equal', 'isZero', 'add', 'subtract', 'multiply', 'divide', 'pow', 'ConstantNode', 'OperatorNode', 'FunctionNode', 'ParenthesisNode'];\nvar createSimplifyCore = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var equal = _ref.equal,\n      isZero = _ref.isZero,\n      add = _ref.add,\n      subtract = _ref.subtract,\n      multiply = _ref.multiply,\n      divide = _ref.divide,\n      pow = _ref.pow,\n      ConstantNode = _ref.ConstantNode,\n      OperatorNode = _ref.OperatorNode,\n      FunctionNode = _ref.FunctionNode,\n      ParenthesisNode = _ref.ParenthesisNode;\n  var node0 = new ConstantNode(0);\n  var node1 = new ConstantNode(1);\n  /**\n   * simplifyCore() performs single pass simplification suitable for\n   * applications requiring ultimate performance. In contrast, simplify()\n   * extends simplifyCore() with additional passes to provide deeper\n   * simplification.\n   *\n   * Syntax:\n   *\n   *     simplify.simplifyCore(expr)\n   *\n   * Examples:\n   *\n   *     const f = math.parse('2 * 1 * x ^ (2 - 1)')\n   *     math.simplify.simpifyCore(f)                          // Node {2 * x}\n   *     math.simplify('2 * 1 * x ^ (2 - 1)', [math.simplify.simpifyCore]) // Node {2 * x}\n   *\n   * See also:\n   *\n   *     derivative\n   *\n   * @param {Node} node\n   *     The expression to be simplified\n   */\n\n  function simplifyCore(node) {\n    if ((0, _is.isOperatorNode)(node) && node.isUnary()) {\n      var a0 = simplifyCore(node.args[0]);\n\n      if (node.op === '+') {\n        // unary plus\n        return a0;\n      }\n\n      if (node.op === '-') {\n        // unary minus\n        if ((0, _is.isOperatorNode)(a0)) {\n          if (a0.isUnary() && a0.op === '-') {\n            return a0.args[0];\n          } else if (a0.isBinary() && a0.fn === 'subtract') {\n            return new OperatorNode('-', 'subtract', [a0.args[1], a0.args[0]]);\n          }\n        }\n\n        return new OperatorNode(node.op, node.fn, [a0]);\n      }\n    } else if ((0, _is.isOperatorNode)(node) && node.isBinary()) {\n      var _a = simplifyCore(node.args[0]);\n\n      var a1 = simplifyCore(node.args[1]);\n\n      if (node.op === '+') {\n        if ((0, _is.isConstantNode)(_a)) {\n          if (isZero(_a.value)) {\n            return a1;\n          } else if ((0, _is.isConstantNode)(a1)) {\n            return new ConstantNode(add(_a.value, a1.value));\n          }\n        }\n\n        if ((0, _is.isConstantNode)(a1) && isZero(a1.value)) {\n          return _a;\n        }\n\n        if ((0, _is.isOperatorNode)(a1) && a1.isUnary() && a1.op === '-') {\n          return new OperatorNode('-', 'subtract', [_a, a1.args[0]]);\n        }\n\n        return new OperatorNode(node.op, node.fn, a1 ? [_a, a1] : [_a]);\n      } else if (node.op === '-') {\n        if ((0, _is.isConstantNode)(_a) && a1) {\n          if ((0, _is.isConstantNode)(a1)) {\n            return new ConstantNode(subtract(_a.value, a1.value));\n          } else if (isZero(_a.value)) {\n            return new OperatorNode('-', 'unaryMinus', [a1]);\n          }\n        } // if (node.fn === \"subtract\" && node.args.length === 2) {\n\n\n        if (node.fn === 'subtract') {\n          if ((0, _is.isConstantNode)(a1) && isZero(a1.value)) {\n            return _a;\n          }\n\n          if ((0, _is.isOperatorNode)(a1) && a1.isUnary() && a1.op === '-') {\n            return simplifyCore(new OperatorNode('+', 'add', [_a, a1.args[0]]));\n          }\n\n          return new OperatorNode(node.op, node.fn, [_a, a1]);\n        }\n      } else if (node.op === '*') {\n        if ((0, _is.isConstantNode)(_a)) {\n          if (isZero(_a.value)) {\n            return node0;\n          } else if (equal(_a.value, 1)) {\n            return a1;\n          } else if ((0, _is.isConstantNode)(a1)) {\n            return new ConstantNode(multiply(_a.value, a1.value));\n          }\n        }\n\n        if ((0, _is.isConstantNode)(a1)) {\n          if (isZero(a1.value)) {\n            return node0;\n          } else if (equal(a1.value, 1)) {\n            return _a;\n          } else if ((0, _is.isOperatorNode)(_a) && _a.isBinary() && _a.op === node.op) {\n            var a00 = _a.args[0];\n\n            if ((0, _is.isConstantNode)(a00)) {\n              var a00a1 = new ConstantNode(multiply(a00.value, a1.value));\n              return new OperatorNode(node.op, node.fn, [a00a1, _a.args[1]], node.implicit); // constants on left\n            }\n          }\n\n          return new OperatorNode(node.op, node.fn, [a1, _a], node.implicit); // constants on left\n        }\n\n        return new OperatorNode(node.op, node.fn, [_a, a1], node.implicit);\n      } else if (node.op === '/') {\n        if ((0, _is.isConstantNode)(_a)) {\n          if (isZero(_a.value)) {\n            return node0;\n          } else if ((0, _is.isConstantNode)(a1) && (equal(a1.value, 1) || equal(a1.value, 2) || equal(a1.value, 4))) {\n            return new ConstantNode(divide(_a.value, a1.value));\n          }\n        }\n\n        return new OperatorNode(node.op, node.fn, [_a, a1]);\n      } else if (node.op === '^') {\n        if ((0, _is.isConstantNode)(a1)) {\n          if (isZero(a1.value)) {\n            return node1;\n          } else if (equal(a1.value, 1)) {\n            return _a;\n          } else {\n            if ((0, _is.isConstantNode)(_a)) {\n              // fold constant\n              return new ConstantNode(pow(_a.value, a1.value));\n            } else if ((0, _is.isOperatorNode)(_a) && _a.isBinary() && _a.op === '^') {\n              var a01 = _a.args[1];\n\n              if ((0, _is.isConstantNode)(a01)) {\n                return new OperatorNode(node.op, node.fn, [_a.args[0], new ConstantNode(multiply(a01.value, a1.value))]);\n              }\n            }\n          }\n        }\n\n        return new OperatorNode(node.op, node.fn, [_a, a1]);\n      }\n    } else if ((0, _is.isParenthesisNode)(node)) {\n      var c = simplifyCore(node.content);\n\n      if ((0, _is.isParenthesisNode)(c) || (0, _is.isSymbolNode)(c) || (0, _is.isConstantNode)(c)) {\n        return c;\n      }\n\n      return new ParenthesisNode(c);\n    } else if ((0, _is.isFunctionNode)(node)) {\n      var args = node.args.map(simplifyCore).map(function (arg) {\n        return (0, _is.isParenthesisNode)(arg) ? arg.content : arg;\n      });\n      return new FunctionNode(simplifyCore(node.fn), args);\n    } else {// cannot simplify\n    }\n\n    return node;\n  }\n\n  return simplifyCore;\n});\nexports.createSimplifyCore = createSimplifyCore;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createSimplifyCore","_is","_factory","factory","name","dependencies","_ref","simplifyCore","node","isOperatorNode","isUnary","a0","args","op","isBinary","fn","OperatorNode","_a","a1","isConstantNode","isZero","ConstantNode","add","subtract","node0","equal","multiply","a00","a00a1","implicit","divide","node1","pow","a01","isParenthesisNode","c","content","isSymbolNode","ParenthesisNode","isFunctionNode","map","arg","FunctionNode"]
}
