{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$type$matrix$SparseMatrix.js",
"lineCount":35,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/type/matrix/SparseMatrix.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$type$matrix$SparseMatrix\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSparseMatrixClass = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _number = require(\"../../utils/number.js\");\n\nvar _string = require(\"../../utils/string.js\");\n\nvar _object = require(\"../../utils/object.js\");\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _DimensionError = require(\"../../error/DimensionError.js\");\n\nvar name = 'SparseMatrix';\nvar dependencies = ['typed', 'equalScalar', 'Matrix'];\nvar createSparseMatrixClass = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      equalScalar = _ref.equalScalar,\n      Matrix = _ref.Matrix;\n\n  /**\n   * Sparse Matrix implementation. This type implements a Compressed Column Storage format\n   * for sparse matrices.\n   * @class SparseMatrix\n   */\n  function SparseMatrix(data, datatype) {\n    if (!(this instanceof SparseMatrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (datatype && !(0, _is.isString)(datatype)) {\n      throw new Error('Invalid datatype: ' + datatype);\n    }\n\n    if ((0, _is.isMatrix)(data)) {\n      // create from matrix\n      _createFromMatrix(this, data, datatype);\n    } else if (data && (0, _is.isArray)(data.index) && (0, _is.isArray)(data.ptr) && (0, _is.isArray)(data.size)) {\n      // initialize fields\n      this._values = data.values;\n      this._index = data.index;\n      this._ptr = data.ptr;\n      this._size = data.size;\n      this._datatype = datatype || data.datatype;\n    } else if ((0, _is.isArray)(data)) {\n      // create from array\n      _createFromArray(this, data, datatype);\n    } else if (data) {\n      // unsupported type\n      throw new TypeError('Unsupported type of data (' + (0, _is.typeOf)(data) + ')');\n    } else {\n      // nothing provided\n      this._values = [];\n      this._index = [];\n      this._ptr = [0];\n      this._size = [0, 0];\n      this._datatype = datatype;\n    }\n  }\n\n  function _createFromMatrix(matrix, source, datatype) {\n    // check matrix type\n    if (source.type === 'SparseMatrix') {\n      // clone arrays\n      matrix._values = source._values ? (0, _object.clone)(source._values) : undefined;\n      matrix._index = (0, _object.clone)(source._index);\n      matrix._ptr = (0, _object.clone)(source._ptr);\n      matrix._size = (0, _object.clone)(source._size);\n      matrix._datatype = datatype || source._datatype;\n    } else {\n      // build from matrix data\n      _createFromArray(matrix, source.valueOf(), datatype || source._datatype);\n    }\n  }\n\n  function _createFromArray(matrix, data, datatype) {\n    // initialize fields\n    matrix._values = [];\n    matrix._index = [];\n    matrix._ptr = [];\n    matrix._datatype = datatype; // discover rows & columns, do not use math.size() to avoid looping array twice\n\n    var rows = data.length;\n    var columns = 0; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0;\n\n    if ((0, _is.isString)(datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar; // convert 0 to the same datatype\n\n      zero = typed.convert(0, datatype);\n    } // check we have rows (empty array)\n\n\n    if (rows > 0) {\n      // column index\n      var j = 0;\n\n      do {\n        // store pointer to values index\n        matrix._ptr.push(matrix._index.length); // loop rows\n\n\n        for (var i = 0; i < rows; i++) {\n          // current row\n          var row = data[i]; // check row is an array\n\n          if ((0, _is.isArray)(row)) {\n            // update columns if needed (only on first column)\n            if (j === 0 && columns < row.length) {\n              columns = row.length;\n            } // check row has column\n\n\n            if (j < row.length) {\n              // value\n              var v = row[j]; // check value != 0\n\n              if (!eq(v, zero)) {\n                // store value\n                matrix._values.push(v); // index\n\n\n                matrix._index.push(i);\n              }\n            }\n          } else {\n            // update columns if needed (only on first column)\n            if (j === 0 && columns < 1) {\n              columns = 1;\n            } // check value != 0 (row is a scalar)\n\n\n            if (!eq(row, zero)) {\n              // store value\n              matrix._values.push(row); // index\n\n\n              matrix._index.push(i);\n            }\n          }\n        } // increment index\n\n\n        j++;\n      } while (j < columns);\n    } // store number of values in ptr\n\n\n    matrix._ptr.push(matrix._index.length); // size\n\n\n    matrix._size = [rows, columns];\n  }\n\n  SparseMatrix.prototype = new Matrix();\n  /**\n   * Create a new SparseMatrix\n   */\n\n  SparseMatrix.prototype.createSparseMatrix = function (data, datatype) {\n    return new SparseMatrix(data, datatype);\n  };\n  /**\n   * Attach type information\n   */\n\n\n  SparseMatrix.prototype.type = 'SparseMatrix';\n  SparseMatrix.prototype.isSparseMatrix = true;\n  /**\n   * Get the matrix type\n   *\n   * Usage:\n   *    const matrixType = matrix.getDataType()  // retrieves the matrix type\n   *\n   * @memberOf SparseMatrix\n   * @return {string}   type information; if multiple types are found from the Matrix, it will return \"mixed\"\n   */\n\n  SparseMatrix.prototype.getDataType = function () {\n    return (0, _array.getArrayDataType)(this._values, _is.typeOf);\n  };\n  /**\n   * Get the storage format used by the matrix.\n   *\n   * Usage:\n   *     const format = matrix.storage()   // retrieve storage format\n   *\n   * @memberof SparseMatrix\n   * @return {string}           The storage format.\n   */\n\n\n  SparseMatrix.prototype.storage = function () {\n    return 'sparse';\n  };\n  /**\n   * Get the datatype of the data stored in the matrix.\n   *\n   * Usage:\n   *     const format = matrix.datatype()    // retrieve matrix datatype\n   *\n   * @memberof SparseMatrix\n   * @return {string}           The datatype.\n   */\n\n\n  SparseMatrix.prototype.datatype = function () {\n    return this._datatype;\n  };\n  /**\n   * Create a new SparseMatrix\n   * @memberof SparseMatrix\n   * @param {Array} data\n   * @param {string} [datatype]\n   */\n\n\n  SparseMatrix.prototype.create = function (data, datatype) {\n    return new SparseMatrix(data, datatype);\n  };\n  /**\n   * Get the matrix density.\n   *\n   * Usage:\n   *     const density = matrix.density()                   // retrieve matrix density\n   *\n   * @memberof SparseMatrix\n   * @return {number}           The matrix density.\n   */\n\n\n  SparseMatrix.prototype.density = function () {\n    // rows & columns\n    var rows = this._size[0];\n    var columns = this._size[1]; // calculate density\n\n    return rows !== 0 && columns !== 0 ? this._index.length / (rows * columns) : 0;\n  };\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     const subset = matrix.subset(index)               // retrieve subset\n   *     const value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @memberof SparseMatrix\n   * @param {Index} index\n   * @param {Array | Matrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n\n\n  SparseMatrix.prototype.subset = function (index, replacement, defaultValue) {\n    // check it is a pattern matrix\n    if (!this._values) {\n      throw new Error('Cannot invoke subset on a Pattern only matrix');\n    } // check arguments\n\n\n    switch (arguments.length) {\n      case 1:\n        return _getsubset(this, index);\n      // intentional fall through\n\n      case 2:\n      case 3:\n        return _setsubset(this, index, replacement, defaultValue);\n\n      default:\n        throw new SyntaxError('Wrong number of arguments');\n    }\n  };\n\n  function _getsubset(matrix, idx) {\n    // check idx\n    if (!(0, _is.isIndex)(idx)) {\n      throw new TypeError('Invalid index');\n    }\n\n    var isScalar = idx.isScalar();\n\n    if (isScalar) {\n      // return a scalar\n      return matrix.get(idx.min());\n    } // validate dimensions\n\n\n    var size = idx.size();\n\n    if (size.length !== matrix._size.length) {\n      throw new _DimensionError.DimensionError(size.length, matrix._size.length);\n    } // vars\n\n\n    var i, ii, k, kk; // validate if any of the ranges in the index is out of range\n\n    var min = idx.min();\n    var max = idx.max();\n\n    for (i = 0, ii = matrix._size.length; i < ii; i++) {\n      (0, _array.validateIndex)(min[i], matrix._size[i]);\n      (0, _array.validateIndex)(max[i], matrix._size[i]);\n    } // matrix arrays\n\n\n    var mvalues = matrix._values;\n    var mindex = matrix._index;\n    var mptr = matrix._ptr; // rows & columns dimensions for result matrix\n\n    var rows = idx.dimension(0);\n    var columns = idx.dimension(1); // workspace & permutation vector\n\n    var w = [];\n    var pv = []; // loop rows in resulting matrix\n\n    rows.forEach(function (i, r) {\n      // update permutation vector\n      pv[i] = r[0]; // mark i in workspace\n\n      w[i] = true;\n    }); // result matrix arrays\n\n    var values = mvalues ? [] : undefined;\n    var index = [];\n    var ptr = []; // loop columns in result matrix\n\n    columns.forEach(function (j) {\n      // update ptr\n      ptr.push(index.length); // loop values in column j\n\n      for (k = mptr[j], kk = mptr[j + 1]; k < kk; k++) {\n        // row\n        i = mindex[k]; // check row is in result matrix\n\n        if (w[i] === true) {\n          // push index\n          index.push(pv[i]); // check we need to process values\n\n          if (values) {\n            values.push(mvalues[k]);\n          }\n        }\n      }\n    }); // update ptr\n\n    ptr.push(index.length); // return matrix\n\n    return new SparseMatrix({\n      values: values,\n      index: index,\n      ptr: ptr,\n      size: size,\n      datatype: matrix._datatype\n    });\n  }\n\n  function _setsubset(matrix, index, submatrix, defaultValue) {\n    // check index\n    if (!index || index.isIndex !== true) {\n      throw new TypeError('Invalid index');\n    } // get index size and check whether the index contains a single value\n\n\n    var iSize = index.size();\n    var isScalar = index.isScalar(); // calculate the size of the submatrix, and convert it into an Array if needed\n\n    var sSize;\n\n    if ((0, _is.isMatrix)(submatrix)) {\n      // submatrix size\n      sSize = submatrix.size(); // use array representation\n\n      submatrix = submatrix.toArray();\n    } else {\n      // get submatrix size (array, scalar)\n      sSize = (0, _array.arraySize)(submatrix);\n    } // check index is a scalar\n\n\n    if (isScalar) {\n      // verify submatrix is a scalar\n      if (sSize.length !== 0) {\n        throw new TypeError('Scalar expected');\n      } // set value\n\n\n      matrix.set(index.min(), submatrix, defaultValue);\n    } else {\n      // validate dimensions, index size must be one or two dimensions\n      if (iSize.length !== 1 && iSize.length !== 2) {\n        throw new _DimensionError.DimensionError(iSize.length, matrix._size.length, '<');\n      } // check submatrix and index have the same dimensions\n\n\n      if (sSize.length < iSize.length) {\n        // calculate number of missing outer dimensions\n        var i = 0;\n        var outer = 0;\n\n        while (iSize[i] === 1 && sSize[i] === 1) {\n          i++;\n        }\n\n        while (iSize[i] === 1) {\n          outer++;\n          i++;\n        } // unsqueeze both outer and inner dimensions\n\n\n        submatrix = (0, _array.unsqueeze)(submatrix, iSize.length, outer, sSize);\n      } // check whether the size of the submatrix matches the index size\n\n\n      if (!(0, _object.deepStrictEqual)(iSize, sSize)) {\n        throw new _DimensionError.DimensionError(iSize, sSize, '>');\n      } // offsets\n\n\n      var x0 = index.min()[0];\n      var y0 = index.min()[1]; // submatrix rows and columns\n\n      var m = sSize[0];\n      var n = sSize[1]; // loop submatrix\n\n      for (var x = 0; x < m; x++) {\n        // loop columns\n        for (var y = 0; y < n; y++) {\n          // value at i, j\n          var v = submatrix[x][y]; // invoke set (zero value will remove entry from matrix)\n\n          matrix.set([x + x0, y + y0], v, defaultValue);\n        }\n      }\n    }\n\n    return matrix;\n  }\n  /**\n   * Get a single element from the matrix.\n   * @memberof SparseMatrix\n   * @param {number[]} index   Zero-based index\n   * @return {*} value\n   */\n\n\n  SparseMatrix.prototype.get = function (index) {\n    if (!(0, _is.isArray)(index)) {\n      throw new TypeError('Array expected');\n    }\n\n    if (index.length !== this._size.length) {\n      throw new _DimensionError.DimensionError(index.length, this._size.length);\n    } // check it is a pattern matrix\n\n\n    if (!this._values) {\n      throw new Error('Cannot invoke get on a Pattern only matrix');\n    } // row and column\n\n\n    var i = index[0];\n    var j = index[1]; // check i, j are valid\n\n    (0, _array.validateIndex)(i, this._size[0]);\n    (0, _array.validateIndex)(j, this._size[1]); // find value index\n\n    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index); // check k is prior to next column k and it is in the correct row\n\n\n    if (k < this._ptr[j + 1] && this._index[k] === i) {\n      return this._values[k];\n    }\n\n    return 0;\n  };\n  /**\n   * Replace a single element in the matrix.\n   * @memberof SparseMatrix\n   * @param {number[]} index   Zero-based index\n   * @param {*} v\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be set to zero.\n   * @return {SparseMatrix} self\n   */\n\n\n  SparseMatrix.prototype.set = function (index, v, defaultValue) {\n    if (!(0, _is.isArray)(index)) {\n      throw new TypeError('Array expected');\n    }\n\n    if (index.length !== this._size.length) {\n      throw new _DimensionError.DimensionError(index.length, this._size.length);\n    } // check it is a pattern matrix\n\n\n    if (!this._values) {\n      throw new Error('Cannot invoke set on a Pattern only matrix');\n    } // row and column\n\n\n    var i = index[0];\n    var j = index[1]; // rows & columns\n\n    var rows = this._size[0];\n    var columns = this._size[1]; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0;\n\n    if ((0, _is.isString)(this._datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [this._datatype, this._datatype]) || equalScalar; // convert 0 to the same datatype\n\n      zero = typed.convert(0, this._datatype);\n    } // check we need to resize matrix\n\n\n    if (i > rows - 1 || j > columns - 1) {\n      // resize matrix\n      _resize(this, Math.max(i + 1, rows), Math.max(j + 1, columns), defaultValue); // update rows & columns\n\n\n      rows = this._size[0];\n      columns = this._size[1];\n    } // check i, j are valid\n\n\n    (0, _array.validateIndex)(i, rows);\n    (0, _array.validateIndex)(j, columns); // find value index\n\n    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index); // check k is prior to next column k and it is in the correct row\n\n\n    if (k < this._ptr[j + 1] && this._index[k] === i) {\n      // check value != 0\n      if (!eq(v, zero)) {\n        // update value\n        this._values[k] = v;\n      } else {\n        // remove value from matrix\n        _remove(k, j, this._values, this._index, this._ptr);\n      }\n    } else {\n      // insert value @ (i, j)\n      _insert(k, i, j, v, this._values, this._index, this._ptr);\n    }\n\n    return this;\n  };\n\n  function _getValueIndex(i, top, bottom, index) {\n    // check row is on the bottom side\n    if (bottom - top === 0) {\n      return bottom;\n    } // loop rows [top, bottom[\n\n\n    for (var r = top; r < bottom; r++) {\n      // check we found value index\n      if (index[r] === i) {\n        return r;\n      }\n    } // we did not find row\n\n\n    return top;\n  }\n\n  function _remove(k, j, values, index, ptr) {\n    // remove value @ k\n    values.splice(k, 1);\n    index.splice(k, 1); // update pointers\n\n    for (var x = j + 1; x < ptr.length; x++) {\n      ptr[x]--;\n    }\n  }\n\n  function _insert(k, i, j, v, values, index, ptr) {\n    // insert value\n    values.splice(k, 0, v); // update row for k\n\n    index.splice(k, 0, i); // update column pointers\n\n    for (var x = j + 1; x < ptr.length; x++) {\n      ptr[x]++;\n    }\n  }\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @memberof SparseMatrix\n   * @param {number[] | Matrix} size  The new size the matrix should have.\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n\n\n  SparseMatrix.prototype.resize = function (size, defaultValue, copy) {\n    // validate arguments\n    if (!(0, _is.isCollection)(size)) {\n      throw new TypeError('Array or Matrix expected');\n    } // SparseMatrix input is always 2d, flatten this into 1d if it's indeed a vector\n\n\n    var sizeArray = size.valueOf().map(function (value) {\n      return Array.isArray(value) && value.length === 1 ? value[0] : value;\n    });\n\n    if (sizeArray.length !== 2) {\n      throw new Error('Only two dimensions matrix are supported');\n    } // check sizes\n\n\n    sizeArray.forEach(function (value) {\n      if (!(0, _is.isNumber)(value) || !(0, _number.isInteger)(value) || value < 0) {\n        throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + (0, _string.format)(sizeArray) + ')');\n      }\n    }); // matrix to resize\n\n    var m = copy ? this.clone() : this; // resize matrix\n\n    return _resize(m, sizeArray[0], sizeArray[1], defaultValue);\n  };\n\n  function _resize(matrix, rows, columns, defaultValue) {\n    // value to insert at the time of growing matrix\n    var value = defaultValue || 0; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0;\n\n    if ((0, _is.isString)(matrix._datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar; // convert 0 to the same datatype\n\n      zero = typed.convert(0, matrix._datatype); // convert value to the same datatype\n\n      value = typed.convert(value, matrix._datatype);\n    } // should we insert the value?\n\n\n    var ins = !eq(value, zero); // old columns and rows\n\n    var r = matrix._size[0];\n    var c = matrix._size[1];\n    var i, j, k; // check we need to increase columns\n\n    if (columns > c) {\n      // loop new columns\n      for (j = c; j < columns; j++) {\n        // update matrix._ptr for current column\n        matrix._ptr[j] = matrix._values.length; // check we need to insert matrix._values\n\n        if (ins) {\n          // loop rows\n          for (i = 0; i < r; i++) {\n            // add new matrix._values\n            matrix._values.push(value); // update matrix._index\n\n\n            matrix._index.push(i);\n          }\n        }\n      } // store number of matrix._values in matrix._ptr\n\n\n      matrix._ptr[columns] = matrix._values.length;\n    } else if (columns < c) {\n      // truncate matrix._ptr\n      matrix._ptr.splice(columns + 1, c - columns); // truncate matrix._values and matrix._index\n\n\n      matrix._values.splice(matrix._ptr[columns], matrix._values.length);\n\n      matrix._index.splice(matrix._ptr[columns], matrix._index.length);\n    } // update columns\n\n\n    c = columns; // check we need to increase rows\n\n    if (rows > r) {\n      // check we have to insert values\n      if (ins) {\n        // inserts\n        var n = 0; // loop columns\n\n        for (j = 0; j < c; j++) {\n          // update matrix._ptr for current column\n          matrix._ptr[j] = matrix._ptr[j] + n; // where to insert matrix._values\n\n          k = matrix._ptr[j + 1] + n; // pointer\n\n          var p = 0; // loop new rows, initialize pointer\n\n          for (i = r; i < rows; i++, p++) {\n            // add value\n            matrix._values.splice(k + p, 0, value); // update matrix._index\n\n\n            matrix._index.splice(k + p, 0, i); // increment inserts\n\n\n            n++;\n          }\n        } // store number of matrix._values in matrix._ptr\n\n\n        matrix._ptr[c] = matrix._values.length;\n      }\n    } else if (rows < r) {\n      // deletes\n      var d = 0; // loop columns\n\n      for (j = 0; j < c; j++) {\n        // update matrix._ptr for current column\n        matrix._ptr[j] = matrix._ptr[j] - d; // where matrix._values start for next column\n\n        var k0 = matrix._ptr[j];\n        var k1 = matrix._ptr[j + 1] - d; // loop matrix._index\n\n        for (k = k0; k < k1; k++) {\n          // row\n          i = matrix._index[k]; // check we need to delete value and matrix._index\n\n          if (i > rows - 1) {\n            // remove value\n            matrix._values.splice(k, 1); // remove item from matrix._index\n\n\n            matrix._index.splice(k, 1); // increase deletes\n\n\n            d++;\n          }\n        }\n      } // update matrix._ptr for current column\n\n\n      matrix._ptr[j] = matrix._values.length;\n    } // update matrix._size\n\n\n    matrix._size[0] = rows;\n    matrix._size[1] = columns; // return matrix\n\n    return matrix;\n  }\n  /**\n   * Reshape the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (reshape in place).\n   *\n   * NOTE: This might be better suited to copy by default, instead of modifying\n   *       in place. For now, it operates in place to remain consistent with\n   *       resize().\n   *\n   * @memberof SparseMatrix\n   * @param {number[]} sizes          The new size the matrix should have.\n   * @param {boolean} [copy]          Return a reshaped copy of the matrix\n   *\n   * @return {Matrix}                 The reshaped matrix\n   */\n\n\n  SparseMatrix.prototype.reshape = function (sizes, copy) {\n    // validate arguments\n    if (!(0, _is.isArray)(sizes)) {\n      throw new TypeError('Array expected');\n    }\n\n    if (sizes.length !== 2) {\n      throw new Error('Sparse matrices can only be reshaped in two dimensions');\n    } // check sizes\n\n\n    sizes.forEach(function (value) {\n      if (!(0, _is.isNumber)(value) || !(0, _number.isInteger)(value) || value <= -2 || value === 0) {\n        throw new TypeError('Invalid size, must contain positive integers or -1 ' + '(size: ' + (0, _string.format)(sizes) + ')');\n      }\n    });\n    var currentLength = this._size[0] * this._size[1];\n    sizes = (0, _array.processSizesWildcard)(sizes, currentLength);\n    var newLength = sizes[0] * sizes[1]; // m * n must not change\n\n    if (currentLength !== newLength) {\n      throw new Error('Reshaping sparse matrix will result in the wrong number of elements');\n    } // matrix to reshape\n\n\n    var m = copy ? this.clone() : this; // return unchanged if the same shape\n\n    if (this._size[0] === sizes[0] && this._size[1] === sizes[1]) {\n      return m;\n    } // Convert to COO format (generate a column index)\n\n\n    var colIndex = [];\n\n    for (var i = 0; i < m._ptr.length; i++) {\n      for (var j = 0; j < m._ptr[i + 1] - m._ptr[i]; j++) {\n        colIndex.push(i);\n      }\n    } // Clone the values array\n\n\n    var values = m._values.slice(); // Clone the row index array\n\n\n    var rowIndex = m._index.slice(); // Transform the (row, column) indices\n\n\n    for (var _i = 0; _i < m._index.length; _i++) {\n      var r1 = rowIndex[_i];\n      var c1 = colIndex[_i];\n      var flat = r1 * m._size[1] + c1;\n      colIndex[_i] = flat % sizes[1];\n      rowIndex[_i] = Math.floor(flat / sizes[1]);\n    } // Now reshaping is supposed to preserve the row-major order, BUT these sparse matrices are stored\n    // in column-major order, so we have to reorder the value array now. One option is to use a multisort,\n    // sorting several arrays based on some other array.\n    // OR, we could easily just:\n    // 1. Remove all values from the matrix\n\n\n    m._values.length = 0;\n    m._index.length = 0;\n    m._ptr.length = sizes[1] + 1;\n    m._size = sizes.slice();\n\n    for (var _i2 = 0; _i2 < m._ptr.length; _i2++) {\n      m._ptr[_i2] = 0;\n    } // 2. Re-insert all elements in the proper order (simplified code from SparseMatrix.prototype.set)\n    // This step is probably the most time-consuming\n\n\n    for (var h = 0; h < values.length; h++) {\n      var _i3 = rowIndex[h];\n      var _j = colIndex[h];\n      var v = values[h];\n\n      var k = _getValueIndex(_i3, m._ptr[_j], m._ptr[_j + 1], m._index);\n\n      _insert(k, _i3, _j, v, m._values, m._index, m._ptr);\n    } // The value indices are inserted out of order, but apparently that's... still OK?\n\n\n    return m;\n  };\n  /**\n   * Create a clone of the matrix\n   * @memberof SparseMatrix\n   * @return {SparseMatrix} clone\n   */\n\n\n  SparseMatrix.prototype.clone = function () {\n    var m = new SparseMatrix({\n      values: this._values ? (0, _object.clone)(this._values) : undefined,\n      index: (0, _object.clone)(this._index),\n      ptr: (0, _object.clone)(this._ptr),\n      size: (0, _object.clone)(this._size),\n      datatype: this._datatype\n    });\n    return m;\n  };\n  /**\n   * Retrieve the size of the matrix.\n   * @memberof SparseMatrix\n   * @returns {number[]} size\n   */\n\n\n  SparseMatrix.prototype.size = function () {\n    return this._size.slice(0); // copy the Array\n  };\n  /**\n   * Create a new matrix with the results of the callback function executed on\n   * each entry of the matrix.\n   * @memberof SparseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n   *\n   * @return {SparseMatrix} matrix\n   */\n\n\n  SparseMatrix.prototype.map = function (callback, skipZeros) {\n    // check it is a pattern matrix\n    if (!this._values) {\n      throw new Error('Cannot invoke map on a Pattern only matrix');\n    } // matrix instance\n\n\n    var me = this; // rows and columns\n\n    var rows = this._size[0];\n    var columns = this._size[1]; // invoke callback\n\n    var invoke = function invoke(v, i, j) {\n      // invoke callback\n      return callback(v, [i, j], me);\n    }; // invoke _map\n\n\n    return _map(this, 0, rows - 1, 0, columns - 1, invoke, skipZeros);\n  };\n  /**\n   * Create a new matrix with the results of the callback function executed on the interval\n   * [minRow..maxRow, minColumn..maxColumn].\n   */\n\n\n  function _map(matrix, minRow, maxRow, minColumn, maxColumn, callback, skipZeros) {\n    // result arrays\n    var values = [];\n    var index = [];\n    var ptr = []; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0;\n\n    if ((0, _is.isString)(matrix._datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar; // convert 0 to the same datatype\n\n      zero = typed.convert(0, matrix._datatype);\n    } // invoke callback\n\n\n    var invoke = function invoke(v, x, y) {\n      // invoke callback\n      v = callback(v, x, y); // check value != 0\n\n      if (!eq(v, zero)) {\n        // store value\n        values.push(v); // index\n\n        index.push(x);\n      }\n    }; // loop columns\n\n\n    for (var j = minColumn; j <= maxColumn; j++) {\n      // store pointer to values index\n      ptr.push(values.length); // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n\n      var k0 = matrix._ptr[j];\n      var k1 = matrix._ptr[j + 1];\n\n      if (skipZeros) {\n        // loop k within [k0, k1[\n        for (var k = k0; k < k1; k++) {\n          // row index\n          var i = matrix._index[k]; // check i is in range\n\n          if (i >= minRow && i <= maxRow) {\n            // value @ k\n            invoke(matrix._values[k], i - minRow, j - minColumn);\n          }\n        }\n      } else {\n        // create a cache holding all defined values\n        var _values = {};\n\n        for (var _k = k0; _k < k1; _k++) {\n          var _i4 = matrix._index[_k];\n          _values[_i4] = matrix._values[_k];\n        } // loop over all rows (indexes can be unordered so we can't use that),\n        // and either read the value or zero\n\n\n        for (var _i5 = minRow; _i5 <= maxRow; _i5++) {\n          var value = _i5 in _values ? _values[_i5] : 0;\n          invoke(value, _i5 - minRow, j - minColumn);\n        }\n      }\n    } // store number of values in ptr\n\n\n    ptr.push(values.length); // return sparse matrix\n\n    return new SparseMatrix({\n      values: values,\n      index: index,\n      ptr: ptr,\n      size: [maxRow - minRow + 1, maxColumn - minColumn + 1]\n    });\n  }\n  /**\n   * Execute a callback function on each entry of the matrix.\n   * @memberof SparseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n   */\n\n\n  SparseMatrix.prototype.forEach = function (callback, skipZeros) {\n    // check it is a pattern matrix\n    if (!this._values) {\n      throw new Error('Cannot invoke forEach on a Pattern only matrix');\n    } // matrix instance\n\n\n    var me = this; // rows and columns\n\n    var rows = this._size[0];\n    var columns = this._size[1]; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = this._ptr[j];\n      var k1 = this._ptr[j + 1];\n\n      if (skipZeros) {\n        // loop k within [k0, k1[\n        for (var k = k0; k < k1; k++) {\n          // row index\n          var i = this._index[k]; // value @ k\n\n          callback(this._values[k], [i, j], me);\n        }\n      } else {\n        // create a cache holding all defined values\n        var values = {};\n\n        for (var _k2 = k0; _k2 < k1; _k2++) {\n          var _i6 = this._index[_k2];\n          values[_i6] = this._values[_k2];\n        } // loop over all rows (indexes can be unordered so we can't use that),\n        // and either read the value or zero\n\n\n        for (var _i7 = 0; _i7 < rows; _i7++) {\n          var value = _i7 in values ? values[_i7] : 0;\n          callback(value, [_i7, j], me);\n        }\n      }\n    }\n  };\n  /**\n   * Create an Array with a copy of the data of the SparseMatrix\n   * @memberof SparseMatrix\n   * @returns {Array} array\n   */\n\n\n  SparseMatrix.prototype.toArray = function () {\n    return _toArray(this._values, this._index, this._ptr, this._size, true);\n  };\n  /**\n   * Get the primitive value of the SparseMatrix: a two dimensions array\n   * @memberof SparseMatrix\n   * @returns {Array} array\n   */\n\n\n  SparseMatrix.prototype.valueOf = function () {\n    return _toArray(this._values, this._index, this._ptr, this._size, false);\n  };\n\n  function _toArray(values, index, ptr, size, copy) {\n    // rows and columns\n    var rows = size[0];\n    var columns = size[1]; // result\n\n    var a = []; // vars\n\n    var i, j; // initialize array\n\n    for (i = 0; i < rows; i++) {\n      a[i] = [];\n\n      for (j = 0; j < columns; j++) {\n        a[i][j] = 0;\n      }\n    } // loop columns\n\n\n    for (j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = ptr[j];\n      var k1 = ptr[j + 1]; // loop k within [k0, k1[\n\n      for (var k = k0; k < k1; k++) {\n        // row index\n        i = index[k]; // set value (use one for pattern matrix)\n\n        a[i][j] = values ? copy ? (0, _object.clone)(values[k]) : values[k] : 1;\n      }\n    }\n\n    return a;\n  }\n  /**\n   * Get a string representation of the matrix, with optional formatting options.\n   * @memberof SparseMatrix\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n\n\n  SparseMatrix.prototype.format = function (options) {\n    // rows and columns\n    var rows = this._size[0];\n    var columns = this._size[1]; // density\n\n    var density = this.density(); // rows & columns\n\n    var str = 'Sparse Matrix [' + (0, _string.format)(rows, options) + ' x ' + (0, _string.format)(columns, options) + '] density: ' + (0, _string.format)(density, options) + '\\n'; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = this._ptr[j];\n      var k1 = this._ptr[j + 1]; // loop k within [k0, k1[\n\n      for (var k = k0; k < k1; k++) {\n        // row index\n        var i = this._index[k]; // append value\n\n        str += '\\n    (' + (0, _string.format)(i, options) + ', ' + (0, _string.format)(j, options) + ') ==> ' + (this._values ? (0, _string.format)(this._values[k], options) : 'X');\n      }\n    }\n\n    return str;\n  };\n  /**\n   * Get a string representation of the matrix\n   * @memberof SparseMatrix\n   * @returns {string} str\n   */\n\n\n  SparseMatrix.prototype.toString = function () {\n    return (0, _string.format)(this.toArray());\n  };\n  /**\n   * Get a JSON representation of the matrix\n   * @memberof SparseMatrix\n   * @returns {Object}\n   */\n\n\n  SparseMatrix.prototype.toJSON = function () {\n    return {\n      mathjs: 'SparseMatrix',\n      values: this._values,\n      index: this._index,\n      ptr: this._ptr,\n      size: this._size,\n      datatype: this._datatype\n    };\n  };\n  /**\n   * Get the kth Matrix diagonal.\n   *\n   * @memberof SparseMatrix\n   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.\n   *\n   * @returns {Matrix}                     The matrix vector with the diagonal values.\n   */\n\n\n  SparseMatrix.prototype.diagonal = function (k) {\n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if ((0, _is.isBigNumber)(k)) {\n        k = k.toNumber();\n      } // is must be an integer\n\n\n      if (!(0, _is.isNumber)(k) || !(0, _number.isInteger)(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    }\n\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0; // rows & columns\n\n    var rows = this._size[0];\n    var columns = this._size[1]; // number diagonal values\n\n    var n = Math.min(rows - kSub, columns - kSuper); // diagonal arrays\n\n    var values = [];\n    var index = [];\n    var ptr = []; // initial ptr value\n\n    ptr[0] = 0; // loop columns\n\n    for (var j = kSuper; j < columns && values.length < n; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = this._ptr[j];\n      var k1 = this._ptr[j + 1]; // loop x within [k0, k1[\n\n      for (var x = k0; x < k1; x++) {\n        // row index\n        var i = this._index[x]; // check row\n\n        if (i === j - kSuper + kSub) {\n          // value on this column\n          values.push(this._values[x]); // store row\n\n          index[values.length - 1] = i - kSub; // exit loop\n\n          break;\n        }\n      }\n    } // close ptr\n\n\n    ptr.push(values.length); // return matrix\n\n    return new SparseMatrix({\n      values: values,\n      index: index,\n      ptr: ptr,\n      size: [n, 1]\n    });\n  };\n  /**\n   * Generate a matrix from a JSON object\n   * @memberof SparseMatrix\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"SparseMatrix\", \"values\": [], \"index\": [], \"ptr\": [], \"size\": []}`,\n   *                       where mathjs is optional\n   * @returns {SparseMatrix}\n   */\n\n\n  SparseMatrix.fromJSON = function (json) {\n    return new SparseMatrix(json);\n  };\n  /**\n   * Create a diagonal matrix.\n   *\n   * @memberof SparseMatrix\n   * @param {Array} size                       The matrix size.\n   * @param {number | Array | Matrix } value   The values for the diagonal.\n   * @param {number | BigNumber} [k=0]         The kth diagonal where the vector will be filled in.\n   * @param {number} [defaultValue]            The default value for non-diagonal\n   * @param {string} [datatype]                The Matrix datatype, values must be of this datatype.\n   *\n   * @returns {SparseMatrix}\n   */\n\n\n  SparseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {\n    if (!(0, _is.isArray)(size)) {\n      throw new TypeError('Array expected, size parameter');\n    }\n\n    if (size.length !== 2) {\n      throw new Error('Only two dimensions matrix are supported');\n    } // map size & validate\n\n\n    size = size.map(function (s) {\n      // check it is a big number\n      if ((0, _is.isBigNumber)(s)) {\n        // convert it\n        s = s.toNumber();\n      } // validate arguments\n\n\n      if (!(0, _is.isNumber)(s) || !(0, _number.isInteger)(s) || s < 1) {\n        throw new Error('Size values must be positive integers');\n      }\n\n      return s;\n    }); // validate k if any\n\n    if (k) {\n      // convert BigNumber to a number\n      if ((0, _is.isBigNumber)(k)) {\n        k = k.toNumber();\n      } // is must be an integer\n\n\n      if (!(0, _is.isNumber)(k) || !(0, _number.isInteger)(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    } // equal signature to use\n\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0;\n\n    if ((0, _is.isString)(datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar; // convert 0 to the same datatype\n\n      zero = typed.convert(0, datatype);\n    }\n\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0; // rows and columns\n\n    var rows = size[0];\n    var columns = size[1]; // number of non-zero items\n\n    var n = Math.min(rows - kSub, columns - kSuper); // value extraction function\n\n    var _value; // check value\n\n\n    if ((0, _is.isArray)(value)) {\n      // validate array\n      if (value.length !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid value array length');\n      } // define function\n\n\n      _value = function _value(i) {\n        // return value @ i\n        return value[i];\n      };\n    } else if ((0, _is.isMatrix)(value)) {\n      // matrix size\n      var ms = value.size(); // validate matrix\n\n      if (ms.length !== 1 || ms[0] !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid matrix length');\n      } // define function\n\n\n      _value = function _value(i) {\n        // return value @ i\n        return value.get([i]);\n      };\n    } else {\n      // define function\n      _value = function _value() {\n        // return value\n        return value;\n      };\n    } // create arrays\n\n\n    var values = [];\n    var index = [];\n    var ptr = []; // loop items\n\n    for (var j = 0; j < columns; j++) {\n      // number of rows with value\n      ptr.push(values.length); // diagonal index\n\n      var i = j - kSuper; // check we need to set diagonal value\n\n      if (i >= 0 && i < n) {\n        // get value @ i\n        var v = _value(i); // check for zero\n\n\n        if (!eq(v, zero)) {\n          // column\n          index.push(i + kSub); // add value\n\n          values.push(v);\n        }\n      }\n    } // last value should be number of values\n\n\n    ptr.push(values.length); // create SparseMatrix\n\n    return new SparseMatrix({\n      values: values,\n      index: index,\n      ptr: ptr,\n      size: [rows, columns]\n    });\n  };\n  /**\n   * Swap rows i and j in Matrix.\n   *\n   * @memberof SparseMatrix\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   *\n   * @return {Matrix}        The matrix reference\n   */\n\n\n  SparseMatrix.prototype.swapRows = function (i, j) {\n    // check index\n    if (!(0, _is.isNumber)(i) || !(0, _number.isInteger)(i) || !(0, _is.isNumber)(j) || !(0, _number.isInteger)(j)) {\n      throw new Error('Row index must be positive integers');\n    } // check dimensions\n\n\n    if (this._size.length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    } // validate index\n\n\n    (0, _array.validateIndex)(i, this._size[0]);\n    (0, _array.validateIndex)(j, this._size[0]); // swap rows\n\n    SparseMatrix._swapRows(i, j, this._size[1], this._values, this._index, this._ptr); // return current instance\n\n\n    return this;\n  };\n  /**\n   * Loop rows with data in column j.\n   *\n   * @param {number} j            Column\n   * @param {Array} values        Matrix values\n   * @param {Array} index         Matrix row indeces\n   * @param {Array} ptr           Matrix column pointers\n   * @param {Function} callback   Callback function invoked for every row in column j\n   */\n\n\n  SparseMatrix._forEachRow = function (j, values, index, ptr, callback) {\n    // indeces for column j\n    var k0 = ptr[j];\n    var k1 = ptr[j + 1]; // loop\n\n    for (var k = k0; k < k1; k++) {\n      // invoke callback\n      callback(index[k], values[k]);\n    }\n  };\n  /**\n   * Swap rows x and y in Sparse Matrix data structures.\n   *\n   * @param {number} x         Matrix row index 1\n   * @param {number} y         Matrix row index 2\n   * @param {number} columns   Number of columns in matrix\n   * @param {Array} values     Matrix values\n   * @param {Array} index      Matrix row indeces\n   * @param {Array} ptr        Matrix column pointers\n   */\n\n\n  SparseMatrix._swapRows = function (x, y, columns, values, index, ptr) {\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = ptr[j];\n      var k1 = ptr[j + 1]; // find value index @ x\n\n      var kx = _getValueIndex(x, k0, k1, index); // find value index @ x\n\n\n      var ky = _getValueIndex(y, k0, k1, index); // check both rows exist in matrix\n\n\n      if (kx < k1 && ky < k1 && index[kx] === x && index[ky] === y) {\n        // swap values (check for pattern matrix)\n        if (values) {\n          var v = values[kx];\n          values[kx] = values[ky];\n          values[ky] = v;\n        } // next column\n\n\n        continue;\n      } // check x row exist & no y row\n\n\n      if (kx < k1 && index[kx] === x && (ky >= k1 || index[ky] !== y)) {\n        // value @ x (check for pattern matrix)\n        var vx = values ? values[kx] : undefined; // insert value @ y\n\n        index.splice(ky, 0, y);\n\n        if (values) {\n          values.splice(ky, 0, vx);\n        } // remove value @ x (adjust array index if needed)\n\n\n        index.splice(ky <= kx ? kx + 1 : kx, 1);\n\n        if (values) {\n          values.splice(ky <= kx ? kx + 1 : kx, 1);\n        } // next column\n\n\n        continue;\n      } // check y row exist & no x row\n\n\n      if (ky < k1 && index[ky] === y && (kx >= k1 || index[kx] !== x)) {\n        // value @ y (check for pattern matrix)\n        var vy = values ? values[ky] : undefined; // insert value @ x\n\n        index.splice(kx, 0, x);\n\n        if (values) {\n          values.splice(kx, 0, vy);\n        } // remove value @ y (adjust array index if needed)\n\n\n        index.splice(kx <= ky ? ky + 1 : ky, 1);\n\n        if (values) {\n          values.splice(kx <= ky ? ky + 1 : ky, 1);\n        }\n      }\n    }\n  };\n\n  return SparseMatrix;\n}, {\n  isClass: true\n});\nexports.createSparseMatrixClass = createSparseMatrixClass;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createSparseMatrixClass","_is","_number","_string","_object","_array","_factory","_DimensionError","factory","name","dependencies","_ref","SparseMatrix","data","datatype","SyntaxError","isString","Error","isMatrix","type","matrix","_values","clone","undefined","_index","_ptr","_size","_datatype","_createFromArray","valueOf","isArray","index","ptr","size","values","TypeError","typeOf","rows","length","columns","eq","equalScalar","zero","typed","find","convert","j","push","i","row","v","_getsubset","idx","isIndex","isScalar","get","min","DimensionError","ii","k","kk","max","validateIndex","mvalues","mindex","mptr","dimension","w","pv","forEach","r","_getValueIndex","top","bottom","_insert","splice","x","_resize","defaultValue","ins","c","n","p","d","k1","k0","_map","minRow","maxRow","minColumn","maxColumn","callback","skipZeros","invoke","y","_k","_i4","_i5","_toArray","copy","a","prototype","Matrix","createSparseMatrix","SparseMatrix.prototype.createSparseMatrix","isSparseMatrix","getDataType","SparseMatrix.prototype.getDataType","getArrayDataType","storage","SparseMatrix.prototype.storage","SparseMatrix.prototype.datatype","create","SparseMatrix.prototype.create","density","SparseMatrix.prototype.density","subset","SparseMatrix.prototype.subset","replacement","arguments","iSize","submatrix","sSize","toArray","arraySize","set","outer","unsqueeze","deepStrictEqual","x0","y0","m","SparseMatrix.prototype.get","SparseMatrix.prototype.set","Math","resize","SparseMatrix.prototype.resize","isCollection","sizeArray","map","Array","isNumber","isInteger","format","reshape","SparseMatrix.prototype.reshape","sizes","currentLength","processSizesWildcard","colIndex","slice","rowIndex","_i","flat","r1","c1","floor","_i2","h","_i3","_j","SparseMatrix.prototype.clone","SparseMatrix.prototype.size","SparseMatrix.prototype.map","me","SparseMatrix.prototype.forEach","_k2","_i6","_i7","SparseMatrix.prototype.toArray","SparseMatrix.prototype.valueOf","SparseMatrix.prototype.format","options","str","toString","SparseMatrix.prototype.toString","toJSON","SparseMatrix.prototype.toJSON","mathjs","diagonal","SparseMatrix.prototype.diagonal","isBigNumber","toNumber","kSuper","kSub","fromJSON","SparseMatrix.fromJSON","json","SparseMatrix.diagonal","s","_value","ms","swapRows","SparseMatrix.prototype.swapRows","_swapRows","_forEachRow","SparseMatrix._forEachRow","SparseMatrix._swapRows","kx","ky","vx","vy","isClass"]
}
