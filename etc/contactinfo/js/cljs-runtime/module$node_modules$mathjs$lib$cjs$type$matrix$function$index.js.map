{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$type$matrix$function$index.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,6DAAA,CAAkF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG1HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,WAAR,CAAsB,IAAK,EAEvBC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAEf,KAAIQ,IAAMR,OAAA,CAAQ,6CAAR,CAINM,QAAAA,CAA6B,CAAC,CAAA,CAAGC,MAASE,CAAAA,OAAb,EAFtBC,OAEsB,CADdC,CAAC,OAADA,CAAU,OAAVA,CACc,CAA0C,QAAS,CAACC,IAAD,CAAO,CAAA,IACrFC,MAAQD,IAAKC,CAAAA,KADwE,CAErFC,MAAQF,IAAKE,CAAAA,KAmCjB,OAAOD,MAAA,CAvCEH,OAuCF,CAAY,CACjB,0DAA2DK,QAA8C,CAACC,IAAD,CAAO,CAC1GC,IAAAA;AAASD,IAAKE,CAAAA,GAAL,CAAS,QAAS,CAACC,GAAD,CAAM,CACnC,MAAI,CAAC,CAAA,CAAGX,GAAIY,CAAAA,WAAR,EAAqBD,GAArB,CAAJ,CACSA,GAAIE,CAAAA,QAAJ,EADT,CAEWC,KAAMC,CAAAA,OAAN,CAAcJ,GAAd,CAAJ,EAA0B,CAAC,CAAA,CAAGX,GAAIgB,CAAAA,QAAR,EAAkBL,GAAlB,CAA1B,CACEA,GAAID,CAAAA,GAAJ,CAAQ,QAAS,CAACO,IAAD,CAAO,CAE7B,MAAO,CAAC,CAAA,CAAGjB,GAAIY,CAAAA,WAAR,EAAqBK,IAArB,CAAA,CAA6BA,IAAKJ,CAAAA,QAAL,EAA7B,CAA+CI,IAFzB,CAAxB,CADF,CAMEN,GAT0B,CAAxB,CAYb,KAAIO,IAAM,IAAIZ,KACdA,MAAMa,CAAAA,KAAN,CAAYD,GAAZ,CAAiBT,IAAjB,CACA,OAAOS,IAfuG,CAD/F,CAAZ,CArCkF,CAA1D,CAyDjCxB,QAAQI,CAAAA,WAAR,CAAsBA,OAvEoG;",
"sources":["node_modules/mathjs/lib/cjs/type/matrix/function/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$type$matrix$function$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createIndex = void 0;\n\nvar _factory = require(\"../../../utils/factory.js\");\n\nvar _is = require(\"../../../utils/is.js\");\n\nvar name = 'index';\nvar dependencies = ['typed', 'Index'];\nvar createIndex = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      Index = _ref.Index;\n\n  /**\n   * Create an index. An Index can store ranges having start, step, and end\n   * for multiple dimensions.\n   * Matrix.get, Matrix.set, and math.subset accept an Index as input.\n   *\n   * Syntax:\n   *\n   *     math.index(range1, range2, ...)\n   *\n   * Where each range can be any of:\n   *\n   * - A number\n   * - A string for getting/setting an object property\n   * - An instance of `Range`\n   * - A one-dimensional Array or a Matrix with numbers\n   *\n   * Indexes must be zero-based, integer numbers.\n   *\n   * Examples:\n   *\n   *    const b = [1, 2, 3, 4, 5]\n   *    math.subset(b, math.index([1, 2, 3]))     // returns [2, 3, 4]\n   *\n   *    const a = math.matrix([[1, 2], [3, 4]])\n   *    a.subset(math.index(0, 1))             // returns 2\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, matrix, number, string, unit\n   *\n   * @param {...*} ranges   Zero or more ranges or numbers.\n   * @return {Index}        Returns the created index\n   */\n  return typed(name, {\n    '...number | string | BigNumber | Range | Array | Matrix': function numberStringBigNumberRangeArrayMatrix(args) {\n      var ranges = args.map(function (arg) {\n        if ((0, _is.isBigNumber)(arg)) {\n          return arg.toNumber(); // convert BigNumber to Number\n        } else if (Array.isArray(arg) || (0, _is.isMatrix)(arg)) {\n          return arg.map(function (elem) {\n            // convert BigNumber to Number\n            return (0, _is.isBigNumber)(elem) ? elem.toNumber() : elem;\n          });\n        } else {\n          return arg;\n        }\n      });\n      var res = new Index();\n      Index.apply(res, ranges);\n      return res;\n    }\n  });\n});\nexports.createIndex = createIndex;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createIndex","_factory","_is","factory","name","dependencies","_ref","typed","Index","numberStringBigNumberRangeArrayMatrix","args","ranges","map","arg","isBigNumber","toNumber","Array","isArray","isMatrix","elem","res","apply"]
}
