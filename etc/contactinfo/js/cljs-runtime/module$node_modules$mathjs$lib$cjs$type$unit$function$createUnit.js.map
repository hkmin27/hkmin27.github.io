{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$type$unit$function$createUnit.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,gEAAA,CAAqF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG7HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,gBAAR,CAA2B,IAAK,EAE5BC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAIXM,OAAAA,CAAkC,CAAC,CAAA,CAAGC,MAASC,CAAAA,OAAb,EAF3BC,YAE2B,CADnBC,CAAC,OAADA,CAAU,MAAVA,CACmB,CAA0C,QAAS,CAACC,IAAD,CAAO,CAAA,IAC1FC,MAAQD,IAAKC,CAAAA,KAD6E,CAE1FC,KAAOF,IAAKE,CAAAA,IA2ChB,OAAOD,MAAA,CA/CEH,YA+CF,CAAY,CAEjB,iBAAkBK,QAAqB,CAACC,GAAD,CAAMC,OAAN,CAAe,CACpD,MAAOH,KAAKI,CAAAA,UAAL,CAAgBF,GAAhB,CAAqBC,OAArB,CAD6C,CAFrC,CAMjBb,OAAQA,QAAe,CAACY,GAAD,CAAM,CAC3B,MAAOF,KAAKI,CAAAA,UAAL,CAAgBF,GAAhB;AAAqB,EAArB,CADoB,CANZ,CAUjB,yCAA0CG,QAAqC,CAACT,IAAD,CAAOU,GAAP,CAAYH,OAAZ,CAAqB,CAClG,IAAID,IAAM,EACVA,IAAA,CAAIN,IAAJ,CAAA,CAAYU,GACZ,OAAON,KAAKI,CAAAA,UAAL,CAAgBF,GAAhB,CAAqBC,OAArB,CAH2F,CAVnF,CAgBjB,iCAAkCI,QAA+B,CAACX,IAAD,CAAOU,GAAP,CAAY,CAC3E,IAAIJ,IAAM,EACVA,IAAA,CAAIN,IAAJ,CAAA,CAAYU,GACZ,OAAON,KAAKI,CAAAA,UAAL,CAAgBF,GAAhB,CAAqB,EAArB,CAHoE,CAhB5D,CAsBjBM,OAAQA,QAAe,CAACZ,IAAD,CAAO,CAC5B,IAAIM,IAAM,EACVA,IAAA,CAAIN,IAAJ,CAAA,CAAY,EACZ,OAAOI,KAAKI,CAAAA,UAAL,CAAgBF,GAAhB,CAAqB,EAArB,CAHqB,CAtBb,CAAZ,CA7CuF,CAA1D,CA0EtCb,QAAQI,CAAAA,gBAAR,CAA2BA,MAtFkG;",
"sources":["node_modules/mathjs/lib/cjs/type/unit/function/createUnit.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$type$unit$function$createUnit\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCreateUnit = void 0;\n\nvar _factory = require(\"../../../utils/factory.js\");\n\nvar name = 'createUnit';\nvar dependencies = ['typed', 'Unit'];\nvar createCreateUnit = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      Unit = _ref.Unit;\n\n  /**\n   * Create a user-defined unit and register it with the Unit type.\n   *\n   * Syntax:\n   *\n   *     math.createUnit({\n   *       baseUnit1: {\n   *         aliases: [string, ...]\n   *         prefixes: object\n   *       },\n   *       unit2: {\n   *         definition: string,\n   *         aliases: [string, ...]\n   *         prefixes: object,\n   *         offset: number\n   *       },\n   *       unit3: string    // Shortcut\n   *     })\n   *\n   *     // Another shortcut:\n   *     math.createUnit(string, unit : string, [object])\n   *\n   * Examples:\n   *\n   *     math.createUnit('foo')\n   *     math.createUnit('knot', {definition: '0.514444444 m/s', aliases: ['knots', 'kt', 'kts']})\n   *     math.createUnit('mph', '1 mile/hour')\n   *\n   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'\n   * @param {string, Unit} definition      Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.\n   * @param {Object} options   (optional) An object containing any of the following properties:\n   *     - `prefixes {string}` \"none\", \"short\", \"long\", \"binary_short\", or \"binary_long\". The default is \"none\".\n   *     - `aliases {Array}` Array of strings. Example: ['knots', 'kt', 'kts']\n   *     - `offset {Numeric}` An offset to apply when converting from the unit. For example, the offset for celsius is 273.15. Default is 0.\n   *\n   * See also:\n   *\n   *     unit\n   *\n   * @return {Unit} The new unit\n   */\n  return typed(name, {\n    // General function signature. First parameter is an object where each property is the definition of a new unit. The object keys are the unit names and the values are the definitions. The values can be objects, strings, or Units. If a property is an empty object or an empty string, a new base unit is created. The second parameter is the options.\n    'Object, Object': function ObjectObject(obj, options) {\n      return Unit.createUnit(obj, options);\n    },\n    // Same as above but without the options.\n    Object: function Object(obj) {\n      return Unit.createUnit(obj, {});\n    },\n    // Shortcut method for creating one unit.\n    'string, Unit | string | Object, Object': function stringUnitStringObjectObject(name, def, options) {\n      var obj = {};\n      obj[name] = def;\n      return Unit.createUnit(obj, options);\n    },\n    // Same as above but without the options.\n    'string, Unit | string | Object': function stringUnitStringObject(name, def) {\n      var obj = {};\n      obj[name] = def;\n      return Unit.createUnit(obj, {});\n    },\n    // Without a definition, creates a base unit.\n    string: function string(name) {\n      var obj = {};\n      obj[name] = {};\n      return Unit.createUnit(obj, {});\n    }\n  });\n});\nexports.createCreateUnit = createCreateUnit;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createCreateUnit","_factory","factory","name","dependencies","_ref","typed","Unit","ObjectObject","obj","options","createUnit","stringUnitStringObjectObject","def","stringUnitStringObject","string"]
}
