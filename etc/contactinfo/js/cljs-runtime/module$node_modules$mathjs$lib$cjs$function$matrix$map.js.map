{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$matrix$map.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,sDAAA,CAA2E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA0DnHC,QAASA,KAAI,CAACC,KAAD,CAAQC,QAAR,CAAkB,CAE7B,IAAIC,KAAO,CAAC,CAAA,CAAGC,SAAUC,CAAAA,gBAAd,EAAgCH,QAAhC,CAqBX,OAnBcI,SAASA,QAAO,CAACC,KAAD,CAAQC,KAAR,CAAe,CAC3C,MAAIC,MAAMC,CAAAA,OAAN,CAAcH,KAAd,CAAJ,CACSA,KAAMI,CAAAA,GAAN,CAAU,QAAS,CAACC,KAAD,CAAQC,CAAR,CAAW,CAEnC,MAAOP,QAAA,CAAQM,KAAR,CAAeJ,KAAMM,CAAAA,MAAN,CAAaD,CAAb,CAAf,CAF4B,CAA9B,CADT,CAOe,CAAb,GAAIV,IAAJ,CACSD,QAAA,CAASK,KAAT,CADT,CAEoB,CAAb,GAAIJ,IAAJ,CACED,QAAA,CAASK,KAAT,CAAgBC,KAAhB,CADF,CAIEN,QAAA,CAASK,KAAT,CAAgBC,KAAhB,CAAuBP,KAAvB,CAdgC,CAmBtC,CAAQA,KAAR,CAAe,EAAf,CAvBsB,CAvD/Bc,MAAOC,CAAAA,cAAP,CAAsBjB,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CQ,MAAO,CAAA,CADoC,CAA7C,CAGAR,QAAQkB,CAAAA,SAAR,CAAoB,IAAK,EAEzB,KAAIb;AAAYP,OAAA,CAAQ,mDAAR,CAEZqB,OAAAA,CAAWrB,OAAA,CAAQ,kDAAR,CAIXoB,OAAAA,CAA2B,CAAC,CAAA,CAAGC,MAASC,CAAAA,OAAb,EAFpBC,KAEoB,CADZC,CAAC,OAADA,CACY,CAA0C,QAAS,CAACC,IAAD,CAAO,CACnFC,IAAAA,CAAQD,IAAKC,CAAAA,KA0BjB,OAAOA,KAAA,CA7BEH,KA6BF,CAAY,CACjB,kBAAmBpB,IADF,CAEjB,mBAAoBwB,QAAuB,CAACC,CAAD,CAAIvB,QAAJ,CAAc,CACvD,MAAOuB,EAAEd,CAAAA,GAAF,CAAMT,QAAN,CADgD,CAFxC,CAAZ,CA3BgF,CAA1D,CA0C/BH,QAAQkB,CAAAA,SAAR,CAAoBA,MAxD+F;",
"sources":["node_modules/mathjs/lib/cjs/function/matrix/map.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$matrix$map\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMap = void 0;\n\nvar _function = require(\"../../utils/function.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'map';\nvar dependencies = ['typed'];\nvar createMap = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Create a new matrix or array with the results of the callback function executed on\n   * each entry of the matrix/array.\n   *\n   * Syntax:\n   *\n   *    math.map(x, callback)\n   *\n   * Examples:\n   *\n   *    math.map([1, 2, 3], function(value) {\n   *      return value * value\n   *    })  // returns [1, 4, 9]\n   *\n   * See also:\n   *\n   *    filter, forEach, sort\n   *\n   * @param {Matrix | Array} x    The matrix to iterate on.\n   * @param {Function} callback   The callback method is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the matrix being traversed.\n   * @return {Matrix | array}     Transformed map of x\n   */\n  return typed(name, {\n    'Array, function': _map,\n    'Matrix, function': function MatrixFunction(x, callback) {\n      return x.map(callback);\n    }\n  });\n});\n/**\n * Map for a multi dimensional array\n * @param {Array} array\n * @param {Function} callback\n * @return {Array}\n * @private\n */\n\nexports.createMap = createMap;\n\nfunction _map(array, callback) {\n  // figure out what number of arguments the callback function expects\n  var args = (0, _function.maxArgumentCount)(callback);\n\n  var recurse = function recurse(value, index) {\n    if (Array.isArray(value)) {\n      return value.map(function (child, i) {\n        // we create a copy of the index array and append the new index value\n        return recurse(child, index.concat(i));\n      });\n    } else {\n      // invoke the callback function with the right number of arguments\n      if (args === 1) {\n        return callback(value);\n      } else if (args === 2) {\n        return callback(value, index);\n      } else {\n        // 3 or -1\n        return callback(value, index, array);\n      }\n    }\n  };\n\n  return recurse(array, []);\n}\n};"],
"names":["shadow$provide","global","require","module","exports","_map","array","callback","args","_function","maxArgumentCount","recurse","value","index","Array","isArray","map","child","i","concat","Object","defineProperty","createMap","_factory","factory","name","dependencies","_ref","typed","MatrixFunction","x"]
}
