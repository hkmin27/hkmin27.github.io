shadow$provide.module$node_modules$mathjs$lib$cjs$expression$node$OperatorNode=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.createOperatorNode=void 0;var _is=require("module$node_modules$mathjs$lib$cjs$utils$is"),_array=require("module$node_modules$mathjs$lib$cjs$utils$array"),_string=require("module$node_modules$mathjs$lib$cjs$utils$string"),_customs=require("module$node_modules$mathjs$lib$cjs$utils$customs"),_operators=require("module$node_modules$mathjs$lib$cjs$expression$operators"),
_latex=require("module$node_modules$mathjs$lib$cjs$utils$latex");global=require("module$node_modules$mathjs$lib$cjs$utils$factory");global=(0,global.factory)("OperatorNode",["Node"],function(_ref){function OperatorNode(op,fn,args,implicit){if(!(this instanceof OperatorNode))throw new SyntaxError("Constructor must be called with the new operator");if("string"!==typeof op)throw new TypeError('string expected for parameter "op"');if("string"!==typeof fn)throw new TypeError('string expected for parameter "fn"');
if(!Array.isArray(args)||!args.every(_is.isNode))throw new TypeError('Array containing Nodes expected for parameter "args"');this.implicit=!0===implicit;this.op=op;this.fn=fn;this.args=args||[]}function calculateNecessaryParentheses(root,parenthesis,implicit,args,latex){var precedence=(0,_operators.getPrecedence)(root,parenthesis),associativity=(0,_operators.getAssociativity)(root,parenthesis);if("all"===parenthesis||2<args.length&&"OperatorNode:add"!==root.getIdentifier()&&"OperatorNode:multiply"!==
root.getIdentifier())return args.map(function(arg){switch(arg.getContent().type){case "ArrayNode":case "ConstantNode":case "SymbolNode":case "ParenthesisNode":return!1;default:return!0}});switch(args.length){case 0:var result=[];break;case 1:var operandPrecedence=(0,_operators.getPrecedence)(args[0],parenthesis);if(latex&&null!==operandPrecedence){if("keep"===parenthesis){var operandIdentifier=args[0].getIdentifier();var rootIdentifier=root.getIdentifier()}else operandIdentifier=args[0].getContent().getIdentifier(),
rootIdentifier=root.getContent().getIdentifier();if(!1===_operators.properties[precedence][rootIdentifier].latexLeftParens){result=[!1];break}if(!1===_operators.properties[operandPrecedence][operandIdentifier].latexParens){result=[!1];break}}if(null===operandPrecedence){result=[!1];break}if(operandPrecedence<=precedence){result=[!0];break}result=[!1];break;case 2:operandPrecedence=(0,_operators.getPrecedence)(args[0],parenthesis);operandIdentifier=(0,_operators.isAssociativeWith)(root,args[0],parenthesis);
operandIdentifier=null===operandPrecedence?!1:operandPrecedence!==precedence||"right"!==associativity||operandIdentifier?operandPrecedence<precedence?!0:!1:!0;rootIdentifier=(0,_operators.getPrecedence)(args[1],parenthesis);var rhsParens=(0,_operators.isAssociativeWith)(root,args[1],parenthesis);rhsParens=null===rootIdentifier?!1:rootIdentifier!==precedence||"left"!==associativity||rhsParens?rootIdentifier<precedence?!0:!1:!0;if(latex){if("keep"===parenthesis){latex=root.getIdentifier();var lhsIdentifier=
root.args[0].getIdentifier();var rhsIdentifier=root.args[1].getIdentifier()}else latex=root.getContent().getIdentifier(),lhsIdentifier=root.args[0].getContent().getIdentifier(),rhsIdentifier=root.args[1].getContent().getIdentifier();null!==operandPrecedence&&(!1===_operators.properties[precedence][latex].latexLeftParens&&(operandIdentifier=!1),!1===_operators.properties[operandPrecedence][lhsIdentifier].latexParens&&(operandIdentifier=!1));null!==rootIdentifier&&(!1===_operators.properties[precedence][latex].latexRightParens&&
(rhsParens=!1),!1===_operators.properties[rootIdentifier][rhsIdentifier].latexParens&&(rhsParens=!1))}result=[operandIdentifier,rhsParens];break;default:if("OperatorNode:add"===root.getIdentifier()||"OperatorNode:multiply"===root.getIdentifier())result=args.map(function(arg){var argPrecedence=(0,_operators.getPrecedence)(arg,parenthesis),assocWithArg=(0,_operators.isAssociativeWith)(root,arg,parenthesis);arg=(0,_operators.getAssociativity)(arg,parenthesis);return null!==argPrecedence&&(precedence===
argPrecedence&&associativity===arg&&!assocWithArg||argPrecedence<precedence)?!0:!1})}2<=args.length&&"OperatorNode:multiply"===root.getIdentifier()&&root.implicit&&"auto"===parenthesis&&"hide"===implicit&&(result=args.map(function(arg,index){arg="ParenthesisNode"===arg.getIdentifier();return result[index]||arg?!0:!1}));return result}OperatorNode.prototype=new _ref.Node;OperatorNode.prototype.type="OperatorNode";OperatorNode.prototype.isOperatorNode=!0;OperatorNode.prototype._compile=function(math,
argNames){if("string"!==typeof this.fn||!(0,_customs.isSafeMethod)(math,this.fn)){if(math[this.fn])throw Error('No access to function "'+this.fn+'"');throw Error("Function "+this.fn+' missing in provided namespace "math"');}var fn=(0,_customs.getSafeProperty)(math,this.fn),evalArgs=(0,_array.map)(this.args,function(arg){return arg._compile(math,argNames)});if(1===evalArgs.length){var evalArg0=evalArgs[0];return function(scope,args,context){return fn(evalArg0(scope,args,context))}}if(2===evalArgs.length){var _evalArg=
evalArgs[0],evalArg1=evalArgs[1];return function(scope,args,context){return fn(_evalArg(scope,args,context),evalArg1(scope,args,context))}}return function(scope,args,context){return fn.apply(null,(0,_array.map)(evalArgs,function(evalArg){return evalArg(scope,args,context)}))}};OperatorNode.prototype.forEach=function(callback){for(var i=0;i<this.args.length;i++)callback(this.args[i],"args["+i+"]",this)};OperatorNode.prototype.map=function(callback){for(var args=[],i=0;i<this.args.length;i++)args[i]=
this._ifNode(callback(this.args[i],"args["+i+"]",this));return new OperatorNode(this.op,this.fn,args,this.implicit)};OperatorNode.prototype.clone=function(){return new OperatorNode(this.op,this.fn,this.args.slice(0),this.implicit)};OperatorNode.prototype.isUnary=function(){return 1===this.args.length};OperatorNode.prototype.isBinary=function(){return 2===this.args.length};OperatorNode.prototype._toString=function(options){var parenthesis=options&&options.parenthesis?options.parenthesis:"keep",implicit=
options&&options.implicit?options.implicit:"hide",args=this.args,parens=calculateNecessaryParentheses(this,parenthesis,implicit,args,!1);return 1===args.length?(implicit=(0,_operators.getAssociativity)(this,parenthesis),args=args[0].toString(options),parens[0]&&(args="("+args+")"),parenthesis=/[a-zA-Z]+/.test(this.op),"right"===implicit?this.op+(parenthesis?" ":"")+args:"left"===implicit?args+(parenthesis?" ":"")+this.op:args+this.op):2===args.length?(parenthesis=args[0].toString(options),args=args[1].toString(options),
parens[0]&&(parenthesis="("+parenthesis+")"),parens[1]&&(args="("+args+")"),this.implicit&&"OperatorNode:multiply"===this.getIdentifier()&&"hide"===implicit?parenthesis+" "+args:parenthesis+" "+this.op+" "+args):2<args.length&&("OperatorNode:add"===this.getIdentifier()||"OperatorNode:multiply"===this.getIdentifier())?(args=args.map(function(arg,index){arg=arg.toString(options);parens[index]&&(arg="("+arg+")");return arg}),this.implicit&&"OperatorNode:multiply"===this.getIdentifier()&&"hide"===implicit?
args.join(" "):args.join(" "+this.op+" ")):this.fn+"("+this.args.join(", ")+")"};OperatorNode.prototype.toJSON=function(){return{mathjs:"OperatorNode",op:this.op,fn:this.fn,args:this.args,implicit:this.implicit}};OperatorNode.fromJSON=function(json){return new OperatorNode(json.op,json.fn,json.args,json.implicit)};OperatorNode.prototype.toHTML=function(options){var parenthesis=options&&options.parenthesis?options.parenthesis:"keep",implicit=options&&options.implicit?options.implicit:"hide",args=this.args,
parens=calculateNecessaryParentheses(this,parenthesis,implicit,args,!1);if(1===args.length)return implicit=(0,_operators.getAssociativity)(this,parenthesis),args=args[0].toHTML(options),parens[0]&&(args='\x3cspan class\x3d"math-parenthesis math-round-parenthesis"\x3e(\x3c/span\x3e'+args+'\x3cspan class\x3d"math-parenthesis math-round-parenthesis"\x3e)\x3c/span\x3e'),"right"===implicit?'\x3cspan class\x3d"math-operator math-unary-operator math-lefthand-unary-operator"\x3e'+(0,_string.escape)(this.op)+
"\x3c/span\x3e"+args:args+'\x3cspan class\x3d"math-operator math-unary-operator math-righthand-unary-operator"\x3e'+(0,_string.escape)(this.op)+"\x3c/span\x3e";if(2===args.length)return parenthesis=args[0].toHTML(options),args=args[1].toHTML(options),parens[0]&&(parenthesis='\x3cspan class\x3d"math-parenthesis math-round-parenthesis"\x3e(\x3c/span\x3e'+parenthesis+'\x3cspan class\x3d"math-parenthesis math-round-parenthesis"\x3e)\x3c/span\x3e'),parens[1]&&(args='\x3cspan class\x3d"math-parenthesis math-round-parenthesis"\x3e(\x3c/span\x3e'+
args+'\x3cspan class\x3d"math-parenthesis math-round-parenthesis"\x3e)\x3c/span\x3e'),this.implicit&&"OperatorNode:multiply"===this.getIdentifier()&&"hide"===implicit?parenthesis+'\x3cspan class\x3d"math-operator math-binary-operator math-implicit-binary-operator"\x3e\x3c/span\x3e'+args:parenthesis+'\x3cspan class\x3d"math-operator math-binary-operator math-explicit-binary-operator"\x3e'+(0,_string.escape)(this.op)+"\x3c/span\x3e"+args;parenthesis=args.map(function(arg,index){arg=arg.toHTML(options);
parens[index]&&(arg='\x3cspan class\x3d"math-parenthesis math-round-parenthesis"\x3e(\x3c/span\x3e'+arg+'\x3cspan class\x3d"math-parenthesis math-round-parenthesis"\x3e)\x3c/span\x3e');return arg});return 2<args.length&&("OperatorNode:add"===this.getIdentifier()||"OperatorNode:multiply"===this.getIdentifier())?this.implicit&&"OperatorNode:multiply"===this.getIdentifier()&&"hide"===implicit?parenthesis.join('\x3cspan class\x3d"math-operator math-binary-operator math-implicit-binary-operator"\x3e\x3c/span\x3e'):
parenthesis.join('\x3cspan class\x3d"math-operator math-binary-operator math-explicit-binary-operator"\x3e'+(0,_string.escape)(this.op)+"\x3c/span\x3e"):'\x3cspan class\x3d"math-function"\x3e'+(0,_string.escape)(this.fn)+'\x3c/span\x3e\x3cspan class\x3d"math-paranthesis math-round-parenthesis"\x3e(\x3c/span\x3e'+parenthesis.join('\x3cspan class\x3d"math-separator"\x3e,\x3c/span\x3e')+'\x3cspan class\x3d"math-paranthesis math-round-parenthesis"\x3e)\x3c/span\x3e'};OperatorNode.prototype._toTex=function(options){var parenthesis=
options&&options.parenthesis?options.parenthesis:"keep",implicit=options&&options.implicit?options.implicit:"hide",args=this.args,parens=calculateNecessaryParentheses(this,parenthesis,implicit,args,!0),op=_latex.latexOperators[this.fn];op="undefined"===typeof op?this.op:op;if(1===args.length){implicit=(0,_operators.getAssociativity)(this,parenthesis);var operand=args[0].toTex(options);parens[0]&&(operand="\\left(".concat(operand,"\\right)"));return"right"===implicit?op+operand:operand+op}if(2===args.length){var lhs=
args[0];operand=lhs.toTex(options);parens[0]&&(operand="\\left(".concat(operand,"\\right)"));args=args[1].toTex(options);parens[1]&&(args="\\left(".concat(args,"\\right)"));parenthesis="keep"===parenthesis?lhs.getIdentifier():lhs.getContent().getIdentifier();switch(this.getIdentifier()){case "OperatorNode:divide":return op+"{"+operand+"}{"+args+"}";case "OperatorNode:pow":operand="{"+operand+"}";args="{"+args+"}";switch(parenthesis){case "ConditionalNode":case "OperatorNode:divide":operand="\\left(".concat(operand,
"\\right)")}break;case "OperatorNode:multiply":if(this.implicit&&"hide"===implicit)return operand+"~"+args}return operand+op+args}return 2<args.length&&("OperatorNode:add"===this.getIdentifier()||"OperatorNode:multiply"===this.getIdentifier())?(implicit=args.map(function(arg,index){arg=arg.toTex(options);parens[index]&&(arg="\\left(".concat(arg,"\\right)"));return arg}),"OperatorNode:multiply"===this.getIdentifier()&&this.implicit?implicit.join("~"):implicit.join(op)):"\\mathrm{"+this.fn+"}\\left("+
args.map(function(arg){return arg.toTex(options)}).join(",")+"\\right)"};OperatorNode.prototype.getIdentifier=function(){return this.type+":"+this.fn};return OperatorNode},{isClass:!0,isNode:!0});exports.createOperatorNode=global}
//# sourceMappingURL=module$node_modules$mathjs$lib$cjs$expression$node$OperatorNode.js.map
