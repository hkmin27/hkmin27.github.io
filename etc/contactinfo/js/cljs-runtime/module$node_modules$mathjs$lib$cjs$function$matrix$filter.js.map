{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$matrix$filter.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,yDAAA,CAA8E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAqEtHC,QAASA,gBAAe,CAACC,CAAD,CAAIC,QAAJ,CAAc,CAEpC,IAAIC,KAAO,CAAC,CAAA,CAAGC,SAAUC,CAAAA,gBAAd,EAAgCH,QAAhC,CACX,OAAO,CAAC,CAAA,CAAGI,MAAOC,CAAAA,MAAX,EAAmBN,CAAnB,CAAsB,QAAS,CAACO,KAAD,CAAQC,KAAR,CAAeC,KAAf,CAAsB,CAE1D,MAAa,EAAb,GAAIP,IAAJ,CACSD,QAAA,CAASM,KAAT,CADT,CAEoB,CAAb,GAAIL,IAAJ,CACED,QAAA,CAASM,KAAT,CAAgB,CAACC,KAAD,CAAhB,CADF,CAIEP,QAAA,CAASM,KAAT,CAAgB,CAACC,KAAD,CAAhB,CAAyBC,KAAzB,CARiD,CAArD,CAH6B,CAlEtCC,MAAOC,CAAAA,cAAP,CAAsBb,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CS,MAAO,CAAA,CADoC,CAA7C,CAGAT,QAAQc,CAAAA,YAAR,CAAuB,IAAK,EAE5B,KAAIP,OAAST,OAAA,CAAQ,gDAAR,CAAb;AAEIO,UAAYP,OAAA,CAAQ,mDAAR,CAEZiB,OAAAA,CAAWjB,OAAA,CAAQ,kDAAR,CAIXgB,OAAAA,CAA8B,CAAC,CAAA,CAAGC,MAASC,CAAAA,OAAb,EAFvBC,QAEuB,CADfC,CAAC,OAADA,CACe,CAA0C,QAAS,CAACC,IAAD,CAAO,CACtFC,IAAAA,CAAQD,IAAKC,CAAAA,KA+BjB,OAAOA,KAAA,CAAM,QAAN,CAAgB,CACrB,kBAAmBnB,eADE,CAErB,mBAAoBoB,QAAuB,CAACnB,CAAD,CAAIoB,IAAJ,CAAU,CACnD,MAAOpB,EAAEqB,CAAAA,MAAF,CAAStB,eAAA,CAAgBC,CAAEsB,CAAAA,OAAF,EAAhB,CAA6BF,IAA7B,CAAT,CAD4C,CAFhC,CAKrB,gBAAiBf,MAAOkB,CAAAA,YALH,CAMrB,iBAAkBC,QAAqB,CAACxB,CAAD,CAAIoB,IAAJ,CAAU,CAC/C,MAAOpB,EAAEqB,CAAAA,MAAF,CAAS,CAAC,CAAA,CAAGhB,MAAOkB,CAAAA,YAAX,EAAyBvB,CAAEsB,CAAAA,OAAF,EAAzB,CAAsCF,IAAtC,CAAT,CADwC,CAN5B,CAAhB,CAhCmF,CAA1D,CAmDlCtB,QAAQc,CAAAA,YAAR;AAAuBA,MAnE+F;",
"sources":["node_modules/mathjs/lib/cjs/function/matrix/filter.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$matrix$filter\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createFilter = void 0;\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _function = require(\"../../utils/function.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'filter';\nvar dependencies = ['typed'];\nvar createFilter = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Filter the items in an array or one dimensional matrix.\n   *\n   * Syntax:\n   *\n   *    math.filter(x, test)\n   *\n   * Examples:\n   *\n   *    function isPositive (x) {\n   *      return x > 0\n   *    }\n   *    math.filter([6, -2, -1, 4, 3], isPositive) // returns [6, 4, 3]\n   *\n   *    math.filter([\"23\", \"foo\", \"100\", \"55\", \"bar\"], /[0-9]+/) // returns [\"23\", \"100\", \"55\"]\n   *\n   * See also:\n   *\n   *    forEach, map, sort\n   *\n   * @param {Matrix | Array} x    A one dimensional matrix or array to filter\n   * @param {Function | RegExp} test\n   *        A function or regular expression to test items.\n   *        All entries for which `test` returns true are returned.\n   *        When `test` is a function, it is invoked with three parameters:\n   *        the value of the element, the index of the element, and the\n   *        matrix/array being traversed. The function must return a boolean.\n   * @return {Matrix | Array} Returns the filtered matrix.\n   */\n  return typed('filter', {\n    'Array, function': _filterCallback,\n    'Matrix, function': function MatrixFunction(x, test) {\n      return x.create(_filterCallback(x.toArray(), test));\n    },\n    'Array, RegExp': _array.filterRegExp,\n    'Matrix, RegExp': function MatrixRegExp(x, test) {\n      return x.create((0, _array.filterRegExp)(x.toArray(), test));\n    }\n  });\n});\n/**\n * Filter values in a callback given a callback function\n * @param {Array} x\n * @param {Function} callback\n * @return {Array} Returns the filtered array\n * @private\n */\n\nexports.createFilter = createFilter;\n\nfunction _filterCallback(x, callback) {\n  // figure out what number of arguments the callback function expects\n  var args = (0, _function.maxArgumentCount)(callback);\n  return (0, _array.filter)(x, function (value, index, array) {\n    // invoke the callback function with the right number of arguments\n    if (args === 1) {\n      return callback(value);\n    } else if (args === 2) {\n      return callback(value, [index]);\n    } else {\n      // 3 or -1\n      return callback(value, [index], array);\n    }\n  });\n}\n};"],
"names":["shadow$provide","global","require","module","exports","_filterCallback","x","callback","args","_function","maxArgumentCount","_array","filter","value","index","array","Object","defineProperty","createFilter","_factory","factory","name","dependencies","_ref","typed","MatrixFunction","test","create","toArray","filterRegExp","MatrixRegExp"]
}
