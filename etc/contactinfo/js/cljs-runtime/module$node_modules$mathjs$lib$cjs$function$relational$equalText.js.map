{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$relational$equalText.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,gEAAA,CAAqF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG7HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,eAAR,CAA0B,IAAK,EAE3BC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAIXM,OAAAA,CAAiC,CAAC,CAAA,CAAGC,MAASC,CAAAA,OAAb,EAF1BC,WAE0B,CADlBC,CAAC,OAADA,CAAU,aAAVA,CAAyB,QAAzBA,CACkB,CAA0C,QAAS,CAACC,IAAD,CAAO,CAAA,IACzFC,MAAQD,IAAKC,CAAAA,KAD4E,CAEzFC,YAAcF,IAAKE,CAAAA,WAFsE,CAGzFC,OAASH,IAAKG,CAAAA,MA4BlB,OAAOF,MAAA,CAjCEH,WAiCF,CAAY,CACjB,WAAYM,QAAe,CAACC,CAAD,CAAIC,CAAJ,CAAO,CAChC,MAAOH,OAAA,CAAOD,WAAA,CAAYG,CAAZ;AAAeC,CAAf,CAAP,CADyB,CADjB,CAAZ,CA/BsF,CAA1D,CAqCrCf,QAAQI,CAAAA,eAAR,CAA0BA,MAjDmG;",
"sources":["node_modules/mathjs/lib/cjs/function/relational/equalText.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$relational$equalText\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createEqualText = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'equalText';\nvar dependencies = ['typed', 'compareText', 'isZero'];\nvar createEqualText = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      compareText = _ref.compareText,\n      isZero = _ref.isZero;\n\n  /**\n   * Check equality of two strings. Comparison is case sensitive.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.equalText(x, y)\n   *\n   * Examples:\n   *\n   *    math.equalText('Hello', 'Hello')     // returns true\n   *    math.equalText('a', 'A')             // returns false\n   *    math.equal('2e3', '2000')            // returns true\n   *    math.equalText('2e3', '2000')        // returns false\n   *\n   *    math.equalText('B', ['A', 'B', 'C']) // returns [false, true, false]\n   *\n   * See also:\n   *\n   *    equal, compareText, compare, compareNatural\n   *\n   * @param  {string | Array | DenseMatrix} x First string to compare\n   * @param  {string | Array | DenseMatrix} y Second string to compare\n   * @return {number | Array | DenseMatrix} Returns true if the values are equal, and false if not.\n   */\n  return typed(name, {\n    'any, any': function anyAny(x, y) {\n      return isZero(compareText(x, y));\n    }\n  });\n});\nexports.createEqualText = createEqualText;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createEqualText","_factory","factory","name","dependencies","_ref","typed","compareText","isZero","anyAny","x","y"]
}
