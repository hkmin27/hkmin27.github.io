{"version":3,"sources":["contactinfo/core.cljs"],"mappings":"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","names":["contactinfo.core/figure8","num","den","contactinfo.core/whitehead","contactinfo.core/make-negative","js/module$node_modules$mathjs$lib$cjs$index.equal","js/module$node_modules$mathjs$lib$cjs$index.fraction","js/module$node_modules$mathjs$lib$cjs$index.smaller","G__37159","contactinfo.core/make-small","floor","js/module$node_modules$mathjs$lib$cjs$index.floor","js/module$node_modules$mathjs$lib$cjs$index.subtract","var_args","G__37161","contactinfo.core/cfb-calc","js/Error","vec","js/module$node_modules$mathjs$lib$cjs$index.largerEq","cljs.core.conj","js/module$node_modules$mathjs$lib$cjs$index.divide","contactinfo.core.cfb_calc","contactinfo.core/f8-calc","or__4160__auto__","and__4149__auto__","js/module$node_modules$mathjs$lib$cjs$index.larger","lst","js/module$node_modules$mathjs$lib$cjs$index.multiply","js/module$node_modules$mathjs$lib$cjs$index.abs","cljs.core.reduce","cljs.core/first","p1__37162#","cljs.core.map","js/module$node_modules$mathjs$lib$cjs$index.add","cljs.core/rest","lst1","lst2","p1__37163#","p1__37164#","p1__37165#","contactinfo.core/whitehead-calc","contactinfo.core/sfs-calc","contactinfo.core/lens-calc","contactinfo.core/solid-calc","contactinfo.core/contact-calc","contact-data","draw?","cljs.core/deref","cljs.core._EQ_","fexpr__37166","fexpr__37167","fexpr__37168","fexpr__37169","fexpr__37170","fexpr__37171","fexpr__37172","fexpr__37173","fexpr__37174","fexpr__37175","cljs.core/val","contactinfo.core/diagram-component","coeff","fexpr__37176","cat","fexpr__37177","js/module$node_modules$mathjs$lib$cjs$index.smallerEq","r","p1__37178#","contactinfo.core/temp-select","G__37181","fexpr__37180","cljs.core/reset!","fexpr__37182","p1__37183#","p1__37184#","contactinfo.core/contact-form","val","G__37186","G__37187","G__37188","fexpr__37185","fexpr__37189","contactinfo.core/contact-component","reagent.core.atom","contactinfo.core/home-page","contactinfo.core/mount-root","reagent.dom.render","js/document","contactinfo.core/init!"],"sourcesContent":["(ns contactinfo.core\n  (:require\n   [reagent.core :as r]\n   [reagent.dom :as d]\n   [mathjs :as m]))\n\n;; -------------------------\n;; diagrams\n \n(defn figure8 [num den]\n  [:svg {:width \"10.85in\", :height \"7.3761in\", :version \"1.1\", :viewbox \"0 0 275.59 187.35\", :xmlns \"http://www.w3.org/2000/svg\"}\n   [:g {:transform \"translate(-49.5 -142.45)\"}\n    [:g {:fill \"none\", :stroke \"#000\", :stroke-width \"4.1862\"}\n     [:path {:d \"m163.58 192.34c-12.758 11.953-24.03 20.463-38.5 20.463 12.825 0 90.924 77.644 148.26 79.24-22.791 0-69.177 35.496-106.67 35.661-41.062 0.18059-103.98-38.032-117.17-38.032 14.001 0 39.001-6.4602 53.823-11.634\"}]\n     [:path {:d \"m220.6 271.91c4.711-8.8383 41.138-47.606 58.749-48.745-17.778 0-61.717-42.95-89.627-42.95-7.4398 0-16.312 0.51996-22.362 7.4848\"}]\n     [:path {:d \"m192.7 255.76c10.638-8.663 25.489-39.923 35.481-57.261\"}]\n     [:path {:d \"m111.76 274.98c12.508-4.1892 18.963-6.3917 30.044-12.72\"}]\n     [:path {:d \"m149.05 258.23c7.4074-4.0106 12.105-9.305 17.801-13.458\"}]\n     [:path {:d \"m172.66 240.28c9.9622-8.7949 20.951-28.115 37.886-28.815-18.857 0-45.17-31.05-74.493-31.346-10.923 0-27.282 10.132-27.282 10.132\"}]\n     [:path {:d \"m97.117 196.17s-27.774 23.488-42.203 23.488c20.019 0 60.199 89.311 110.17 90.694 30.187 0 44.823-18.414 52.455-31.899\"}]\n     [:path {:d \"m230.64 193.13c7.3535-11.916 25.125-27.602 43.94-27.602-17.449 0-73.629-22.073-111.39-20.951-28.637 0.85123-66.284 20.876-83.374 20.876 20.142 0 47.183 103.24 86.788 104.01 7.7935-0.0386 21.177-9.9085 21.177-9.9085\"}]]\n    [:text {:x \"297.08456\", :y \"228.8149\", :fill \"#000000\", :font-family \"sans-serif\", :font-size \"14.768px\", :stroke-width \".3692\", :xml:space \"preserve\"} \"(2)\"]\n    [:path {:d \"m294.4 165.32h20.997\", :fill \"none\", :stroke \"#000\", :stroke-width \"1.3954\"}]\n    [:text {:x \"299.98947\", :y \"161.39523\", :fill \"#000000\", :font-family \"sans-serif\", :font-size \"14.768px\", :stroke-width \".3692\", :xml:space \"preserve\"} num]\n    [:text {:x \"294\", :y \"180.85577\", :fill \"#000000\", :font-family \"sans-serif\", :font-size \"14.768px\", :stroke-width \".3692\", :xml:space \"preserve\"} den]\n    [:path {:d \"m289.14 150.03c-4.6672 9.6086-5.3028 20.128 0 31.988\", :fill \"none\", :stroke \"#000\", :stroke-width \"1.3954\"}]\n    [:path {:d \"m320.66 149.85c4.6672 9.6086 5.3028 20.128 0 31.988\", :fill \"none\", :stroke \"#000\", :stroke-width \"1.3954\"}]]])\n\n\n(defn whitehead []\n  [:svg {:width \"11in\", :height \"8.5in\", :version \"1.1\", :viewbox \"0 0 279.4 215.9\", :xmlns \"http://www.w3.org/2000/svg\"}\n   [:g {:transform \"translate(-2.0246 -1.5421)\"}\n    [:g {:fill \"none\", :stroke \"#000\"}\n     [:path {:d \"m2.0246 57.655c50.147 0 72.561 54.149 109.23 54.61 1.146 0.0134 2.2864-0.0256 3.4215-0.11619 1.1351-0.0906 2.2651-0.23223 3.3904-0.42123 1.1253-0.18907 2.246-0.42549 3.3627-0.7061 1.1166-0.28063 2.2292-0.60532 3.3383-0.97075 1.1091-0.36542 2.2147-0.77159 3.3174-1.2151 1.1027-0.44348 2.2024-0.92439 3.2998-1.4392 1.0974-0.51484 2.1924-1.0637 3.2857-1.6431 1.0932-0.57942 2.1847-1.1894 3.2749-1.8267 1.0902-0.63725 2.1792-1.3018 3.2675-1.9901 1.0883-0.68834 2.1759-1.4005 3.2634-2.1332m6.5283-4.6147c1.0894-0.80108 2.1797-1.6159 3.2717-2.441 1.092-0.82514 2.1855-1.6606 3.2812-2.5031 1.0957-0.84248 2.1935-1.6919 3.2941-2.545 1.1006-0.85305 2.2038-1.7097 3.3104-2.5666 1.1065-0.85687 2.2164-1.714 3.33-2.5679 1.1137-0.85397 2.2312-1.7048 3.3531-2.549m3.3795-2.5099c1.1313-0.82785 2.2675-1.6458 3.4093-2.4505 1.1418-0.80467 2.2891-1.5961 3.4425-2.3708 1.1534-0.77475 2.3129-1.5329 3.4791-2.2709 1.1662-0.73807 2.339-1.4561 3.5191-2.1507 1.1801-0.69464 2.3673-1.3659 3.5624-2.0103 1.1951-0.64446 2.398-1.2621 3.6092-1.8497 1.2112-0.58753 2.4308-1.1449 3.6593-1.6688 1.2285-0.52383 2.4659-1.0142 3.7128-1.4676 1.2469-0.45339 2.5033-0.86994 3.7697-1.2462 1.2664-0.37625 2.5429-0.71219 3.83-1.0045 1.2871-0.29231 2.5847-0.54092 3.8936-0.74257 1.3088-0.20164 2.6289-0.3562 3.9606-0.46041 1.3318-0.10417 2.6753-0.15797 4.0311-0.15797\", :stroke-width \"3\"}]\n     [:g {:transform \"matrix(5.6945 0 0 5.6945 -262.49 -408.81)\", :stroke-width \".52682\"}\n      [:path {:d \"m46.732 91.855c4.1234 0 12.598 12.127 18.99 12.287 0.19976 5e-3 0.40185-2e-3 0.60606-0.0212 0.20421-0.0189 0.41055-0.0493 0.61879-0.0905 0.20824-0.0412 0.41839-0.0932 0.63024-0.15515 0.21185-0.062 0.42539-0.134 0.64041-0.21526 0.21502-0.0813 0.43153-0.17177 0.64931-0.27078 0.21778-0.099 0.43683-0.20649 0.65694-0.32171 0.22011-0.11521 0.44127-0.23815 0.66328-0.36805 0.22201-0.1299 0.44486-0.26676 0.66835-0.40982 0.22349-0.14305 0.44761-0.2923 0.67215-0.44698 0.22454-0.15468 0.4495-0.31479 0.67466-0.47956 0.22517-0.16478 0.45054-0.33422 0.67591-0.50756 0.22537-0.17334 0.45073-0.35059 0.67587-0.53097 0.22514-0.18038 0.45007-0.36389 0.67456-0.54978 0.22449-0.18589 0.44856-0.37415 0.67198-0.56402 0.22342-0.18987 0.4462-0.38134 0.66811-0.57366 0.22192-0.19232 0.44298-0.38548 0.66298-0.57872s0.43892-0.38656 0.65656-0.57918c0.21764-0.19263 0.434-0.38457 0.64887-0.57507 0.21487-0.19049 0.42824-0.37953 0.63991-0.56636s0.42162-0.37144 0.62966-0.55307c0.20804-0.18163 0.41416-0.36028 0.61815-0.53518 0.10199-0.08745 0.20345-0.17397 0.30436-0.25945m0.89228-0.73892c0.19461-0.15687 0.38666-0.30846 0.57594-0.45401s0.37579-0.28507 0.55931-0.41778c0.18352-0.13271 0.36407-0.25862 0.54141-0.37696 0.17735-0.11834 0.3515-0.22911 0.52224-0.33155s0.33808-0.19655 0.50179-0.28156c0.16371-0.08501 0.3238-0.16092 0.48006-0.22698 0.15626-0.06605 0.30868-0.12224 0.45706-0.16781 0.14838-0.04556 0.29271-0.0805 0.43278-0.10405 0.14007-0.02355 0.27588-0.0357 0.40723-0.0357\"}]\n      [:path {:d \"m46.898 96.553c3.2031 0 14.029 12.355 19.016 12.152 4.9873-0.20303 15.253-12.152 19.019-12.152\"}]\n      [:path {:d \"m46.732 91.855c0.19606-5.2e-5 0.39322-0.01741 0.59154-0.05078s0.39779-0.08274 0.59849-0.14681c0.20069-0.06408 0.40261-0.14285 0.60581-0.23503s0.40768-0.19776 0.6135-0.31544 0.41299-0.24746 0.62157-0.38804c0.20858-0.14058 0.41856-0.29195 0.63001-0.45282s0.42438-0.33124 0.63883-0.5098c0.21446-0.17856 0.43044-0.36531 0.64802-0.55896s0.43676-0.39418 0.65759-0.6003c0.22083-0.20612 0.44332-0.41784 0.66753-0.63384 0.22421-0.216 0.45014-0.43629 0.67785-0.65956 0.22771-0.22327 0.4572-0.44953 0.68854-0.67747 0.23134-0.22794 0.46452-0.45756 0.6996-0.68757m1.071-1.0332c0.12047-0.11411 0.24145-0.22782 0.36293-0.34098 0.24296-0.22632 0.48796-0.45042 0.73504-0.67099 2.9404-2.2007 4.5871-2.3016 5.9217-2.3016 3.4789 0 3.9376 2.7334 7.8022 2.7302\"}]\n      [:path {:d \"m70.964 84.322c-0.318 0.03241-0.63452 0.07475-0.9495 0.12634-0.31498 0.0516-0.62842 0.11247-0.94026 0.18195-0.31184 0.06948-0.62209 0.14758-0.93068 0.23364-0.30859 0.08606-0.61552 0.18009-0.92074 0.28143-0.07631 0.02534-0.1525 0.05113-0.22859 0.07737s-0.15207 0.05292-0.22794 0.08005c-0.07587 0.02712-0.15164 0.05468-0.22729 0.08266m-1.1264 0.45049c-0.29813 0.12798-0.59442 0.26197-0.88883 0.40132s-0.58692 0.28406-0.87749 0.43347c-0.29057 0.14941-0.57919 0.30353-0.86581 0.46171-0.28662 0.15817-0.57122 0.3204-0.85377 0.48603-0.28254 0.16563-0.56302 0.33466-0.84138 0.50645-0.27836 0.17178-0.55459 0.34632-0.82864 0.52296m-0.81556 0.53556c-0.26963 0.18018-0.53702 0.36182-0.80212 0.54425s-0.52789 0.36566-0.78833 0.54903-0.51852 0.36689-0.77419 0.5499c-0.25567 0.18301-0.50892 0.36552-0.7597 0.54686s-0.49908 0.36153-0.74486 0.53991-0.48901 0.35495-0.72966 0.52906c-0.24065 0.17411-0.47871 0.34575-0.71412 0.51429-0.23541 0.16853-0.46818 0.33396-0.69823 0.49561-0.23006 0.16166-0.45741 0.31955-0.68199 0.47302-0.22458 0.15348-0.4464 0.30254-0.6654 0.44653m-0.96622 0.61156c-0.1052 0.06366-0.20966 0.12581-0.3134 0.18637-0.20747 0.12112-0.41199 0.23586-0.61352 0.34359-0.20153 0.10772-0.40006 0.20842-0.59553 0.30145-0.19547 0.09303-0.38788 0.17838-0.57718 0.25541-0.1893 0.07703-0.37548 0.14573-0.55849 0.20546-0.18301 0.05973-0.36284 0.11048-0.53944 0.1516-0.1766 0.04112-0.34997 0.07261-0.52005 0.09382-0.17008 0.02121-0.33687 0.03214-0.5003 0.03214\"}]\n      [:path {:d \"m85.099 91.855c-3.137-8.29e-4 -6.5544-4.4325-10.508-7.9616-2.6667-2.2007-4.5871-2.3016-5.9217-2.3016-0.21743 0-0.42306 0.01068-0.61847 0.0307-0.1954 0.02002-0.38058 0.04938-0.5571 0.08675-0.17652 0.03737-0.34437 0.08274-0.50514 0.13479-0.16076 0.05204-0.31444 0.11076-0.46259 0.17481-0.07408 0.03203-0.14677 0.06539-0.21828 0.09991m-0.81383 0.45964c-0.06517 0.04119-0.12995 0.08288-0.19452 0.1249-0.12914 0.08404-0.25746 0.16942-0.38654 0.25479-0.12908 0.08537-0.25891 0.17073-0.39106 0.25475s-0.26663 0.1667-0.40499 0.2467c-0.13837 0.08-0.28062 0.15732-0.42834 0.23064-0.14772 0.07331-0.30089 0.14261-0.4611 0.20656-0.16021 0.06395-0.32744 0.12255-0.50327 0.17447-0.17583 0.05192-0.36026 0.09715-0.55486 0.13437-0.1946 0.03722-0.39936 0.06641-0.61586 0.08626-0.2165 0.01984-0.44473 0.03033-0.68627 0.03013\"}]\n      [:path {:d \"m60.867 84.322c10.176 1.0372 18.836 12.231 24.066 12.231\"}]]\n     [:path {:d \"m2.0246 57.655c50.147 0 72.561-54.149 109.23-54.61 36.674-0.46087 67.463 54.61 110.85 54.61\", :stroke-width \"3\"}]]\n    [:text {:x \"235.57\", :y \"121.26547\", :fill \"#000000\", :font-family \"sans-serif\", :font-size \"22px\", :stroke-width \".26458\", :xml:space \"preserve\"} \"(2)\"]\n    [:text {:x \"235.57\", :y \"61.446541\", :fill \"#000000\", :font-family \"sans-serif\", :font-size \"22px\", :stroke-width \".26458\", :xml:space \"preserve\"} \"(3)\"]]])\n\n;; -------------------------\n;; contact-calculators\n\n(defn make-negative [num]\n  (cond\n    (m/equal 1 num) (m/fraction \"-1\")\n    (m/smaller num 0) num\n    :else (make-negative (m/fraction num.n (- num.d num.n)))))\n\n(defn make-small [num]\n  (let [floor (m/floor num)]\n    (if (m/equal floor num) (m/fraction 1) (m/subtract num floor))))\n\n(defn cfb-calc\n  ([num vec] (let [floor (m/floor num)]\n               (cond\n                 (m/largerEq num 0) (recur (make-negative num) [])\n                 (m/equal floor num) (conj vec floor) ;; return list\n                 :else (recur (m/divide 1 (m/subtract floor num)) (conj vec floor)))))\n  ([num] (cfb-calc num [])))\n\n\n(defn f8-calc [num]\n  (cond (or (m/equal num 0) (m/equal num -4) (m/equal num 4)) \"\u221e\"\n        (or (and (m/larger num 4) (m/smaller num 5)) (and (m/largerEq num -4) (m/smaller num -3))) \"non known yet.\"\n        (m/larger num 0) (let [lst (cfb-calc (. (. (make-small num) inverse) neg))]\n                           (str (m/multiply 2 (m/abs (reduce m/multiply (first lst) (map #(m/add % 1) (rest lst)))))))\n        (m/smaller num -4) (let [lst1 (cfb-calc (. (. (make-small num) inverse) neg)) lst2 (cfb-calc (m/add num 3))]\n                             (str (m/add (m/abs (reduce m/multiply (first lst1) (map #(m/add % 1) (rest lst1)))) (m/abs (reduce m/multiply (first lst2) (map #(m/add % 1) (rest lst2)))))))\n        :else (let [lst (cfb-calc (. (. (make-small num) inverse) neg))]\n                (str (m/abs (reduce m/multiply (first lst) (map #(m/add % 1) (rest lst))))))))\n\n(defn whitehead-calc [num] \"not yet implemented\")\n(defn sfs-calc [num] \"not yet implemented\")\n(defn lens-calc [num] \"not yet implemented\")\n(defn solid-calc [num] \"not yet implemented\")\n\n;;\uc2e4\ud589\uc2dc\uac04 3\ucd08 \ub118\uc73c\uba74 \ud504\ub85c\uc138\uc2a4 \uc8fd\uc5ec\uc57c\ud568 (\"Sorry. It takes too much time!\")\n(defn contact-calc [contact-data draw?]\n  (cond\n    (false? @draw?) nil\n    (= (@contact-data :category) \"figure8\") [:p \"The number of tight contact structure is \" [f8-calc (m/fraction (@contact-data :value))]]\n    (= (@contact-data :category) \"whitehead\") [:p \"The number of tight contact structure is \" [whitehead-calc (m/fraction (@contact-data :value))]]\n    (= (@contact-data :category) \"lens\") [:p \"The number of tight contact structure is \" [lens-calc (m/fraction (@contact-data :value))]]\n    (= (@contact-data :category) \"sfs\") [:p \"The number of tight contact structure is \" [sfs-calc (m/fraction (@contact-data :value))]]\n    (= (@contact-data :category) \"solid\") [:p \"The number of tight contact structure is \" [solid-calc (m/fraction (@contact-data :value))]]\n    :else val))\n\n\n;; -------------------------\n;; Views\n\n(defn diagram-component [contact-data draw?]\n  (let [coeff (m/fraction (@contact-data :value)) cat (@contact-data :category)]\n    (cond (false? @draw?) nil \n          (= cat \"figure8\") (cond (m/equal coeff 1) [figure8 \"1\" \"0\"]\n                                  (or (m/smallerEq coeff 0) (and (m/largerEq coeff 4) (m/smaller coeff 5)) (and (m/largerEq coeff -4) (m/smaller coeff -3))) nil\n                                  :else (let [r (. (m/subtract 1 coeff) inverse)] [figure8 (str r.n) (str r.d)]))\n          (= cat \"whitehead\") (whitehead)\n          :else nil)))\n\n(defn temp-select [contact-data draw?]\n  [:select {:on-change #((reset! contact-data {:value (@contact-data :value) :category (-> % .-target .-value)})\n                         (reset! draw? false))}\n   [:option {:value \"figure8\"} \"Surgeries on the figure-8 knot\"]\n   [:option {:value \"whitehead\"} \"Surgeries on Whitehead link\"]\n   [:option {:value \"sfs\"} \"Small Seifert fibrations\"]\n   [:option {:value \"lens\"} \"Lens spaces\"]\n   [:option {:value \"solid\"} \"solid tori\"]])\n\n(defn contact-form [val contact-data draw?]\n  [:form {:on-submit #((.preventDefault %)\n                       (reset! contact-data {:value @val :category (@contact-data :category)})\n                       (reset! val \"\")\n                       (reset! draw? true))} \n   [:input {:type \"text\"\n             :value @val\n             :placeholder \"Type a surgery coefficient\"\n             :on-change #(reset! val (-> % .-target .-value))}]])\n\n(defn contact-component []\n  (let [val (r/atom \"\") contact-data (r/atom {:value \"5\" :category \"figure8\"}) draw? (r/atom false)] \n    (fn []\n      [:div\n       [temp-select contact-data draw?]\n       [contact-form val contact-data draw?]\n       [contact-calc contact-data draw?]\n       [diagram-component contact-data draw?]])))\n\n\n(defn home-page []\n  [:div \n   [:h2 \"3d Contact Info\"]\n   [contact-component]\n  ])\n\n;; -------------------------\n;; Initialize app\n\n(defn mount-root []\n  (d/render [home-page] (.getElementById js/document \"app\")))\n\n(defn ^:export init! []\n  (mount-root))\n"]}