shadow$provide.module$node_modules$mathjs$lib$cjs$function$statistics$variance=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.createVariance=void 0;var _collection=require("module$node_modules$mathjs$lib$cjs$utils$collection"),_is=require("module$node_modules$mathjs$lib$cjs$utils$is");global=require("module$node_modules$mathjs$lib$cjs$utils$factory");var _improveErrorMessage=require("module$node_modules$mathjs$lib$cjs$function$statistics$utils$improveErrorMessage");
require=(0,global.factory)("variance","typed add subtract multiply divide apply isNaN".split(" "),function(_ref){function _var(array,normalization){var num=0;if(0===array.length)throw new SyntaxError("Function variance requires one or more parameters (0 provided)");(0,_collection.deepForEach)(array,function(value){try{sum=void 0===sum?value:add(sum,value),num++}catch(err){throw(0,_improveErrorMessage.improveErrorMessage)(err,"variance",value);}});if(0===num)throw Error("Cannot calculate variance of an empty array");
var mean=divide(sum,num);var sum=void 0;(0,_collection.deepForEach)(array,function(value){value=subtract(value,mean);sum=void 0===sum?multiply(value,value):add(sum,multiply(value,value))});if(isNaN(sum))return sum;switch(normalization){case "uncorrected":return divide(sum,num);case "biased":return divide(sum,num+1);case "unbiased":return array=(0,_is.isBigNumber)(sum)?sum.mul(0):0,1===num?array:divide(sum,num-1);default:throw Error('Unknown normalization "'+normalization+'". Choose "unbiased" (default), "uncorrected", or "biased".');
}}function _varDim(array,dim,normalization){try{if(0===array.length)throw new SyntaxError("Function variance requires one or more parameters (0 provided)");return apply(array,dim,function(x){return _var(x,normalization)})}catch(err){throw(0,_improveErrorMessage.improveErrorMessage)(err,"variance");}}var typed=_ref.typed,add=_ref.add,subtract=_ref.subtract,multiply=_ref.multiply,divide=_ref.divide,apply=_ref.apply,isNaN=_ref.isNaN;return typed("variance",{"Array | Matrix":function(array){return _var(array,
"unbiased")},"Array | Matrix, string":_var,"Array | Matrix, number | BigNumber":function(array,dim){return _varDim(array,dim,"unbiased")},"Array | Matrix, number | BigNumber, string":_varDim,"...":function(args){return _var(args,"unbiased")}})});exports.createVariance=require}
//# sourceMappingURL=module$node_modules$mathjs$lib$cjs$function$statistics$variance.js.map
