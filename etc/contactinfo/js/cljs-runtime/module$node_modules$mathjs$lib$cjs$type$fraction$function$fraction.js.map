{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$type$fraction$function$fraction.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,kEAAA,CAAuF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG/HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,cAAR,CAAyB,IAAK,EAE1BC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAEf,KAAIQ,YAAcR,OAAA,CAAQ,qDAAR,CAIdM,QAAAA,CAAgC,CAAC,CAAA,CAAGC,MAASE,CAAAA,OAAb,EAFzBC,UAEyB,CADjBC,CAAC,OAADA,CAAU,UAAVA,CACiB,CAA0C,QAAS,CAACC,IAAD,CAAO,CAAA,IACxFC,MAAQD,IAAKC,CAAAA,KAD2E,CAExFC,SAAWF,IAAKE,CAAAA,QA2BpB,OAAOD,MAAA,CAAM,UAAN,CAAkB,CACvBE,OAAQA,QAAe,CAACC,CAAD,CAAI,CACzB,GAAI,CAACC,QAAA,CAASD,CAAT,CAAL;AAAoBE,KAAA,CAAMF,CAAN,CAApB,CACE,KAAUG,MAAJ,CAAUH,CAAV,CAAc,sCAAd,CAAN,CAGF,MAAO,KAAIF,QAAJ,CAAaE,CAAb,CALkB,CADJ,CAQvBI,OAAQA,QAAe,CAACJ,CAAD,CAAI,CACzB,MAAO,KAAIF,QAAJ,CAAaE,CAAb,CADkB,CARJ,CAWvB,iBAAkBK,QAAqB,CAACC,SAAD,CAAYC,WAAZ,CAAyB,CAC9D,MAAO,KAAIT,QAAJ,CAAaQ,SAAb,CAAwBC,WAAxB,CADuD,CAXzC,CAcvB,OAAQC,QAAc,CAACR,CAAD,CAAI,CACxB,MAAO,KAAIF,QAAJ,CAAa,CAAb,CADiB,CAdH,CAiBvBW,UAAWA,QAAkB,CAACT,CAAD,CAAI,CAC/B,MAAO,KAAIF,QAAJ,CAAaE,CAAEU,CAAAA,QAAF,EAAb,CADwB,CAjBV,CAoBvBZ,SAAUA,QAAiB,CAACE,CAAD,CAAI,CAC7B,MAAOA,EADsB,CApBR,CAuBvBb,OAAQA,QAAe,CAACa,CAAD,CAAI,CACzB,MAAO,KAAIF,QAAJ,CAAaE,CAAb,CADkB,CAvBJ,CA0BvB,iBAAkBW,QAAoB,CAACX,CAAD,CAAI,CACxC,MAAO,CAAC,CAAA,CAAGR,WAAYoB,CAAAA,OAAhB,EAAyBZ,CAAzB,CAA4B,IAA5B,CADiC,CA1BnB,CAAlB,CA7BqF,CAA1D,CA4DpCd,QAAQI,CAAAA,cAAR,CAAyBA,OA1EsG;",
"sources":["node_modules/mathjs/lib/cjs/type/fraction/function/fraction.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$type$fraction$function$fraction\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createFraction = void 0;\n\nvar _factory = require(\"../../../utils/factory.js\");\n\nvar _collection = require(\"../../../utils/collection.js\");\n\nvar name = 'fraction';\nvar dependencies = ['typed', 'Fraction'];\nvar createFraction = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      Fraction = _ref.Fraction;\n\n  /**\n   * Create a fraction convert a value to a fraction.\n   *\n   * Syntax:\n   *     math.fraction(numerator, denominator)\n   *     math.fraction({n: numerator, d: denominator})\n   *     math.fraction(matrix: Array | Matrix)         Turn all matrix entries\n   *                                                   into fractions\n   *\n   * Examples:\n   *\n   *     math.fraction(1, 3)\n   *     math.fraction('2/3')\n   *     math.fraction({n: 2, d: 3})\n   *     math.fraction([0.2, 0.25, 1.25])\n   *\n   * See also:\n   *\n   *    bignumber, number, string, unit\n   *\n   * @param {number | string | Fraction | BigNumber | Array | Matrix} [args]\n   *            Arguments specifying the numerator and denominator of\n   *            the fraction\n   * @return {Fraction | Array | Matrix} Returns a fraction\n   */\n  return typed('fraction', {\n    number: function number(x) {\n      if (!isFinite(x) || isNaN(x)) {\n        throw new Error(x + ' cannot be represented as a fraction');\n      }\n\n      return new Fraction(x);\n    },\n    string: function string(x) {\n      return new Fraction(x);\n    },\n    'number, number': function numberNumber(numerator, denominator) {\n      return new Fraction(numerator, denominator);\n    },\n    \"null\": function _null(x) {\n      return new Fraction(0);\n    },\n    BigNumber: function BigNumber(x) {\n      return new Fraction(x.toString());\n    },\n    Fraction: function Fraction(x) {\n      return x; // fractions are immutable\n    },\n    Object: function Object(x) {\n      return new Fraction(x);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n});\nexports.createFraction = createFraction;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createFraction","_factory","_collection","factory","name","dependencies","_ref","typed","Fraction","number","x","isFinite","isNaN","Error","string","numberNumber","numerator","denominator","_null","BigNumber","toString","ArrayMatrix","deepMap"]
}
