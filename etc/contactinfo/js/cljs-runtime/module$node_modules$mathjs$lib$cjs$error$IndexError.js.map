{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$error$IndexError.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,mDAAA,CAAwE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAkBhHC,QAASA,WAAU,CAACC,KAAD,CAAQC,GAAR,CAAaC,GAAb,CAAkB,CACnC,GAAI,EAAE,IAAF,WAAkBH,WAAlB,CAAJ,CACE,KAAM,KAAII,WAAJ,CAAgB,kDAAhB,CAAN,CAGF,IAAKH,CAAAA,KAAL,CAAaA,KAEU,EAAvB,CAAII,SAAUC,CAAAA,MAAd,EACE,IAAKJ,CAAAA,GACL,CADW,CACX,CAAA,IAAKC,CAAAA,GAAL,CAAWD,GAFb,GAIE,IAAKA,CAAAA,GACL,CADWA,GACX,CAAA,IAAKC,CAAAA,GAAL,CAAWA,GALb,CASE,KAAKI,CAAAA,OAAL,CADeC,IAAAA,EAAjB,GAAI,IAAKN,CAAAA,GAAT,EAA8B,IAAKD,CAAAA,KAAnC,CAA2C,IAAKC,CAAAA,GAAhD,CACiB,sBADjB,CAC0C,IAAKD,CAAAA,KAD/C,CACuD,QADvD,CAC+D,IAAKC,CAAAA,GADpE,CAC0E,GAD1E,CAEwBM,IAAAA,EAAjB,GAAI,IAAKL,CAAAA,GAAT,EAA8B,IAAKF,CAAAA,KAAnC,EAA4C,IAAKE,CAAAA,GAAjD,CACU,sBADV;AACmC,IAAKF,CAAAA,KADxC,CACgD,QADhD,EACyD,IAAKE,CAAAA,GAD9D,CACoE,CADpE,EACyE,GADzE,CAGU,sBAHV,CAGmC,IAAKF,CAAAA,KAHxC,CAGgD,GAGvD,KAAKQ,CAAAA,KAAL,CAAiBC,KAAJ,EAAYD,CAAAA,KAvBU,CAfrCE,MAAOC,CAAAA,cAAP,CAAsBb,OAAtB,CAA+B,YAA/B,CAA6C,CAC3Cc,MAAO,CAAA,CADoC,CAA7C,CAGAd,QAAQC,CAAAA,UAAR,CAAqBA,UAsCrBA,WAAWc,CAAAA,SAAX,CAAuB,IAAIC,UAC3Bf,WAAWc,CAAAA,SAAUE,CAAAA,WAArB,CAAmCD,UACnCf,WAAWc,CAAAA,SAAUG,CAAAA,IAArB,CAA4B,YAC5BjB,WAAWc,CAAAA,SAAUI,CAAAA,YAArB,CAAoC,CAAA,CA/C4E;",
"sources":["node_modules/mathjs/lib/cjs/error/IndexError.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$error$IndexError\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IndexError = IndexError;\n\n/**\n * Create a range error with the message:\n *     'Index out of range (index < min)'\n *     'Index out of range (index < max)'\n *\n * @param {number} index     The actual index\n * @param {number} [min=0]   Minimum index (included)\n * @param {number} [max]     Maximum index (excluded)\n * @extends RangeError\n */\nfunction IndexError(index, min, max) {\n  if (!(this instanceof IndexError)) {\n    throw new SyntaxError('Constructor must be called with the new operator');\n  }\n\n  this.index = index;\n\n  if (arguments.length < 3) {\n    this.min = 0;\n    this.max = min;\n  } else {\n    this.min = min;\n    this.max = max;\n  }\n\n  if (this.min !== undefined && this.index < this.min) {\n    this.message = 'Index out of range (' + this.index + ' < ' + this.min + ')';\n  } else if (this.max !== undefined && this.index >= this.max) {\n    this.message = 'Index out of range (' + this.index + ' > ' + (this.max - 1) + ')';\n  } else {\n    this.message = 'Index out of range (' + this.index + ')';\n  }\n\n  this.stack = new Error().stack;\n}\n\nIndexError.prototype = new RangeError();\nIndexError.prototype.constructor = RangeError;\nIndexError.prototype.name = 'IndexError';\nIndexError.prototype.isIndexError = true;\n};"],
"names":["shadow$provide","global","require","module","exports","IndexError","index","min","max","SyntaxError","arguments","length","message","undefined","stack","Error","Object","defineProperty","value","prototype","RangeError","constructor","name","isIndexError"]
}
