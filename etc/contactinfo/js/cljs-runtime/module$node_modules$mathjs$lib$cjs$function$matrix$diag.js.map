{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$matrix$diag.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/function/matrix/diag.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$matrix$diag\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createDiag = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _number = require(\"../../utils/number.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'diag';\nvar dependencies = ['typed', 'matrix', 'DenseMatrix', 'SparseMatrix'];\nvar createDiag = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      DenseMatrix = _ref.DenseMatrix,\n      SparseMatrix = _ref.SparseMatrix;\n\n  /**\n   * Create a diagonal matrix or retrieve the diagonal of a matrix\n   *\n   * When `x` is a vector, a matrix with vector `x` on the diagonal will be returned.\n   * When `x` is a two dimensional matrix, the matrixes `k`th diagonal will be returned as vector.\n   * When k is positive, the values are placed on the super diagonal.\n   * When k is negative, the values are placed on the sub diagonal.\n   *\n   * Syntax:\n   *\n   *     math.diag(X)\n   *     math.diag(X, format)\n   *     math.diag(X, k)\n   *     math.diag(X, k, format)\n   *\n   * Examples:\n   *\n   *     // create a diagonal matrix\n   *     math.diag([1, 2, 3])      // returns [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n   *     math.diag([1, 2, 3], 1)   // returns [[0, 1, 0, 0], [0, 0, 2, 0], [0, 0, 0, 3]]\n   *     math.diag([1, 2, 3], -1)  // returns [[0, 0, 0], [1, 0, 0], [0, 2, 0], [0, 0, 3]]\n   *\n   *    // retrieve the diagonal from a matrix\n   *    const a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n   *    math.diag(a)   // returns [1, 5, 9]\n   *\n   * See also:\n   *\n   *     ones, zeros, identity\n   *\n   * @param {Matrix | Array} x          A two dimensional matrix or a vector\n   * @param {number | BigNumber} [k=0]  The diagonal where the vector will be filled\n   *                                    in or retrieved.\n   * @param {string} [format='dense']   The matrix storage format.\n   *\n   * @returns {Matrix | Array} Diagonal matrix from input vector, or diagonal from input matrix.\n   */\n  return typed(name, {\n    // FIXME: simplify this huge amount of signatures as soon as typed-function supports optional arguments\n    Array: function Array(x) {\n      return _diag(x, 0, (0, _array.arraySize)(x), null);\n    },\n    'Array, number': function ArrayNumber(x, k) {\n      return _diag(x, k, (0, _array.arraySize)(x), null);\n    },\n    'Array, BigNumber': function ArrayBigNumber(x, k) {\n      return _diag(x, k.toNumber(), (0, _array.arraySize)(x), null);\n    },\n    'Array, string': function ArrayString(x, format) {\n      return _diag(x, 0, (0, _array.arraySize)(x), format);\n    },\n    'Array, number, string': function ArrayNumberString(x, k, format) {\n      return _diag(x, k, (0, _array.arraySize)(x), format);\n    },\n    'Array, BigNumber, string': function ArrayBigNumberString(x, k, format) {\n      return _diag(x, k.toNumber(), (0, _array.arraySize)(x), format);\n    },\n    Matrix: function Matrix(x) {\n      return _diag(x, 0, x.size(), x.storage());\n    },\n    'Matrix, number': function MatrixNumber(x, k) {\n      return _diag(x, k, x.size(), x.storage());\n    },\n    'Matrix, BigNumber': function MatrixBigNumber(x, k) {\n      return _diag(x, k.toNumber(), x.size(), x.storage());\n    },\n    'Matrix, string': function MatrixString(x, format) {\n      return _diag(x, 0, x.size(), format);\n    },\n    'Matrix, number, string': function MatrixNumberString(x, k, format) {\n      return _diag(x, k, x.size(), format);\n    },\n    'Matrix, BigNumber, string': function MatrixBigNumberString(x, k, format) {\n      return _diag(x, k.toNumber(), x.size(), format);\n    }\n  });\n  /**\n   * Creeate diagonal matrix from a vector or vice versa\n   * @param {Array | Matrix} x\n   * @param {number} k\n   * @param {string} format Storage format for matrix. If null,\n   *                          an Array is returned\n   * @returns {Array | Matrix}\n   * @private\n   */\n\n  function _diag(x, k, size, format) {\n    if (!(0, _number.isInteger)(k)) {\n      throw new TypeError('Second parameter in function diag must be an integer');\n    }\n\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0; // check dimensions\n\n    switch (size.length) {\n      case 1:\n        return _createDiagonalMatrix(x, k, format, size[0], kSub, kSuper);\n\n      case 2:\n        return _getDiagonal(x, k, format, size, kSub, kSuper);\n    }\n\n    throw new RangeError('Matrix for function diag must be 2 dimensional');\n  }\n\n  function _createDiagonalMatrix(x, k, format, l, kSub, kSuper) {\n    // matrix size\n    var ms = [l + kSub, l + kSuper];\n\n    if (format && format !== 'sparse' && format !== 'dense') {\n      throw new TypeError(\"Unknown matrix type \".concat(format, \"\\\"\"));\n    } // create diagonal matrix\n\n\n    var m = format === 'sparse' ? SparseMatrix.diagonal(ms, x, k) : DenseMatrix.diagonal(ms, x, k); // check we need to return a matrix\n\n    return format !== null ? m : m.valueOf();\n  }\n\n  function _getDiagonal(x, k, format, s, kSub, kSuper) {\n    // check x is a Matrix\n    if ((0, _is.isMatrix)(x)) {\n      // get diagonal matrix\n      var dm = x.diagonal(k); // check we need to return a matrix\n\n      if (format !== null) {\n        // check we need to change matrix format\n        if (format !== dm.storage()) {\n          return matrix(dm, format);\n        }\n\n        return dm;\n      }\n\n      return dm.valueOf();\n    } // vector size\n\n\n    var n = Math.min(s[0] - kSub, s[1] - kSuper); // diagonal values\n\n    var vector = []; // loop diagonal\n\n    for (var i = 0; i < n; i++) {\n      vector[i] = x[i + kSub][i + kSuper];\n    } // check we need to return a matrix\n\n\n    return format !== null ? matrix(vector) : vector;\n  }\n});\nexports.createDiag = createDiag;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createDiag","_is","_array","_number","_factory","factory","name","dependencies","_ref","_diag","x","k","size","format","isInteger","TypeError","kSuper","kSub","length","ms","l","concat","m","SparseMatrix","diagonal","DenseMatrix","valueOf","isMatrix","dm","storage","matrix","n","Math","min","vector","i","RangeError","typed","Array","arraySize","ArrayNumber","ArrayBigNumber","toNumber","ArrayString","ArrayNumberString","ArrayBigNumberString","Matrix","MatrixNumber","MatrixBigNumber","MatrixString","MatrixNumberString","MatrixBigNumberString"]
}
