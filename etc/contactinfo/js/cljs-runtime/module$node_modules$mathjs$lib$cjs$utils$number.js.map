{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$utils$number.js",
"lineCount":15,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/utils/number.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$utils$number\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isInteger = isInteger;\nexports.format = format;\nexports.splitNumber = splitNumber;\nexports.toEngineering = toEngineering;\nexports.toFixed = toFixed;\nexports.toExponential = toExponential;\nexports.toPrecision = toPrecision;\nexports.roundDigits = roundDigits;\nexports.digits = digits;\nexports.nearlyEqual = nearlyEqual;\nexports.tanh = exports.sinh = exports.cosh = exports.atanh = exports.asinh = exports.acosh = exports.DBL_EPSILON = exports.expm1 = exports.cbrt = exports.log1p = exports.log10 = exports.log2 = exports.sign = void 0;\n\nvar _is = require(\"./is.js\");\n\n/**\n * @typedef {{sign: '+' | '-' | '', coefficients: number[], exponent: number}} SplitValue\n */\n\n/**\n * Check if a number is integer\n * @param {number | boolean} value\n * @return {boolean} isInteger\n */\nfunction isInteger(value) {\n  if (typeof value === 'boolean') {\n    return true;\n  }\n\n  return isFinite(value) ? value === Math.round(value) : false;\n}\n/**\n * Calculate the sign of a number\n * @param {number} x\n * @returns {number}\n */\n\n\nvar sign = /* #__PURE__ */Math.sign || function (x) {\n  if (x > 0) {\n    return 1;\n  } else if (x < 0) {\n    return -1;\n  } else {\n    return 0;\n  }\n};\n/**\n * Calculate the base-2 logarithm of a number\n * @param {number} x\n * @returns {number}\n */\n\n\nexports.sign = sign;\n\nvar log2 = /* #__PURE__ */Math.log2 || function log2(x) {\n  return Math.log(x) / Math.LN2;\n};\n/**\n * Calculate the base-10 logarithm of a number\n * @param {number} x\n * @returns {number}\n */\n\n\nexports.log2 = log2;\n\nvar log10 = /* #__PURE__ */Math.log10 || function log10(x) {\n  return Math.log(x) / Math.LN10;\n};\n/**\n * Calculate the natural logarithm of a number + 1\n * @param {number} x\n * @returns {number}\n */\n\n\nexports.log10 = log10;\n\nvar log1p = /* #__PURE__ */Math.log1p || function (x) {\n  return Math.log(x + 1);\n};\n/**\n * Calculate cubic root for a number\n *\n * Code from es6-shim.js:\n *   https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1564-L1577\n *\n * @param {number} x\n * @returns {number} Returns the cubic root of x\n */\n\n\nexports.log1p = log1p;\n\nvar cbrt = /* #__PURE__ */Math.cbrt || function cbrt(x) {\n  if (x === 0) {\n    return x;\n  }\n\n  var negate = x < 0;\n  var result;\n\n  if (negate) {\n    x = -x;\n  }\n\n  if (isFinite(x)) {\n    result = Math.exp(Math.log(x) / 3); // from https://en.wikipedia.org/wiki/Cube_root#Numerical_methods\n\n    result = (x / (result * result) + 2 * result) / 3;\n  } else {\n    result = x;\n  }\n\n  return negate ? -result : result;\n};\n/**\n * Calculates exponentiation minus 1\n * @param {number} x\n * @return {number} res\n */\n\n\nexports.cbrt = cbrt;\n\nvar expm1 = /* #__PURE__ */Math.expm1 || function expm1(x) {\n  return x >= 2e-4 || x <= -2e-4 ? Math.exp(x) - 1 : x + x * x / 2 + x * x * x / 6;\n};\n/**\n * Formats a number in a given base\n * @param {number} n\n * @param {number} base\n * @param {number} size\n * @returns {string}\n */\n\n\nexports.expm1 = expm1;\n\nfunction formatNumberToBase(n, base, size) {\n  var prefixes = {\n    2: '0b',\n    8: '0o',\n    16: '0x'\n  };\n  var prefix = prefixes[base];\n  var suffix = '';\n\n  if (size) {\n    if (size < 1) {\n      throw new Error('size must be in greater than 0');\n    }\n\n    if (!isInteger(size)) {\n      throw new Error('size must be an integer');\n    }\n\n    if (n > Math.pow(2, size - 1) - 1 || n < -Math.pow(2, size - 1)) {\n      throw new Error(\"Value must be in range [-2^\".concat(size - 1, \", 2^\").concat(size - 1, \"-1]\"));\n    }\n\n    if (!isInteger(n)) {\n      throw new Error('Value must be an integer');\n    }\n\n    if (n < 0) {\n      n = n + Math.pow(2, size);\n    }\n\n    suffix = \"i\".concat(size);\n  }\n\n  var sign = '';\n\n  if (n < 0) {\n    n = -n;\n    sign = '-';\n  }\n\n  return \"\".concat(sign).concat(prefix).concat(n.toString(base)).concat(suffix);\n}\n/**\n * Convert a number to a formatted string representation.\n *\n * Syntax:\n *\n *    format(value)\n *    format(value, options)\n *    format(value, precision)\n *    format(value, fn)\n *\n * Where:\n *\n *    {number} value   The value to be formatted\n *    {Object} options An object with formatting options. Available options:\n *                     {string} notation\n *                         Number notation. Choose from:\n *                         'fixed'          Always use regular number notation.\n *                                          For example '123.40' and '14000000'\n *                         'exponential'    Always use exponential notation.\n *                                          For example '1.234e+2' and '1.4e+7'\n *                         'engineering'    Always use engineering notation.\n *                                          For example '123.4e+0' and '14.0e+6'\n *                         'auto' (default) Regular number notation for numbers\n *                                          having an absolute value between\n *                                          `lowerExp` and `upperExp` bounds, and\n *                                          uses exponential notation elsewhere.\n *                                          Lower bound is included, upper bound\n *                                          is excluded.\n *                                          For example '123.4' and '1.4e7'.\n *                         'bin', 'oct, or\n *                         'hex'            Format the number using binary, octal,\n *                                          or hexadecimal notation.\n *                                          For example '0b1101' and '0x10fe'.\n *                     {number} wordSize    The word size in bits to use for formatting\n *                                          in binary, octal, or hexadecimal notation.\n *                                          To be used only with 'bin', 'oct', or 'hex'\n *                                          values for 'notation' option. When this option\n *                                          is defined the value is formatted as a signed\n *                                          twos complement integer of the given word size\n *                                          and the size suffix is appended to the output.\n *                                          For example\n *                                          format(-1, {notation: 'hex', wordSize: 8}) === '0xffi8'.\n *                                          Default value is undefined.\n *                     {number} precision   A number between 0 and 16 to round\n *                                          the digits of the number.\n *                                          In case of notations 'exponential',\n *                                          'engineering', and 'auto',\n *                                          `precision` defines the total\n *                                          number of significant digits returned.\n *                                          In case of notation 'fixed',\n *                                          `precision` defines the number of\n *                                          significant digits after the decimal\n *                                          point.\n *                                          `precision` is undefined by default,\n *                                          not rounding any digits.\n *                     {number} lowerExp    Exponent determining the lower boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `-3`.\n *                     {number} upperExp    Exponent determining the upper boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `5`.\n *    {Function} fn    A custom formatting function. Can be used to override the\n *                     built-in notations. Function `fn` is called with `value` as\n *                     parameter and must return a string. Is useful for example to\n *                     format all values inside a matrix in a particular way.\n *\n * Examples:\n *\n *    format(6.4)                                        // '6.4'\n *    format(1240000)                                    // '1.24e6'\n *    format(1/3)                                        // '0.3333333333333333'\n *    format(1/3, 3)                                     // '0.333'\n *    format(21385, 2)                                   // '21000'\n *    format(12.071, {notation: 'fixed'})                // '12'\n *    format(2.3,    {notation: 'fixed', precision: 2})  // '2.30'\n *    format(52.8,   {notation: 'exponential'})          // '5.28e+1'\n *    format(12345678, {notation: 'engineering'})        // '12.345678e+6'\n *\n * @param {number} value\n * @param {Object | Function | number} [options]\n * @return {string} str The formatted value\n */\n\n\nfunction format(value, options) {\n  if (typeof options === 'function') {\n    // handle format(value, fn)\n    return options(value);\n  } // handle special cases\n\n\n  if (value === Infinity) {\n    return 'Infinity';\n  } else if (value === -Infinity) {\n    return '-Infinity';\n  } else if (isNaN(value)) {\n    return 'NaN';\n  } // default values for options\n\n\n  var notation = 'auto';\n  var precision;\n  var wordSize;\n\n  if (options) {\n    // determine notation from options\n    if (options.notation) {\n      notation = options.notation;\n    } // determine precision from options\n\n\n    if ((0, _is.isNumber)(options)) {\n      precision = options;\n    } else if ((0, _is.isNumber)(options.precision)) {\n      precision = options.precision;\n    }\n\n    if (options.wordSize) {\n      wordSize = options.wordSize;\n\n      if (typeof wordSize !== 'number') {\n        throw new Error('Option \"wordSize\" must be a number');\n      }\n    }\n  } // handle the various notations\n\n\n  switch (notation) {\n    case 'fixed':\n      return toFixed(value, precision);\n\n    case 'exponential':\n      return toExponential(value, precision);\n\n    case 'engineering':\n      return toEngineering(value, precision);\n\n    case 'bin':\n      return formatNumberToBase(value, 2, wordSize);\n\n    case 'oct':\n      return formatNumberToBase(value, 8, wordSize);\n\n    case 'hex':\n      return formatNumberToBase(value, 16, wordSize);\n\n    case 'auto':\n      // remove trailing zeros after the decimal point\n      return toPrecision(value, precision, options && options).replace(/((\\.\\d*?)(0+))($|e)/, function () {\n        var digits = arguments[2];\n        var e = arguments[4];\n        return digits !== '.' ? digits + e : e;\n      });\n\n    default:\n      throw new Error('Unknown notation \"' + notation + '\". ' + 'Choose \"auto\", \"exponential\", \"fixed\", \"bin\", \"oct\", or \"hex.');\n  }\n}\n/**\n * Split a number into sign, coefficients, and exponent\n * @param {number | string} value\n * @return {SplitValue}\n *              Returns an object containing sign, coefficients, and exponent\n */\n\n\nfunction splitNumber(value) {\n  // parse the input value\n  var match = String(value).toLowerCase().match(/^0*?(-?)(\\d+\\.?\\d*)(e([+-]?\\d+))?$/);\n\n  if (!match) {\n    throw new SyntaxError('Invalid number ' + value);\n  }\n\n  var sign = match[1];\n  var digits = match[2];\n  var exponent = parseFloat(match[4] || '0');\n  var dot = digits.indexOf('.');\n  exponent += dot !== -1 ? dot - 1 : digits.length - 1;\n  var coefficients = digits.replace('.', '') // remove the dot (must be removed before removing leading zeros)\n  .replace(/^0*/, function (zeros) {\n    // remove leading zeros, add their count to the exponent\n    exponent -= zeros.length;\n    return '';\n  }).replace(/0*$/, '') // remove trailing zeros\n  .split('').map(function (d) {\n    return parseInt(d);\n  });\n\n  if (coefficients.length === 0) {\n    coefficients.push(0);\n    exponent++;\n  }\n\n  return {\n    sign: sign,\n    coefficients: coefficients,\n    exponent: exponent\n  };\n}\n/**\n * Format a number in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'\n * @param {number | string} value\n * @param {number} [precision]        Optional number of significant figures to return.\n */\n\n\nfunction toEngineering(value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n\n  var split = splitNumber(value);\n  var rounded = roundDigits(split, precision);\n  var e = rounded.exponent;\n  var c = rounded.coefficients; // find nearest lower multiple of 3 for exponent\n\n  var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3;\n\n  if ((0, _is.isNumber)(precision)) {\n    // add zeroes to give correct sig figs\n    while (precision > c.length || e - newExp + 1 > c.length) {\n      c.push(0);\n    }\n  } else {\n    // concatenate coefficients with necessary zeros\n    // add zeros if necessary (for example: 1e+8 -> 100e+6)\n    var missingZeros = Math.abs(e - newExp) - (c.length - 1);\n\n    for (var i = 0; i < missingZeros; i++) {\n      c.push(0);\n    }\n  } // find difference in exponents\n\n\n  var expDiff = Math.abs(e - newExp);\n  var decimalIdx = 1; // push decimal index over by expDiff times\n\n  while (expDiff > 0) {\n    decimalIdx++;\n    expDiff--;\n  } // if all coefficient values are zero after the decimal point and precision is unset, don't add a decimal value.\n  // otherwise concat with the rest of the coefficients\n\n\n  var decimals = c.slice(decimalIdx).join('');\n  var decimalVal = (0, _is.isNumber)(precision) && decimals.length || decimals.match(/[1-9]/) ? '.' + decimals : '';\n  var str = c.slice(0, decimalIdx).join('') + decimalVal + 'e' + (e >= 0 ? '+' : '') + newExp.toString();\n  return rounded.sign + str;\n}\n/**\n * Format a number with fixed notation.\n * @param {number | string} value\n * @param {number} [precision=undefined]  Optional number of decimals after the\n *                                        decimal point. null by default.\n */\n\n\nfunction toFixed(value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n\n  var splitValue = splitNumber(value);\n  var rounded = typeof precision === 'number' ? roundDigits(splitValue, splitValue.exponent + 1 + precision) : splitValue;\n  var c = rounded.coefficients;\n  var p = rounded.exponent + 1; // exponent may have changed\n  // append zeros if needed\n\n  var pp = p + (precision || 0);\n\n  if (c.length < pp) {\n    c = c.concat(zeros(pp - c.length));\n  } // prepend zeros if needed\n\n\n  if (p < 0) {\n    c = zeros(-p + 1).concat(c);\n    p = 1;\n  } // insert a dot if needed\n\n\n  if (p < c.length) {\n    c.splice(p, 0, p === 0 ? '0.' : '.');\n  }\n\n  return rounded.sign + c.join('');\n}\n/**\n * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'\n * @param {number | string} value\n * @param {number} [precision]  Number of digits in formatted output.\n *                              If not provided, the maximum available digits\n *                              is used.\n */\n\n\nfunction toExponential(value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  } // round if needed, else create a clone\n\n\n  var split = splitNumber(value);\n  var rounded = precision ? roundDigits(split, precision) : split;\n  var c = rounded.coefficients;\n  var e = rounded.exponent; // append zeros if needed\n\n  if (c.length < precision) {\n    c = c.concat(zeros(precision - c.length));\n  } // format as `C.CCCe+EEE` or `C.CCCe-EEE`\n\n\n  var first = c.shift();\n  return rounded.sign + first + (c.length > 0 ? '.' + c.join('') : '') + 'e' + (e >= 0 ? '+' : '') + e;\n}\n/**\n * Format a number with a certain precision\n * @param {number | string} value\n * @param {number} [precision=undefined] Optional number of digits.\n * @param {{lowerExp: number | undefined, upperExp: number | undefined}} [options]\n *                                       By default:\n *                                         lowerExp = -3 (incl)\n *                                         upper = +5 (excl)\n * @return {string}\n */\n\n\nfunction toPrecision(value, precision, options) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  } // determine lower and upper bound for exponential notation.\n\n\n  var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;\n  var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5;\n  var split = splitNumber(value);\n  var rounded = precision ? roundDigits(split, precision) : split;\n\n  if (rounded.exponent < lowerExp || rounded.exponent >= upperExp) {\n    // exponential notation\n    return toExponential(value, precision);\n  } else {\n    var c = rounded.coefficients;\n    var e = rounded.exponent; // append trailing zeros\n\n    if (c.length < precision) {\n      c = c.concat(zeros(precision - c.length));\n    } // append trailing zeros\n    // TODO: simplify the next statement\n\n\n    c = c.concat(zeros(e - c.length + 1 + (c.length < precision ? precision - c.length : 0))); // prepend zeros\n\n    c = zeros(-e).concat(c);\n    var dot = e > 0 ? e : 0;\n\n    if (dot < c.length - 1) {\n      c.splice(dot + 1, 0, '.');\n    }\n\n    return rounded.sign + c.join('');\n  }\n}\n/**\n * Round the number of digits of a number *\n * @param {SplitValue} split       A value split with .splitNumber(value)\n * @param {number} precision  A positive integer\n * @return {SplitValue}\n *              Returns an object containing sign, coefficients, and exponent\n *              with rounded digits\n */\n\n\nfunction roundDigits(split, precision) {\n  // create a clone\n  var rounded = {\n    sign: split.sign,\n    coefficients: split.coefficients,\n    exponent: split.exponent\n  };\n  var c = rounded.coefficients; // prepend zeros if needed\n\n  while (precision <= 0) {\n    c.unshift(0);\n    rounded.exponent++;\n    precision++;\n  }\n\n  if (c.length > precision) {\n    var removed = c.splice(precision, c.length - precision);\n\n    if (removed[0] >= 5) {\n      var i = precision - 1;\n      c[i]++;\n\n      while (c[i] === 10) {\n        c.pop();\n\n        if (i === 0) {\n          c.unshift(0);\n          rounded.exponent++;\n          i++;\n        }\n\n        i--;\n        c[i]++;\n      }\n    }\n  }\n\n  return rounded;\n}\n/**\n * Create an array filled with zeros.\n * @param {number} length\n * @return {Array}\n */\n\n\nfunction zeros(length) {\n  var arr = [];\n\n  for (var i = 0; i < length; i++) {\n    arr.push(0);\n  }\n\n  return arr;\n}\n/**\n * Count the number of significant digits of a number.\n *\n * For example:\n *   2.34 returns 3\n *   0.0034 returns 2\n *   120.5e+30 returns 4\n *\n * @param {number} value\n * @return {number} digits   Number of significant digits\n */\n\n\nfunction digits(value) {\n  return value.toExponential().replace(/e.*$/, '') // remove exponential notation\n  .replace(/^0\\.?0*|\\./, '') // remove decimal point and leading zeros\n  .length;\n}\n/**\n * Minimum number added to one that makes the result different than one\n */\n\n\nvar DBL_EPSILON = Number.EPSILON || 2.2204460492503130808472633361816E-16;\n/**\n * Compares two floating point numbers.\n * @param {number} x          First value to compare\n * @param {number} y          Second value to compare\n * @param {number} [epsilon]  The maximum relative difference between x and y\n *                            If epsilon is undefined or null, the function will\n *                            test whether x and y are exactly equal.\n * @return {boolean} whether the two numbers are nearly equal\n*/\n\nexports.DBL_EPSILON = DBL_EPSILON;\n\nfunction nearlyEqual(x, y, epsilon) {\n  // if epsilon is null or undefined, test whether x and y are exactly equal\n  if (epsilon === null || epsilon === undefined) {\n    return x === y;\n  }\n\n  if (x === y) {\n    return true;\n  } // NaN\n\n\n  if (isNaN(x) || isNaN(y)) {\n    return false;\n  } // at this point x and y should be finite\n\n\n  if (isFinite(x) && isFinite(y)) {\n    // check numbers are very close, needed when comparing numbers near zero\n    var diff = Math.abs(x - y);\n\n    if (diff < DBL_EPSILON) {\n      return true;\n    } else {\n      // use relative error\n      return diff <= Math.max(Math.abs(x), Math.abs(y)) * epsilon;\n    }\n  } // Infinite and Number or negative Infinite and positive Infinite cases\n\n\n  return false;\n}\n/**\n * Calculate the hyperbolic arccos of a number\n * @param {number} x\n * @return {number}\n */\n\n\nvar acosh = Math.acosh || function (x) {\n  return Math.log(Math.sqrt(x * x - 1) + x);\n};\n\nexports.acosh = acosh;\n\nvar asinh = Math.asinh || function (x) {\n  return Math.log(Math.sqrt(x * x + 1) + x);\n};\n/**\n * Calculate the hyperbolic arctangent of a number\n * @param {number} x\n * @return {number}\n */\n\n\nexports.asinh = asinh;\n\nvar atanh = Math.atanh || function (x) {\n  return Math.log((1 + x) / (1 - x)) / 2;\n};\n/**\n * Calculate the hyperbolic cosine of a number\n * @param {number} x\n * @returns {number}\n */\n\n\nexports.atanh = atanh;\n\nvar cosh = Math.cosh || function (x) {\n  return (Math.exp(x) + Math.exp(-x)) / 2;\n};\n/**\n * Calculate the hyperbolic sine of a number\n * @param {number} x\n * @returns {number}\n */\n\n\nexports.cosh = cosh;\n\nvar sinh = Math.sinh || function (x) {\n  return (Math.exp(x) - Math.exp(-x)) / 2;\n};\n/**\n * Calculate the hyperbolic tangent of a number\n * @param {number} x\n * @returns {number}\n */\n\n\nexports.sinh = sinh;\n\nvar tanh = Math.tanh || function (x) {\n  var e = Math.exp(2 * x);\n  return (e - 1) / (e + 1);\n};\n\nexports.tanh = tanh;\n};"],
"names":["shadow$provide","global","require","module","exports","isInteger","value","isFinite","Math","round","formatNumberToBase","n","base","size","prefix","prefixes","suffix","Error","pow","concat","sign","toString","splitNumber","match","String","toLowerCase","SyntaxError","digits","exponent","parseFloat","dot","indexOf","length","coefficients","replace","zeros","split","map","d","parseInt","push","toEngineering","precision","isNaN","rounded","roundDigits","e","c","newExp","_is","isNumber","missingZeros","abs","i","expDiff","decimalIdx","decimals","slice","join","decimalVal","str","toFixed","splitValue","p","pp","splice","toExponential","first","shift","toPrecision","options","lowerExp","undefined","upperExp","unshift","removed","pop","arr","Object","defineProperty","format","Infinity","notation","wordSize","nearlyEqual","x","y","epsilon","diff","DBL_EPSILON","max","tanh","sinh","cosh","atanh","asinh","acosh","expm1","cbrt","log1p","log10","log2","log","LN2","LN10","negate","result","exp","Number","EPSILON","sqrt"]
}
