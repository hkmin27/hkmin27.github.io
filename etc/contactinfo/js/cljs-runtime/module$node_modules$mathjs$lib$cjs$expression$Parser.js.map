{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$expression$Parser.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,oDAAA,CAAyE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGjHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,iBAAR,CAA4B,IAAK,EAE7BC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAEf,KAAIQ,QAAUR,OAAA,CAAQ,iDAAR,CAAd,CAEIS,SAAWT,OAAA,CAAQ,kDAAR,CAIXM,QAAAA,CAAmC,CAAC,CAAA,CAAGC,MAASG,CAAAA,OAAb,EAF5BC,QAE4B,CADpBC,CAAC,OAADA,CACoB,CAA0C,QAAS,CAACC,IAAD,CAAO,CAmD/FC,QAASA,OAAM,EAAG,CAChB,GAAI,EAAE,IAAF;AAAkBA,MAAlB,CAAJ,CACE,KAAM,KAAIC,WAAJ,CAAgB,kDAAhB,CAAN,CAGF,IAAKC,CAAAA,KAAL,CAAa,EALG,CAlDlB,IAAIC,MAAQJ,IAAKI,CAAAA,KA8DjBH,OAAOI,CAAAA,SAAUC,CAAAA,IAAjB,CAAwB,QACxBL,OAAOI,CAAAA,SAAUE,CAAAA,QAAjB,CAA4B,CAAA,CAQ5BN,OAAOI,CAAAA,SAAUG,CAAAA,QAAjB,CAA4BC,QAAS,CAACC,IAAD,CAAO,CAE1C,MAAON,MAAA,CAAMM,IAAN,CAAYC,CAAAA,OAAZ,EAAsBH,CAAAA,QAAtB,CAA+B,IAAKL,CAAAA,KAApC,CAFmC,CAY5CF,OAAOI,CAAAA,SAAUO,CAAAA,GAAjB,CAAuBC,QAAS,CAACf,IAAD,CAAO,CAErC,MAAOA,KAAA,GAAQ,KAAKK,CAAAA,KAAb,CAAqB,CAAC,CAAA,CAAGP,QAASkB,CAAAA,eAAb,EAA8B,IAAKX,CAAAA,KAAnC,CAA0CL,IAA1C,CAArB,CAAuEiB,IAAAA,EAFzC,CAUvCd,OAAOI,CAAAA,SAAUW,CAAAA,MAAjB,CAA0BC,QAAS,EAAG,CACpC,MAAO,CAAC,CAAA,CAAGtB,OAAQuB,CAAAA,MAAZ,EAAoB,EAApB,CAAwB,IAAKf,CAAAA,KAA7B,CAD6B,CAUtCF,OAAOI,CAAAA,SAAUc,CAAAA,GAAjB,CAAuBC,QAAS,CAACtB,IAAD,CAAON,KAAP,CAAc,CAE5C,MAAO,CAAC,CAAA;AAAGI,QAASyB,CAAAA,eAAb,EAA8B,IAAKlB,CAAAA,KAAnC,CAA0CL,IAA1C,CAAgDN,KAAhD,CAFqC,CAU9CS,OAAOI,CAAAA,SAAUiB,CAAAA,MAAjB,CAA0BC,QAAS,CAACzB,IAAD,CAAO,CAExC,OAAO,IAAKK,CAAAA,KAAL,CAAWL,IAAX,CAFiC,CAS1CG,OAAOI,CAAAA,SAAUmB,CAAAA,KAAjB,CAAyBC,QAAS,EAAG,CACnC,IAAKC,IAAIA,KAAT,GAAkB,KAAKvB,CAAAA,KAAvB,CACM,CAAC,CAAA,CAAGR,OAAQgC,CAAAA,cAAZ,EAA4B,IAAKxB,CAAAA,KAAjC,CAAwCuB,KAAxC,CAAJ,EACE,OAAO,IAAKvB,CAAAA,KAAL,CAAWuB,KAAX,CAHwB,CAQrC,OAAOzB,OAnIwF,CAA1D,CAoIpC,CACD2B,QAAS,CAAA,CADR,CApIoC,CAuIvCvC,QAAQI,CAAAA,iBAAR,CAA4BA,OAvJqF;",
"sources":["node_modules/mathjs/lib/cjs/expression/Parser.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$expression$Parser\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createParserClass = void 0;\n\nvar _factory = require(\"../utils/factory.js\");\n\nvar _object = require(\"../utils/object.js\");\n\nvar _customs = require(\"../utils/customs.js\");\n\nvar name = 'Parser';\nvar dependencies = ['parse'];\nvar createParserClass = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var parse = _ref.parse;\n\n  /**\n   * @constructor Parser\n   * Parser contains methods to evaluate or parse expressions, and has a number\n   * of convenience methods to get, set, and remove variables from memory. Parser\n   * keeps a scope containing variables in memory, which is used for all\n   * evaluations.\n   *\n   * Methods:\n   *    const result = parser.evaluate(expr)  // evaluate an expression\n   *    const value = parser.get(name)        // retrieve a variable from the parser\n   *    const values = parser.getAll()        // retrieve all defined variables\n   *    parser.set(name, value)               // set a variable in the parser\n   *    parser.remove(name)                   // clear a variable from the\n   *                                          // parsers scope\n   *    parser.clear()                        // clear the parsers scope\n   *\n   * Example usage:\n   *    const parser = new Parser()\n   *    // Note: there is a convenience method which can be used instead:\n   *    // const parser = new math.parser()\n   *\n   *    // evaluate expressions\n   *    parser.evaluate('sqrt(3^2 + 4^2)')        // 5\n   *    parser.evaluate('sqrt(-4)')               // 2i\n   *    parser.evaluate('2 inch in cm')           // 5.08 cm\n   *    parser.evaluate('cos(45 deg)')            // 0.7071067811865476\n   *\n   *    // define variables and functions\n   *    parser.evaluate('x = 7 / 2')              // 3.5\n   *    parser.evaluate('x + 3')                  // 6.5\n   *    parser.evaluate('function f(x, y) = x^y') // f(x, y)\n   *    parser.evaluate('f(2, 3)')                // 8\n   *\n   *    // get and set variables and functions\n   *    const x = parser.get('x')                 // 7\n   *    const f = parser.get('f')                 // function\n   *    const g = f(3, 2)                         // 9\n   *    parser.set('h', 500)\n   *    const i = parser.evaluate('h / 2')        // 250\n   *    parser.set('hello', function (name) {\n   *        return 'hello, ' + name + '!'\n   *    })\n   *    parser.evaluate('hello(\"user\")')          // \"hello, user!\"\n   *\n   *    // clear defined functions and variables\n   *    parser.clear()\n   *\n   */\n  function Parser() {\n    if (!(this instanceof Parser)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.scope = {};\n  }\n  /**\n   * Attach type information\n   */\n\n\n  Parser.prototype.type = 'Parser';\n  Parser.prototype.isParser = true;\n  /**\n   * Parse and evaluate the given expression\n   * @param {string} expr   A string containing an expression, for example \"2+3\"\n   * @return {*} result     The result, or undefined when the expression was empty\n   * @throws {Error}\n   */\n\n  Parser.prototype.evaluate = function (expr) {\n    // TODO: validate arguments\n    return parse(expr).compile().evaluate(this.scope);\n  };\n  /**\n   * Get a variable (a function or variable) by name from the parsers scope.\n   * Returns undefined when not found\n   * @param {string} name\n   * @return {* | undefined} value\n   */\n\n\n  Parser.prototype.get = function (name) {\n    // TODO: validate arguments\n    return name in this.scope ? (0, _customs.getSafeProperty)(this.scope, name) : undefined;\n  };\n  /**\n   * Get a map with all defined variables\n   * @return {Object} values\n   */\n\n\n  Parser.prototype.getAll = function () {\n    return (0, _object.extend)({}, this.scope);\n  };\n  /**\n   * Set a symbol (a function or variable) by name from the parsers scope.\n   * @param {string} name\n   * @param {* | undefined} value\n   */\n\n\n  Parser.prototype.set = function (name, value) {\n    // TODO: validate arguments\n    return (0, _customs.setSafeProperty)(this.scope, name, value);\n  };\n  /**\n   * Remove a variable from the parsers scope\n   * @param {string} name\n   */\n\n\n  Parser.prototype.remove = function (name) {\n    // TODO: validate arguments\n    delete this.scope[name];\n  };\n  /**\n   * Clear the scope with variables and functions\n   */\n\n\n  Parser.prototype.clear = function () {\n    for (var _name in this.scope) {\n      if ((0, _object.hasOwnProperty)(this.scope, _name)) {\n        delete this.scope[_name];\n      }\n    }\n  };\n\n  return Parser;\n}, {\n  isClass: true\n});\nexports.createParserClass = createParserClass;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createParserClass","_factory","_object","_customs","factory","name","dependencies","_ref","Parser","SyntaxError","scope","parse","prototype","type","isParser","evaluate","Parser.prototype.evaluate","expr","compile","get","Parser.prototype.get","getSafeProperty","undefined","getAll","Parser.prototype.getAll","extend","set","Parser.prototype.set","setSafeProperty","remove","Parser.prototype.remove","clear","Parser.prototype.clear","_name","hasOwnProperty","isClass"]
}
