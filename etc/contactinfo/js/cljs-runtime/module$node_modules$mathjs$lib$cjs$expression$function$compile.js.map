{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$expression$function$compile.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,8DAAA,CAAmF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG3HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,aAAR,CAAwB,IAAK,EAE7B,KAAIC,YAAcP,OAAA,CAAQ,qDAAR,CAEdQ,OAAAA,CAAWR,OAAA,CAAQ,kDAAR,CAIXM,OAAAA,CAA+B,CAAC,CAAA,CAAGE,MAASC,CAAAA,OAAb,EAFxBC,SAEwB,CADhBC,CAAC,OAADA,CAAU,OAAVA,CACgB,CAA0C,QAAS,CAACC,IAAD,CAAO,CAAA,IACvFC,MAAQD,IAAKC,CAAAA,KAD0E,CAEvFC,MAAQF,IAAKE,CAAAA,KAoCjB,OAAOD,MAAA,CAxCEH,SAwCF,CAAY,CACjBK,OAAQA,QAAe,CAACC,IAAD,CAAO,CAC5B,MAAOF,MAAA,CAAME,IAAN,CAAYC,CAAAA,OAAZ,EADqB,CADb;AAIjB,iBAAkBC,QAAoB,CAACF,IAAD,CAAO,CAC3C,MAAO,CAAC,CAAA,CAAGT,WAAYY,CAAAA,OAAhB,EAAyBH,IAAzB,CAA+B,QAAS,CAACI,KAAD,CAAQ,CACrD,MAAON,MAAA,CAAMM,KAAN,CAAaH,CAAAA,OAAb,EAD8C,CAAhD,CADoC,CAJ5B,CAAZ,CAtCoF,CAA1D,CAiDnCf,QAAQI,CAAAA,aAAR,CAAwBA,MA/DmG;",
"sources":["node_modules/mathjs/lib/cjs/expression/function/compile.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$expression$function$compile\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCompile = void 0;\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'compile';\nvar dependencies = ['typed', 'parse'];\nvar createCompile = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      parse = _ref.parse;\n\n  /**\n   * Parse and compile an expression.\n   * Returns a an object with a function `evaluate([scope])` to evaluate the\n   * compiled expression.\n   *\n   * Syntax:\n   *\n   *     math.compile(expr)                       // returns one node\n   *     math.compile([expr1, expr2, expr3, ...]) // returns an array with nodes\n   *\n   * Examples:\n   *\n   *     const code1 = math.compile('sqrt(3^2 + 4^2)')\n   *     code1.evaluate() // 5\n   *\n   *     let scope = {a: 3, b: 4}\n   *     const code2 = math.compile('a * b') // 12\n   *     code2.evaluate(scope) // 12\n   *     scope.a = 5\n   *     code2.evaluate(scope) // 20\n   *\n   *     const nodes = math.compile(['a = 3', 'b = 4', 'a * b'])\n   *     nodes[2].evaluate() // 12\n   *\n   * See also:\n   *\n   *    parse, evaluate\n   *\n   * @param {string | string[] | Array | Matrix} expr\n   *            The expression to be compiled\n   * @return {{evaluate: Function} | Array.<{evaluate: Function}>} code\n   *            An object with the compiled expression\n   * @throws {Error}\n   */\n  return typed(name, {\n    string: function string(expr) {\n      return parse(expr).compile();\n    },\n    'Array | Matrix': function ArrayMatrix(expr) {\n      return (0, _collection.deepMap)(expr, function (entry) {\n        return parse(entry).compile();\n      });\n    }\n  });\n});\nexports.createCompile = createCompile;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createCompile","_collection","_factory","factory","name","dependencies","_ref","typed","parse","string","expr","compile","ArrayMatrix","deepMap","entry"]
}
