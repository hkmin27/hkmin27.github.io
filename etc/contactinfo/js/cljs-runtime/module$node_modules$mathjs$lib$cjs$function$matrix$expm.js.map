{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$matrix$expm.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/function/matrix/expm.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$matrix$expm\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createExpm = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _string = require(\"../../utils/string.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'expm';\nvar dependencies = ['typed', 'abs', 'add', 'identity', 'inv', 'multiply'];\nvar createExpm = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      abs = _ref.abs,\n      add = _ref.add,\n      identity = _ref.identity,\n      inv = _ref.inv,\n      multiply = _ref.multiply;\n\n  /**\n   * Compute the matrix exponential, expm(A) = e^A. The matrix must be square.\n   * Not to be confused with exp(a), which performs element-wise\n   * exponentiation.\n   *\n   * The exponential is calculated using the Pad\u00e9 approximant with scaling and\n   * squaring; see \"Nineteen Dubious Ways to Compute the Exponential of a\n   * Matrix,\" by Moler and Van Loan.\n   *\n   * Syntax:\n   *\n   *     math.expm(x)\n   *\n   * Examples:\n   *\n   *     const A = [[0,2],[0,0]]\n   *     math.expm(A)        // returns [[1,2],[0,1]]\n   *\n   * See also:\n   *\n   *     exp\n   *\n   * @param {Matrix} x  A square Matrix\n   * @return {Matrix}   The exponential of x\n   */\n  return typed(name, {\n    Matrix: function Matrix(A) {\n      // Check matrix size\n      var size = A.size();\n\n      if (size.length !== 2 || size[0] !== size[1]) {\n        throw new RangeError('Matrix must be square ' + '(size: ' + (0, _string.format)(size) + ')');\n      }\n\n      var n = size[0]; // Desired accuracy of the approximant (The actual accuracy\n      // will be affected by round-off error)\n\n      var eps = 1e-15; // The Pad\u00e9 approximant is not so accurate when the values of A\n      // are \"large\", so scale A by powers of two. Then compute the\n      // exponential, and square the result repeatedly according to\n      // the identity e^A = (e^(A/m))^m\n      // Compute infinity-norm of A, ||A||, to see how \"big\" it is\n\n      var infNorm = infinityNorm(A); // Find the optimal scaling factor and number of terms in the\n      // Pad\u00e9 approximant to reach the desired accuracy\n\n      var params = findParams(infNorm, eps);\n      var q = params.q;\n      var j = params.j; // The Pade approximation to e^A is:\n      // Rqq(A) = Dqq(A) ^ -1 * Nqq(A)\n      // where\n      // Nqq(A) = sum(i=0, q, (2q-i)!p! / [ (2q)!i!(q-i)! ] A^i\n      // Dqq(A) = sum(i=0, q, (2q-i)!q! / [ (2q)!i!(q-i)! ] (-A)^i\n      // Scale A by 1 / 2^j\n\n      var Apos = multiply(A, Math.pow(2, -j)); // The i=0 term is just the identity matrix\n\n      var N = identity(n);\n      var D = identity(n); // Initialization (i=0)\n\n      var factor = 1; // Initialization (i=1)\n\n      var AposToI = Apos; // Cloning not necessary\n\n      var alternate = -1;\n\n      for (var i = 1; i <= q; i++) {\n        if (i > 1) {\n          AposToI = multiply(AposToI, Apos);\n          alternate = -alternate;\n        }\n\n        factor = factor * (q - i + 1) / ((2 * q - i + 1) * i);\n        N = add(N, multiply(factor, AposToI));\n        D = add(D, multiply(factor * alternate, AposToI));\n      }\n\n      var R = multiply(inv(D), N); // Square j times\n\n      for (var _i = 0; _i < j; _i++) {\n        R = multiply(R, R);\n      }\n\n      return (0, _is.isSparseMatrix)(A) ? A.createSparseMatrix(R) : R;\n    }\n  });\n\n  function infinityNorm(A) {\n    var n = A.size()[0];\n    var infNorm = 0;\n\n    for (var i = 0; i < n; i++) {\n      var rowSum = 0;\n\n      for (var j = 0; j < n; j++) {\n        rowSum += abs(A.get([i, j]));\n      }\n\n      infNorm = Math.max(rowSum, infNorm);\n    }\n\n    return infNorm;\n  }\n  /**\n   * Find the best parameters for the Pade approximant given\n   * the matrix norm and desired accuracy. Returns the first acceptable\n   * combination in order of increasing computational load.\n   */\n\n\n  function findParams(infNorm, eps) {\n    var maxSearchSize = 30;\n\n    for (var k = 0; k < maxSearchSize; k++) {\n      for (var q = 0; q <= k; q++) {\n        var j = k - q;\n\n        if (errorEstimate(infNorm, q, j) < eps) {\n          return {\n            q: q,\n            j: j\n          };\n        }\n      }\n    }\n\n    throw new Error('Could not find acceptable parameters to compute the matrix exponential (try increasing maxSearchSize in expm.js)');\n  }\n  /**\n   * Returns the estimated error of the Pade approximant for the given\n   * parameters.\n   */\n\n\n  function errorEstimate(infNorm, q, j) {\n    var qfac = 1;\n\n    for (var i = 2; i <= q; i++) {\n      qfac *= i;\n    }\n\n    var twoqfac = qfac;\n\n    for (var _i2 = q + 1; _i2 <= 2 * q; _i2++) {\n      twoqfac *= _i2;\n    }\n\n    var twoqp1fac = twoqfac * (2 * q + 1);\n    return 8.0 * Math.pow(infNorm / Math.pow(2, j), 2 * q) * qfac * qfac / (twoqfac * twoqp1fac);\n  }\n});\nexports.createExpm = createExpm;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createExpm","_is","_string","_factory","factory","name","dependencies","_ref","typed","abs","add","identity","inv","multiply","Matrix","A","size","length","RangeError","format","n","infNorm","i","rowSum","j","get","Math","max","k","maxSearchSize","q","qfac","twoqfac","_i2","eps","pow","Error","Apos","N","D","factor","AposToI","alternate","R","_i","isSparseMatrix","createSparseMatrix"]
}
