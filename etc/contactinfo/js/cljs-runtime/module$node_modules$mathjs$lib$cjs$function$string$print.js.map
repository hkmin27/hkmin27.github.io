{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$string$print.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,wDAAA,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAgFrHC,QAASA,OAAM,CAACC,QAAD,CAAWC,MAAX,CAAmBC,OAAnB,CAA4B,CACzC,MAAOF,SAASG,CAAAA,OAAT,CAAiB,aAAjB,CAAgC,QAAS,CAACC,QAAD,CAAWC,GAAX,CAAgB,CAC1DC,GAAAA,CAAOD,GAAIE,CAAAA,KAAJ,CAAU,GAAV,CAGX,KAFA,IAAIC,MAAQP,MAAA,CAAOK,GAAKG,CAAAA,KAAL,EAAP,CAEZ,CAAOH,GAAKI,CAAAA,MAAZ,EAAgCC,IAAAA,EAAhC,GAAsBH,KAAtB,CAAA,CAA2C,CACzC,IAAII,EAAIN,GAAKG,CAAAA,KAAL,EACRD,MAAA,CAAQI,CAAA,CAAIJ,KAAA,CAAMI,CAAN,CAAJ,CAAeJ,KAAf,CAAuB,GAFU,CAK3C,MAAcG,KAAAA,EAAd,GAAIH,KAAJ,CACO,CAAC,CAAA,CAAGK,GAAIC,CAAAA,QAAR,EAAkBN,KAAlB,CAAL,CAGSA,KAHT,CACS,CAAC,CAAA,CAAGO,OAAQC,CAAAA,MAAZ,EAAoBR,KAApB,CAA2BN,OAA3B,CAFX,CAQOE,QAjBuD,CAAzD,CADkC,CA7E3Ca,MAAOC,CAAAA,cAAP,CAAsBpB,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CU,MAAO,CAAA,CADoC,CAA7C,CAGAV,QAAQqB,CAAAA,WAAR;AAAsB,IAAK,EAE3B,KAAIJ,QAAUnB,OAAA,CAAQ,iDAAR,CAAd,CAEIiB,IAAMjB,OAAA,CAAQ,6CAAR,CAENwB,OAAAA,CAAWxB,OAAA,CAAQ,kDAAR,CAIXuB,OAAAA,CAA6B,CAAC,CAAA,CAAGC,MAASC,CAAAA,OAAb,EAFtBC,OAEsB,CADdC,CAAC,OAADA,CACc,CAA0C,QAAS,CAACC,IAAD,CAAO,CACrFC,IAAAA,CAAQD,IAAKC,CAAAA,KA8CjB,OAAOA,KAAA,CAjDEH,OAiDF,CAAY,CAEjB,yBAA0BvB,MAFT,CAGjB,0CAA2CA,MAH1B,CAAZ,CA/CkF,CAA1D,CA8DjCD,QAAQqB,CAAAA,WAAR,CAAsBA,MA9E+F;",
"sources":["node_modules/mathjs/lib/cjs/function/string/print.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$string$print\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createPrint = void 0;\n\nvar _string = require(\"../../utils/string.js\");\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'print';\nvar dependencies = ['typed'];\nvar createPrint = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Interpolate values into a string template.\n   *\n   * Syntax:\n   *\n   *     math.print(template, values)\n   *     math.print(template, values, precision)\n   *     math.print(template, values, options)\n   *\n   * Example usage:\n   *\n   *     // the following outputs: 'Lucy is 5 years old'\n   *     math.print('Lucy is $age years old', {age: 5})\n   *\n   *     // the following outputs: 'The value of pi is 3.141592654'\n   *     math.print('The value of pi is $pi', {pi: math.pi}, 10)\n   *\n   *     // the following outputs: 'hello Mary! The date is 2013-03-23'\n   *     math.print('Hello $user.name! The date is $date', {\n   *       user: {\n   *         name: 'Mary',\n   *       },\n   *       date: new Date(2013, 2, 23).toISOString().substring(0, 10)\n   *     })\n   *\n   *     // the following outputs: 'My favorite fruits are apples and bananas !'\n   *     math.print('My favorite fruits are $0 and $1 !', [\n   *       'apples',\n   *       'bananas'\n   *     ])\n   *\n   * See also:\n   *\n   *     format\n   *\n   * @param {string} template           A string containing variable placeholders.\n   * @param {Object | Array | Matrix}   values An object or array containing variables\n   *                                    which will be filled in in the template.\n   * @param {number | Object} [options] Formatting options,\n   *                                    or the number of digits to format numbers.\n   *                                    See function math.format for a description\n   *                                    of all options.\n   * @return {string} Interpolated string\n   */\n  return typed(name, {\n    // note: Matrix will be converted automatically to an Array\n    'string, Object | Array': _print,\n    'string, Object | Array, number | Object': _print\n  });\n});\n/**\n * Interpolate values into a string template.\n * @param {string} template\n * @param {Object} values\n * @param {number | Object} [options]\n * @returns {string} Interpolated string\n * @private\n */\n\nexports.createPrint = createPrint;\n\nfunction _print(template, values, options) {\n  return template.replace(/\\$([\\w.]+)/g, function (original, key) {\n    var keys = key.split('.');\n    var value = values[keys.shift()];\n\n    while (keys.length && value !== undefined) {\n      var k = keys.shift();\n      value = k ? value[k] : value + '.';\n    }\n\n    if (value !== undefined) {\n      if (!(0, _is.isString)(value)) {\n        return (0, _string.format)(value, options);\n      } else {\n        return value;\n      }\n    }\n\n    return original;\n  });\n}\n};"],
"names":["shadow$provide","global","require","module","exports","_print","template","values","options","replace","original","key","keys","split","value","shift","length","undefined","k","_is","isString","_string","format","Object","defineProperty","createPrint","_factory","factory","name","dependencies","_ref","typed"]
}
