{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$expression$function$evaluate.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,+DAAA,CAAoF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG5HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,cAAR,CAAyB,IAAK,EAE9B,KAAIC,YAAcP,OAAA,CAAQ,qDAAR,CAEdQ,OAAAA,CAAWR,OAAA,CAAQ,kDAAR,CAIXM,OAAAA,CAAgC,CAAC,CAAA,CAAGE,MAASC,CAAAA,OAAb,EAFzBC,UAEyB,CADjBC,CAAC,OAADA,CAAU,OAAVA,CACiB,CAA0C,QAAS,CAACC,IAAD,CAAO,CAAA,IACxFC,MAAQD,IAAKC,CAAAA,KAD2E,CAExFC,MAAQF,IAAKE,CAAAA,KAkCjB,OAAOD,MAAA,CAtCEH,UAsCF,CAAY,CACjBK,OAAQA,QAAe,CAACC,IAAD,CAAO,CAE5B,MAAOF,MAAA,CAAME,IAAN,CAAYC,CAAAA,OAAZ,EAAsBC,CAAAA,QAAtB,CADKC,EACL,CAFqB,CADb;AAKjB,iBAAkBC,QAAqB,CAACJ,IAAD,CAAOG,KAAP,CAAc,CACnD,MAAOL,MAAA,CAAME,IAAN,CAAYC,CAAAA,OAAZ,EAAsBC,CAAAA,QAAtB,CAA+BC,KAA/B,CAD4C,CALpC,CAQjB,iBAAkBE,QAAoB,CAACL,IAAD,CAAO,CAC3C,IAAIG,MAAQ,EACZ,OAAO,CAAC,CAAA,CAAGZ,WAAYe,CAAAA,OAAhB,EAAyBN,IAAzB,CAA+B,QAAS,CAACO,KAAD,CAAQ,CACrD,MAAOT,MAAA,CAAMS,KAAN,CAAaN,CAAAA,OAAb,EAAuBC,CAAAA,QAAvB,CAAgCC,KAAhC,CAD8C,CAAhD,CAFoC,CAR5B,CAcjB,yBAA0BK,QAA0B,CAACR,IAAD,CAAOG,KAAP,CAAc,CAChE,MAAO,CAAC,CAAA,CAAGZ,WAAYe,CAAAA,OAAhB,EAAyBN,IAAzB,CAA+B,QAAS,CAACO,KAAD,CAAQ,CACrD,MAAOT,MAAA,CAAMS,KAAN,CAAaN,CAAAA,OAAb,EAAuBC,CAAAA,QAAvB,CAAgCC,KAAhC,CAD8C,CAAhD,CADyD,CAdjD,CAAZ,CApCqF,CAA1D,CAyDpCjB,QAAQI,CAAAA,cAAR,CAAyBA,MAvEmG;",
"sources":["node_modules/mathjs/lib/cjs/expression/function/evaluate.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$expression$function$evaluate\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createEvaluate = void 0;\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'evaluate';\nvar dependencies = ['typed', 'parse'];\nvar createEvaluate = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      parse = _ref.parse;\n\n  /**\n   * Evaluate an expression.\n   *\n   * Note the evaluating arbitrary expressions may involve security risks,\n   * see [https://mathjs.org/docs/expressions/security.html](https://mathjs.org/docs/expressions/security.html) for more information.\n   *\n   * Syntax:\n   *\n   *     math.evaluate(expr)\n   *     math.evaluate(expr, scope)\n   *     math.evaluate([expr1, expr2, expr3, ...])\n   *     math.evaluate([expr1, expr2, expr3, ...], scope)\n   *\n   * Example:\n   *\n   *     math.evaluate('(2+3)/4')                // 1.25\n   *     math.evaluate('sqrt(3^2 + 4^2)')        // 5\n   *     math.evaluate('sqrt(-4)')               // 2i\n   *     math.evaluate(['a=3', 'b=4', 'a*b'])    // [3, 4, 12]\n   *\n   *     let scope = {a:3, b:4}\n   *     math.evaluate('a * b', scope)           // 12\n   *\n   * See also:\n   *\n   *    parse, compile\n   *\n   * @param {string | string[] | Matrix} expr   The expression to be evaluated\n   * @param {Object} [scope]                    Scope to read/write variables\n   * @return {*} The result of the expression\n   * @throws {Error}\n   */\n  return typed(name, {\n    string: function string(expr) {\n      var scope = {};\n      return parse(expr).compile().evaluate(scope);\n    },\n    'string, Object': function stringObject(expr, scope) {\n      return parse(expr).compile().evaluate(scope);\n    },\n    'Array | Matrix': function ArrayMatrix(expr) {\n      var scope = {};\n      return (0, _collection.deepMap)(expr, function (entry) {\n        return parse(entry).compile().evaluate(scope);\n      });\n    },\n    'Array | Matrix, Object': function ArrayMatrixObject(expr, scope) {\n      return (0, _collection.deepMap)(expr, function (entry) {\n        return parse(entry).compile().evaluate(scope);\n      });\n    }\n  });\n});\nexports.createEvaluate = createEvaluate;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createEvaluate","_collection","_factory","factory","name","dependencies","_ref","typed","parse","string","expr","compile","evaluate","scope","stringObject","ArrayMatrix","deepMap","entry","ArrayMatrixObject"]
}
