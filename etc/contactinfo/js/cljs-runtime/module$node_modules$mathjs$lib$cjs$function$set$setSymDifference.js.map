{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$set$setSymDifference.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,gEAAA,CAAqF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG7HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,sBAAR,CAAiC,IAAK,EAEtC,KAAIC,OAASP,OAAA,CAAQ,gDAAR,CAETQ,OAAAA,CAAWR,OAAA,CAAQ,kDAAR,CAIXM,OAAAA,CAAwC,CAAC,CAAA,CAAGE,MAASC,CAAAA,OAAb,EAFjCC,kBAEiC,CADzBC,8CAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CACyB,CAA0C,QAAS,CAACC,IAAD,CAAO,CAAA,IAChGC,MAAQD,IAAKC,CAAAA,KADmF,CAEhGC,KAAOF,IAAKE,CAAAA,IAFoF;AAGhGC,OAASH,IAAKG,CAAAA,MAHkF,CAIhGC,OAASJ,IAAKI,CAAAA,MAJkF,CAKhGC,cAAgBL,IAAKK,CAAAA,aAL2E,CAMhGC,MAAQN,IAAKM,CAAAA,KAuBjB,OAAOL,MAAA,CA/BEH,kBA+BF,CAAY,CACjB,iCAAkCS,QAA+B,CAACC,EAAD,CAAKC,EAAL,CAAS,CACxE,GAAuC,CAAvC,GAAIL,MAAA,CAAOF,IAAA,CAAKM,EAAL,CAAP,CAAiB,IAAIF,KAAJ,CAAU,CAAV,CAAjB,CAAJ,CAEE,MAAO,CAAC,CAAA,CAAGX,MAAOe,CAAAA,OAAX,EAAoBD,EAApB,CACF,IAAuC,CAAvC,GAAIL,MAAA,CAAOF,IAAA,CAAKO,EAAL,CAAP,CAAiB,IAAIH,KAAJ,CAAU,CAAV,CAAjB,CAAJ,CACL,MAAO,CAAC,CAAA,CAAGX,MAAOe,CAAAA,OAAX,EAAoBF,EAApB,CAGLG,GAAAA,CAAK,CAAC,CAAA,CAAGhB,MAAOe,CAAAA,OAAX,EAAoBF,EAApB,CACLI,GAAAA,CAAK,CAAC,CAAA,CAAGjB,MAAOe,CAAAA,OAAX,EAAoBD,EAApB,CACT,OAAON,OAAA,CAAOE,aAAA,CAAcM,EAAd,CAAkBC,EAAlB,CAAP,CAA8BP,aAAA,CAAcO,EAAd,CAAkBD,EAAlB,CAA9B,CAViE,CADzD,CAAZ,CA7B6F,CAA1D,CA4C5CrB,QAAQI,CAAAA,sBAAR,CAAiCA,MA1D4F;",
"sources":["node_modules/mathjs/lib/cjs/function/set/setSymDifference.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$set$setSymDifference\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSetSymDifference = void 0;\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'setSymDifference';\nvar dependencies = ['typed', 'size', 'concat', 'subset', 'setDifference', 'Index'];\nvar createSetSymDifference = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      size = _ref.size,\n      concat = _ref.concat,\n      subset = _ref.subset,\n      setDifference = _ref.setDifference,\n      Index = _ref.Index;\n\n  /**\n   * Create the symmetric difference of two (multi)sets.\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setSymDifference(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setSymDifference([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2, 5, 6]\n   *    math.setSymDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2, 5, 6]\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setDifference\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {Array | Matrix}    The symmetric difference of two (multi)sets\n   */\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {\n      if (subset(size(a1), new Index(0)) === 0) {\n        // if any of them is empty, return the other one\n        return (0, _array.flatten)(a2);\n      } else if (subset(size(a2), new Index(0)) === 0) {\n        return (0, _array.flatten)(a1);\n      }\n\n      var b1 = (0, _array.flatten)(a1);\n      var b2 = (0, _array.flatten)(a2);\n      return concat(setDifference(b1, b2), setDifference(b2, b1));\n    }\n  });\n});\nexports.createSetSymDifference = createSetSymDifference;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createSetSymDifference","_array","_factory","factory","name","dependencies","_ref","typed","size","concat","subset","setDifference","Index","ArrayMatrixArrayMatrix","a1","a2","flatten","b1","b2"]
}
