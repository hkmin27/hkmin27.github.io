{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$special$erf.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/function/special/erf.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$special$erf\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createErf = void 0;\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _number = require(\"../../utils/number.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\n/* eslint-disable no-loss-of-precision */\nvar name = 'erf';\nvar dependencies = ['typed'];\nvar createErf = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Compute the erf function of a value using a rational Chebyshev\n   * approximations for different intervals of x.\n   *\n   * This is a translation of W. J. Cody's Fortran implementation from 1987\n   * ( https://www.netlib.org/specfun/erf ). See the AMS publication\n   * \"Rational Chebyshev Approximations for the Error Function\" by W. J. Cody\n   * for an explanation of this process.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.erf(x)\n   *\n   * Examples:\n   *\n   *    math.erf(0.2)    // returns 0.22270258921047847\n   *    math.erf(-0.5)   // returns -0.5204998778130465\n   *    math.erf(4)      // returns 0.9999999845827421\n   *\n   * @param {number | Array | Matrix} x   A real number\n   * @return {number | Array | Matrix}    The erf of `x`\n   */\n  return typed('name', {\n    number: function number(x) {\n      var y = Math.abs(x);\n\n      if (y >= MAX_NUM) {\n        return (0, _number.sign)(x);\n      }\n\n      if (y <= THRESH) {\n        return (0, _number.sign)(x) * erf1(y);\n      }\n\n      if (y <= 4.0) {\n        return (0, _number.sign)(x) * (1 - erfc2(y));\n      }\n\n      return (0, _number.sign)(x) * (1 - erfc3(y));\n    },\n    'Array | Matrix': function ArrayMatrix(n) {\n      return (0, _collection.deepMap)(n, this);\n    } // TODO: For complex numbers, use the approximation for the Faddeeva function\n    //  from \"More Efficient Computation of the Complex Error Function\" (AMS)\n\n  });\n  /**\n   * Approximates the error function erf() for x <= 0.46875 using this function:\n   *               n\n   * erf(x) = x * sum (p_j * x^(2j)) / (q_j * x^(2j))\n   *              j=0\n   */\n\n  function erf1(y) {\n    var ysq = y * y;\n    var xnum = P[0][4] * ysq;\n    var xden = ysq;\n    var i;\n\n    for (i = 0; i < 3; i += 1) {\n      xnum = (xnum + P[0][i]) * ysq;\n      xden = (xden + Q[0][i]) * ysq;\n    }\n\n    return y * (xnum + P[0][3]) / (xden + Q[0][3]);\n  }\n  /**\n   * Approximates the complement of the error function erfc() for\n   * 0.46875 <= x <= 4.0 using this function:\n   *                       n\n   * erfc(x) = e^(-x^2) * sum (p_j * x^j) / (q_j * x^j)\n   *                      j=0\n   */\n\n\n  function erfc2(y) {\n    var xnum = P[1][8] * y;\n    var xden = y;\n    var i;\n\n    for (i = 0; i < 7; i += 1) {\n      xnum = (xnum + P[1][i]) * y;\n      xden = (xden + Q[1][i]) * y;\n    }\n\n    var result = (xnum + P[1][7]) / (xden + Q[1][7]);\n    var ysq = parseInt(y * 16) / 16;\n    var del = (y - ysq) * (y + ysq);\n    return Math.exp(-ysq * ysq) * Math.exp(-del) * result;\n  }\n  /**\n   * Approximates the complement of the error function erfc() for x > 4.0 using\n   * this function:\n   *\n   * erfc(x) = (e^(-x^2) / x) * [ 1/sqrt(pi) +\n   *               n\n   *    1/(x^2) * sum (p_j * x^(-2j)) / (q_j * x^(-2j)) ]\n   *              j=0\n   */\n\n\n  function erfc3(y) {\n    var ysq = 1 / (y * y);\n    var xnum = P[2][5] * ysq;\n    var xden = ysq;\n    var i;\n\n    for (i = 0; i < 4; i += 1) {\n      xnum = (xnum + P[2][i]) * ysq;\n      xden = (xden + Q[2][i]) * ysq;\n    }\n\n    var result = ysq * (xnum + P[2][4]) / (xden + Q[2][4]);\n    result = (SQRPI - result) / y;\n    ysq = parseInt(y * 16) / 16;\n    var del = (y - ysq) * (y + ysq);\n    return Math.exp(-ysq * ysq) * Math.exp(-del) * result;\n  }\n});\n/**\n * Upper bound for the first approximation interval, 0 <= x <= THRESH\n * @constant\n */\n\nexports.createErf = createErf;\nvar THRESH = 0.46875;\n/**\n * Constant used by W. J. Cody's Fortran77 implementation to denote sqrt(pi)\n * @constant\n */\n\nvar SQRPI = 5.6418958354775628695e-1;\n/**\n * Coefficients for each term of the numerator sum (p_j) for each approximation\n * interval (see W. J. Cody's paper for more details)\n * @constant\n */\n\nvar P = [[3.16112374387056560e00, 1.13864154151050156e02, 3.77485237685302021e02, 3.20937758913846947e03, 1.85777706184603153e-1], [5.64188496988670089e-1, 8.88314979438837594e00, 6.61191906371416295e01, 2.98635138197400131e02, 8.81952221241769090e02, 1.71204761263407058e03, 2.05107837782607147e03, 1.23033935479799725e03, 2.15311535474403846e-8], [3.05326634961232344e-1, 3.60344899949804439e-1, 1.25781726111229246e-1, 1.60837851487422766e-2, 6.58749161529837803e-4, 1.63153871373020978e-2]];\n/**\n * Coefficients for each term of the denominator sum (q_j) for each approximation\n * interval (see W. J. Cody's paper for more details)\n * @constant\n */\n\nvar Q = [[2.36012909523441209e01, 2.44024637934444173e02, 1.28261652607737228e03, 2.84423683343917062e03], [1.57449261107098347e01, 1.17693950891312499e02, 5.37181101862009858e02, 1.62138957456669019e03, 3.29079923573345963e03, 4.36261909014324716e03, 3.43936767414372164e03, 1.23033935480374942e03], [2.56852019228982242e00, 1.87295284992346047e00, 5.27905102951428412e-1, 6.05183413124413191e-2, 2.33520497626869185e-3]];\n/**\n * Maximum/minimum safe numbers to input to erf() (in ES6+, this number is\n * Number.[MAX|MIN]_SAFE_INTEGER). erf() for all numbers beyond this limit will\n * return 1\n */\n\nvar MAX_NUM = Math.pow(2, 53);\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createErf","_collection","_number","_factory","factory","name","dependencies","_ref","typed","number","x","y","Math","abs","MAX_NUM","sign","THRESH","ysq","xnum","P","xden","i","Q","result","parseInt","exp","SQRPI","ArrayMatrix","n","deepMap","pow"]
}
