{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$expression$transform$forEach_transform.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,yEAAA,CAA8F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGtIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,sBAAR,CAAiC,IAAK,EAEtC,KAAIC,IAAMP,OAAA,CAAQ,6CAAR,CAAV,CAEIQ,UAAYR,OAAA,CAAQ,mDAAR,CAFhB,CAIIS,OAAST,OAAA,CAAQ,gDAAR,CAETU,OAAAA,CAAWV,OAAA,CAAQ,kDAAR,CAEf,KAAIW;AAA2BX,OAAA,CAAQ,uFAAR,CAI3BM,QAAAA,CAAwC,CAAC,CAAA,CAAGI,MAASE,CAAAA,OAAb,EAFjCC,SAEiC,CADzBC,CAAC,OAADA,CACyB,CAA0C,QAAS,CAACC,IAAD,CAAO,CASpGC,QAASA,iBAAgB,CAACC,IAAD,CAAOC,IAAP,CAAaC,KAAb,CAAoB,CAAA,IACvCC,CADuC,CACpCC,QAEHJ,KAAA,CAAK,CAAL,CAAJ,GACEG,CADF,CACMH,IAAA,CAAK,CAAL,CAAQK,CAAAA,OAAR,EAAkBC,CAAAA,QAAlB,CAA2BJ,KAA3B,CADN,CAIIF,KAAA,CAAK,CAAL,CAAJ,GAGII,QAHJ,CACM,CAAC,CAAA,CAAGd,GAAIiB,CAAAA,YAAR,EAAsBP,IAAA,CAAK,CAAL,CAAtB,CAAJ,EAAsC,CAAC,CAAA,CAAGV,GAAIkB,CAAAA,wBAAR,EAAkCR,IAAA,CAAK,CAAL,CAAlC,CAAtC,CAEaA,IAAA,CAAK,CAAL,CAAQK,CAAAA,OAAR,EAAkBC,CAAAA,QAAlB,CAA2BJ,KAA3B,CAFb,CAKa,CAAC,CAAA,CAAGR,wBAAyBe,CAAAA,uBAA7B,EAAsDT,IAAA,CAAK,CAAL,CAAtD,CAA+DC,IAA/D,CAAqEC,KAArE,CANf,CAUA,OAAOQ,SAAA,CAASP,CAAT,CAAYC,QAAZ,CAjBoC,CARzCO,IAAAA,CAAQb,IAAKa,CAAAA,KA4BjBZ;gBAAiBa,CAAAA,OAAjB,CAA2B,CAAA,CAE3B,KAAIF,SAAWC,IAAA,CAAM,SAAN,CAAiB,CAC9B,2BAA4BE,QAA4B,CAACC,KAAD,CAAQV,QAAR,CAAkB,CAExE,IAAIJ,KAAO,CAAC,CAAA,CAAGT,SAAUwB,CAAAA,gBAAd,EAAgCX,QAAhC,CAEGY,UAASA,QAAO,CAAC5B,KAAD,CAAQ6B,KAAR,CAAe,CACvCC,KAAMC,CAAAA,OAAN,CAAc/B,KAAd,CAAJ,CACE,CAAC,CAAA,CAAGI,MAAO4B,CAAAA,OAAX,EAAoBhC,KAApB,CAA2B,QAAS,CAACiC,KAAD,CAAQC,CAAR,CAAW,CAE7CN,OAAA,CAAQK,KAAR,CAAeJ,KAAMM,CAAAA,MAAN,CAAaD,CAAb,CAAiB,CAAjB,CAAf,CAF6C,CAA/C,CADF,CAOe,CAAb,GAAItB,IAAJ,CACEI,QAAA,CAAShB,KAAT,CADF,CAEoB,CAAb,GAAIY,IAAJ,CACLI,QAAA,CAAShB,KAAT,CAAgB6B,KAAhB,CADK,CAILb,QAAA,CAAShB,KAAT,CAAgB6B,KAAhB,CAAuBH,KAAvB,CAduC,CAA/BE,CAmBd,CAAQF,KAAMU,CAAAA,OAAN,EAAR,CAAyB,EAAzB,CAvBwE,CAD5C,CAAjB,CA4Bf,OAAOzB,iBA3D6F,CAA1D,CA4DzC,CACD0B,oBAAqB,CAAA,CADpB,CA5DyC,CA+D5CxC,QAAQI,CAAAA,sBAAR,CAAiCA,OAnFqG;",
"sources":["node_modules/mathjs/lib/cjs/expression/transform/forEach.transform.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$expression$transform$forEach_transform\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createForEachTransform = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _function = require(\"../../utils/function.js\");\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _compileInlineExpression = require(\"./utils/compileInlineExpression.js\");\n\nvar name = 'forEach';\nvar dependencies = ['typed'];\nvar createForEachTransform = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Attach a transform function to math.forEach\n   * Adds a property transform containing the transform function.\n   *\n   * This transform creates a one-based index instead of a zero-based index\n   */\n  function forEachTransform(args, math, scope) {\n    var x, callback;\n\n    if (args[0]) {\n      x = args[0].compile().evaluate(scope);\n    }\n\n    if (args[1]) {\n      if ((0, _is.isSymbolNode)(args[1]) || (0, _is.isFunctionAssignmentNode)(args[1])) {\n        // a function pointer, like forEach([3, -2, 5], myTestFunction)\n        callback = args[1].compile().evaluate(scope);\n      } else {\n        // an expression like forEach([3, -2, 5], x > 0 ? callback1(x) : callback2(x) )\n        callback = (0, _compileInlineExpression.compileInlineExpression)(args[1], math, scope);\n      }\n    }\n\n    return _forEach(x, callback);\n  }\n\n  forEachTransform.rawArgs = true; // one-based version of forEach\n\n  var _forEach = typed('forEach', {\n    'Array | Matrix, function': function ArrayMatrixFunction(array, callback) {\n      // figure out what number of arguments the callback function expects\n      var args = (0, _function.maxArgumentCount)(callback);\n\n      var recurse = function recurse(value, index) {\n        if (Array.isArray(value)) {\n          (0, _array.forEach)(value, function (child, i) {\n            // we create a copy of the index array and append the new index value\n            recurse(child, index.concat(i + 1)); // one based index, hence i+1\n          });\n        } else {\n          // invoke the callback function with the right number of arguments\n          if (args === 1) {\n            callback(value);\n          } else if (args === 2) {\n            callback(value, index);\n          } else {\n            // 3 or -1\n            callback(value, index, array);\n          }\n        }\n      };\n\n      recurse(array.valueOf(), []); // pass Array\n    }\n  });\n\n  return forEachTransform;\n}, {\n  isTransformFunction: true\n});\nexports.createForEachTransform = createForEachTransform;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createForEachTransform","_is","_function","_array","_factory","_compileInlineExpression","factory","name","dependencies","_ref","forEachTransform","args","math","scope","x","callback","compile","evaluate","isSymbolNode","isFunctionAssignmentNode","compileInlineExpression","_forEach","typed","rawArgs","ArrayMatrixFunction","array","maxArgumentCount","recurse","index","Array","isArray","forEach","child","i","concat","valueOf","isTransformFunction"]
}
