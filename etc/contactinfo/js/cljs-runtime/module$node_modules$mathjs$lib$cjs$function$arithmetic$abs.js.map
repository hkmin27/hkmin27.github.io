{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$arithmetic$abs.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,0DAAA,CAA+E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGvHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,SAAR,CAAoB,IAAK,EAErBC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAEf,KAAIQ,YAAcR,OAAA,CAAQ,qDAAR,CAAlB,CAEIS,OAAST,OAAA,CAAQ,uDAAR,CAITM,QAAAA,CAA2B,CAAC,CAAA,CAAGC,MAASG,CAAAA,OAAb,EAFpBC,KAEoB,CADZC,CAAC,OAADA,CACY,CAA0C,QAAS,CAACC,IAAD,CAAO,CACnFC,IAAAA,CAAQD,IAAKC,CAAAA,KA0BjB,OAAOA,KAAA,CA7BEH,KA6BF;AAAY,CACjBI,OAAQN,MAAOO,CAAAA,SADE,CAEjBC,QAASA,QAAgB,CAACC,CAAD,CAAI,CAC3B,MAAOA,EAAEC,CAAAA,GAAF,EADoB,CAFZ,CAKjBC,UAAWA,QAAkB,CAACF,CAAD,CAAI,CAC/B,MAAOA,EAAEC,CAAAA,GAAF,EADwB,CALhB,CAQjBE,SAAUA,QAAiB,CAACH,CAAD,CAAI,CAC7B,MAAOA,EAAEC,CAAAA,GAAF,EADsB,CARd,CAWjB,iBAAkBG,QAAoB,CAACJ,CAAD,CAAI,CAExC,MAAO,CAAC,CAAA,CAAGV,WAAYe,CAAAA,OAAhB,EAAyBL,CAAzB,CAA4B,IAA5B,CAAkC,CAAA,CAAlC,CAFiC,CAXzB,CAejBM,KAAMA,QAAa,CAACN,CAAD,CAAI,CACrB,MAAOA,EAAEC,CAAAA,GAAF,EADc,CAfN,CAAZ,CA3BgF,CAA1D,CA+C/BjB,QAAQI,CAAAA,SAAR,CAAoBA,OA/DmG;",
"sources":["node_modules/mathjs/lib/cjs/function/arithmetic/abs.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$arithmetic$abs\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAbs = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _index = require(\"../../plain/number/index.js\");\n\nvar name = 'abs';\nvar dependencies = ['typed'];\nvar createAbs = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Calculate the absolute value of a number. For matrices, the function is\n   * evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.abs(x)\n   *\n   * Examples:\n   *\n   *    math.abs(3.5)                // returns number 3.5\n   *    math.abs(-4.2)               // returns number 4.2\n   *\n   *    math.abs([3, -5, -1, 0, 2])  // returns Array [3, 5, 1, 0, 2]\n   *\n   * See also:\n   *\n   *    sign\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\n   *            A number or matrix for which to get the absolute value\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}\n   *            Absolute value of `x`\n   */\n  return typed(name, {\n    number: _index.absNumber,\n    Complex: function Complex(x) {\n      return x.abs();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.abs();\n    },\n    Fraction: function Fraction(x) {\n      return x.abs();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since abs(0) = 0\n      return (0, _collection.deepMap)(x, this, true);\n    },\n    Unit: function Unit(x) {\n      return x.abs();\n    }\n  });\n});\nexports.createAbs = createAbs;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createAbs","_factory","_collection","_index","factory","name","dependencies","_ref","typed","number","absNumber","Complex","x","abs","BigNumber","Fraction","ArrayMatrix","deepMap","Unit"]
}
