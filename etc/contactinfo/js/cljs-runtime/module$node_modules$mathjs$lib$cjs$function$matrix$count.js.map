{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$matrix$count.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,wDAAA,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGrHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,WAAR,CAAsB,IAAK,EAEvBC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAIXM,OAAAA,CAA6B,CAAC,CAAA,CAAGC,MAASC,CAAAA,OAAb,EAFtBC,OAEsB,CADdC,CAAC,OAADA,CAAU,MAAVA,CAAkB,MAAlBA,CACc,CAA0C,QAAS,CAACC,IAAD,CAAO,CAAA,IACrFC,MAAQD,IAAKC,CAAAA,KADwE,CAErFC,KAAOF,IAAKE,CAAAA,IAFyE,CAGrFC,KAAOH,IAAKG,CAAAA,IAuBhB,OAAOF,MAAA,CA5BEH,OA4BF,CAAY,CACjBM,OAAQA,QAAe,CAACC,CAAD,CAAI,CACzB,MAAOA,EAAEC,CAAAA,MADgB,CADV,CAIjB,iBAAkBC,QAAoB,CAACF,CAAD,CAAI,CACxC,MAAOF,KAAA,CAAKD,IAAA,CAAKG,CAAL,CAAL,CADiC,CAJzB,CAAZ,CA1BkF,CAA1D,CAmCjCd,QAAQI,CAAAA,WAAR;AAAsBA,MA/C+F;",
"sources":["node_modules/mathjs/lib/cjs/function/matrix/count.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$matrix$count\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCount = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'count';\nvar dependencies = ['typed', 'size', 'prod'];\nvar createCount = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      size = _ref.size,\n      prod = _ref.prod;\n\n  /**\n   * Count the number of elements of a matrix, array or string.\n   *\n   * Syntax:\n   *\n   *     math.count(x)\n   *\n   * Examples:\n   *\n   *     math.count('hello world')        // returns 11\n   *     const A = [[1, 2, 3], [4, 5, 6]]\n   *     math.count(A)                    // returns 6\n   *     math.count(math.range(1,6))      // returns 5\n   *\n   * See also:\n   *\n   *     size\n   *\n   * @param {string | Array | Matrix} x  A matrix or string\n   * @return {number} An integer with the elements in `x`.\n   */\n  return typed(name, {\n    string: function string(x) {\n      return x.length;\n    },\n    'Matrix | Array': function MatrixArray(x) {\n      return prod(size(x));\n    }\n  });\n});\nexports.createCount = createCount;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createCount","_factory","factory","name","dependencies","_ref","typed","size","prod","string","x","length","MatrixArray"]
}
