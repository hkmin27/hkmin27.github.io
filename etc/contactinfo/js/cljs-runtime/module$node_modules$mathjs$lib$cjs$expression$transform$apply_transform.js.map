{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$expression$transform$apply_transform.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,uEAAA,CAA4F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGpIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,oBAAR,CAA+B,IAAK,EAEpC,KAAIC,gBAAkBP,OAAA,CAAQ,8EAAR,CAElBQ,OAAAA,CAAWR,OAAA,CAAQ,kDAAR,CAEf,KAAIS,OAAST,OAAA,CAAQ,0DAAR,CAAb,CAEIU,IAAMV,OAAA,CAAQ,6CAAR,CAYNM;OAAAA,CAAsC,CAAC,CAAA,CAAGE,MAASG,CAAAA,OAAb,EAV/BC,OAU+B,CATvBC,CAAC,OAADA,CAAU,WAAVA,CASuB,CAA0C,QAAS,CAACC,IAAD,CAAO,CAAA,IAC9FC,MAAQD,IAAKC,CAAAA,KACbC,KAAAA,CAAYF,IAAKE,CAAAA,SACrB,KAAIC,MAAQ,CAAC,CAAA,CAAGR,MAAOS,CAAAA,WAAX,EAAwB,CAClCH,MAAOA,KAD2B,CAElCC,UAAWA,IAFuB,CAAxB,CAKZ,OAAOD,MAAA,CAAM,OAAN,CAAe,CACpB,SAAUI,QAAY,CAACC,IAAD,CAAO,CAE3B,IAAIC,IAAMD,IAAA,CAAK,CAAL,CAEN,EAAC,CAAA,CAAGV,GAAIY,CAAAA,QAAR,EAAkBD,GAAlB,CAAJ,CACED,IAAA,CAAK,CAAL,CADF,CACYC,GADZ,CACkB,CADlB,CAEW,CAAC,CAAA,CAAGX,GAAIa,CAAAA,WAAR,EAAqBF,GAArB,CAFX,GAGED,IAAA,CAAK,CAAL,CAHF,CAGYC,GAAIG,CAAAA,KAAJ,CAAU,CAAV,CAHZ,CAMA,IAAI,CACF,MAAOP,MAAMA,CAAAA,KAAN,CAAY,IAAZ,CAAkBG,IAAlB,CADL,CAEF,MAAOK,GAAP,CAAY,CACZ,KAAM,CAAC,CAAA,CAAGlB,eAAgBmB,CAAAA,cAApB,EAAoCD,GAApC,CAAN,CADY,CAZa,CADT,CAAf,CAR2F,CAA1D,CA0BvC,CACDE,oBAAqB,CAAA,CADpB,CA1BuC,CA6B1CzB,QAAQI,CAAAA,oBAAR,CAA+BA,OAvDqG;",
"sources":["node_modules/mathjs/lib/cjs/expression/transform/apply.transform.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$expression$transform$apply_transform\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createApplyTransform = void 0;\n\nvar _errorTransform = require(\"./utils/errorTransform.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _apply = require(\"../../function/matrix/apply.js\");\n\nvar _is = require(\"../../utils/is.js\");\n\nvar name = 'apply';\nvar dependencies = ['typed', 'isInteger'];\n/**\n * Attach a transform function to math.apply\n * Adds a property transform containing the transform function.\n *\n * This transform changed the last `dim` parameter of function apply\n * from one-based to zero based\n */\n\nvar createApplyTransform = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      isInteger = _ref.isInteger;\n  var apply = (0, _apply.createApply)({\n    typed: typed,\n    isInteger: isInteger\n  }); // @see: comment of concat itself\n\n  return typed('apply', {\n    '...any': function any(args) {\n      // change dim from one-based to zero-based\n      var dim = args[1];\n\n      if ((0, _is.isNumber)(dim)) {\n        args[1] = dim - 1;\n      } else if ((0, _is.isBigNumber)(dim)) {\n        args[1] = dim.minus(1);\n      }\n\n      try {\n        return apply.apply(null, args);\n      } catch (err) {\n        throw (0, _errorTransform.errorTransform)(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});\nexports.createApplyTransform = createApplyTransform;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createApplyTransform","_errorTransform","_factory","_apply","_is","factory","name","dependencies","_ref","typed","isInteger","apply","createApply","any","args","dim","isNumber","isBigNumber","minus","err","errorTransform","isTransformFunction"]
}
