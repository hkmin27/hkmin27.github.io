{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$type$matrix$utils$algorithm05.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm05.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$type$matrix$utils$algorithm05\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAlgorithm05 = void 0;\n\nvar _factory = require(\"../../../utils/factory.js\");\n\nvar _DimensionError = require(\"../../../error/DimensionError.js\");\n\nvar name = 'algorithm05';\nvar dependencies = ['typed', 'equalScalar'];\nvar createAlgorithm05 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      equalScalar = _ref.equalScalar;\n\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked MAX(NNZA, NNZB) times\n   *\n   *\n   *          \u250c  f(Aij, Bij)  ; A(i,j) !== 0 || B(i,j) !== 0\n   * C(i,j) = \u2524\n   *          \u2514  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  return function algorithm05(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype; // sparse matrix arrays\n\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new _DimensionError.DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = []; // workspaces\n\n    var xa = cvalues ? [] : undefined;\n    var xb = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column\n\n    var wa = [];\n    var wb = []; // vars\n\n    var i, j, k, k1; // loop columns\n\n    for (j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length; // columns mark\n\n      var mark = j + 1; // loop values A(:,j)\n\n      for (k = aptr[j], k1 = aptr[j + 1]; k < k1; k++) {\n        // row\n        i = aindex[k]; // push index\n\n        cindex.push(i); // update workspace\n\n        wa[i] = mark; // check we need to process values\n\n        if (xa) {\n          xa[i] = avalues[k];\n        }\n      } // loop values B(:,j)\n\n\n      for (k = bptr[j], k1 = bptr[j + 1]; k < k1; k++) {\n        // row\n        i = bindex[k]; // check row existed in A\n\n        if (wa[i] !== mark) {\n          // push index\n          cindex.push(i);\n        } // update workspace\n\n\n        wb[i] = mark; // check we need to process values\n\n        if (xb) {\n          xb[i] = bvalues[k];\n        }\n      } // check we need to process values (non pattern matrix)\n\n\n      if (cvalues) {\n        // initialize first index in j\n        k = cptr[j]; // loop index in j\n\n        while (k < cindex.length) {\n          // row\n          i = cindex[k]; // marks\n\n          var wai = wa[i];\n          var wbi = wb[i]; // check Aij or Bij are nonzero\n\n          if (wai === mark || wbi === mark) {\n            // matrix values @ i,j\n            var va = wai === mark ? xa[i] : zero;\n            var vb = wbi === mark ? xb[i] : zero; // Cij\n\n            var vc = cf(va, vb); // check for zero\n\n            if (!eq(vc, zero)) {\n              // push value\n              cvalues.push(vc); // increment pointer\n\n              k++;\n            } else {\n              // remove value @ i, do not increment pointer\n              cindex.splice(k, 1);\n            }\n          }\n        }\n      }\n    } // update cptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});\nexports.createAlgorithm05 = createAlgorithm05;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createAlgorithm05","_factory","_DimensionError","factory","name","dependencies","_ref","typed","equalScalar","algorithm05","a","b","callback","avalues","_values","aindex","_index","aptr","_ptr","asize","_size","adt","_datatype","bvalues","bindex","bptr","bsize","bdt","length","DimensionError","RangeError","rows","columns","eq","zero","cf","dt","find","convert","cvalues","undefined","cindex","cptr","xa","xb","wa","wb","j","k1","mark","k","i","push","wai","wbi","vc","va","vb","splice","createSparseMatrix","values","index","ptr","size","datatype"]
}
