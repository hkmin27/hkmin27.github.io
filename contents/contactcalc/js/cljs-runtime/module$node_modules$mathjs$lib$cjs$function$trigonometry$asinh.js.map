{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$trigonometry$asinh.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,8DAAA,CAAmF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG3HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,WAAR,CAAsB,IAAK,EAEvBC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAEf,KAAIQ,YAAcR,OAAA,CAAQ,qDAAR,CAAlB,CAEIS,OAAST,OAAA,CAAQ,uDAAR,CAITM,QAAAA,CAA6B,CAAC,CAAA,CAAGC,MAASG,CAAAA,OAAb,EAFtBC,OAEsB,CADdC,CAAC,OAADA,CACc,CAA0C,QAAS,CAACC,IAAD,CAAO,CACrFC,IAAAA,CAAQD,IAAKC,CAAAA,KAuBjB,OAAOA,KAAA,CAAM,OAAN;AAAe,CACpBC,OAAQN,MAAOO,CAAAA,WADK,CAEpBC,QAASA,QAAgB,CAACC,CAAD,CAAI,CAC3B,MAAOA,EAAEC,CAAAA,KAAF,EADoB,CAFT,CAKpBC,UAAWA,QAAkB,CAACF,CAAD,CAAI,CAC/B,MAAOA,EAAEC,CAAAA,KAAF,EADwB,CALb,CAQpB,iBAAkBE,QAAoB,CAACH,CAAD,CAAI,CAExC,MAAO,CAAC,CAAA,CAAGV,WAAYc,CAAAA,OAAhB,EAAyBJ,CAAzB,CAA4B,IAA5B,CAAkC,CAAA,CAAlC,CAFiC,CARtB,CAAf,CAxBkF,CAA1D,CAsCjChB,QAAQI,CAAAA,WAAR,CAAsBA,OAtDqG;",
"sources":["node_modules/mathjs/lib/cjs/function/trigonometry/asinh.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$trigonometry$asinh\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAsinh = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _index = require(\"../../plain/number/index.js\");\n\nvar name = 'asinh';\nvar dependencies = ['typed'];\nvar createAsinh = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Calculate the hyperbolic arcsine of a value,\n   * defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.asinh(x)\n   *\n   * Examples:\n   *\n   *    math.asinh(0.5)       // returns 0.48121182505960347\n   *\n   * See also:\n   *\n   *    acosh, atanh\n   *\n   * @param {number | Complex | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Hyperbolic arcsine of x\n   */\n  return typed('asinh', {\n    number: _index.asinhNumber,\n    Complex: function Complex(x) {\n      return x.asinh();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.asinh();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since asinh(0) = 0\n      return (0, _collection.deepMap)(x, this, true);\n    }\n  });\n});\nexports.createAsinh = createAsinh;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createAsinh","_factory","_collection","_index","factory","name","dependencies","_ref","typed","number","asinhNumber","Complex","x","asinh","BigNumber","ArrayMatrix","deepMap"]
}
