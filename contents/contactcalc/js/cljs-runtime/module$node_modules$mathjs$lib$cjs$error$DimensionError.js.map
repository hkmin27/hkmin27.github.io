{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$error$DimensionError.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,uDAAA,CAA4E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAiBpHC,QAASA,eAAc,CAACC,MAAD,CAASC,QAAT,CAAmBC,QAAnB,CAA6B,CAClD,GAAI,EAAE,IAAF,WAAkBH,eAAlB,CAAJ,CACE,KAAM,KAAII,WAAJ,CAAgB,kDAAhB,CAAN,CAGF,IAAKH,CAAAA,MAAL,CAAcA,MACd,KAAKC,CAAAA,QAAL,CAAgBA,QAChB,KAAKC,CAAAA,QAAL,CAAgBA,QAChB,KAAKE,CAAAA,OAAL,CAAe,sBAAf,EAAyCC,KAAMC,CAAAA,OAAN,CAAcN,MAAd,CAAA,CAAwB,GAAxB,CAA8BA,MAAOO,CAAAA,IAAP,CAAY,IAAZ,CAA9B,CAAkD,GAAlD,CAAwDP,MAAjG,EAA2G,GAA3G,EAAkH,IAAKE,CAAAA,QAAvH,EAAmI,OAAnI,EAA2I,GAA3I,EAAkJG,KAAMC,CAAAA,OAAN,CAAcL,QAAd,CAAA,CAA0B,GAA1B,CAAgCA,QAASM,CAAAA,IAAT,CAAc,IAAd,CAAhC;AAAsD,GAAtD,CAA4DN,QAA9M,EAA0N,GAC1N,KAAKO,CAAAA,KAAL,CAAiBC,KAAJ,EAAYD,CAAAA,KATyB,CAdpDE,MAAOC,CAAAA,cAAP,CAAsBb,OAAtB,CAA+B,YAA/B,CAA6C,CAC3Cc,MAAO,CAAA,CADoC,CAA7C,CAGAd,QAAQC,CAAAA,cAAR,CAAyBA,cAuBzBA,eAAec,CAAAA,SAAf,CAA2B,IAAIC,UAC/Bf,eAAec,CAAAA,SAAUE,CAAAA,WAAzB,CAAuCD,UACvCf,eAAec,CAAAA,SAAUG,CAAAA,IAAzB,CAAgC,gBAChCjB,eAAec,CAAAA,SAAUI,CAAAA,gBAAzB,CAA4C,CAAA,CAhCwE;",
"sources":["node_modules/mathjs/lib/cjs/error/DimensionError.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$error$DimensionError\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DimensionError = DimensionError;\n\n/**\n * Create a range error with the message:\n *     'Dimension mismatch (<actual size> != <expected size>)'\n * @param {number | number[]} actual        The actual size\n * @param {number | number[]} expected      The expected size\n * @param {string} [relation='!=']          Optional relation between actual\n *                                          and expected size: '!=', '<', etc.\n * @extends RangeError\n */\nfunction DimensionError(actual, expected, relation) {\n  if (!(this instanceof DimensionError)) {\n    throw new SyntaxError('Constructor must be called with the new operator');\n  }\n\n  this.actual = actual;\n  this.expected = expected;\n  this.relation = relation;\n  this.message = 'Dimension mismatch (' + (Array.isArray(actual) ? '[' + actual.join(', ') + ']' : actual) + ' ' + (this.relation || '!=') + ' ' + (Array.isArray(expected) ? '[' + expected.join(', ') + ']' : expected) + ')';\n  this.stack = new Error().stack;\n}\n\nDimensionError.prototype = new RangeError();\nDimensionError.prototype.constructor = RangeError;\nDimensionError.prototype.name = 'DimensionError';\nDimensionError.prototype.isDimensionError = true;\n};"],
"names":["shadow$provide","global","require","module","exports","DimensionError","actual","expected","relation","SyntaxError","message","Array","isArray","join","stack","Error","Object","defineProperty","value","prototype","RangeError","constructor","name","isDimensionError"]
}
