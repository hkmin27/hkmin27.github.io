shadow$provide.module$node_modules$mathjs$lib$cjs$function$geometry$distance=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.createDistance=void 0;var _is=require("module$node_modules$mathjs$lib$cjs$utils$is");global=require("module$node_modules$mathjs$lib$cjs$utils$factory");global=(0,global.factory)("distance","typed addScalar subtract divideScalar multiplyScalar unaryMinus sqrt abs".split(" "),function(_ref){function _isNumber(a){return"number"===
typeof a||(0,_is.isBigNumber)(a)}function _2d(a){a.constructor!==Array&&(a=_objectToArray(a));return _isNumber(a[0])&&_isNumber(a[1])}function _3d(a){a.constructor!==Array&&(a=_objectToArray(a));return _isNumber(a[0])&&_isNumber(a[1])&&_isNumber(a[2])}function _containsOnlyNumbers(a){Array.isArray(a)||(a=_objectToArray(a));return a.every(_isNumber)}function _parametricLine(a){a.constructor!==Array&&(a=_objectToArray(a));return _isNumber(a[0])&&_isNumber(a[1])&&_isNumber(a[2])&&_isNumber(a[3])&&_isNumber(a[4])&&
_isNumber(a[5])}function _objectToArray(o){for(var keys=Object.keys(o),a=[],i=0;i<keys.length;i++)a.push(o[keys[i]]);return a}function _pairwise(a){if(2===a[0].length&&_isNumber(a[0][0])&&_isNumber(a[0][1])){if(a.some(function(aI){return 2!==aI.length||!_isNumber(aI[0])||!_isNumber(aI[1])}))return!1}else if(3===a[0].length&&_isNumber(a[0][0])&&_isNumber(a[0][1])&&_isNumber(a[0][2])){if(a.some(function(aI){return 3!==aI.length||!_isNumber(aI[0])||!_isNumber(aI[1])||!_isNumber(aI[2])}))return!1}else return!1;
return!0}function _distancePointLine2D(x,y,a,b,c){x=abs(addScalar(addScalar(multiplyScalar(a,x),multiplyScalar(b,y)),c));a=sqrt(addScalar(multiplyScalar(a,a),multiplyScalar(b,b)));return divideScalar(x,a)}function _distancePointLine3D(x,y,z,x0,y0,z0,a,b,c){x=[subtract(multiplyScalar(subtract(y0,y),c),multiplyScalar(subtract(z0,z),b)),subtract(multiplyScalar(subtract(z0,z),a),multiplyScalar(subtract(x0,x),c)),subtract(multiplyScalar(subtract(x0,x),b),multiplyScalar(subtract(y0,y),a))];x=sqrt(addScalar(addScalar(multiplyScalar(x[0],
x[0]),multiplyScalar(x[1],x[1])),multiplyScalar(x[2],x[2])));a=sqrt(addScalar(addScalar(multiplyScalar(a,a),multiplyScalar(b,b)),multiplyScalar(c,c)));return divideScalar(x,a)}function _euclideanDistance(x,y){for(var vectorSize=x.length,result=0,diff,i=0;i<vectorSize;i++)diff=subtract(x[i],y[i]),result=addScalar(multiplyScalar(diff,diff),result);return sqrt(result)}var typed=_ref.typed,addScalar=_ref.addScalar,subtract=_ref.subtract,multiplyScalar=_ref.multiplyScalar,divideScalar=_ref.divideScalar,
unaryMinus=_ref.unaryMinus,sqrt=_ref.sqrt,abs=_ref.abs;return typed("distance",{"Array, Array, Array":function(x,y,z){if(2===x.length&&2===y.length&&2===z.length){if(!_2d(x))throw new TypeError("Array with 2 numbers or BigNumbers expected for first argument");if(!_2d(y))throw new TypeError("Array with 2 numbers or BigNumbers expected for second argument");if(!_2d(z))throw new TypeError("Array with 2 numbers or BigNumbers expected for third argument");var m=divideScalar(subtract(z[1],z[0]),subtract(y[1],
y[0]));z=multiplyScalar(multiplyScalar(m,m),y[0]);y=unaryMinus(multiplyScalar(m,y[0]));return _distancePointLine2D(x[0],x[1],z,y,x[1])}throw new TypeError("Invalid Arguments: Try again");},"Object, Object, Object":function(x,y,z){if(2===Object.keys(x).length&&2===Object.keys(y).length&&2===Object.keys(z).length){if(!_2d(x))throw new TypeError("Values of pointX and pointY should be numbers or BigNumbers");if(!_2d(y))throw new TypeError("Values of lineOnePtX and lineOnePtY should be numbers or BigNumbers");
if(!_2d(z))throw new TypeError("Values of lineTwoPtX and lineTwoPtY should be numbers or BigNumbers");if("pointX"in x&&"pointY"in x&&"lineOnePtX"in y&&"lineOnePtY"in y&&"lineTwoPtX"in z&&"lineTwoPtY"in z){var m=divideScalar(subtract(z.lineTwoPtY,z.lineTwoPtX),subtract(y.lineOnePtY,y.lineOnePtX));z=multiplyScalar(multiplyScalar(m,m),y.lineOnePtX);y=unaryMinus(multiplyScalar(m,y.lineOnePtX));return _distancePointLine2D(x.pointX,x.pointY,z,y,x.pointX)}throw new TypeError("Key names do not match");}throw new TypeError("Invalid Arguments: Try again");
},"Array, Array":function(x,y){if(2===x.length&&3===y.length){if(!_2d(x))throw new TypeError("Array with 2 numbers or BigNumbers expected for first argument");if(!_3d(y))throw new TypeError("Array with 3 numbers or BigNumbers expected for second argument");return _distancePointLine2D(x[0],x[1],y[0],y[1],y[2])}if(3===x.length&&6===y.length){if(!_3d(x))throw new TypeError("Array with 3 numbers or BigNumbers expected for first argument");if(!_parametricLine(y))throw new TypeError("Array with 6 numbers or BigNumbers expected for second argument");
return _distancePointLine3D(x[0],x[1],x[2],y[0],y[1],y[2],y[3],y[4],y[5])}if(x.length===y.length&&0<x.length){if(!_containsOnlyNumbers(x))throw new TypeError("All values of an array should be numbers or BigNumbers");if(!_containsOnlyNumbers(y))throw new TypeError("All values of an array should be numbers or BigNumbers");return _euclideanDistance(x,y)}throw new TypeError("Invalid Arguments: Try again");},"Object, Object":function(x,y){if(2===Object.keys(x).length&&3===Object.keys(y).length){if(!_2d(x))throw new TypeError("Values of pointX and pointY should be numbers or BigNumbers");
if(!_3d(y))throw new TypeError("Values of xCoeffLine, yCoeffLine and constant should be numbers or BigNumbers");if("pointX"in x&&"pointY"in x&&"xCoeffLine"in y&&"yCoeffLine"in y&&"constant"in y)return _distancePointLine2D(x.pointX,x.pointY,y.xCoeffLine,y.yCoeffLine,y.constant);throw new TypeError("Key names do not match");}if(3===Object.keys(x).length&&6===Object.keys(y).length){if(!_3d(x))throw new TypeError("Values of pointX, pointY and pointZ should be numbers or BigNumbers");if(!_parametricLine(y))throw new TypeError("Values of x0, y0, z0, a, b and c should be numbers or BigNumbers");
if("pointX"in x&&"pointY"in x&&"x0"in y&&"y0"in y&&"z0"in y&&"a"in y&&"b"in y&&"c"in y)return _distancePointLine3D(x.pointX,x.pointY,x.pointZ,y.x0,y.y0,y.z0,y.a,y.b,y.c);throw new TypeError("Key names do not match");}if(2===Object.keys(x).length&&2===Object.keys(y).length){if(!_2d(x))throw new TypeError("Values of pointOneX and pointOneY should be numbers or BigNumbers");if(!_2d(y))throw new TypeError("Values of pointTwoX and pointTwoY should be numbers or BigNumbers");if("pointOneX"in x&&"pointOneY"in
x&&"pointTwoX"in y&&"pointTwoY"in y)return _euclideanDistance([x.pointOneX,x.pointOneY],[y.pointTwoX,y.pointTwoY]);throw new TypeError("Key names do not match");}if(3===Object.keys(x).length&&3===Object.keys(y).length){if(!_3d(x))throw new TypeError("Values of pointOneX, pointOneY and pointOneZ should be numbers or BigNumbers");if(!_3d(y))throw new TypeError("Values of pointTwoX, pointTwoY and pointTwoZ should be numbers or BigNumbers");if("pointOneX"in x&&"pointOneY"in x&&"pointOneZ"in x&&"pointTwoX"in
y&&"pointTwoY"in y&&"pointTwoZ"in y)return _euclideanDistance([x.pointOneX,x.pointOneY,x.pointOneZ],[y.pointTwoX,y.pointTwoY,y.pointTwoZ]);throw new TypeError("Key names do not match");}throw new TypeError("Invalid Arguments: Try again");},Array:function(arr){if(!_pairwise(arr))throw new TypeError("Incorrect array format entered for pairwise distance calculation");for(var result=[],pointA=[],pointB=[],i=0;i<arr.length-1;i++)for(var j=i+1;j<arr.length;j++)2===arr[0].length?(pointA=[arr[i][0],arr[i][1]],
pointB=[arr[j][0],arr[j][1]]):3===arr[0].length&&(pointA=[arr[i][0],arr[i][1],arr[i][2]],pointB=[arr[j][0],arr[j][1],arr[j][2]]),result.push(_euclideanDistance(pointA,pointB));return result}})});exports.createDistance=global}
//# sourceMappingURL=module$node_modules$mathjs$lib$cjs$function$geometry$distance.js.map
