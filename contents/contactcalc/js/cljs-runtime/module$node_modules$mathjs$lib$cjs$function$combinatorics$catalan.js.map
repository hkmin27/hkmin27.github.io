{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$combinatorics$catalan.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,iEAAA,CAAsF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG9HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,aAAR,CAAwB,IAAK,EAEzBC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAIXM,OAAAA,CAA+B,CAAC,CAAA,CAAGC,MAASC,CAAAA,OAAb,EAFxBC,SAEwB,CADhBC,+EAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CACgB,CAA0C,QAAS,CAACC,IAAD,CAAO,CAAA,IACvFC,MAAQD,IAAKC,CAAAA,KAD0E,CAEvFC,UAAYF,IAAKE,CAAAA,SAFsE,CAGvFC,aAAeH,IAAKG,CAAAA,YAHmE,CAIvFC;AAAiBJ,IAAKI,CAAAA,cAJiE,CAKvFC,aAAeL,IAAKK,CAAAA,YALmE,CAMvFC,WAAaN,IAAKM,CAAAA,UANqE,CAOvFC,UAAYP,IAAKO,CAAAA,SAuBrB,OAAON,MAAA,CAhCEH,SAgCF,CAAY,CACjB,qBAAsBU,QAAwB,CAACC,CAAD,CAAI,CAChD,GAAI,CAACF,SAAA,CAAUE,CAAV,CAAL,EAAqBH,UAAA,CAAWG,CAAX,CAArB,CACE,KAAM,KAAIC,SAAJ,CAAc,yDAAd,CAAN,CAGF,MAAOP,aAAA,CAAaE,YAAA,CAAaD,cAAA,CAAeK,CAAf,CAAkB,CAAlB,CAAb,CAAmCA,CAAnC,CAAb,CAAoDP,SAAA,CAAUO,CAAV,CAAa,CAAb,CAApD,CALyC,CADjC,CAAZ,CA9BoF,CAA1D,CAwCnClB,QAAQI,CAAAA,aAAR,CAAwBA,MApDsG;",
"sources":["node_modules/mathjs/lib/cjs/function/combinatorics/catalan.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$combinatorics$catalan\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCatalan = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'catalan';\nvar dependencies = ['typed', 'addScalar', 'divideScalar', 'multiplyScalar', 'combinations', 'isNegative', 'isInteger'];\nvar createCatalan = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      addScalar = _ref.addScalar,\n      divideScalar = _ref.divideScalar,\n      multiplyScalar = _ref.multiplyScalar,\n      combinations = _ref.combinations,\n      isNegative = _ref.isNegative,\n      isInteger = _ref.isInteger;\n\n  /**\n   * The Catalan Numbers enumerate combinatorial structures of many different types.\n   * catalan only takes integer arguments.\n   * The following condition must be enforced: n >= 0\n   *\n   * Syntax:\n   *\n   *   math.catalan(n)\n   *\n   * Examples:\n   *\n   *    math.catalan(3) // returns 5\n   *    math.catalan(8) // returns 1430\n   *\n   * See also:\n   *\n   *    bellNumbers\n   *\n   * @param {Number | BigNumber} n    nth Catalan number\n   * @return {Number | BigNumber}     Cn(n)\n   */\n  return typed(name, {\n    'number | BigNumber': function numberBigNumber(n) {\n      if (!isInteger(n) || isNegative(n)) {\n        throw new TypeError('Non-negative integer value expected in function catalan');\n      }\n\n      return divideScalar(combinations(multiplyScalar(n, 2), n), addScalar(n, 1));\n    }\n  });\n});\nexports.createCatalan = createCatalan;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createCatalan","_factory","factory","name","dependencies","_ref","typed","addScalar","divideScalar","multiplyScalar","combinations","isNegative","isInteger","numberBigNumber","n","TypeError"]
}
