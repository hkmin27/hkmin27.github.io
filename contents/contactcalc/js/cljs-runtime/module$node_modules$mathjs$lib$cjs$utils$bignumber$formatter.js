shadow$provide.module$node_modules$mathjs$lib$cjs$utils$bignumber$formatter=function(global,require,module,exports){function formatBigNumberToBase(n,base,size){var big2=new n.constructor(2),suffix="";if(size){if(1>size)throw Error("size must be in greater than 0");if(!(0,_number.isInteger)(size))throw Error("size must be an integer");if(n.greaterThan(big2.pow(size-1).sub(1))||n.lessThan(big2.pow(size-1).mul(-1)))throw Error("Value must be in range [-2^".concat(size-1,", 2^").concat(size-1,"-1]"));
if(!n.isInteger())throw Error("Value must be an integer");n.lessThan(0)&&(n=n.add(big2.pow(size)));suffix="i".concat(size)}switch(base){case 2:return"".concat(n.toBinary()).concat(suffix);case 8:return"".concat(n.toOctal()).concat(suffix);case 16:return"".concat(n.toHexadecimal()).concat(suffix);default:throw Error("Base ".concat(base," not supported "));}}function toEngineering(value,precision){var e=value.e,newExp=0===e%3?e:0>e?e-3-e%3:e-e%3;value=value.mul(Math.pow(10,-newExp));precision=value.toPrecision(precision);
-1!==precision.indexOf("e")&&(precision=value.toString());return precision+"e"+(0<=e?"+":"")+newExp.toString()}function toExponential(value,precision){return void 0!==precision?value.toExponential(precision-1):value.toExponential()}Object.defineProperty(exports,"__esModule",{value:!0});exports.format=function(value,options){if("function"===typeof options)return options(value);if(!value.isFinite())return value.isNaN()?"NaN":value.gt(0)?"Infinity":"-Infinity";var notation="auto";if(void 0!==options){options.notation&&
(notation=options.notation);if("number"===typeof options)var precision=options;else options.precision&&(precision=options.precision);if(options.wordSize){var wordSize=options.wordSize;if("number"!==typeof wordSize)throw Error('Option "wordSize" must be a number');}}switch(notation){case "fixed":return value.toFixed(precision);case "exponential":return toExponential(value,precision);case "engineering":return toEngineering(value,precision);case "bin":return formatBigNumberToBase(value,2,wordSize);case "oct":return formatBigNumberToBase(value,
8,wordSize);case "hex":return formatBigNumberToBase(value,16,wordSize);case "auto":notation=options&&void 0!==options.lowerExp?options.lowerExp:-3;options=options&&void 0!==options.upperExp?options.upperExp:5;if(value.isZero())return"0";wordSize=value.toSignificantDigits(precision);var exp=wordSize.e;return(exp>=notation&&exp<options?wordSize.toFixed():toExponential(value,precision)).replace(/((\.\d*?)(0+))($|e)/,function(JSCompiler_OptimizeArgumentsArray_p9,JSCompiler_OptimizeArgumentsArray_p10,
JSCompiler_OptimizeArgumentsArray_p11,JSCompiler_OptimizeArgumentsArray_p12,JSCompiler_OptimizeArgumentsArray_p13){return"."!==JSCompiler_OptimizeArgumentsArray_p11?JSCompiler_OptimizeArgumentsArray_p11+JSCompiler_OptimizeArgumentsArray_p13:JSCompiler_OptimizeArgumentsArray_p13});default:throw Error('Unknown notation "'+notation+'". Choose "auto", "exponential", "fixed", "bin", "oct", or "hex.');}};exports.toEngineering=toEngineering;exports.toExponential=toExponential;exports.toFixed=function(value,
precision){return value.toFixed(precision)};var _number=require("module$node_modules$mathjs$lib$cjs$utils$number")}
//# sourceMappingURL=module$node_modules$mathjs$lib$cjs$utils$bignumber$formatter.js.map
