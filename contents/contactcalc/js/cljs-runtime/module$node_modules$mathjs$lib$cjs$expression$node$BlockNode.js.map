{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$expression$node$BlockNode.js",
"lineCount":6,
"mappings":"AAAAA,cAAA,CAAA,4DAAA,CAAiF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGzHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,eAAR,CAA0B,IAAK,EAE/B,KAAIC,IAAMP,OAAA,CAAQ,6CAAR,CAAV,CAEIQ,OAASR,OAAA,CAAQ,gDAAR,CAETS,OAAAA,CAAWT,OAAA,CAAQ,kDAAR,CAIXM,OAAAA,CAAiC,CAAC,CAAA,CAAGG,MAASC,CAAAA,OAAb,EAF1BC,WAE0B,CADlBC,CAAC,WAADA,CAAc,MAAdA,CACkB,CAA0C,QAAS,CAACC,IAAD,CAAO,CAa7FC,QAASA,UAAS,CAACC,MAAD,CAAS,CACzB,GAAI,EAAE,IAAF;AAAkBD,SAAlB,CAAJ,CACE,KAAM,KAAIE,WAAJ,CAAgB,kDAAhB,CAAN,CAIF,GAAI,CAACC,KAAMC,CAAAA,OAAN,CAAcH,MAAd,CAAL,CAA4B,KAAUI,MAAJ,CAAU,gBAAV,CAAN,CAC5B,IAAKJ,CAAAA,MAAL,CAAcA,MAAOK,CAAAA,GAAP,CAAW,QAAS,CAACC,KAAD,CAAQ,CACxC,IAAIC,KAAOD,KAAPC,EAAgBD,KAAMC,CAAAA,IACtBC,MAAAA,CAAUF,KAAA,EAA2BG,IAAAA,EAA3B,GAASH,KAAME,CAAAA,OAAf,CAAuCF,KAAME,CAAAA,OAA7C,CAAuD,CAAA,CACrE,IAAI,CAAC,CAAC,CAAA,CAAGhB,GAAIkB,CAAAA,MAAR,EAAgBH,IAAhB,CAAL,CAA4B,KAAM,KAAII,SAAJ,CAAc,gCAAd,CAAN,CAC5B,GAAuB,SAAvB,GAAI,MAAOH,MAAX,CAAkC,KAAM,KAAIG,SAAJ,CAAc,sCAAd,CAAN,CAClC,MAAO,CACLJ,KAAMA,IADD,CAELC,QAASA,KAFJ,CALiC,CAA5B,CAPW,CAbkE,IACzFI,UAAYd,IAAKc,CAAAA,SA+BrBb,UAAUc,CAAAA,SAAV;AAAsB,IA9BXf,IAAKgB,CAAAA,IA+BhBf,UAAUc,CAAAA,SAAUE,CAAAA,IAApB,CAA2B,WAC3BhB,UAAUc,CAAAA,SAAUG,CAAAA,WAApB,CAAkC,CAAA,CAelCjB,UAAUc,CAAAA,SAAUI,CAAAA,QAApB,CAA+BC,QAAS,CAACC,IAAD,CAAOC,QAAP,CAAiB,CACvD,IAAIC,WAAa,CAAC,CAAA,CAAG5B,MAAOY,CAAAA,GAAX,EAAgB,IAAKL,CAAAA,MAArB,CAA6B,QAAS,CAACM,KAAD,CAAQ,CAC7D,MAAO,CACLgB,SAAUhB,KAAMC,CAAAA,IAAKU,CAAAA,QAAX,CAAoBE,IAApB,CAA0BC,QAA1B,CADL,CAELZ,QAASF,KAAME,CAAAA,OAFV,CADsD,CAA9C,CAMjB,OAAOe,SAAuB,CAACC,KAAD,CAAQC,IAAR,CAAcC,OAAd,CAAuB,CACnD,IAAIC,QAAU,EACd,EAAC,CAAA,CAAGlC,MAAOmC,CAAAA,OAAX,EAAoBP,UAApB,CAAgCQ,QAAsB,CAACvB,KAAD,CAAQ,CAC5D,IAAIwB,OAASxB,KAAMgB,CAAAA,QAAN,CAAeE,KAAf,CAAsBC,IAAtB,CAA4BC,OAA5B,CAETpB,MAAME,CAAAA,OAAV,EACEmB,OAAQI,CAAAA,IAAR,CAAaD,MAAb,CAJ0D,CAA9D,CAOA,OAAO,KAAIlB,SAAJ,CAAce,OAAd,CAT4C,CAPE,CAyBzD5B,UAAUc,CAAAA,SAAUe,CAAAA,OAApB;AAA8BI,QAAS,CAACC,QAAD,CAAW,CAChD,IAAK,IAAIC,EAAI,CAAb,CAAgBA,CAAhB,CAAoB,IAAKlC,CAAAA,MAAOmC,CAAAA,MAAhC,CAAwCD,CAAA,EAAxC,CACED,QAAA,CAAS,IAAKjC,CAAAA,MAAL,CAAYkC,CAAZ,CAAe3B,CAAAA,IAAxB,CAA8B,SAA9B,CAA0C2B,CAA1C,CAA8C,QAA9C,CAAwD,IAAxD,CAF8C,CAalDnC,UAAUc,CAAAA,SAAUR,CAAAA,GAApB,CAA0B+B,QAAS,CAACH,QAAD,CAAW,CAG5C,IAFA,IAAIjC,OAAS,EAAb,CAESkC,EAAI,CAAb,CAAgBA,CAAhB,CAAoB,IAAKlC,CAAAA,MAAOmC,CAAAA,MAAhC,CAAwCD,CAAA,EAAxC,CAA6C,CAC3C,IAAI5B,MAAQ,IAAKN,CAAAA,MAAL,CAAYkC,CAAZ,CAAZ,CAEI3B,KAAO,IAAK8B,CAAAA,OAAL,CAAaJ,QAAA,CAAS3B,KAAMC,CAAAA,IAAf,CAAqB,SAArB,CAAiC2B,CAAjC,CAAqC,QAArC,CAA+C,IAA/C,CAAb,CAEXlC,OAAA,CAAOkC,CAAP,CAAA,CAAY,CACV3B,KAAMA,IADI,CAEVC,QAASF,KAAME,CAAAA,OAFL,CAL+B,CAW7C,MAAO,KAAIT,SAAJ,CAAcC,MAAd,CAdqC,CAsB9CD,UAAUc,CAAAA,SAAUyB,CAAAA,KAApB,CAA4BC,QAAS,EAAG,CACtC,IAAIvC,OAAS,IAAKA,CAAAA,MAAOK,CAAAA,GAAZ,CAAgB,QAAS,CAACC,KAAD,CAAQ,CAC5C,MAAO,CACLC,KAAMD,KAAMC,CAAAA,IADP,CAELC,QAASF,KAAME,CAAAA,OAFV,CADqC,CAAjC,CAMb,OAAO,KAAIT,SAAJ,CAAcC,MAAd,CAP+B,CAiBxCD;SAAUc,CAAAA,SAAU2B,CAAAA,SAApB,CAAgCC,QAAS,CAACC,OAAD,CAAU,CACjD,MAAO,KAAK1C,CAAAA,MAAOK,CAAAA,GAAZ,CAAgB,QAAS,CAACsC,KAAD,CAAQ,CACtC,MAAOA,MAAMpC,CAAAA,IAAKqC,CAAAA,QAAX,CAAoBF,OAApB,CAAP,EAAuCC,KAAMnC,CAAAA,OAAN,CAAgB,EAAhB,CAAqB,GAA5D,CADsC,CAAjC,CAEJqC,CAAAA,IAFI,CAEC,IAFD,CAD0C,CAWnD9C,UAAUc,CAAAA,SAAUiC,CAAAA,MAApB,CAA6BC,QAAS,EAAG,CACvC,MAAO,CACLC,OAAQ,WADH,CAELhD,OAAQ,IAAKA,CAAAA,MAFR,CADgC,CAezCD,UAAUkD,CAAAA,QAAV,CAAqBC,QAAS,CAACC,IAAD,CAAO,CACnC,MAAO,KAAIpD,SAAJ,CAAcoD,IAAKnD,CAAAA,MAAnB,CAD4B,CAWrCD,UAAUc,CAAAA,SAAUuC,CAAAA,MAApB,CAA6BC,QAAS,CAACX,OAAD,CAAU,CAC9C,MAAO,KAAK1C,CAAAA,MAAOK,CAAAA,GAAZ,CAAgB,QAAS,CAACsC,KAAD,CAAQ,CACtC,MAAOA,MAAMpC,CAAAA,IAAK6C,CAAAA,MAAX,CAAkBV,OAAlB,CAAP,EAAqCC,KAAMnC,CAAAA,OAAN,CAAgB,EAAhB,CAAqB,sDAA1D,CADsC,CAAjC,CAEJqC,CAAAA,IAFI,CAEC,iEAFD,CADuC,CAYhD9C;SAAUc,CAAAA,SAAUyC,CAAAA,MAApB,CAA6BC,QAAS,CAACb,OAAD,CAAU,CAC9C,MAAO,KAAK1C,CAAAA,MAAOK,CAAAA,GAAZ,CAAgB,QAAS,CAACsC,KAAD,CAAQ,CACtC,MAAOA,MAAMpC,CAAAA,IAAKiD,CAAAA,KAAX,CAAiBd,OAAjB,CAAP,EAAoCC,KAAMnC,CAAAA,OAAN,CAAgB,EAAhB,CAAqB,GAAzD,CADsC,CAAjC,CAEJqC,CAAAA,IAFI,CAEC,UAFD,CADuC,CAMhD,OAAO9C,UArLsF,CAA1D,CAsLlC,CACD0D,QAAS,CAAA,CADR,CAED/C,OAAQ,CAAA,CAFP,CAtLkC,CA0LrCvB,QAAQI,CAAAA,eAAR,CAA0BA,MA1M+F;",
"sources":["node_modules/mathjs/lib/cjs/expression/node/BlockNode.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$expression$node$BlockNode\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createBlockNode = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'BlockNode';\nvar dependencies = ['ResultSet', 'Node'];\nvar createBlockNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var ResultSet = _ref.ResultSet,\n      Node = _ref.Node;\n\n  /**\n   * @constructor BlockNode\n   * @extends {Node}\n   * Holds a set with blocks\n   * @param {Array.<{node: Node} | {node: Node, visible: boolean}>} blocks\n   *            An array with blocks, where a block is constructed as an Object\n   *            with properties block, which is a Node, and visible, which is\n   *            a boolean. The property visible is optional and is true by default\n   */\n  function BlockNode(blocks) {\n    if (!(this instanceof BlockNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    } // validate input, copy blocks\n\n\n    if (!Array.isArray(blocks)) throw new Error('Array expected');\n    this.blocks = blocks.map(function (block) {\n      var node = block && block.node;\n      var visible = block && block.visible !== undefined ? block.visible : true;\n      if (!(0, _is.isNode)(node)) throw new TypeError('Property \"node\" must be a Node');\n      if (typeof visible !== 'boolean') throw new TypeError('Property \"visible\" must be a boolean');\n      return {\n        node: node,\n        visible: visible\n      };\n    });\n  }\n\n  BlockNode.prototype = new Node();\n  BlockNode.prototype.type = 'BlockNode';\n  BlockNode.prototype.isBlockNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  BlockNode.prototype._compile = function (math, argNames) {\n    var evalBlocks = (0, _array.map)(this.blocks, function (block) {\n      return {\n        evaluate: block.node._compile(math, argNames),\n        visible: block.visible\n      };\n    });\n    return function evalBlockNodes(scope, args, context) {\n      var results = [];\n      (0, _array.forEach)(evalBlocks, function evalBlockNode(block) {\n        var result = block.evaluate(scope, args, context);\n\n        if (block.visible) {\n          results.push(result);\n        }\n      });\n      return new ResultSet(results);\n    };\n  };\n  /**\n   * Execute a callback for each of the child blocks of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  BlockNode.prototype.forEach = function (callback) {\n    for (var i = 0; i < this.blocks.length; i++) {\n      callback(this.blocks[i].node, 'blocks[' + i + '].node', this);\n    }\n  };\n  /**\n   * Create a new BlockNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {BlockNode} Returns a transformed copy of the node\n   */\n\n\n  BlockNode.prototype.map = function (callback) {\n    var blocks = [];\n\n    for (var i = 0; i < this.blocks.length; i++) {\n      var block = this.blocks[i];\n\n      var node = this._ifNode(callback(block.node, 'blocks[' + i + '].node', this));\n\n      blocks[i] = {\n        node: node,\n        visible: block.visible\n      };\n    }\n\n    return new BlockNode(blocks);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {BlockNode}\n   */\n\n\n  BlockNode.prototype.clone = function () {\n    var blocks = this.blocks.map(function (block) {\n      return {\n        node: block.node,\n        visible: block.visible\n      };\n    });\n    return new BlockNode(blocks);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  BlockNode.prototype._toString = function (options) {\n    return this.blocks.map(function (param) {\n      return param.node.toString(options) + (param.visible ? '' : ';');\n    }).join('\\n');\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  BlockNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'BlockNode',\n      blocks: this.blocks\n    };\n  };\n  /**\n   * Instantiate an BlockNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"BlockNode\", blocks: [{node: ..., visible: false}, ...]}`,\n   *                       where mathjs is optional\n   * @returns {BlockNode}\n   */\n\n\n  BlockNode.fromJSON = function (json) {\n    return new BlockNode(json.blocks);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  BlockNode.prototype.toHTML = function (options) {\n    return this.blocks.map(function (param) {\n      return param.node.toHTML(options) + (param.visible ? '' : '<span class=\"math-separator\">;</span>');\n    }).join('<span class=\"math-separator\"><br /></span>');\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  BlockNode.prototype._toTex = function (options) {\n    return this.blocks.map(function (param) {\n      return param.node.toTex(options) + (param.visible ? '' : ';');\n    }).join('\\\\;\\\\;\\n');\n  };\n\n  return BlockNode;\n}, {\n  isClass: true,\n  isNode: true\n});\nexports.createBlockNode = createBlockNode;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createBlockNode","_is","_array","_factory","factory","name","dependencies","_ref","BlockNode","blocks","SyntaxError","Array","isArray","Error","map","block","node","visible","undefined","isNode","TypeError","ResultSet","prototype","Node","type","isBlockNode","_compile","BlockNode.prototype._compile","math","argNames","evalBlocks","evaluate","evalBlockNodes","scope","args","context","results","forEach","evalBlockNode","result","push","BlockNode.prototype.forEach","callback","i","length","BlockNode.prototype.map","_ifNode","clone","BlockNode.prototype.clone","_toString","BlockNode.prototype._toString","options","param","toString","join","toJSON","BlockNode.prototype.toJSON","mathjs","fromJSON","BlockNode.fromJSON","json","toHTML","BlockNode.prototype.toHTML","_toTex","BlockNode.prototype._toTex","toTex","isClass"]
}
