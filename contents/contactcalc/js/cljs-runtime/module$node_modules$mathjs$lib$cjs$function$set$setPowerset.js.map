{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$set$setPowerset.js",
"lineCount":3,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/function/set/setPowerset.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$set$setPowerset\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSetPowerset = void 0;\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'setPowerset';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index'];\nvar createSetPowerset = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      size = _ref.size,\n      subset = _ref.subset,\n      compareNatural = _ref.compareNatural,\n      Index = _ref.Index;\n\n  /**\n   * Create the powerset of a (multi)set. (The powerset contains very possible subsets of a (multi)set.)\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setPowerset(set)\n   *\n   * Examples:\n   *\n   *    math.setPowerset([1, 2, 3])        // returns [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]\n   *\n   * See also:\n   *\n   *    setCartesian\n   *\n   * @param {Array | Matrix}    a  A (multi)set\n   * @return {Array}    The powerset of the (multi)set\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(a) {\n      if (subset(size(a), new Index(0)) === 0) {\n        // if empty, return empty\n        return [];\n      }\n\n      var b = (0, _array.flatten)(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);\n      var result = [];\n      var number = 0;\n\n      while (number.toString(2).length <= b.length) {\n        result.push(_subset(b, number.toString(2).split('').reverse()));\n        number++;\n      } // can not return a matrix, because of the different size of the subarrays\n\n\n      return _sort(result);\n    }\n  }); // create subset\n\n  function _subset(array, bitarray) {\n    var result = [];\n\n    for (var i = 0; i < bitarray.length; i++) {\n      if (bitarray[i] === '1') {\n        result.push(array[i]);\n      }\n    }\n\n    return result;\n  } // sort subsests by length\n\n\n  function _sort(array) {\n    var temp = [];\n\n    for (var i = array.length - 1; i > 0; i--) {\n      for (var j = 0; j < i; j++) {\n        if (array[j].length > array[j + 1].length) {\n          temp = array[j];\n          array[j] = array[j + 1];\n          array[j + 1] = temp;\n        }\n      }\n    }\n\n    return array;\n  }\n});\nexports.createSetPowerset = createSetPowerset;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createSetPowerset","_array","_factory","factory","name","dependencies","_ref","typed","size","subset","compareNatural","Index","ArrayMatrix","a","b","flatten","Array","isArray","toArray","sort","result","number","toString","length","push","split","reverse","i","bitarray","array","j","temp"]
}
