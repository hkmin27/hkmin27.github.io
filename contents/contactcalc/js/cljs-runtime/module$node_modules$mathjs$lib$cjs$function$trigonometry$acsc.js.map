{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$trigonometry$acsc.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,6DAAA,CAAkF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG1HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,UAAR,CAAqB,IAAK,EAEtBC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAEf,KAAIQ,YAAcR,OAAA,CAAQ,qDAAR,CAAlB,CAEIS,OAAST,OAAA,CAAQ,uDAAR,CAITM,QAAAA,CAA4B,CAAC,CAAA,CAAGC,MAASG,CAAAA,OAAb,EAFrBC,MAEqB,CADbC,CAAC,OAADA,CAAU,QAAVA,CAAoB,SAApBA,CAA+B,WAA/BA,CACa,CAA0C,QAAS,CAACC,IAAD,CAAO,CAAA,IACpFC;AAAQD,IAAKC,CAAAA,KADuE,CAEpFC,OAASF,IAAKE,CAAAA,MAFsE,CAGpFC,QAAUH,IAAKG,CAAAA,OAHqE,CAIpFC,WAAaJ,IAAKK,CAAAA,SAyBtB,OAAOJ,MAAA,CA/BEH,MA+BF,CAAY,CACjBQ,OAAQA,QAAe,CAACC,CAAD,CAAI,CACzB,MAAS,EAAT,EAAIA,CAAJ,EAAoB,CAApB,EAAeA,CAAf,EAAyBL,MAAOM,CAAAA,WAAhC,CACS,CAAC,CAAA,CAAGZ,MAAOa,CAAAA,UAAX,EAAuBF,CAAvB,CADT,CAIyBG,CAAlB,IAAIP,OAAJ,CAAYI,CAAZ,CAAe,CAAf,CAAkBG,EAAAA,IAAlB,EALkB,CADV,CAQjBP,QAASA,QAAgB,CAACI,CAAD,CAAI,CAC3B,MAAOA,EAAEG,CAAAA,IAAF,EADoB,CARZ,CAWjBL,UAAWA,QAAkB,CAACE,CAAD,CAAI,CAC/B,MAAyBI,CAAlB,IAAIP,UAAJ,CAAe,CAAf,CAAkBO,EAAAA,GAAlB,CAAsBJ,CAAtB,CAAyBK,CAAAA,IAAzB,EADwB,CAXhB,CAcjB,iBAAkBC,QAAoB,CAACN,CAAD,CAAI,CACxC,MAAO,CAAC,CAAA,CAAGZ,WAAYmB,CAAAA,OAAhB,EAAyBP,CAAzB,CAA4B,IAA5B,CADiC,CAdzB,CAAZ,CA7BiF,CAA1D,CAgDhClB,QAAQI,CAAAA,UAAR,CAAqBA,OAhEqG;",
"sources":["node_modules/mathjs/lib/cjs/function/trigonometry/acsc.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$trigonometry$acsc\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAcsc = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _index = require(\"../../plain/number/index.js\");\n\nvar name = 'acsc';\nvar dependencies = ['typed', 'config', 'Complex', 'BigNumber'];\nvar createAcsc = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      Complex = _ref.Complex,\n      _BigNumber = _ref.BigNumber;\n\n  /**\n   * Calculate the inverse cosecant of a value, defined as `acsc(x) = asin(1/x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.acsc(x)\n   *\n   * Examples:\n   *\n   *    math.acsc(0.5)           // returns number 0.5235987755982989\n   *    math.acsc(math.csc(1.5)) // returns number ~1.5\n   *\n   *    math.acsc(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n   *\n   * See also:\n   *\n   *    csc, asin, asec\n   *\n   * @param {number | Complex | Array | Matrix} x   Function input\n   * @return {number | Complex | Array | Matrix} The arc cosecant of x\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x <= -1 || x >= 1 || config.predictable) {\n        return (0, _index.acscNumber)(x);\n      }\n\n      return new Complex(x, 0).acsc();\n    },\n    Complex: function Complex(x) {\n      return x.acsc();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(1).div(x).asin();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n});\nexports.createAcsc = createAcsc;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createAcsc","_factory","_collection","_index","factory","name","dependencies","_ref","typed","config","Complex","_BigNumber","BigNumber","number","x","predictable","acscNumber","acsc","div","asin","ArrayMatrix","deepMap"]
}
