{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$probability$randomInt.js",
"lineCount":3,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/function/probability/randomInt.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$probability$randomInt\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createRandomInt = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _randomMatrix = require(\"./util/randomMatrix.js\");\n\nvar _seededRNG = require(\"./util/seededRNG.js\");\n\nvar _is = require(\"../../utils/is.js\");\n\nvar name = 'randomInt';\nvar dependencies = ['typed', 'config', '?on'];\nvar createRandomInt = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      on = _ref.on;\n  // seeded pseudo random number generator\n  var rng = (0, _seededRNG.createRng)(config.randomSeed);\n\n  if (on) {\n    on('config', function (curr, prev) {\n      if (curr.randomSeed !== prev.randomSeed) {\n        rng = (0, _seededRNG.createRng)(curr.randomSeed);\n      }\n    });\n  }\n  /**\n   * Return a random integer number larger or equal to `min` and smaller than `max`\n   * using a uniform distribution.\n   *\n   * Syntax:\n   *\n   *     math.randomInt()                // generate a random integer between 0 and 1\n   *     math.randomInt(max)             // generate a random integer between 0 and max\n   *     math.randomInt(min, max)        // generate a random integer between min and max\n   *     math.randomInt(size)            // generate a matrix with random integer between 0 and 1\n   *     math.randomInt(size, max)       // generate a matrix with random integer between 0 and max\n   *     math.randomInt(size, min, max)  // generate a matrix with random integer between min and max\n   *\n   * Examples:\n   *\n   *     math.randomInt(100)    // returns a random integer between 0 and 100\n   *     math.randomInt(30, 40) // returns a random integer between 30 and 40\n   *     math.randomInt([2, 3]) // returns a 2x3 matrix with random integers between 0 and 1\n   *\n   * See also:\n   *\n   *     random, pickRandom\n   *\n   * @param {Array | Matrix} [size] If provided, an array or matrix with given\n   *                                size and filled with random values is returned\n   * @param {number} [min]  Minimum boundary for the random value, included\n   * @param {number} [max]  Maximum boundary for the random value, excluded\n   * @return {number | Array | Matrix} A random integer value\n   */\n\n\n  return typed(name, {\n    '': function _() {\n      return _randomInt(0, 1);\n    },\n    number: function number(max) {\n      return _randomInt(0, max);\n    },\n    'number, number': function numberNumber(min, max) {\n      return _randomInt(min, max);\n    },\n    'Array | Matrix': function ArrayMatrix(size) {\n      return _randomIntMatrix(size, 0, 1);\n    },\n    'Array | Matrix, number': function ArrayMatrixNumber(size, max) {\n      return _randomIntMatrix(size, 0, max);\n    },\n    'Array | Matrix, number, number': function ArrayMatrixNumberNumber(size, min, max) {\n      return _randomIntMatrix(size, min, max);\n    }\n  });\n\n  function _randomIntMatrix(size, min, max) {\n    var res = (0, _randomMatrix.randomMatrix)(size.valueOf(), function () {\n      return _randomInt(min, max);\n    });\n    return (0, _is.isMatrix)(size) ? size.create(res) : res;\n  }\n\n  function _randomInt(min, max) {\n    return Math.floor(min + rng() * (max - min));\n  }\n});\nexports.createRandomInt = createRandomInt;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createRandomInt","_factory","_randomMatrix","_seededRNG","_is","factory","name","dependencies","_ref","_randomIntMatrix","size","min","max","res","randomMatrix","valueOf","_randomInt","isMatrix","create","Math","floor","rng","typed","config","on","createRng","randomSeed","curr","prev","_","number","numberNumber","ArrayMatrix","ArrayMatrixNumber","ArrayMatrixNumberNumber"]
}
