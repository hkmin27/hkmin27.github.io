{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$type$matrix$function$matrix.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,8DAAA,CAAmF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG3HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,YAAR,CAAuB,IAAK,EAExBC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAIXM,OAAAA,CAA8B,CAAC,CAAA,CAAGC,MAASC,CAAAA,OAAb,EAFvBC,QAEuB,CADfC,CAAC,OAADA,CAAU,QAAVA,CAAoB,aAApBA,CAAmC,cAAnCA,CACe,CAA0C,QAAS,CAACC,IAAD,CAAO,CAkE1FC,QAASA,QAAO,CAACC,IAAD,CAAOC,MAAP,CAAeC,QAAf,CAAyB,CAEvC,GAAe,OAAf,GAAID,MAAJ,EAAqC,SAArC,GAA0BA,MAA1B,EAA6DE,IAAAA,EAA7D,GAAkDF,MAAlD,CACE,MAAO,KAAIG,WAAJ,CAAgBJ,IAAhB,CAAsBE,QAAtB,CAGT,IAAe,QAAf;AAAID,MAAJ,CACE,MAAO,KAAII,YAAJ,CAAiBL,IAAjB,CAAuBE,QAAvB,CAGT,MAAM,KAAII,SAAJ,CAAc,sBAAd,CAAuCC,IAAKC,CAAAA,SAAL,CAAeP,MAAf,CAAvC,CAAgE,GAAhE,CAAN,CAVuC,CAlEiD,IACtFQ,MAAQX,IAAKW,CAAAA,KADyE,CAGtFL,YAAcN,IAAKM,CAAAA,WAHmE,CAItFC,aAAeP,IAAKO,CAAAA,YAkCxB,OAAOI,MAAA,CAxCEb,QAwCF,CAAY,CACjB,GAAIc,QAAU,EAAG,CACf,MAAOX,QAAA,CAAQ,EAAR,CADQ,CADA,CAIjBY,OAAQA,QAAe,CAACV,MAAD,CAAS,CAC9B,MAAOF,QAAA,CAAQ,EAAR,CAAYE,MAAZ,CADuB,CAJf,CAOjB,iBAAkBW,QAAqB,CAACX,MAAD,CAASC,QAAT,CAAmB,CACxD,MAAOH,QAAA,CAAQ,EAAR,CAAYE,MAAZ,CAAoBC,QAApB,CADiD,CAPzC,CAUjBW,MAAOA,QAAc,CAACb,IAAD,CAAO,CAC1B,MAAOD,QAAA,CAAQC,IAAR,CADmB,CAVX,CAajBc,OAAQA,QAAe,CAACd,IAAD,CAAO,CAC5B,MAAOD,QAAA,CAAQC,IAAR,CAAcA,IAAKe,CAAAA,OAAL,EAAd,CADqB,CAbb,CAgBjB,yBAA0BhB,OAhBT;AAiBjB,iCAAkCA,OAjBjB,CAAZ,CAtCmF,CAA1D,CA+ElCV,QAAQI,CAAAA,YAAR,CAAuBA,MA3FoG;",
"sources":["node_modules/mathjs/lib/cjs/type/matrix/function/matrix.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$type$matrix$function$matrix\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMatrix = void 0;\n\nvar _factory = require(\"../../../utils/factory.js\");\n\nvar name = 'matrix';\nvar dependencies = ['typed', 'Matrix', 'DenseMatrix', 'SparseMatrix'];\nvar createMatrix = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      Matrix = _ref.Matrix,\n      DenseMatrix = _ref.DenseMatrix,\n      SparseMatrix = _ref.SparseMatrix;\n\n  /**\n   * Create a Matrix. The function creates a new `math.Matrix` object from\n   * an `Array`. A Matrix has utility functions to manipulate the data in the\n   * matrix, like getting the size and getting or setting values in the matrix.\n   * Supported storage formats are 'dense' and 'sparse'.\n   *\n   * Syntax:\n   *\n   *    math.matrix()                         // creates an empty matrix using default storage format (dense).\n   *    math.matrix(data)                     // creates a matrix with initial data using default storage format (dense).\n   *    math.matrix('dense')                  // creates an empty matrix using the given storage format.\n   *    math.matrix(data, 'dense')            // creates a matrix with initial data using the given storage format.\n   *    math.matrix(data, 'sparse')           // creates a sparse matrix with initial data.\n   *    math.matrix(data, 'sparse', 'number') // creates a sparse matrix with initial data, number data type.\n   *\n   * Examples:\n   *\n   *    let m = math.matrix([[1, 2], [3, 4]])\n   *    m.size()                        // Array [2, 2]\n   *    m.resize([3, 2], 5)\n   *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]\n   *    m.get([1, 0])                    // number 3\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, number, string, unit, sparse\n   *\n   * @param {Array | Matrix} [data]    A multi dimensional array\n   * @param {string} [format]          The Matrix storage format\n   *\n   * @return {Matrix} The created matrix\n   */\n  return typed(name, {\n    '': function _() {\n      return _create([]);\n    },\n    string: function string(format) {\n      return _create([], format);\n    },\n    'string, string': function stringString(format, datatype) {\n      return _create([], format, datatype);\n    },\n    Array: function Array(data) {\n      return _create(data);\n    },\n    Matrix: function Matrix(data) {\n      return _create(data, data.storage());\n    },\n    'Array | Matrix, string': _create,\n    'Array | Matrix, string, string': _create\n  });\n  /**\n   * Create a new Matrix with given storage format\n   * @param {Array} data\n   * @param {string} [format]\n   * @param {string} [datatype]\n   * @returns {Matrix} Returns a new Matrix\n   * @private\n   */\n\n  function _create(data, format, datatype) {\n    // get storage format constructor\n    if (format === 'dense' || format === 'default' || format === undefined) {\n      return new DenseMatrix(data, datatype);\n    }\n\n    if (format === 'sparse') {\n      return new SparseMatrix(data, datatype);\n    }\n\n    throw new TypeError('Unknown matrix type ' + JSON.stringify(format) + '.');\n  }\n});\nexports.createMatrix = createMatrix;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createMatrix","_factory","factory","name","dependencies","_ref","_create","data","format","datatype","undefined","DenseMatrix","SparseMatrix","TypeError","JSON","stringify","typed","_","string","stringString","Array","Matrix","storage"]
}
