{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$statistics$mean.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,2DAAA,CAAgF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGxHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,UAAR,CAAqB,IAAK,EAE1B,KAAIC,YAAcP,OAAA,CAAQ,qDAAR,CAAlB,CAEIQ,OAASR,OAAA,CAAQ,gDAAR,CAETS,OAAAA,CAAWT,OAAA,CAAQ,kDAAR,CAEf,KAAIU,qBAAuBV,OAAA,CAAQ,kFAAR,CAIvBM;OAAAA,CAA4B,CAAC,CAAA,CAAGG,MAASE,CAAAA,OAAb,EAFrBC,MAEqB,CADbC,CAAC,OAADA,CAAU,KAAVA,CAAiB,QAAjBA,CACa,CAA0C,QAAS,CAACC,IAAD,CAAO,CAwExFC,QAASA,MAAK,CAACC,KAAD,CAAQ,CACpB,IAAIC,GAAJ,CACIC,IAAM,CACV,EAAC,CAAA,CAAGX,WAAYY,CAAAA,WAAhB,EAA6BH,KAA7B,CAAoC,QAAS,CAACX,KAAD,CAAQ,CACnD,GAAI,CACFY,GACA,CADcG,IAAAA,EAAR,GAAAH,GAAA,CAAoBZ,KAApB,CAA4BgB,GAAA,CAAIJ,GAAJ,CAASZ,KAAT,CAClC,CAAAa,GAAA,EAFE,CAGF,MAAOI,GAAP,CAAY,CACZ,KAAM,CAAC,CAAA,CAAGZ,oBAAqBa,CAAAA,mBAAzB,EAA8CD,GAA9C,CAAmD,MAAnD,CAA2DjB,KAA3D,CAAN,CADY,CAJqC,CAArD,CASA,IAAY,CAAZ,GAAIa,GAAJ,CACE,KAAUM,MAAJ,CAAU,6CAAV,CAAN,CAGF,MAAOC,OAAA,CAAOR,GAAP,CAAYC,GAAZ,CAhBa,CAxEkE,IACpFQ,MAAQZ,IAAKY,CAAAA,KADuE,CAEpFL,IAAMP,IAAKO,CAAAA,GAFyE,CAGpFI,OAASX,IAAKW,CAAAA,MA6BlB,OAAOC,MAAA,CAlCEd,MAkCF,CAAY,CAEjB,iBAAkBG,KAFD,CAIjB,qCAmBFY,QAAkB,CAACX,KAAD;AAAQY,GAAR,CAAa,CAC7B,GAAI,CACF,IAAIX,IAAM,CAAC,CAAA,CAAGV,WAAYsB,CAAAA,MAAhB,EAAwBb,KAAxB,CAA+BY,GAA/B,CAAoCP,GAApC,CAAV,CACIS,EAAIC,KAAMC,CAAAA,OAAN,CAAchB,KAAd,CAAA,CAAuB,CAAC,CAAA,CAAGR,MAAOyB,CAAAA,SAAX,EAAsBjB,KAAtB,CAAvB,CAAsDA,KAAMkB,CAAAA,IAAN,EAC9D,OAAOT,OAAA,CAAOR,GAAP,CAAYa,CAAA,CAAEF,GAAF,CAAZ,CAHL,CAIF,MAAON,GAAP,CAAY,CACZ,KAAM,CAAC,CAAA,CAAGZ,oBAAqBa,CAAAA,mBAAzB,EAA8CD,GAA9C,CAAmD,MAAnD,CAAN,CADY,CALe,CAvBZ,CAMjB,MAAOa,QAAU,CAACC,IAAD,CAAO,CACtB,GAAI,CAAC,CAAA,CAAG7B,WAAY8B,CAAAA,mBAAhB,EAAqCD,IAArC,CAAJ,CACE,KAAM,KAAIE,SAAJ,CAAc,yCAAd,CAAN,CAGF,MAAOvB,MAAA,CAAMqB,IAAN,CALe,CANP,CAAZ,CAhCiF,CAA1D,CA2FhClC,QAAQI,CAAAA,UAAR,CAAqBA,OA7GmG;",
"sources":["node_modules/mathjs/lib/cjs/function/statistics/mean.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$statistics$mean\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMean = void 0;\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _improveErrorMessage = require(\"./utils/improveErrorMessage.js\");\n\nvar name = 'mean';\nvar dependencies = ['typed', 'add', 'divide'];\nvar createMean = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      add = _ref.add,\n      divide = _ref.divide;\n\n  /**\n   * Compute the mean value of matrix or a list with values.\n   * In case of a multi dimensional array, the mean of the flattened array\n   * will be calculated. When `dim` is provided, the maximum over the selected\n   * dimension will be calculated. Parameter `dim` is zero-based.\n   *\n   * Syntax:\n   *\n   *     math.mean(a, b, c, ...)\n   *     math.mean(A)\n   *     math.mean(A, dim)\n   *\n   * Examples:\n   *\n   *     math.mean(2, 1, 4, 3)                     // returns 2.5\n   *     math.mean([1, 2.7, 3.2, 4])               // returns 2.725\n   *\n   *     math.mean([[2, 5], [6, 3], [1, 7]], 0)    // returns [3, 5]\n   *     math.mean([[2, 5], [6, 3], [1, 7]], 1)    // returns [3.5, 4.5, 4]\n   *\n   * See also:\n   *\n   *     median, min, max, sum, prod, std, variance\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The mean of all values\n   */\n  return typed(name, {\n    // mean([a, b, c, d, ...])\n    'Array | Matrix': _mean,\n    // mean([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': _nmeanDim,\n    // mean(a, b, c, d, ...)\n    '...': function _(args) {\n      if ((0, _collection.containsCollections)(args)) {\n        throw new TypeError('Scalar values expected in function mean');\n      }\n\n      return _mean(args);\n    }\n  });\n  /**\n   * Calculate the mean value in an n-dimensional array, returning a\n   * n-1 dimensional array\n   * @param {Array} array\n   * @param {number} dim\n   * @return {number} mean\n   * @private\n   */\n\n  function _nmeanDim(array, dim) {\n    try {\n      var sum = (0, _collection.reduce)(array, dim, add);\n      var s = Array.isArray(array) ? (0, _array.arraySize)(array) : array.size();\n      return divide(sum, s[dim]);\n    } catch (err) {\n      throw (0, _improveErrorMessage.improveErrorMessage)(err, 'mean');\n    }\n  }\n  /**\n   * Recursively calculate the mean value in an n-dimensional array\n   * @param {Array} array\n   * @return {number} mean\n   * @private\n   */\n\n\n  function _mean(array) {\n    var sum;\n    var num = 0;\n    (0, _collection.deepForEach)(array, function (value) {\n      try {\n        sum = sum === undefined ? value : add(sum, value);\n        num++;\n      } catch (err) {\n        throw (0, _improveErrorMessage.improveErrorMessage)(err, 'mean', value);\n      }\n    });\n\n    if (num === 0) {\n      throw new Error('Cannot calculate the mean of an empty array');\n    }\n\n    return divide(sum, num);\n  }\n});\nexports.createMean = createMean;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createMean","_collection","_array","_factory","_improveErrorMessage","factory","name","dependencies","_ref","_mean","array","sum","num","deepForEach","undefined","add","err","improveErrorMessage","Error","divide","typed","_nmeanDim","dim","reduce","s","Array","isArray","arraySize","size","_","args","containsCollections","TypeError"]
}
