shadow$provide.module$node_modules$mathjs$lib$cjs$function$statistics$median=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.createMedian=void 0;var _collection=require("module$node_modules$mathjs$lib$cjs$utils$collection"),_array=require("module$node_modules$mathjs$lib$cjs$utils$array");global=require("module$node_modules$mathjs$lib$cjs$utils$factory");var _improveErrorMessage=require("module$node_modules$mathjs$lib$cjs$function$statistics$utils$improveErrorMessage");
require=(0,global.factory)("median",["typed","add","divide","compare","partitionSelect"],function(_ref){function _median(array){try{array=(0,_array.flatten)(array.valueOf());var num=array.length;if(0===num)throw Error("Cannot calculate median of an empty array");if(0===num%2){num=num/2-1;for(var right=partitionSelect(array,num+1),left=array[num],i=0;i<num;++i)0<compare(array[i],left)&&(left=array[i]);return middle2(left,right)}i=partitionSelect(array,(num-1)/2);return middle(i)}catch(err){throw(0,
_improveErrorMessage.improveErrorMessage)(err,"median");}}var typed=_ref.typed,add=_ref.add,divide=_ref.divide,compare=_ref.compare,partitionSelect=_ref.partitionSelect,middle=typed({"number | BigNumber | Complex | Unit":function(value){return value}}),middle2=typed({"number | BigNumber | Complex | Unit, number | BigNumber | Complex | Unit":function(left,right){return divide(add(left,right),2)}});return typed("median",{"Array | Matrix":_median,"Array | Matrix, number | BigNumber":function(array,dim){throw Error("median(A, dim) is not yet supported");
},"...":function(args){if((0,_collection.containsCollections)(args))throw new TypeError("Scalar values expected in function median");return _median(args)}})});exports.createMedian=require}
//# sourceMappingURL=module$node_modules$mathjs$lib$cjs$function$statistics$median.js.map
