{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$utils$bignumber$formatter.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/utils/bignumber/formatter.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$utils$bignumber$formatter\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.format = format;\nexports.toEngineering = toEngineering;\nexports.toExponential = toExponential;\nexports.toFixed = toFixed;\n\nvar _number = require(\"../number.js\");\n\n/**\n * Formats a BigNumber in a given base\n * @param {BigNumber} n\n * @param {number} base\n * @param {number} size\n * @returns {string}\n */\nfunction formatBigNumberToBase(n, base, size) {\n  var BigNumberCtor = n.constructor;\n  var big2 = new BigNumberCtor(2);\n  var suffix = '';\n\n  if (size) {\n    if (size < 1) {\n      throw new Error('size must be in greater than 0');\n    }\n\n    if (!(0, _number.isInteger)(size)) {\n      throw new Error('size must be an integer');\n    }\n\n    if (n.greaterThan(big2.pow(size - 1).sub(1)) || n.lessThan(big2.pow(size - 1).mul(-1))) {\n      throw new Error(\"Value must be in range [-2^\".concat(size - 1, \", 2^\").concat(size - 1, \"-1]\"));\n    }\n\n    if (!n.isInteger()) {\n      throw new Error('Value must be an integer');\n    }\n\n    if (n.lessThan(0)) {\n      n = n.add(big2.pow(size));\n    }\n\n    suffix = \"i\".concat(size);\n  }\n\n  switch (base) {\n    case 2:\n      return \"\".concat(n.toBinary()).concat(suffix);\n\n    case 8:\n      return \"\".concat(n.toOctal()).concat(suffix);\n\n    case 16:\n      return \"\".concat(n.toHexadecimal()).concat(suffix);\n\n    default:\n      throw new Error(\"Base \".concat(base, \" not supported \"));\n  }\n}\n/**\n * Convert a BigNumber to a formatted string representation.\n *\n * Syntax:\n *\n *    format(value)\n *    format(value, options)\n *    format(value, precision)\n *    format(value, fn)\n *\n * Where:\n *\n *    {number} value   The value to be formatted\n *    {Object} options An object with formatting options. Available options:\n *                     {string} notation\n *                         Number notation. Choose from:\n *                         'fixed'          Always use regular number notation.\n *                                          For example '123.40' and '14000000'\n *                         'exponential'    Always use exponential notation.\n *                                          For example '1.234e+2' and '1.4e+7'\n *                         'auto' (default) Regular number notation for numbers\n *                                          having an absolute value between\n *                                          `lower` and `upper` bounds, and uses\n *                                          exponential notation elsewhere.\n *                                          Lower bound is included, upper bound\n *                                          is excluded.\n *                                          For example '123.4' and '1.4e7'.\n *                         'bin', 'oct, or\n *                         'hex'            Format the number using binary, octal,\n *                                          or hexadecimal notation.\n *                                          For example '0b1101' and '0x10fe'.\n *                     {number} wordSize    The word size in bits to use for formatting\n *                                          in binary, octal, or hexadecimal notation.\n *                                          To be used only with 'bin', 'oct', or 'hex'\n *                                          values for 'notation' option. When this option\n *                                          is defined the value is formatted as a signed\n *                                          twos complement integer of the given word size\n *                                          and the size suffix is appended to the output.\n *                                          For example\n *                                          format(-1, {notation: 'hex', wordSize: 8}) === '0xffi8'.\n *                                          Default value is undefined.\n *                     {number} precision   A number between 0 and 16 to round\n *                                          the digits of the number.\n *                                          In case of notations 'exponential',\n *                                          'engineering', and 'auto',\n *                                          `precision` defines the total\n *                                          number of significant digits returned.\n *                                          In case of notation 'fixed',\n *                                          `precision` defines the number of\n *                                          significant digits after the decimal\n *                                          point.\n *                                          `precision` is undefined by default.\n *                     {number} lowerExp    Exponent determining the lower boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `-3`.\n *                     {number} upperExp    Exponent determining the upper boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `5`.\n *    {Function} fn    A custom formatting function. Can be used to override the\n *                     built-in notations. Function `fn` is called with `value` as\n *                     parameter and must return a string. Is useful for example to\n *                     format all values inside a matrix in a particular way.\n *\n * Examples:\n *\n *    format(6.4)                                        // '6.4'\n *    format(1240000)                                    // '1.24e6'\n *    format(1/3)                                        // '0.3333333333333333'\n *    format(1/3, 3)                                     // '0.333'\n *    format(21385, 2)                                   // '21000'\n *    format(12e8, {notation: 'fixed'})                  // returns '1200000000'\n *    format(2.3,    {notation: 'fixed', precision: 4})  // returns '2.3000'\n *    format(52.8,   {notation: 'exponential'})          // returns '5.28e+1'\n *    format(12400,  {notation: 'engineering'})          // returns '12.400e+3'\n *\n * @param {BigNumber} value\n * @param {Object | Function | number} [options]\n * @return {string} str The formatted value\n */\n\n\nfunction format(value, options) {\n  if (typeof options === 'function') {\n    // handle format(value, fn)\n    return options(value);\n  } // handle special cases\n\n\n  if (!value.isFinite()) {\n    return value.isNaN() ? 'NaN' : value.gt(0) ? 'Infinity' : '-Infinity';\n  } // default values for options\n\n\n  var notation = 'auto';\n  var precision;\n  var wordSize;\n\n  if (options !== undefined) {\n    // determine notation from options\n    if (options.notation) {\n      notation = options.notation;\n    } // determine precision from options\n\n\n    if (typeof options === 'number') {\n      precision = options;\n    } else if (options.precision) {\n      precision = options.precision;\n    }\n\n    if (options.wordSize) {\n      wordSize = options.wordSize;\n\n      if (typeof wordSize !== 'number') {\n        throw new Error('Option \"wordSize\" must be a number');\n      }\n    }\n  } // handle the various notations\n\n\n  switch (notation) {\n    case 'fixed':\n      return toFixed(value, precision);\n\n    case 'exponential':\n      return toExponential(value, precision);\n\n    case 'engineering':\n      return toEngineering(value, precision);\n\n    case 'bin':\n      return formatBigNumberToBase(value, 2, wordSize);\n\n    case 'oct':\n      return formatBigNumberToBase(value, 8, wordSize);\n\n    case 'hex':\n      return formatBigNumberToBase(value, 16, wordSize);\n\n    case 'auto':\n      {\n        // determine lower and upper bound for exponential notation.\n        // TODO: implement support for upper and lower to be BigNumbers themselves\n        var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;\n        var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5; // handle special case zero\n\n        if (value.isZero()) return '0'; // determine whether or not to output exponential notation\n\n        var str;\n        var rounded = value.toSignificantDigits(precision);\n        var exp = rounded.e;\n\n        if (exp >= lowerExp && exp < upperExp) {\n          // normal number notation\n          str = rounded.toFixed();\n        } else {\n          // exponential notation\n          str = toExponential(value, precision);\n        } // remove trailing zeros after the decimal point\n\n\n        return str.replace(/((\\.\\d*?)(0+))($|e)/, function () {\n          var digits = arguments[2];\n          var e = arguments[4];\n          return digits !== '.' ? digits + e : e;\n        });\n      }\n\n    default:\n      throw new Error('Unknown notation \"' + notation + '\". ' + 'Choose \"auto\", \"exponential\", \"fixed\", \"bin\", \"oct\", or \"hex.');\n  }\n}\n/**\n * Format a BigNumber in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'\n * @param {BigNumber | string} value\n * @param {number} [precision]        Optional number of significant figures to return.\n */\n\n\nfunction toEngineering(value, precision) {\n  // find nearest lower multiple of 3 for exponent\n  var e = value.e;\n  var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3; // find difference in exponents, and calculate the value without exponent\n\n  var valueWithoutExp = value.mul(Math.pow(10, -newExp));\n  var valueStr = valueWithoutExp.toPrecision(precision);\n\n  if (valueStr.indexOf('e') !== -1) {\n    valueStr = valueWithoutExp.toString();\n  }\n\n  return valueStr + 'e' + (e >= 0 ? '+' : '') + newExp.toString();\n}\n/**\n * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'\n * @param {BigNumber} value\n * @param {number} [precision]  Number of digits in formatted output.\n *                              If not provided, the maximum available digits\n *                              is used.\n * @returns {string} str\n */\n\n\nfunction toExponential(value, precision) {\n  if (precision !== undefined) {\n    return value.toExponential(precision - 1); // Note the offset of one\n  } else {\n    return value.toExponential();\n  }\n}\n/**\n * Format a number with fixed notation.\n * @param {BigNumber} value\n * @param {number} [precision=undefined] Optional number of decimals after the\n *                                       decimal point. Undefined by default.\n */\n\n\nfunction toFixed(value, precision) {\n  return value.toFixed(precision);\n}\n};"],
"names":["shadow$provide","global","require","module","exports","formatBigNumberToBase","n","base","size","big2","constructor","suffix","Error","_number","isInteger","greaterThan","pow","sub","lessThan","mul","concat","add","toBinary","toOctal","toHexadecimal","toEngineering","value","precision","e","newExp","valueWithoutExp","Math","valueStr","toPrecision","indexOf","toString","toExponential","undefined","Object","defineProperty","format","options","isFinite","isNaN","gt","notation","wordSize","toFixed","lowerExp","upperExp","isZero","rounded","toSignificantDigits","exp","replace","str","digits"]
}
