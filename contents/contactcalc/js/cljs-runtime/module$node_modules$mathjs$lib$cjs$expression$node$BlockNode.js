shadow$provide.module$node_modules$mathjs$lib$cjs$expression$node$BlockNode=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.createBlockNode=void 0;var _is=require("module$node_modules$mathjs$lib$cjs$utils$is"),_array=require("module$node_modules$mathjs$lib$cjs$utils$array");global=require("module$node_modules$mathjs$lib$cjs$utils$factory");global=(0,global.factory)("BlockNode",["ResultSet","Node"],function(_ref){function BlockNode(blocks){if(!(this instanceof
BlockNode))throw new SyntaxError("Constructor must be called with the new operator");if(!Array.isArray(blocks))throw Error("Array expected");this.blocks=blocks.map(function(block){var node=block&&block.node;block=block&&void 0!==block.visible?block.visible:!0;if(!(0,_is.isNode)(node))throw new TypeError('Property "node" must be a Node');if("boolean"!==typeof block)throw new TypeError('Property "visible" must be a boolean');return{node:node,visible:block}})}var ResultSet=_ref.ResultSet;BlockNode.prototype=
new _ref.Node;BlockNode.prototype.type="BlockNode";BlockNode.prototype.isBlockNode=!0;BlockNode.prototype._compile=function(math,argNames){var evalBlocks=(0,_array.map)(this.blocks,function(block){return{evaluate:block.node._compile(math,argNames),visible:block.visible}});return function(scope,args,context){var results=[];(0,_array.forEach)(evalBlocks,function(block){var result=block.evaluate(scope,args,context);block.visible&&results.push(result)});return new ResultSet(results)}};BlockNode.prototype.forEach=
function(callback){for(var i=0;i<this.blocks.length;i++)callback(this.blocks[i].node,"blocks["+i+"].node",this)};BlockNode.prototype.map=function(callback){for(var blocks=[],i=0;i<this.blocks.length;i++){var block=this.blocks[i],node=this._ifNode(callback(block.node,"blocks["+i+"].node",this));blocks[i]={node:node,visible:block.visible}}return new BlockNode(blocks)};BlockNode.prototype.clone=function(){var blocks=this.blocks.map(function(block){return{node:block.node,visible:block.visible}});return new BlockNode(blocks)};
BlockNode.prototype._toString=function(options){return this.blocks.map(function(param){return param.node.toString(options)+(param.visible?"":";")}).join("\n")};BlockNode.prototype.toJSON=function(){return{mathjs:"BlockNode",blocks:this.blocks}};BlockNode.fromJSON=function(json){return new BlockNode(json.blocks)};BlockNode.prototype.toHTML=function(options){return this.blocks.map(function(param){return param.node.toHTML(options)+(param.visible?"":'\x3cspan class\x3d"math-separator"\x3e;\x3c/span\x3e')}).join('\x3cspan class\x3d"math-separator"\x3e\x3cbr /\x3e\x3c/span\x3e')};
BlockNode.prototype._toTex=function(options){return this.blocks.map(function(param){return param.node.toTex(options)+(param.visible?"":";")}).join("\\;\\;\n")};return BlockNode},{isClass:!0,isNode:!0});exports.createBlockNode=global}
//# sourceMappingURL=module$node_modules$mathjs$lib$cjs$expression$node$BlockNode.js.map
