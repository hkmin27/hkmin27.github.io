{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$matrix$partitionSelect.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/function/matrix/partitionSelect.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$matrix$partitionSelect\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createPartitionSelect = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _number = require(\"../../utils/number.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'partitionSelect';\nvar dependencies = ['typed', 'isNumeric', 'isNaN', 'compare'];\nvar createPartitionSelect = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      isNumeric = _ref.isNumeric,\n      isNaN = _ref.isNaN,\n      compare = _ref.compare;\n  var asc = compare;\n\n  var desc = function desc(a, b) {\n    return -compare(a, b);\n  };\n  /**\n   * Partition-based selection of an array or 1D matrix.\n   * Will find the kth smallest value, and mutates the input array.\n   * Uses Quickselect.\n   *\n   * Syntax:\n   *\n   *    math.partitionSelect(x, k)\n   *    math.partitionSelect(x, k, compare)\n   *\n   * Examples:\n   *\n   *    math.partitionSelect([5, 10, 1], 2)           // returns 10\n   *    math.partitionSelect(['C', 'B', 'A', 'D'], 1) // returns 'B'\n   *\n   *    function sortByLength (a, b) {\n   *      return a.length - b.length\n   *    }\n   *    math.partitionSelect(['Langdon', 'Tom', 'Sara'], 2, sortByLength) // returns 'Langdon'\n   *\n   * See also:\n   *\n   *    sort\n   *\n   * @param {Matrix | Array} x    A one dimensional matrix or array to sort\n   * @param {Number} k            The kth smallest value to be retrieved zero-based index\n   * @param {Function | 'asc' | 'desc'} [compare='asc']\n   *        An optional comparator function. The function is called as\n   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,\n   *        and 0 when a == b.\n   * @return {*} Returns the kth lowest value.\n   */\n\n\n  return typed(name, {\n    'Array | Matrix, number': function ArrayMatrixNumber(x, k) {\n      return _partitionSelect(x, k, asc);\n    },\n    'Array | Matrix, number, string': function ArrayMatrixNumberString(x, k, compare) {\n      if (compare === 'asc') {\n        return _partitionSelect(x, k, asc);\n      } else if (compare === 'desc') {\n        return _partitionSelect(x, k, desc);\n      } else {\n        throw new Error('Compare string must be \"asc\" or \"desc\"');\n      }\n    },\n    'Array | Matrix, number, function': _partitionSelect\n  });\n\n  function _partitionSelect(x, k, compare) {\n    if (!(0, _number.isInteger)(k) || k < 0) {\n      throw new Error('k must be a non-negative integer');\n    }\n\n    if ((0, _is.isMatrix)(x)) {\n      var size = x.size();\n\n      if (size.length > 1) {\n        throw new Error('Only one dimensional matrices supported');\n      }\n\n      return quickSelect(x.valueOf(), k, compare);\n    }\n\n    if (Array.isArray(x)) {\n      return quickSelect(x, k, compare);\n    }\n  }\n  /**\n   * Quickselect algorithm.\n   * Code adapted from:\n   * https://blog.teamleadnet.com/2012/07/quick-select-algorithm-find-kth-element.html\n   *\n   * @param {Array} arr\n   * @param {Number} k\n   * @param {Function} compare\n   * @private\n   */\n\n\n  function quickSelect(arr, k, compare) {\n    if (k >= arr.length) {\n      throw new Error('k out of bounds');\n    } // check for NaN values since these can cause an infinite while loop\n\n\n    for (var i = 0; i < arr.length; i++) {\n      if (isNumeric(arr[i]) && isNaN(arr[i])) {\n        return arr[i]; // return NaN\n      }\n    }\n\n    var from = 0;\n    var to = arr.length - 1; // if from == to we reached the kth element\n\n    while (from < to) {\n      var r = from;\n      var w = to;\n      var pivot = arr[Math.floor(Math.random() * (to - from + 1)) + from]; // stop if the reader and writer meets\n\n      while (r < w) {\n        // arr[r] >= pivot\n        if (compare(arr[r], pivot) >= 0) {\n          // put the large values at the end\n          var tmp = arr[w];\n          arr[w] = arr[r];\n          arr[r] = tmp;\n          --w;\n        } else {\n          // the value is smaller than the pivot, skip\n          ++r;\n        }\n      } // if we stepped up (r++) we need to step one down (arr[r] > pivot)\n\n\n      if (compare(arr[r], pivot) > 0) {\n        --r;\n      } // the r pointer is on the end of the first k elements\n\n\n      if (k <= r) {\n        to = r;\n      } else {\n        from = r + 1;\n      }\n    }\n\n    return arr[k];\n  }\n});\nexports.createPartitionSelect = createPartitionSelect;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createPartitionSelect","_is","_number","_factory","factory","name","dependencies","_ref","_partitionSelect","x","k","compare","isInteger","Error","isMatrix","size","length","quickSelect","valueOf","Array","isArray","arr","i","isNumeric","isNaN","from","to","r","w","pivot","Math","floor","random","tmp","typed","desc","a","b","ArrayMatrixNumber","ArrayMatrixNumberString"]
}
