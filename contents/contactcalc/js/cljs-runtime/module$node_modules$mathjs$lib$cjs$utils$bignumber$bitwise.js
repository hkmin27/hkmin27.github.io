shadow$provide.module$node_modules$mathjs$lib$cjs$utils$bignumber$bitwise=function(global,require,module,exports){function bitNotBigNumber(x){if(x.isFinite()&&!x.isInteger())throw Error("Integer expected in function bitNot");var BigNumber=x.constructor,prevPrec=BigNumber.precision;BigNumber.config({precision:1E9});x=x.plus(new BigNumber(1));x.s=-x.s||null;BigNumber.config({precision:prevPrec});return x}function bitwise(x,y,func){var BigNumber=x.constructor,yBits,xSign=+(0>x.s),ySign=+(0>y.s);if(xSign)for(x=
decCoefficientToBinaryString(bitNotBigNumber(x)),yBits=0;yBits<x.length;++yBits)x[yBits]^=1;else x=decCoefficientToBinaryString(x);if(ySign)for(yBits=decCoefficientToBinaryString(bitNotBigNumber(y)),y=0;y<yBits.length;++y)yBits[y]^=1;else yBits=decCoefficientToBinaryString(y);x.length<=yBits.length?(y=x,x=yBits,yBits=xSign):(y=yBits,yBits=ySign);var shortLen=y.length,longLen=x.length;xSign=func(xSign,ySign)^1;ySign=new BigNumber(xSign^1);var twoPower=new BigNumber(1),two=new BigNumber(2),prevPrec=
BigNumber.precision;for(BigNumber.config({precision:1E9});0<shortLen;)func(y[--shortLen],x[--longLen])===xSign&&(ySign=ySign.plus(twoPower)),twoPower=twoPower.times(two);for(;0<longLen;)func(yBits,x[--longLen])===xSign&&(ySign=ySign.plus(twoPower)),twoPower=twoPower.times(two);BigNumber.config({precision:prevPrec});0===xSign&&(ySign.s=-ySign.s);return ySign}function decCoefficientToBinaryString(x){for(var a=x.d,r=a[0]+"",i=1;i<a.length;++i){for(var s=a[i]+"",z=7-s.length;z--;)s="0"+s;r+=s}for(a=r.length;"0"===
r.charAt(a);)a--;x=x.e;r=r.slice(0,a+1||1);a=r.length;if(0<x)if(++x>a)for(x-=a;x--;)r+="0";else x<a&&(r=r.slice(0,x)+"."+r.slice(x));x=[0];for(a=0;a<r.length;){for(i=x.length;i--;)x[i]*=10;x[0]+=parseInt(r.charAt(a++));for(i=0;i<x.length;++i)if(1<x[i]){if(null===x[i+1]||void 0===x[i+1])x[i+1]=0;x[i+1]+=x[i]>>1;x[i]&=1}}return x.reverse()}Object.defineProperty(exports,"__esModule",{value:!0});exports.bitAndBigNumber=function(x,y){if(x.isFinite()&&!x.isInteger()||y.isFinite()&&!y.isInteger())throw Error("Integers expected in function bitAnd");
var BigNumber=x.constructor;if(x.isNaN()||y.isNaN())return new BigNumber(NaN);if(x.isZero()||y.eq(-1)||x.eq(y))return x;if(y.isZero()||x.eq(-1))return y;if(!x.isFinite()||!y.isFinite()){if(!x.isFinite()&&!y.isFinite())return x.isNegative()===y.isNegative()?x:new BigNumber(0);if(!x.isFinite())return y.isNegative()?x:x.isNegative()?new BigNumber(0):y;if(!y.isFinite())return x.isNegative()?y:y.isNegative()?new BigNumber(0):x}return bitwise(x,y,function(a,b){return a&b})};exports.bitNotBigNumber=bitNotBigNumber;
exports.bitOrBigNumber=function(x,y){if(x.isFinite()&&!x.isInteger()||y.isFinite()&&!y.isInteger())throw Error("Integers expected in function bitOr");var BigNumber=x.constructor;if(x.isNaN()||y.isNaN())return new BigNumber(NaN);BigNumber=new BigNumber(-1);return x.isZero()||y.eq(BigNumber)||x.eq(y)?y:y.isZero()||x.eq(BigNumber)?x:x.isFinite()&&y.isFinite()?bitwise(x,y,function(a,b){return a|b}):!x.isFinite()&&!x.isNegative()&&y.isNegative()||x.isNegative()&&!y.isNegative()&&!y.isFinite()?BigNumber:
x.isNegative()&&y.isNegative()?x.isFinite()?x:y:x.isFinite()?y:x};exports.bitwise=bitwise;exports.bitXor=function(x,y){if(x.isFinite()&&!x.isInteger()||y.isFinite()&&!y.isInteger())throw Error("Integers expected in function bitXor");var BigNumber=x.constructor;if(x.isNaN()||y.isNaN())return new BigNumber(NaN);if(x.isZero())return y;if(y.isZero())return x;if(x.eq(y))return new BigNumber(0);var negOne=new BigNumber(-1);return x.eq(negOne)?bitNotBigNumber(y):y.eq(negOne)?bitNotBigNumber(x):x.isFinite()&&
y.isFinite()?bitwise(x,y,function(a,b){return a^b}):x.isFinite()||y.isFinite()?new BigNumber(x.isNegative()===y.isNegative()?Infinity:-Infinity):negOne};exports.leftShiftBigNumber=function(x,y){if(x.isFinite()&&!x.isInteger()||y.isFinite()&&!y.isInteger())throw Error("Integers expected in function leftShift");var BigNumber=x.constructor;return x.isNaN()||y.isNaN()||y.isNegative()&&!y.isZero()?new BigNumber(NaN):x.isZero()||y.isZero()?x:x.isFinite()||y.isFinite()?y.lt(55)?x.times(Math.pow(2,y.toNumber())+
""):x.times((new BigNumber(2)).pow(y)):new BigNumber(NaN)};exports.rightArithShiftBigNumber=function(x,y){if(x.isFinite()&&!x.isInteger()||y.isFinite()&&!y.isInteger())throw Error("Integers expected in function rightArithShift");var BigNumber=x.constructor;return x.isNaN()||y.isNaN()||y.isNegative()&&!y.isZero()?new BigNumber(NaN):x.isZero()||y.isZero()?x:y.isFinite()?y.lt(55)?x.div(Math.pow(2,y.toNumber())+"").floor():x.div((new BigNumber(2)).pow(y)).floor():x.isNegative()?new BigNumber(-1):x.isFinite()?
new BigNumber(0):new BigNumber(NaN)}}
//# sourceMappingURL=module$node_modules$mathjs$lib$cjs$utils$bignumber$bitwise.js.map
