{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$expression$node$Node.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/expression/node/Node.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$expression$node$Node\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createNode = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _keywords = require(\"../keywords.js\");\n\nvar _object = require(\"../../utils/object.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar name = 'Node';\nvar dependencies = ['mathWithTransform'];\nvar createNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var mathWithTransform = _ref.mathWithTransform;\n\n  /**\n   * Node\n   */\n  function Node() {\n    if (!(this instanceof Node)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n  }\n  /**\n   * Evaluate the node\n   * @param {Object} [scope]  Scope to read/write variables\n   * @return {*}              Returns the result\n   */\n\n\n  Node.prototype.evaluate = function (scope) {\n    return this.compile().evaluate(scope);\n  };\n\n  Node.prototype.type = 'Node';\n  Node.prototype.isNode = true;\n  Node.prototype.comment = '';\n  /**\n   * Compile the node into an optimized, evauatable JavaScript function\n   * @return {{evaluate: function([Object])}} object\n   *                Returns an object with a function 'evaluate',\n   *                which can be invoked as expr.evaluate([scope: Object]),\n   *                where scope is an optional object with\n   *                variables.\n   */\n\n  Node.prototype.compile = function () {\n    var expr = this._compile(mathWithTransform, {});\n\n    var args = {};\n    var context = null;\n\n    function evaluate(scope) {\n      var s = scope || {};\n\n      _validateScope(s);\n\n      return expr(s, args, context);\n    }\n\n    return {\n      evaluate: evaluate\n    };\n  };\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n\n  Node.prototype._compile = function (math, argNames) {\n    throw new Error('Method _compile should be implemented by type ' + this.type);\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  Node.prototype.forEach = function (callback) {\n    // must be implemented by each of the Node implementations\n    throw new Error('Cannot run forEach on a Node interface');\n  };\n  /**\n   * Create a new Node having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {OperatorNode} Returns a transformed copy of the node\n   */\n\n\n  Node.prototype.map = function (callback) {\n    // must be implemented by each of the Node implementations\n    throw new Error('Cannot run map on a Node interface');\n  };\n  /**\n   * Validate whether an object is a Node, for use with map\n   * @param {Node} node\n   * @returns {Node} Returns the input if it's a node, else throws an Error\n   * @protected\n   */\n\n\n  Node.prototype._ifNode = function (node) {\n    if (!(0, _is.isNode)(node)) {\n      throw new TypeError('Callback function must return a Node');\n    }\n\n    return node;\n  };\n  /**\n   * Recursively traverse all nodes in a node tree. Executes given callback for\n   * this node and each of its child nodes.\n   * @param {function(node: Node, path: string, parent: Node)} callback\n   *          A callback called for every node in the node tree.\n   */\n\n\n  Node.prototype.traverse = function (callback) {\n    // execute callback for itself\n    // eslint-disable-next-line\n    callback(this, null, null); // recursively traverse over all childs of a node\n\n    function _traverse(node, callback) {\n      node.forEach(function (child, path, parent) {\n        callback(child, path, parent);\n\n        _traverse(child, callback);\n      });\n    }\n\n    _traverse(this, callback);\n  };\n  /**\n   * Recursively transform a node tree via a transform function.\n   *\n   * For example, to replace all nodes of type SymbolNode having name 'x' with a\n   * ConstantNode with value 2:\n   *\n   *     const res = Node.transform(function (node, path, parent) {\n   *       if (node && node.isSymbolNode) && (node.name === 'x')) {\n   *         return new ConstantNode(2)\n   *       }\n   *       else {\n   *         return node\n   *       }\n   *     })\n   *\n   * @param {function(node: Node, path: string, parent: Node) : Node} callback\n   *          A mapping function accepting a node, and returning\n   *          a replacement for the node or the original node.\n   *          Signature: callback(node: Node, index: string, parent: Node) : Node\n   * @return {Node} Returns the original node or its replacement\n   */\n\n\n  Node.prototype.transform = function (callback) {\n    function _transform(child, path, parent) {\n      var replacement = callback(child, path, parent);\n\n      if (replacement !== child) {\n        // stop iterating when the node is replaced\n        return replacement;\n      }\n\n      return child.map(_transform);\n    }\n\n    return _transform(this, null, null);\n  };\n  /**\n   * Find any node in the node tree matching given filter function. For example, to\n   * find all nodes of type SymbolNode having name 'x':\n   *\n   *     const results = Node.filter(function (node) {\n   *       return (node && node.isSymbolNode) && (node.name === 'x')\n   *     })\n   *\n   * @param {function(node: Node, path: string, parent: Node) : Node} callback\n   *            A test function returning true when a node matches, and false\n   *            otherwise. Function signature:\n   *            callback(node: Node, index: string, parent: Node) : boolean\n   * @return {Node[]} nodes       An array with nodes matching given filter criteria\n   */\n\n\n  Node.prototype.filter = function (callback) {\n    var nodes = [];\n    this.traverse(function (node, path, parent) {\n      if (callback(node, path, parent)) {\n        nodes.push(node);\n      }\n    });\n    return nodes;\n  };\n  /**\n   * Create a shallow clone of this node\n   * @return {Node}\n   */\n\n\n  Node.prototype.clone = function () {\n    // must be implemented by each of the Node implementations\n    throw new Error('Cannot clone a Node interface');\n  };\n  /**\n   * Create a deep clone of this node\n   * @return {Node}\n   */\n\n\n  Node.prototype.cloneDeep = function () {\n    return this.map(function (node) {\n      return node.cloneDeep();\n    });\n  };\n  /**\n   * Deep compare this node with another node.\n   * @param {Node} other\n   * @return {boolean} Returns true when both nodes are of the same type and\n   *                   contain the same values (as do their childs)\n   */\n\n\n  Node.prototype.equals = function (other) {\n    return other ? (0, _object.deepStrictEqual)(this, other) : false;\n  };\n  /**\n   * Get string representation. (wrapper function)\n   *\n   * This function can get an object of the following form:\n   * {\n   *    handler: //This can be a callback function of the form\n   *             // \"function callback(node, options)\"or\n   *             // a map that maps function names (used in FunctionNodes)\n   *             // to callbacks\n   *    parenthesis: \"keep\" //the parenthesis option (This is optional)\n   * }\n   *\n   * @param {Object} [options]\n   * @return {string}\n   */\n\n\n  Node.prototype.toString = function (options) {\n    var customString = this._getCustomString(options);\n\n    if (typeof customString !== 'undefined') {\n      return customString;\n    }\n\n    return this._toString(options);\n  };\n  /**\n   * Get a JSON representation of the node\n   * Both .toJSON() and the static .fromJSON(json) should be implemented by all\n   * implementations of Node\n   * @returns {Object}\n   */\n\n\n  Node.prototype.toJSON = function () {\n    throw new Error('Cannot serialize object: toJSON not implemented by ' + this.type);\n  };\n  /**\n   * Get HTML representation. (wrapper function)\n   *\n   * This function can get an object of the following form:\n   * {\n   *    handler: //This can be a callback function of the form\n   *             // \"function callback(node, options)\" or\n   *             // a map that maps function names (used in FunctionNodes)\n   *             // to callbacks\n   *    parenthesis: \"keep\" //the parenthesis option (This is optional)\n   * }\n   *\n   * @param {Object} [options]\n   * @return {string}\n   */\n\n\n  Node.prototype.toHTML = function (options) {\n    var customString = this._getCustomString(options);\n\n    if (typeof customString !== 'undefined') {\n      return customString;\n    }\n\n    return this.toHTML(options);\n  };\n  /**\n   * Internal function to generate the string output.\n   * This has to be implemented by every Node\n   *\n   * @throws {Error}\n   */\n\n\n  Node.prototype._toString = function () {\n    // must be implemented by each of the Node implementations\n    throw new Error('_toString not implemented for ' + this.type);\n  };\n  /**\n   * Get LaTeX representation. (wrapper function)\n   *\n   * This function can get an object of the following form:\n   * {\n   *    handler: //This can be a callback function of the form\n   *             // \"function callback(node, options)\"or\n   *             // a map that maps function names (used in FunctionNodes)\n   *             // to callbacks\n   *    parenthesis: \"keep\" //the parenthesis option (This is optional)\n   * }\n   *\n   * @param {Object} [options]\n   * @return {string}\n   */\n\n\n  Node.prototype.toTex = function (options) {\n    var customString = this._getCustomString(options);\n\n    if (typeof customString !== 'undefined') {\n      return customString;\n    }\n\n    return this._toTex(options);\n  };\n  /**\n   * Internal function to generate the LaTeX output.\n   * This has to be implemented by every Node\n   *\n   * @param {Object} [options]\n   * @throws {Error}\n   */\n\n\n  Node.prototype._toTex = function (options) {\n    // must be implemented by each of the Node implementations\n    throw new Error('_toTex not implemented for ' + this.type);\n  };\n  /**\n   * Helper used by `to...` functions.\n   */\n\n\n  Node.prototype._getCustomString = function (options) {\n    if (options && _typeof(options) === 'object') {\n      switch (_typeof(options.handler)) {\n        case 'object':\n        case 'undefined':\n          return;\n\n        case 'function':\n          return options.handler(this, options);\n\n        default:\n          throw new TypeError('Object or function expected as callback');\n      }\n    }\n  };\n  /**\n   * Get identifier.\n   * @return {string}\n   */\n\n\n  Node.prototype.getIdentifier = function () {\n    return this.type;\n  };\n  /**\n   * Get the content of the current Node.\n   * @return {Node} node\n   **/\n\n\n  Node.prototype.getContent = function () {\n    return this;\n  };\n  /**\n   * Validate the symbol names of a scope.\n   * Throws an error when the scope contains an illegal symbol.\n   * @param {Object} scope\n   */\n\n\n  function _validateScope(scope) {\n    for (var symbol in scope) {\n      if ((0, _object.hasOwnProperty)(scope, symbol)) {\n        if (symbol in _keywords.keywords) {\n          throw new Error('Scope contains an illegal symbol, \"' + symbol + '\" is a reserved keyword');\n        }\n      }\n    }\n  }\n\n  return Node;\n}, {\n  isClass: true,\n  isNode: true\n});\nexports.createNode = createNode;\n};"],
"names":["shadow$provide","global","require","module","exports","_typeof","obj","Symbol","iterator","constructor","prototype","Object","defineProperty","value","createNode","_is","_keywords","_object","_factory","factory","name","dependencies","_ref","Node","SyntaxError","mathWithTransform","evaluate","Node.prototype.evaluate","scope","compile","type","isNode","comment","Node.prototype.compile","expr","_compile","args","s","symbol","hasOwnProperty","keywords","Error","context","Node.prototype._compile","math","argNames","forEach","Node.prototype.forEach","callback","map","Node.prototype.map","_ifNode","Node.prototype._ifNode","node","TypeError","traverse","Node.prototype.traverse","_traverse","child","path","parent","transform","Node.prototype.transform","_transform","replacement","filter","Node.prototype.filter","nodes","push","clone","Node.prototype.clone","cloneDeep","Node.prototype.cloneDeep","equals","Node.prototype.equals","other","deepStrictEqual","toString","Node.prototype.toString","options","customString","_getCustomString","_toString","toJSON","Node.prototype.toJSON","toHTML","Node.prototype.toHTML","Node.prototype._toString","toTex","Node.prototype.toTex","_toTex","Node.prototype._toTex","Node.prototype._getCustomString","handler","getIdentifier","Node.prototype.getIdentifier","getContent","Node.prototype.getContent","isClass"]
}
