{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$matrix$rotate.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,yDAAA,CAA8E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGtHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,YAAR,CAAuB,IAAK,EAExBC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAEf,KAAIQ,OAASR,OAAA,CAAQ,gDAAR,CAITM,QAAAA,CAA8B,CAAC,CAAA,CAAGC,MAASE,CAAAA,OAAb,EAFvBC,QAEuB,CADfC,CAAC,OAADA,CAAU,UAAVA,CAAsB,gBAAtBA,CACe,CAA0C,QAAS,CAACC,IAAD,CAAO,CA0D1FC,QAASA,cAAa,CAACC,CAAD,CAAIC,YAAJ,CAAkB,CAClCC,CAAAA,CAAaC,KAAMC,CAAAA,OAAN,CAAcJ,CAAd,CAAA,CAAmB,CAAC,CAAA,CAAGN,MAAOW,CAAAA,SAAX,EAAsBL,CAAtB,CAAnB;AAA8CA,CAAEM,CAAAA,IAAF,EAE/D,IAAwB,CAAxB,CAAIJ,CAAWK,CAAAA,MAAf,CACE,KAAM,KAAIC,UAAJ,CAAe,iCAAkCC,CAAAA,MAAlC,CAAyCR,YAAzC,CAAf,CAAN,CAGF,GAA0B,CAA1B,GAAIC,CAAWK,CAAAA,MAAf,EAAiD,CAAjD,GAA+BL,CAAA,CAAW,CAAX,CAA/B,CACE,KAAM,KAAIM,UAAJ,CAAe,iCAAkCC,CAAAA,MAAlC,CAAyCR,YAAzC,CAAf,CAAN,CAGF,GAAIC,CAAA,CAAW,CAAX,CAAJ,GAAsBD,YAAtB,CACE,KAAM,KAAIO,UAAJ,CAAe,iCAAkCC,CAAAA,MAAlC,CAAyCR,YAAzC,CAAf,CAAN,CAZoC,CA1DkD,IACtFS,MAAQZ,IAAKY,CAAAA,KADyE,CAEtFC,SAAWb,IAAKa,CAAAA,QAFsE,CAGtFC,eAAiBd,IAAKc,CAAAA,cA8B1B,OAAOF,MAAA,CAnCEd,QAmCF,CAAY,CACjB,8CAA+CiB,QAAwC,CAACC,CAAD,CAAIC,KAAJ,CAAW,CAChGhB,aAAA,CAAce,CAAd,CAAiB,CAAjB,CAGA,OADgBH,SAAAK,CAASJ,cAAA,CAAeG,KAAf,CAATC;AAAgCF,CAAhCE,CACCC,CAAAA,OAAV,EAJyF,CADjF,CAOjB,+CAAgDC,QAAyC,CAACJ,CAAD,CAAIC,KAAJ,CAAW,CAClGhB,aAAA,CAAce,CAAd,CAAiB,CAAjB,CAEA,OAAOH,SAAA,CAASC,cAAA,CAAeG,KAAf,CAAT,CAAgCD,CAAhC,CAH2F,CAPnF,CAYjB,6DAA8DK,QAAmD,CAACL,CAAD,CAAIC,KAAJ,CAAWf,CAAX,CAAc,CAC7HD,aAAA,CAAce,CAAd,CAAiB,CAAjB,CAGA,OADgBH,SAAAK,CAASJ,cAAA,CAAeG,KAAf,CAAsBf,CAAtB,CAATgB,CAAmCF,CAAnCE,CAH6G,CAZ9G,CAkBjB,8DAA+DI,QAAoD,CAACN,CAAD,CAAIC,KAAJ,CAAWf,CAAX,CAAc,CAC/HD,aAAA,CAAce,CAAd,CAAiB,CAAjB,CAEA,OAAOH,SAAA,CAASC,cAAA,CAAeG,KAAf,CAAsBf,CAAtB,CAAT,CAAmCc,CAAnC,CAHwH,CAlBhH,CAAZ,CAjCmF,CAA1D,CA0ElC1B,QAAQI,CAAAA,YAAR,CAAuBA,OAxF+F;",
"sources":["node_modules/mathjs/lib/cjs/function/matrix/rotate.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$matrix$rotate\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createRotate = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _array = require(\"../../utils/array.js\");\n\nvar name = 'rotate';\nvar dependencies = ['typed', 'multiply', 'rotationMatrix'];\nvar createRotate = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      multiply = _ref.multiply,\n      rotationMatrix = _ref.rotationMatrix;\n\n  /**\n     * Rotate a vector of size 1x2 counter-clockwise by a given angle\n     * Rotate a vector of size 1x3 counter-clockwise by a given angle around the given axis\n     *\n     * Syntax:\n     *\n     *    math.rotate(w, theta)\n     *    math.rotate(w, theta, v)\n     *\n     * Examples:\n     *\n     *    math.rotate([11, 12], math.pi / 2)                           // returns matrix([-12, 11])\n     *    math.rotate(matrix([11, 12]), math.pi / 2)                   // returns matrix([-12, 11])\n     *\n     *    math.rotate([1, 0, 0], unit('90deg'), [0, 0, 1])             // returns matrix([0, 1, 0])\n     *    math.rotate(matrix([1, 0, 0]), unit('90deg'), [0, 0, 1])     // returns matrix([0, 1, 0])\n     *\n     *    math.rotate([1, 0], math.complex(1 + i))                     // returns matrix([cos(1 + i) - sin(1 + i), sin(1 + i) + cos(1 + i)])\n     *\n     * See also:\n     *\n     *    matrix, rotationMatrix\n     *\n     * @param {Array | Matrix} w                             Vector to rotate\n     * @param {number | BigNumber | Complex | Unit} theta    Rotation angle\n     * @param {Array | Matrix} [v]                           Rotation axis\n     * @return {Array | Matrix}                              Multiplication of the rotation matrix and w\n     */\n  return typed(name, {\n    'Array , number | BigNumber | Complex | Unit': function ArrayNumberBigNumberComplexUnit(w, theta) {\n      _validateSize(w, 2);\n\n      var matrixRes = multiply(rotationMatrix(theta), w);\n      return matrixRes.toArray();\n    },\n    'Matrix , number | BigNumber | Complex | Unit': function MatrixNumberBigNumberComplexUnit(w, theta) {\n      _validateSize(w, 2);\n\n      return multiply(rotationMatrix(theta), w);\n    },\n    'Array, number | BigNumber | Complex | Unit, Array | Matrix': function ArrayNumberBigNumberComplexUnitArrayMatrix(w, theta, v) {\n      _validateSize(w, 3);\n\n      var matrixRes = multiply(rotationMatrix(theta, v), w);\n      return matrixRes;\n    },\n    'Matrix, number | BigNumber | Complex | Unit, Array | Matrix': function MatrixNumberBigNumberComplexUnitArrayMatrix(w, theta, v) {\n      _validateSize(w, 3);\n\n      return multiply(rotationMatrix(theta, v), w);\n    }\n  });\n\n  function _validateSize(v, expectedSize) {\n    var actualSize = Array.isArray(v) ? (0, _array.arraySize)(v) : v.size();\n\n    if (actualSize.length > 2) {\n      throw new RangeError(\"Vector must be of dimensions 1x\".concat(expectedSize));\n    }\n\n    if (actualSize.length === 2 && actualSize[1] !== 1) {\n      throw new RangeError(\"Vector must be of dimensions 1x\".concat(expectedSize));\n    }\n\n    if (actualSize[0] !== expectedSize) {\n      throw new RangeError(\"Vector must be of dimensions 1x\".concat(expectedSize));\n    }\n  }\n});\nexports.createRotate = createRotate;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createRotate","_factory","_array","factory","name","dependencies","_ref","_validateSize","v","expectedSize","actualSize","Array","isArray","arraySize","size","length","RangeError","concat","typed","multiply","rotationMatrix","ArrayNumberBigNumberComplexUnit","w","theta","matrixRes","toArray","MatrixNumberBigNumberComplexUnit","ArrayNumberBigNumberComplexUnitArrayMatrix","MatrixNumberBigNumberComplexUnitArrayMatrix"]
}
