{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$arithmetic$divideScalar.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,mEAAA,CAAwF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGhIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,kBAAR,CAA6B,IAAK,EAE9BC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAEf,KAAIQ,IAAMR,OAAA,CAAQ,6CAAR,CAINM,QAAAA,CAAoC,CAAC,CAAA,CAAGC,MAASE,CAAAA,OAAb,EAF7BC,cAE6B,CADrBC,CAAC,OAADA,CAAU,SAAVA,CACqB,CAA0C,QAAS,CAACC,IAAD,CAAO,CAAA,IAC5FC,MAAQD,IAAKC,CAAAA,KAD+E,CAE5FC,QAAUF,IAAKE,CAAAA,OAcnB,OAAOD,MAAA,CAlBEH,cAkBF,CAAY,CACjB,iBAAkBK,QAAqB,CAACC,CAAD;AAAIC,CAAJ,CAAO,CAC5C,MAAOD,EAAP,CAAWC,CADiC,CAD7B,CAIjB,mBAAoBC,QAAuB,CAACF,CAAD,CAAIC,CAAJ,CAAO,CAChD,MAAOD,EAAEG,CAAAA,GAAF,CAAMF,CAAN,CADyC,CAJjC,CAOjB,uBAAwBG,QAA2B,CAACJ,CAAD,CAAIC,CAAJ,CAAO,CACxD,MAAOD,EAAEG,CAAAA,GAAF,CAAMF,CAAN,CADiD,CAPzC,CAUjB,qBAAsBI,QAAyB,CAACL,CAAD,CAAIC,CAAJ,CAAO,CACpD,MAAOD,EAAEG,CAAAA,GAAF,CAAMF,CAAN,CAD6C,CAVrC,CAajB,sCAAuCK,QAAoC,CAACN,CAAD,CAAIC,CAAJ,CAAO,CAC5EM,CAAAA,CAAMP,CAAEQ,CAAAA,KAAF,EAEV,KAAIC,IAAMX,OAAA,CAAQ,CAAR,CAAW,CAAC,CAAA,CAAGN,GAAIkB,CAAAA,MAAR,EAAgBT,CAAhB,CAAX,CACVM,EAAIlB,CAAAA,KAAJ,CAAY,IAAA,CAAmB,IAAd,GAAAkB,CAAIlB,CAAAA,KAAJ,CAAqBkB,CAAII,CAAAA,UAAJ,CAAeF,GAAf,CAArB,CAA2CF,CAAIlB,CAAAA,KAApD,CAA2DY,CAA3D,CACZ,OAAOM,EALyE,CAbjE,CAoBjB,sCAAuCK,QAAoC,CAACZ,CAAD,CAAIC,CAAJ,CAAO,CAChF,IAAIM,IAAMN,CAAEO,CAAAA,KAAF,EACVD,IAAA,CAAMA,GAAIM,CAAAA,GAAJ,CAAQ,EAAR,CAEN,KAAIJ,IAAMX,OAAA,CAAQ,CAAR,CAAW,CAAC,CAAA,CAAGN,GAAIkB,CAAAA,MAAR,EAAgBV,CAAhB,CAAX,CACVO,IAAIlB,CAAAA,KAAJ,CAAY,IAAA,CAAKW,CAAL,CAAoB,IAAZ,GAAAC,CAAEZ,CAAAA,KAAF,CAAmBY,CAAEU,CAAAA,UAAF,CAAaF,GAAb,CAAnB;AAAuCR,CAAEZ,CAAAA,KAAjD,CACZ,OAAOkB,IANyE,CApBjE,CA4BjB,aAAcO,QAAiB,CAACd,CAAD,CAAIC,CAAJ,CAAO,CACpC,MAAOD,EAAEe,CAAAA,MAAF,CAASd,CAAT,CAD6B,CA5BrB,CAAZ,CAhByF,CAA1D,CAiDxCf,QAAQI,CAAAA,kBAAR,CAA6BA,OA/DmG;",
"sources":["node_modules/mathjs/lib/cjs/function/arithmetic/divideScalar.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$arithmetic$divideScalar\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createDivideScalar = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _is = require(\"../../utils/is.js\");\n\nvar name = 'divideScalar';\nvar dependencies = ['typed', 'numeric'];\nvar createDivideScalar = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      numeric = _ref.numeric;\n\n  /**\n   * Divide two scalar values, `x / y`.\n   * This function is meant for internal use: it is used by the public functions\n   * `divide` and `inv`.\n   *\n   * This function does not support collections (Array or Matrix).\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   Numerator\n   * @param  {number | BigNumber | Fraction | Complex} y          Denominator\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Quotient, `x / y`\n   * @private\n   */\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return x / y;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.div(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.div(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.div(y);\n    },\n    'Unit, number | Fraction | BigNumber': function UnitNumberFractionBigNumber(x, y) {\n      var res = x.clone(); // TODO: move the divide function to Unit.js, it uses internals of Unit\n\n      var one = numeric(1, (0, _is.typeOf)(y));\n      res.value = this(res.value === null ? res._normalize(one) : res.value, y);\n      return res;\n    },\n    'number | Fraction | BigNumber, Unit': function numberFractionBigNumberUnit(x, y) {\n      var res = y.clone();\n      res = res.pow(-1); // TODO: move the divide function to Unit.js, it uses internals of Unit\n\n      var one = numeric(1, (0, _is.typeOf)(x));\n      res.value = this(x, y.value === null ? y._normalize(one) : y.value);\n      return res;\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      return x.divide(y);\n    }\n  });\n});\nexports.createDivideScalar = createDivideScalar;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createDivideScalar","_factory","_is","factory","name","dependencies","_ref","typed","numeric","numberNumber","x","y","ComplexComplex","div","BigNumberBigNumber","FractionFraction","UnitNumberFractionBigNumber","res","clone","one","typeOf","_normalize","numberFractionBigNumberUnit","pow","UnitUnit","divide"]
}
