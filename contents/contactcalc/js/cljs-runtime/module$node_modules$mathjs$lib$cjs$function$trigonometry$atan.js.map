{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$trigonometry$atan.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,6DAAA,CAAkF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG1HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,UAAR,CAAqB,IAAK,EAEtBC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAEf,KAAIQ,YAAcR,OAAA,CAAQ,qDAAR,CAIdM,QAAAA,CAA4B,CAAC,CAAA,CAAGC,MAASE,CAAAA,OAAb,EAFrBC,MAEqB,CADbC,CAAC,OAADA,CACa,CAA0C,QAAS,CAACC,IAAD,CAAO,CACpFC,IAAAA,CAAQD,IAAKC,CAAAA,KAyBjB,OAAOA,KAAA,CAAM,MAAN,CAAc,CACnBC,OAAQA,QAAe,CAACC,CAAD,CAAI,CACzB,MAAOC,KAAKC,CAAAA,IAAL,CAAUF,CAAV,CADkB,CADR,CAInBG,QAASA,QAAgB,CAACH,CAAD,CAAI,CAC3B,MAAOA,EAAEE,CAAAA,IAAF,EADoB,CAJV;AAOnBE,UAAWA,QAAkB,CAACJ,CAAD,CAAI,CAC/B,MAAOA,EAAEE,CAAAA,IAAF,EADwB,CAPd,CAUnB,iBAAkBG,QAAoB,CAACL,CAAD,CAAI,CAExC,MAAO,CAAC,CAAA,CAAGP,WAAYa,CAAAA,OAAhB,EAAyBN,CAAzB,CAA4B,IAA5B,CAAkC,CAAA,CAAlC,CAFiC,CAVvB,CAAd,CA1BiF,CAA1D,CA0ChCb,QAAQI,CAAAA,UAAR,CAAqBA,OAxDqG;",
"sources":["node_modules/mathjs/lib/cjs/function/trigonometry/atan.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$trigonometry$atan\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAtan = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar name = 'atan';\nvar dependencies = ['typed'];\nvar createAtan = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Calculate the inverse tangent of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.atan(x)\n   *\n   * Examples:\n   *\n   *    math.atan(0.5)           // returns number 0.4636476090008061\n   *    math.atan(math.tan(1.5)) // returns number 1.5\n   *\n   *    math.atan(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n   *\n   * See also:\n   *\n   *    tan, asin, acos\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input\n   * @return {number | BigNumber | Complex | Array | Matrix} The arc tangent of x\n   */\n  return typed('atan', {\n    number: function number(x) {\n      return Math.atan(x);\n    },\n    Complex: function Complex(x) {\n      return x.atan();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.atan();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since atan(0) = 0\n      return (0, _collection.deepMap)(x, this, true);\n    }\n  });\n});\nexports.createAtan = createAtan;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createAtan","_factory","_collection","factory","name","dependencies","_ref","typed","number","x","Math","atan","Complex","BigNumber","ArrayMatrix","deepMap"]
}
