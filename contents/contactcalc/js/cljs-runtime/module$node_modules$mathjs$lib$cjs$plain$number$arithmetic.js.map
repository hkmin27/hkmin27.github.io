{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$plain$number$arithmetic.js",
"lineCount":9,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/plain/number/arithmetic.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$plain$number$arithmetic\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.absNumber = absNumber;\nexports.addNumber = addNumber;\nexports.subtractNumber = subtractNumber;\nexports.multiplyNumber = multiplyNumber;\nexports.divideNumber = divideNumber;\nexports.unaryMinusNumber = unaryMinusNumber;\nexports.unaryPlusNumber = unaryPlusNumber;\nexports.cbrtNumber = cbrtNumber;\nexports.ceilNumber = ceilNumber;\nexports.cubeNumber = cubeNumber;\nexports.expNumber = expNumber;\nexports.expm1Number = expm1Number;\nexports.fixNumber = fixNumber;\nexports.floorNumber = floorNumber;\nexports.gcdNumber = gcdNumber;\nexports.lcmNumber = lcmNumber;\nexports.logNumber = logNumber;\nexports.log10Number = log10Number;\nexports.log2Number = log2Number;\nexports.log1pNumber = log1pNumber;\nexports.modNumber = modNumber;\nexports.nthRootNumber = nthRootNumber;\nexports.signNumber = signNumber;\nexports.sqrtNumber = sqrtNumber;\nexports.squareNumber = squareNumber;\nexports.xgcdNumber = xgcdNumber;\nexports.powNumber = powNumber;\nexports.roundNumber = roundNumber;\nexports.normNumber = normNumber;\n\nvar _number = require(\"../../utils/number.js\");\n\nvar n1 = 'number';\nvar n2 = 'number, number';\n\nfunction absNumber(a) {\n  return Math.abs(a);\n}\n\nabsNumber.signature = n1;\n\nfunction addNumber(a, b) {\n  return a + b;\n}\n\naddNumber.signature = n2;\n\nfunction subtractNumber(a, b) {\n  return a - b;\n}\n\nsubtractNumber.signature = n2;\n\nfunction multiplyNumber(a, b) {\n  return a * b;\n}\n\nmultiplyNumber.signature = n2;\n\nfunction divideNumber(a, b) {\n  return a / b;\n}\n\ndivideNumber.signature = n2;\n\nfunction unaryMinusNumber(x) {\n  return -x;\n}\n\nunaryMinusNumber.signature = n1;\n\nfunction unaryPlusNumber(x) {\n  return x;\n}\n\nunaryPlusNumber.signature = n1;\n\nfunction cbrtNumber(x) {\n  return (0, _number.cbrt)(x);\n}\n\ncbrtNumber.signature = n1;\n\nfunction ceilNumber(x) {\n  return Math.ceil(x);\n}\n\nceilNumber.signature = n1;\n\nfunction cubeNumber(x) {\n  return x * x * x;\n}\n\ncubeNumber.signature = n1;\n\nfunction expNumber(x) {\n  return Math.exp(x);\n}\n\nexpNumber.signature = n1;\n\nfunction expm1Number(x) {\n  return (0, _number.expm1)(x);\n}\n\nexpm1Number.signature = n1;\n\nfunction fixNumber(x) {\n  return x > 0 ? Math.floor(x) : Math.ceil(x);\n}\n\nfixNumber.signature = n1;\n\nfunction floorNumber(x) {\n  return Math.floor(x);\n}\n\nfloorNumber.signature = n1;\n/**\n * Calculate gcd for numbers\n * @param {number} a\n * @param {number} b\n * @returns {number} Returns the greatest common denominator of a and b\n */\n\nfunction gcdNumber(a, b) {\n  if (!(0, _number.isInteger)(a) || !(0, _number.isInteger)(b)) {\n    throw new Error('Parameters in function gcd must be integer numbers');\n  } // https://en.wikipedia.org/wiki/Euclidean_algorithm\n\n\n  var r;\n\n  while (b !== 0) {\n    r = a % b;\n    a = b;\n    b = r;\n  }\n\n  return a < 0 ? -a : a;\n}\n\ngcdNumber.signature = n2;\n/**\n * Calculate lcm for two numbers\n * @param {number} a\n * @param {number} b\n * @returns {number} Returns the least common multiple of a and b\n */\n\nfunction lcmNumber(a, b) {\n  if (!(0, _number.isInteger)(a) || !(0, _number.isInteger)(b)) {\n    throw new Error('Parameters in function lcm must be integer numbers');\n  }\n\n  if (a === 0 || b === 0) {\n    return 0;\n  } // https://en.wikipedia.org/wiki/Euclidean_algorithm\n  // evaluate lcm here inline to reduce overhead\n\n\n  var t;\n  var prod = a * b;\n\n  while (b !== 0) {\n    t = b;\n    b = a % t;\n    a = t;\n  }\n\n  return Math.abs(prod / a);\n}\n\nlcmNumber.signature = n2;\n/**\n * Calculate the logarithm of a value.\n * @param {number} x\n * @return {number}\n */\n\nfunction logNumber(x) {\n  return Math.log(x);\n}\n\nlogNumber.signature = n1;\n/**\n * Calculate the 10-base logarithm of a number\n * @param {number} x\n * @return {number}\n */\n\nfunction log10Number(x) {\n  return (0, _number.log10)(x);\n}\n\nlog10Number.signature = n1;\n/**\n * Calculate the 2-base logarithm of a number\n * @param {number} x\n * @return {number}\n */\n\nfunction log2Number(x) {\n  return (0, _number.log2)(x);\n}\n\nlog2Number.signature = n1;\n/**\n * Calculate the natural logarithm of a `number+1`\n * @param {number} x\n * @returns {number}\n */\n\nfunction log1pNumber(x) {\n  return (0, _number.log1p)(x);\n}\n\nlog1pNumber.signature = n1;\n/**\n * Calculate the modulus of two numbers\n * @param {number} x\n * @param {number} y\n * @returns {number} res\n * @private\n */\n\nfunction modNumber(x, y) {\n  if (y > 0) {\n    // We don't use JavaScript's % operator here as this doesn't work\n    // correctly for x < 0 and x === 0\n    // see https://en.wikipedia.org/wiki/Modulo_operation\n    return x - y * Math.floor(x / y);\n  } else if (y === 0) {\n    return x;\n  } else {\n    // y < 0\n    // TODO: implement mod for a negative divisor\n    throw new Error('Cannot calculate mod for a negative divisor');\n  }\n}\n\nmodNumber.signature = n2;\n/**\n * Calculate the nth root of a, solve x^root == a\n * http://rosettacode.org/wiki/Nth_root#JavaScript\n * @param {number} a\n * @param {number} root\n * @private\n */\n\nfunction nthRootNumber(a, root) {\n  var inv = root < 0;\n\n  if (inv) {\n    root = -root;\n  }\n\n  if (root === 0) {\n    throw new Error('Root must be non-zero');\n  }\n\n  if (a < 0 && Math.abs(root) % 2 !== 1) {\n    throw new Error('Root must be odd when a is negative.');\n  } // edge cases zero and infinity\n\n\n  if (a === 0) {\n    return inv ? Infinity : 0;\n  }\n\n  if (!isFinite(a)) {\n    return inv ? 0 : a;\n  }\n\n  var x = Math.pow(Math.abs(a), 1 / root); // If a < 0, we require that root is an odd integer,\n  // so (-1) ^ (1/root) = -1\n\n  x = a < 0 ? -x : x;\n  return inv ? 1 / x : x; // Very nice algorithm, but fails with nthRoot(-2, 3).\n  // Newton's method has some well-known problems at times:\n  // https://en.wikipedia.org/wiki/Newton%27s_method#Failure_analysis\n\n  /*\n  let x = 1 // Initial guess\n  let xPrev = 1\n  let i = 0\n  const iMax = 10000\n  do {\n    const delta = (a / Math.pow(x, root - 1) - x) / root\n    xPrev = x\n    x = x + delta\n    i++\n  }\n  while (xPrev !== x && i < iMax)\n   if (xPrev !== x) {\n    throw new Error('Function nthRoot failed to converge')\n  }\n   return inv ? 1 / x : x\n  */\n}\n\nnthRootNumber.signature = n2;\n\nfunction signNumber(x) {\n  return (0, _number.sign)(x);\n}\n\nsignNumber.signature = n1;\n\nfunction sqrtNumber(x) {\n  return Math.sqrt(x);\n}\n\nsqrtNumber.signature = n1;\n\nfunction squareNumber(x) {\n  return x * x;\n}\n\nsquareNumber.signature = n1;\n/**\n * Calculate xgcd for two numbers\n * @param {number} a\n * @param {number} b\n * @return {number} result\n * @private\n */\n\nfunction xgcdNumber(a, b) {\n  // source: https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\n  var t; // used to swap two variables\n\n  var q; // quotient\n\n  var r; // remainder\n\n  var x = 0;\n  var lastx = 1;\n  var y = 1;\n  var lasty = 0;\n\n  if (!(0, _number.isInteger)(a) || !(0, _number.isInteger)(b)) {\n    throw new Error('Parameters in function xgcd must be integer numbers');\n  }\n\n  while (b) {\n    q = Math.floor(a / b);\n    r = a - q * b;\n    t = x;\n    x = lastx - q * x;\n    lastx = t;\n    t = y;\n    y = lasty - q * y;\n    lasty = t;\n    a = b;\n    b = r;\n  }\n\n  var res;\n\n  if (a < 0) {\n    res = [-a, -lastx, -lasty];\n  } else {\n    res = [a, a ? lastx : 0, lasty];\n  }\n\n  return res;\n}\n\nxgcdNumber.signature = n2;\n/**\n * Calculates the power of x to y, x^y, for two numbers.\n * @param {number} x\n * @param {number} y\n * @return {number} res\n */\n\nfunction powNumber(x, y) {\n  // x^Infinity === 0 if -1 < x < 1\n  // A real number 0 is returned instead of complex(0)\n  if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {\n    return 0;\n  }\n\n  return Math.pow(x, y);\n}\n\npowNumber.signature = n2;\n/**\n * round a number to the given number of decimals, or to zero if decimals is\n * not provided\n * @param {number} value\n * @param {number} decimals       number of decimals, between 0 and 15 (0 by default)\n * @return {number} roundedValue\n */\n\nfunction roundNumber(value) {\n  var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return parseFloat((0, _number.toFixed)(value, decimals));\n}\n\nroundNumber.signature = n2;\n/**\n * Calculate the norm of a number, the absolute value.\n * @param {number} x\n * @return {number}\n */\n\nfunction normNumber(x) {\n  return Math.abs(x);\n}\n\nnormNumber.signature = n1;\n};"],
"names":["shadow$provide","global","require","module","exports","absNumber","a","Math","abs","addNumber","b","subtractNumber","multiplyNumber","divideNumber","unaryMinusNumber","x","unaryPlusNumber","cbrtNumber","_number","cbrt","ceilNumber","ceil","cubeNumber","expNumber","exp","expm1Number","expm1","fixNumber","floor","floorNumber","gcdNumber","isInteger","Error","r","lcmNumber","t","prod","logNumber","log","log10Number","log10","log2Number","log2","log1pNumber","log1p","modNumber","y","nthRootNumber","root","inv","Infinity","isFinite","pow","signNumber","sign","sqrtNumber","sqrt","squareNumber","xgcdNumber","lastx","lasty","q","res","powNumber","roundNumber","value","decimals","arguments","length","undefined","parseFloat","toFixed","normNumber","Object","defineProperty","signature","n1","n2"]
}
