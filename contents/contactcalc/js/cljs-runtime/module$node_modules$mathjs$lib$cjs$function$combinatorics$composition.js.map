{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$combinatorics$composition.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,qEAAA,CAA0F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGlIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,iBAAR,CAA4B,IAAK,EAE7BC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAIXM,OAAAA,CAAmC,CAAC,CAAA,CAAGC,MAASC,CAAAA,OAAb,EAF5BC,aAE4B,CADpBC,qEAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CACoB,CAA0C,QAAS,CAACC,IAAD,CAAO,CAAA,IAC3FC,MAAQD,IAAKC,CAAAA,KAD8E,CAE3FC,UAAYF,IAAKE,CAAAA,SAF0E,CAG3FC,aAAeH,IAAKG,CAAAA,YAHuE,CAI3FC;AAAaJ,IAAKI,CAAAA,UAJyE,CAM3FC,UAAYL,IAAKK,CAAAA,SAN0E,CAO3FC,OAASN,IAAKM,CAAAA,MAwBlB,OAAOL,MAAA,CAjCEH,aAiCF,CAAY,CACjB,yCAA0CS,QAAuC,CAACC,CAAD,CAAIC,CAAJ,CAAO,CACtF,GAAI,EAACJ,SAAA,CAAUG,CAAV,CAAD,EAAkBJ,UAAA,CAAWI,CAAX,CAAlB,EAAoCH,SAAA,CAAUI,CAAV,CAApC,EAAqDL,UAAA,CAAWK,CAAX,CAArD,CAAJ,CACE,KAAM,KAAIC,SAAJ,CAAc,yDAAd,CAAN,CACK,GAAIJ,MAAA,CAAOG,CAAP,CAAUD,CAAV,CAAJ,CACL,KAAM,KAAIE,SAAJ,CAAc,2DAAd,CAAN,CAGF,MAAOP,aAAA,CAAaD,SAAA,CAAUM,CAAV,CAAa,EAAb,CAAb,CAA+BN,SAAA,CAAUO,CAAV,CAAa,EAAb,CAA/B,CAP+E,CADvE,CAAZ,CA/BwF,CAA1D,CA2CvClB,QAAQI,CAAAA,iBAAR,CAA4BA,MAvDsG;",
"sources":["node_modules/mathjs/lib/cjs/function/combinatorics/composition.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$combinatorics$composition\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createComposition = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'composition';\nvar dependencies = ['typed', 'addScalar', 'combinations', 'isNegative', 'isPositive', 'isInteger', 'larger'];\nvar createComposition = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      addScalar = _ref.addScalar,\n      combinations = _ref.combinations,\n      isPositive = _ref.isPositive,\n      isNegative = _ref.isNegative,\n      isInteger = _ref.isInteger,\n      larger = _ref.larger;\n\n  /**\n   * The composition counts of n into k parts.\n   *\n   * composition only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   * Syntax:\n   *\n   *   math.composition(n, k)\n   *\n   * Examples:\n   *\n   *    math.composition(5, 3) // returns 6\n   *\n   * See also:\n   *\n   *    combinations\n   *\n   * @param {Number | BigNumber} n    Total number of objects in the set\n   * @param {Number | BigNumber} k    Number of objects in the subset\n   * @return {Number | BigNumber}     Returns the composition counts of n into k parts.\n   */\n  return typed(name, {\n    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(n, k) {\n      if (!isInteger(n) || !isPositive(n) || !isInteger(k) || !isPositive(k)) {\n        throw new TypeError('Positive integer value expected in function composition');\n      } else if (larger(k, n)) {\n        throw new TypeError('k must be less than or equal to n in function composition');\n      }\n\n      return combinations(addScalar(n, -1), addScalar(k, -1));\n    }\n  });\n});\nexports.createComposition = createComposition;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createComposition","_factory","factory","name","dependencies","_ref","typed","addScalar","combinations","isPositive","isInteger","larger","numberBigNumberNumberBigNumber","n","k","TypeError"]
}
