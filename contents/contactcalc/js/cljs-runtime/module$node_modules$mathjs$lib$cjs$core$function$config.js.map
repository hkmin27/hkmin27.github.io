{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$core$function$config.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,uDAAA,CAA4E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAmHpHC,QAASA,eAAc,CAACC,OAAD,CAAUC,IAAV,CAAgBC,MAAhB,CAAwB,CACvBC,IAAAA,EAAtB,GAAIH,OAAA,CAAQC,IAAR,CAAJ,EAX+B,EAW/B,GAA6CC,MAXhCE,CAAAA,OAAN,CAW8CJ,OAAAK,CAAQJ,IAARI,CAX9C,CAWP,EAEEC,OAAQC,CAAAA,IAAR,CAAa,0BAAb,CAA0CP,OAAA,CAAQC,IAAR,CAA1C,CAA0D,8BAA1D,CAA2FA,IAA3F,CAAkG,wBAAlG,CAAkIC,MAAOM,CAAAA,GAAP,CAAW,QAAS,CAACC,KAAD,CAAQ,CAC5J,MAAOC,KAAKC,CAAAA,SAAL,CAAeF,KAAf,CADqJ,CAA5B,CAE/HG,CAAAA,IAF+H,CAE1H,IAF0H,CAAlI,CAEgB,GAFhB,CAH2C,CAhH/CC,MAAOC,CAAAA,cAAP,CAAsBhB,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CW,MAAO,CAAA,CADoC,CAA7C,CAGAX,QAAQiB,CAAAA,aAAR,CAcAA,QAAsB,CAACC,MAAD,CAASC,IAAT,CAAe,CA2CnCC,QAASA,QAAO,CAAClB,OAAD,CAAU,CACxB,GAAIA,OAAJ,CAAa,CACX,IAAImB;AAAO,CAAC,CAAA,CAAGC,OAAQC,CAAAA,SAAZ,EAAuBL,MAAvB,CAA+BI,OAAQE,CAAAA,KAAvC,CAEXvB,eAAA,CAAeC,OAAf,CAAwB,QAAxB,CAAkCuB,cAAlC,CACAxB,eAAA,CAAeC,OAAf,CAAwB,QAAxB,CAAkCwB,cAAlC,CAEA,EAAC,CAAA,CAAGJ,OAAQK,CAAAA,UAAZ,EAAwBT,MAAxB,CAAgChB,OAAhC,CACA,KAAI0B,KAAO,CAAC,CAAA,CAAGN,OAAQC,CAAAA,SAAZ,EAAuBL,MAAvB,CAA+BI,OAAQE,CAAAA,KAAvC,CACPK,QAAAA,CAAU,CAAC,CAAA,CAAGP,OAAQC,CAAAA,SAAZ,EAAuBrB,OAAvB,CAAgCoB,OAAQE,CAAAA,KAAxC,CAEdL,KAAA,CAAK,QAAL,CAAeS,IAAf,CAAqBP,IAArB,CAA2BQ,OAA3B,CACA,OAAOD,KAXI,CAaX,MAAO,CAAC,CAAA,CAAGN,OAAQC,CAAAA,SAAZ,EAAuBL,MAAvB,CAA+BI,OAAQE,CAAAA,KAAvC,CAde,CAmB1BJ,OAAQK,CAAAA,cAAR,CAAyBA,cACzBL,QAAQM,CAAAA,cAAR,CAAyBA,cAEzBX,OAAOe,CAAAA,IAAP,CAAYC,QAASC,CAAAA,cAArB,CAAqCC,CAAAA,OAArC,CAA6C,QAAS,CAACC,GAAD,CAAM,CAC1DnB,MAAOC,CAAAA,cAAP,CAAsBI,OAAtB;AAA+Bc,GAA/B,CAAoC,CAClCC,IAAKA,QAAY,EAAG,CAClB,MAAOjB,OAAA,CAAOgB,GAAP,CADW,CADc,CAIlCE,WAAY,CAAA,CAJsB,CAKlCC,aAAc,CAAA,CALoB,CAApC,CAD0D,CAA5D,CASA,OAAOjB,QA1E4B,CAbrCpB,QAAQ0B,CAAAA,cAAR,CAAyB1B,OAAQyB,CAAAA,cAAjC,CAAkD,IAAK,EAEvD,KAAIH,QAAUxB,OAAA,CAAQ,iDAAR,CAAd,CAEIiC,SAAWjC,OAAA,CAAQ,gDAAR,CAFf,CAII2B,eAAiB,CAAC,QAAD,CAAW,OAAX,CAErBzB,QAAQyB,CAAAA,cAAR,CAAyBA,cACzB,KAAIC,eAAiB,CAAC,QAAD,CAAW,WAAX,CAAwB,UAAxB,CAErB1B,QAAQ0B,CAAAA,cAAR,CAAyBA,cAlB2F;",
"sources":["node_modules/mathjs/lib/cjs/core/function/config.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$core$function$config\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.configFactory = configFactory;\nexports.NUMBER_OPTIONS = exports.MATRIX_OPTIONS = void 0;\n\nvar _object = require(\"../../utils/object.js\");\n\nvar _config2 = require(\"../config.js\");\n\nvar MATRIX_OPTIONS = ['Matrix', 'Array']; // valid values for option matrix\n\nexports.MATRIX_OPTIONS = MATRIX_OPTIONS;\nvar NUMBER_OPTIONS = ['number', 'BigNumber', 'Fraction']; // valid values for option number\n\nexports.NUMBER_OPTIONS = NUMBER_OPTIONS;\n\nfunction configFactory(config, emit) {\n  /**\n   * Set configuration options for math.js, and get current options.\n   * Will emit a 'config' event, with arguments (curr, prev, changes).\n   *\n   * This function is only available on a mathjs instance created using `create`.\n   *\n   * Syntax:\n   *\n   *     math.config(config: Object): Object\n   *\n   * Examples:\n   *\n   *\n   *     import { create, all } from 'mathjs'\n   *\n   *     // create a mathjs instance\n   *     const math = create(all)\n   *\n   *     math.config().number                // outputs 'number'\n   *     math.evaluate('0.4')                // outputs number 0.4\n   *     math.config({number: 'Fraction'})\n   *     math.evaluate('0.4')                // outputs Fraction 2/5\n   *\n   * @param {Object} [options] Available options:\n   *                            {number} epsilon\n   *                              Minimum relative difference between two\n   *                              compared values, used by all comparison functions.\n   *                            {string} matrix\n   *                              A string 'Matrix' (default) or 'Array'.\n   *                            {string} number\n   *                              A string 'number' (default), 'BigNumber', or 'Fraction'\n   *                            {number} precision\n   *                              The number of significant digits for BigNumbers.\n   *                              Not applicable for Numbers.\n   *                            {string} parenthesis\n   *                              How to display parentheses in LaTeX and string\n   *                              output.\n   *                            {string} randomSeed\n   *                              Random seed for seeded pseudo random number generator.\n   *                              Set to null to randomly seed.\n   * @return {Object} Returns the current configuration\n   */\n  function _config(options) {\n    if (options) {\n      var prev = (0, _object.mapObject)(config, _object.clone); // validate some of the options\n\n      validateOption(options, 'matrix', MATRIX_OPTIONS);\n      validateOption(options, 'number', NUMBER_OPTIONS); // merge options\n\n      (0, _object.deepExtend)(config, options);\n      var curr = (0, _object.mapObject)(config, _object.clone);\n      var changes = (0, _object.mapObject)(options, _object.clone); // emit 'config' event\n\n      emit('config', curr, prev, changes);\n      return curr;\n    } else {\n      return (0, _object.mapObject)(config, _object.clone);\n    }\n  } // attach the valid options to the function so they can be extended\n\n\n  _config.MATRIX_OPTIONS = MATRIX_OPTIONS;\n  _config.NUMBER_OPTIONS = NUMBER_OPTIONS; // attach the config properties as readonly properties to the config function\n\n  Object.keys(_config2.DEFAULT_CONFIG).forEach(function (key) {\n    Object.defineProperty(_config, key, {\n      get: function get() {\n        return config[key];\n      },\n      enumerable: true,\n      configurable: true\n    });\n  });\n  return _config;\n}\n/**\n * Test whether an Array contains a specific item.\n * @param {Array.<string>} array\n * @param {string} item\n * @return {boolean}\n */\n\n\nfunction contains(array, item) {\n  return array.indexOf(item) !== -1;\n}\n/**\n * Validate an option\n * @param {Object} options         Object with options\n * @param {string} name            Name of the option to validate\n * @param {Array.<string>} values  Array with valid values for this option\n */\n\n\nfunction validateOption(options, name, values) {\n  if (options[name] !== undefined && !contains(values, options[name])) {\n    // unknown value\n    console.warn('Warning: Unknown value \"' + options[name] + '\" for configuration option \"' + name + '\". ' + 'Available options: ' + values.map(function (value) {\n      return JSON.stringify(value);\n    }).join(', ') + '.');\n  }\n}\n};"],
"names":["shadow$provide","global","require","module","exports","validateOption","options","name","values","undefined","indexOf","item","console","warn","map","value","JSON","stringify","join","Object","defineProperty","configFactory","config","emit","_config","prev","_object","mapObject","clone","MATRIX_OPTIONS","NUMBER_OPTIONS","deepExtend","curr","changes","keys","_config2","DEFAULT_CONFIG","forEach","key","get","enumerable","configurable"]
}
