{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$string$bin.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,sDAAA,CAA2E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGnHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,SAAR,CAAoB,IAAK,EAErBC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CA0BXM,OAAAA,CAAY,CAAC,CAAA,CAAGC,MAASC,CAAAA,OAAb,EAxBLC,KAwBK,CAvBGC,CAAC,OAADA,CAAU,QAAVA,CAuBH,CAA0C,QAAS,CAACC,IAAD,CAAO,CAAA,IACpEC,MAAQD,IAAKC,CAAAA,KADuD,CAEpEC,OAASF,IAAKE,CAAAA,MAClB,OAAOD,MAAA,CA3BEH,KA2BF,CAAY,CACjB,qBAAsBK,QAAwB,CAACC,CAAD,CAAI,CAChD,MAAOF,OAAA,CAAOE,CAAP,CAAU,CACfC,SAAU,KADK,CAAV,CADyC,CADjC,CAMjB,6BAA8BC,QAA8B,CAACF,CAAD,CAAIG,QAAJ,CAAc,CACxE,MAAOL,OAAA,CAAOE,CAAP;AAAU,CACfC,SAAU,KADK,CAEfE,SAAUA,QAFK,CAAV,CADiE,CANzD,CAAZ,CAHiE,CAA1D,CAiBhBhB,QAAQI,CAAAA,SAAR,CAAoBA,MAnD+F;",
"sources":["node_modules/mathjs/lib/cjs/function/string/bin.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$string$bin\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createBin = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'bin';\nvar dependencies = ['typed', 'format'];\n/**\n * Format a number as binary.\n *\n * Syntax:\n *\n *    math.bin(value)\n *\n * Examples:\n *\n *    //the following outputs \"0b10\"\n *    math.bin(2)\n *\n * See also:\n *\n *    oct\n *    hex\n *\n * @param {number} value    Value to be stringified\n * @param {number} wordSize Optional word size (see `format`)\n * @return {string}         The formatted value\n */\n\nvar createBin = (0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      format = _ref.format;\n  return typed(name, {\n    'number | BigNumber': function numberBigNumber(n) {\n      return format(n, {\n        notation: 'bin'\n      });\n    },\n    'number | BigNumber, number': function numberBigNumberNumber(n, wordSize) {\n      return format(n, {\n        notation: 'bin',\n        wordSize: wordSize\n      });\n    }\n  });\n});\nexports.createBin = createBin;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createBin","_factory","factory","name","dependencies","_ref","typed","format","numberBigNumber","n","notation","numberBigNumberNumber","wordSize"]
}
