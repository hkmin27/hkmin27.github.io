{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$trigonometry$cosh.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,6DAAA,CAAkF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG1HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,UAAR,CAAqB,IAAK,EAEtBC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAEf,KAAIQ,YAAcR,OAAA,CAAQ,qDAAR,CAAlB,CAEIS,QAAUT,OAAA,CAAQ,iDAAR,CAIVM,QAAAA,CAA4B,CAAC,CAAA,CAAGC,MAASG,CAAAA,OAAb,EAFrBC,MAEqB,CADbC,CAAC,OAADA,CACa,CAA0C,QAAS,CAACC,IAAD,CAAO,CACpFC,IAAAA,CAAQD,IAAKC,CAAAA,KAuBjB,OAAOA,KAAA,CA1BEH,MA0BF;AAAY,CACjBI,OAAQN,OAAQO,CAAAA,IADC,CAEjBC,QAASA,QAAgB,CAACC,CAAD,CAAI,CAC3B,MAAOA,EAAEF,CAAAA,IAAF,EADoB,CAFZ,CAKjBG,UAAWA,QAAkB,CAACD,CAAD,CAAI,CAC/B,MAAOA,EAAEF,CAAAA,IAAF,EADwB,CALhB,CAQjBI,KAAMA,QAAa,CAACF,CAAD,CAAI,CACrB,GAAI,CAACA,CAAEG,CAAAA,OAAF,CAAUH,CAAEI,CAAAA,WAAYC,CAAAA,UAAWC,CAAAA,KAAnC,CAAL,CACE,KAAM,KAAIC,SAAJ,CAAc,mCAAd,CAAN,CAGF,MAAO,KAAA,CAAKP,CAAEb,CAAAA,KAAP,CALc,CARN,CAejB,iBAAkBqB,QAAoB,CAACR,CAAD,CAAI,CACxC,MAAO,CAAC,CAAA,CAAGV,WAAYmB,CAAAA,OAAhB,EAAyBT,CAAzB,CAA4B,IAA5B,CADiC,CAfzB,CAAZ,CAxBiF,CAA1D,CA4ChChB,QAAQI,CAAAA,UAAR,CAAqBA,OA5DqG;",
"sources":["node_modules/mathjs/lib/cjs/function/trigonometry/cosh.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$trigonometry$cosh\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCosh = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _number = require(\"../../utils/number.js\");\n\nvar name = 'cosh';\nvar dependencies = ['typed'];\nvar createCosh = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Calculate the hyperbolic cosine of a value,\n   * defined as `cosh(x) = 1/2 * (exp(x) + exp(-x))`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.cosh(x)\n   *\n   * Examples:\n   *\n   *    math.cosh(0.5)       // returns number 1.1276259652063807\n   *\n   * See also:\n   *\n   *    sinh, tanh\n   *\n   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic cosine of x\n   */\n  return typed(name, {\n    number: _number.cosh,\n    Complex: function Complex(x) {\n      return x.cosh();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.cosh();\n    },\n    Unit: function Unit(x) {\n      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {\n        throw new TypeError('Unit in function cosh is no angle');\n      }\n\n      return this(x.value);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n});\nexports.createCosh = createCosh;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createCosh","_factory","_collection","_number","factory","name","dependencies","_ref","typed","number","cosh","Complex","x","BigNumber","Unit","hasBase","constructor","BASE_UNITS","ANGLE","TypeError","ArrayMatrix","deepMap"]
}
