{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$probability$combinationsWithRep.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/function/probability/combinationsWithRep.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$probability$combinationsWithRep\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCombinationsWithRep = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _number = require(\"../../utils/number.js\");\n\nvar _product = require(\"../../utils/product.js\");\n\nvar name = 'combinationsWithRep';\nvar dependencies = ['typed'];\nvar createCombinationsWithRep = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Compute the number of ways of picking `k` unordered outcomes from `n`\n   * possibilities, allowing individual outcomes to be repeated more than once.\n   *\n   * CombinationsWithRep only takes integer arguments.\n   * The following condition must be enforced: k <= n + k -1.\n   *\n   * Syntax:\n   *\n   *     math.combinationsWithRep(n, k)\n   *\n   * Examples:\n   *\n   *    math.combinationsWithRep(7, 5) // returns 462\n   *\n   * See also:\n   *\n   *    combinations, permutations, factorial\n   *\n   * @param {number | BigNumber} n    Total number of objects in the set\n   * @param {number | BigNumber} k    Number of objects in the subset\n   * @return {number | BigNumber}     Number of possible combinations with replacement.\n   */\n  return typed(name, {\n    'number, number': function numberNumber(n, k) {\n      if (!(0, _number.isInteger)(n) || n < 0) {\n        throw new TypeError('Positive integer value expected in function combinationsWithRep');\n      }\n\n      if (!(0, _number.isInteger)(k) || k < 0) {\n        throw new TypeError('Positive integer value expected in function combinationsWithRep');\n      }\n\n      if (n < 1) {\n        throw new TypeError('k must be less than or equal to n + k - 1');\n      }\n\n      if (k < n - 1) {\n        var _prodrange = (0, _product.product)(n, n + k - 1);\n\n        return _prodrange / (0, _product.product)(1, k);\n      }\n\n      var prodrange = (0, _product.product)(k + 1, n + k - 1);\n      return prodrange / (0, _product.product)(1, n - 1);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {\n      var BigNumber = n.constructor;\n      var result, i;\n      var one = new BigNumber(1);\n      var nMinusOne = n.minus(one);\n\n      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {\n        throw new TypeError('Positive integer value expected in function combinationsWithRep');\n      }\n\n      if (n.lt(one)) {\n        throw new TypeError('k must be less than or equal to n + k - 1 in function combinationsWithRep');\n      }\n\n      result = one;\n\n      if (k.lt(nMinusOne)) {\n        for (i = one; i.lte(nMinusOne); i = i.plus(one)) {\n          result = result.times(k.plus(i)).dividedBy(i);\n        }\n      } else {\n        for (i = one; i.lte(k); i = i.plus(one)) {\n          result = result.times(nMinusOne.plus(i)).dividedBy(i);\n        }\n      }\n\n      return result;\n    }\n  });\n});\n/**\n * Test whether BigNumber n is a positive integer\n * @param {BigNumber} n\n * @returns {boolean} isPositiveInteger\n */\n\nexports.createCombinationsWithRep = createCombinationsWithRep;\n\nfunction isPositiveInteger(n) {\n  return n.isInteger() && n.gte(0);\n}\n};"],
"names":["shadow$provide","global","require","module","exports","isPositiveInteger","n","isInteger","gte","Object","defineProperty","value","createCombinationsWithRep","_factory","_number","_product","factory","name","dependencies","_ref","typed","numberNumber","k","TypeError","_prodrange","product","prodrange","BigNumberBigNumber","i","one","constructor","nMinusOne","minus","lt","result","lte","plus","times","dividedBy"]
}
