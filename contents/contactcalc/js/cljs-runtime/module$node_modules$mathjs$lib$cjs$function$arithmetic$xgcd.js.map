{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$arithmetic$xgcd.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,2DAAA,CAAgF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGxHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,UAAR,CAAqB,IAAK,EAEtBC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAEf,KAAIQ,OAASR,OAAA,CAAQ,uDAAR,CAITM,QAAAA,CAA4B,CAAC,CAAA,CAAGC,MAASE,CAAAA,OAAb,EAFrBC,MAEqB,CADbC,CAAC,OAADA,CAAU,QAAVA,CAAoB,QAApBA,CAA8B,WAA9BA,CACa,CAA0C,QAAS,CAACC,IAAD,CAAO,CAAA,IACpFC,MAAQD,IAAKC,CAAAA,KADuE,CAEpFC,OAASF,IAAKE,CAAAA,MAFsE,CAGpFC,OAASH,IAAKG,CAAAA,MAHsE,CAIpFC,UAAYJ,IAAKI,CAAAA,SAyBrB;MAAOH,MAAA,CA/BEH,MA+BF,CAAY,CACjB,iBAAkBO,QAAqB,CAACC,CAAD,CAAIC,CAAJ,CAAO,CACxCC,CAAAA,CAAM,CAAC,CAAA,CAAGZ,MAAOa,CAAAA,UAAX,EAAuBH,CAAvB,CAA0BC,CAA1B,CACV,OAAyB,OAAlB,GAAAL,MAAOC,CAAAA,MAAP,CAA4BK,CAA5B,CAAkCL,MAAA,CAAOK,CAAP,CAFG,CAD7B,CAKjB,uBAWFE,QAAuB,CAACJ,CAAD,CAAIC,CAAJ,CAAO,CAI5B,IAIII,KAAO,IAAIP,SAAJ,CAAc,CAAd,CACPQ,KAAAA,EAAM,IAAIR,SAAJ,CAAc,CAAd,CACV,KAAIS,EAAIF,IAAR,CACIG,MAAQF,CADZ,CAEIG,EAAIH,CAFR,CAGII,MAAQL,IAEZ,IAAI,CAACL,CAAEW,CAAAA,KAAF,EAAL,EAAkB,CAACV,CAAEU,CAAAA,KAAF,EAAnB,CACE,KAAUC,MAAJ,CAAU,qDAAV,CAAN,CAGF,IAAA,CAAO,CAACX,CAAEY,CAAAA,MAAF,EAAR,CAAA,CAAoB,CAClBC,CAAA,CAAId,CAAEe,CAAAA,GAAF,CAAMd,CAAN,CAASe,CAAAA,KAAT,EACJ,KAAAC,EAAIjB,CAAEkB,CAAAA,GAAF,CAAMjB,CAAN,CACJkB,EAAA,CAAIZ,CACJA,EAAA,CAAIC,KAAMY,CAAAA,KAAN,CAAYN,CAAEO,CAAAA,KAAF,CAAQd,CAAR,CAAZ,CACJC,MAAA,CAAQW,CACRA,EAAA,CAAIV,CACJA,EAAA,CAAIC,KAAMU,CAAAA,KAAN,CAAYN,CAAEO,CAAAA,KAAF,CAAQZ,CAAR,CAAZ,CACJC,MAAA,CAAQS,CACRnB,EAAA,CAAIC,CACJA,EAAA,CAAIgB,CAVc,CAgBlBf,CAAA,CADEF,CAAEsB,CAAAA,EAAF,CAAKjB,IAAL,CAAJ,CACQ,CAACL,CAAEuB,CAAAA,GAAF,EAAD,CAAUf,KAAMe,CAAAA,GAAN,EAAV;AAAuBb,KAAMa,CAAAA,GAAN,EAAvB,CADR,CAGQ,CAACvB,CAAD,CAAKA,CAAEa,CAAAA,MAAF,EAAD,CAAsB,CAAtB,CAAcL,KAAlB,CAA6BE,KAA7B,CAGR,OAAyB,OAAlB,GAAAd,MAAOC,CAAAA,MAAP,CAA4BK,CAA5B,CAAkCL,MAAA,CAAOK,CAAP,CAxCb,CAhBX,CAAZ,CA7BiF,CAA1D,CAwFhClB,QAAQI,CAAAA,UAAR,CAAqBA,OAtGmG;",
"sources":["node_modules/mathjs/lib/cjs/function/arithmetic/xgcd.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$arithmetic$xgcd\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createXgcd = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _index = require(\"../../plain/number/index.js\");\n\nvar name = 'xgcd';\nvar dependencies = ['typed', 'config', 'matrix', 'BigNumber'];\nvar createXgcd = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      matrix = _ref.matrix,\n      BigNumber = _ref.BigNumber;\n\n  /**\n   * Calculate the extended greatest common divisor for two values.\n   * See https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm.\n   *\n   * Syntax:\n   *\n   *    math.xgcd(a, b)\n   *\n   * Examples:\n   *\n   *    math.xgcd(8, 12)             // returns [4, -1, 1]\n   *    math.gcd(8, 12)              // returns 4\n   *    math.xgcd(36163, 21199)      // returns [1247, -7, 12]\n   *\n   * See also:\n   *\n   *    gcd, lcm\n   *\n   * @param {number | BigNumber} a  An integer number\n   * @param {number | BigNumber} b  An integer number\n   * @return {Array}              Returns an array containing 3 integers `[div, m, n]`\n   *                              where `div = gcd(a, b)` and `a*m + b*n = div`\n   */\n  return typed(name, {\n    'number, number': function numberNumber(a, b) {\n      var res = (0, _index.xgcdNumber)(a, b);\n      return config.matrix === 'Array' ? res : matrix(res);\n    },\n    'BigNumber, BigNumber': _xgcdBigNumber // TODO: implement support for Fraction\n\n  });\n  /**\n   * Calculate xgcd for two BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @return {BigNumber[]} result\n   * @private\n   */\n\n  function _xgcdBigNumber(a, b) {\n    // source: https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\n    var // used to swap two variables\n    t;\n    var // quotient\n    q;\n    var // remainder\n    r;\n    var zero = new BigNumber(0);\n    var one = new BigNumber(1);\n    var x = zero;\n    var lastx = one;\n    var y = one;\n    var lasty = zero;\n\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function xgcd must be integer numbers');\n    }\n\n    while (!b.isZero()) {\n      q = a.div(b).floor();\n      r = a.mod(b);\n      t = x;\n      x = lastx.minus(q.times(x));\n      lastx = t;\n      t = y;\n      y = lasty.minus(q.times(y));\n      lasty = t;\n      a = b;\n      b = r;\n    }\n\n    var res;\n\n    if (a.lt(zero)) {\n      res = [a.neg(), lastx.neg(), lasty.neg()];\n    } else {\n      res = [a, !a.isZero() ? lastx : 0, lasty];\n    }\n\n    return config.matrix === 'Array' ? res : matrix(res);\n  }\n});\nexports.createXgcd = createXgcd;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createXgcd","_factory","_index","factory","name","dependencies","_ref","typed","config","matrix","BigNumber","numberNumber","a","b","res","xgcdNumber","_xgcdBigNumber","zero","one","x","lastx","y","lasty","isInt","Error","isZero","q","div","floor","r","mod","t","minus","times","lt","neg"]
}
