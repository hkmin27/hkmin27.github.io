{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$arithmetic$norm.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/function/arithmetic/norm.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$arithmetic$norm\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createNorm = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'norm';\nvar dependencies = ['typed', 'abs', 'add', 'pow', 'conj', 'sqrt', 'multiply', 'equalScalar', 'larger', 'smaller', 'matrix', 'ctranspose', 'eigs'];\nvar createNorm = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      abs = _ref.abs,\n      add = _ref.add,\n      pow = _ref.pow,\n      conj = _ref.conj,\n      sqrt = _ref.sqrt,\n      multiply = _ref.multiply,\n      equalScalar = _ref.equalScalar,\n      larger = _ref.larger,\n      smaller = _ref.smaller,\n      matrix = _ref.matrix,\n      ctranspose = _ref.ctranspose,\n      eigs = _ref.eigs;\n\n  /**\n   * Calculate the norm of a number, vector or matrix.\n   *\n   * The second parameter p is optional. If not provided, it defaults to 2.\n   *\n   * Syntax:\n   *\n   *    math.norm(x)\n   *    math.norm(x, p)\n   *\n   * Examples:\n   *\n   *    math.abs(-3.5)                         // returns 3.5\n   *    math.norm(-3.5)                        // returns 3.5\n   *\n   *    math.norm(math.complex(3, -4))         // returns 5\n   *\n   *    math.norm([1, 2, -3], Infinity)        // returns 3\n   *    math.norm([1, 2, -3], -Infinity)       // returns 1\n   *\n   *    math.norm([3, 4], 2)                   // returns 5\n   *\n   *    math.norm([[1, 2], [3, 4]], 1)          // returns 6\n   *    math.norm([[1, 2], [3, 4]], 'inf')     // returns 7\n   *    math.norm([[1, 2], [3, 4]], 'fro')     // returns 5.477225575051661\n   *\n   * See also:\n   *\n   *    abs, hypot\n   *\n   * @param  {number | BigNumber | Complex | Array | Matrix} x\n   *            Value for which to calculate the norm\n   * @param  {number | BigNumber | string} [p=2]\n   *            Vector space.\n   *            Supported numbers include Infinity and -Infinity.\n   *            Supported strings are: 'inf', '-inf', and 'fro' (The Frobenius norm)\n   * @return {number | BigNumber} the p-norm\n   */\n  return typed(name, {\n    number: Math.abs,\n    Complex: function Complex(x) {\n      return x.abs();\n    },\n    BigNumber: function BigNumber(x) {\n      // norm(x) = abs(x)\n      return x.abs();\n    },\n    \"boolean\": function boolean(x) {\n      // norm(x) = abs(x)\n      return Math.abs(x);\n    },\n    Array: function Array(x) {\n      return _norm(matrix(x), 2);\n    },\n    Matrix: function Matrix(x) {\n      return _norm(x, 2);\n    },\n    'number | Complex | BigNumber | boolean, number | BigNumber | string': function numberComplexBigNumberBooleanNumberBigNumberString(x) {\n      // ignore second parameter, TODO: remove the option of second parameter for these types\n      return this(x);\n    },\n    'Array, number | BigNumber | string': function ArrayNumberBigNumberString(x, p) {\n      return _norm(matrix(x), p);\n    },\n    'Matrix, number | BigNumber | string': function MatrixNumberBigNumberString(x, p) {\n      return _norm(x, p);\n    }\n  });\n  /**\n   * Calculate the plus infinity norm for a vector\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n\n  function _vectorNormPlusInfinity(x) {\n    // norm(x, Infinity) = max(abs(x))\n    var pinf = 0; // skip zeros since abs(0) === 0\n\n    x.forEach(function (value) {\n      var v = abs(value);\n\n      if (larger(v, pinf)) {\n        pinf = v;\n      }\n    }, true);\n    return pinf;\n  }\n  /**\n   * Calculate the minus infinity norm for a vector\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n\n\n  function _vectorNormMinusInfinity(x) {\n    // norm(x, -Infinity) = min(abs(x))\n    var ninf; // skip zeros since abs(0) === 0\n\n    x.forEach(function (value) {\n      var v = abs(value);\n\n      if (!ninf || smaller(v, ninf)) {\n        ninf = v;\n      }\n    }, true);\n    return ninf || 0;\n  }\n  /**\n   * Calculate the norm for a vector\n   * @param {Matrix} x\n   * @param {number | string} p\n   * @returns {number} Returns the norm\n   * @private\n   */\n\n\n  function _vectorNorm(x, p) {\n    // check p\n    if (p === Number.POSITIVE_INFINITY || p === 'inf') {\n      return _vectorNormPlusInfinity(x);\n    }\n\n    if (p === Number.NEGATIVE_INFINITY || p === '-inf') {\n      return _vectorNormMinusInfinity(x);\n    }\n\n    if (p === 'fro') {\n      return _norm(x, 2);\n    }\n\n    if (typeof p === 'number' && !isNaN(p)) {\n      // check p != 0\n      if (!equalScalar(p, 0)) {\n        // norm(x, p) = sum(abs(xi) ^ p) ^ 1/p\n        var n = 0; // skip zeros since abs(0) === 0\n\n        x.forEach(function (value) {\n          n = add(pow(abs(value), p), n);\n        }, true);\n        return pow(n, 1 / p);\n      }\n\n      return Number.POSITIVE_INFINITY;\n    } // invalid parameter value\n\n\n    throw new Error('Unsupported parameter value');\n  }\n  /**\n   * Calculate the Frobenius norm for a matrix\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n\n\n  function _matrixNormFrobenius(x) {\n    // norm(x) = sqrt(sum(diag(x'x)))\n    var fro = 0;\n    x.forEach(function (value, index) {\n      fro = add(fro, multiply(value, conj(value)));\n    });\n    return abs(sqrt(fro));\n  }\n  /**\n   * Calculate the norm L1 for a matrix\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n\n\n  function _matrixNormOne(x) {\n    // norm(x) = the largest column sum\n    var c = []; // result\n\n    var maxc = 0; // skip zeros since abs(0) == 0\n\n    x.forEach(function (value, index) {\n      var j = index[1];\n      var cj = add(c[j] || 0, abs(value));\n\n      if (larger(cj, maxc)) {\n        maxc = cj;\n      }\n\n      c[j] = cj;\n    }, true);\n    return maxc;\n  }\n  /**\n   * Calculate the norm L2 for a matrix\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n\n\n  function _matrixNormTwo(x) {\n    // norm(x) = sqrt( max eigenvalue of A*.A)\n    var sizeX = x.size();\n\n    if (sizeX[0] !== sizeX[1]) {\n      throw new RangeError('Invalid matrix dimensions');\n    }\n\n    var tx = ctranspose(x);\n    var squaredX = multiply(tx, x);\n    var eigenVals = eigs(squaredX).values;\n    var rho = eigenVals.get([eigenVals.size()[0] - 1]);\n    return abs(sqrt(rho));\n  }\n  /**\n   * Calculate the infinity norm for a matrix\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n\n\n  function _matrixNormInfinity(x) {\n    // norm(x) = the largest row sum\n    var r = []; // result\n\n    var maxr = 0; // skip zeros since abs(0) == 0\n\n    x.forEach(function (value, index) {\n      var i = index[0];\n      var ri = add(r[i] || 0, abs(value));\n\n      if (larger(ri, maxr)) {\n        maxr = ri;\n      }\n\n      r[i] = ri;\n    }, true);\n    return maxr;\n  }\n  /**\n   * Calculate the norm for a 2D Matrix (M*N)\n   * @param {Matrix} x\n   * @param {number | string} p\n   * @returns {number} Returns the norm\n   * @private\n   */\n\n\n  function _matrixNorm(x, p) {\n    // check p\n    if (p === 1) {\n      return _matrixNormOne(x);\n    }\n\n    if (p === Number.POSITIVE_INFINITY || p === 'inf') {\n      return _matrixNormInfinity(x);\n    }\n\n    if (p === 'fro') {\n      return _matrixNormFrobenius(x);\n    }\n\n    if (p === 2) {\n      return _matrixNormTwo(x);\n    } // invalid parameter value\n\n\n    throw new Error('Unsupported parameter value ' + p);\n  }\n  /**\n   * Calculate the norm for an array\n   * @param {Matrix} x\n   * @param {number | string} p\n   * @returns {number} Returns the norm\n   * @private\n   */\n\n\n  function _norm(x, p) {\n    // size\n    var sizeX = x.size(); // check if it is a vector\n\n    if (sizeX.length === 1) {\n      return _vectorNorm(x, p);\n    } // MxN matrix\n\n\n    if (sizeX.length === 2) {\n      if (sizeX[0] && sizeX[1]) {\n        return _matrixNorm(x, p);\n      } else {\n        throw new RangeError('Invalid matrix dimensions');\n      }\n    }\n  }\n});\nexports.createNorm = createNorm;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createNorm","_factory","factory","name","dependencies","_ref","_vectorNormPlusInfinity","x","pinf","forEach","v","abs","larger","_vectorNormMinusInfinity","ninf","smaller","_vectorNorm","p","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","_norm","isNaN","equalScalar","n","add","pow","Error","_matrixNormFrobenius","fro","index","multiply","conj","sqrt","_matrixNormOne","c","maxc","j","cj","_matrixNormInfinity","r","maxr","i","ri","_matrixNorm","sizeX","size","RangeError","tx","ctranspose","squaredX","eigenVals","eigs","values","rho","get","length","typed","matrix","number","Math","Complex","BigNumber","boolean","Array","Matrix","numberComplexBigNumberBooleanNumberBigNumberString","ArrayNumberBigNumberString","MatrixNumberBigNumberString"]
}
