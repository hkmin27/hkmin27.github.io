{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$probability$multinomial.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,mEAAA,CAAwF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGhIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,iBAAR,CAA4B,IAAK,EAEjC,KAAIC,YAAcP,OAAA,CAAQ,qDAAR,CAEdQ,OAAAA,CAAWR,OAAA,CAAQ,kDAAR,CAIXM,OAAAA,CAAmC,CAAC,CAAA,CAAGE,MAASC,CAAAA,OAAb,EAF5BC,aAE4B,CADpBC,0DAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CACoB,CAA0C,QAAS,CAACC,IAAD,CAAO,CAAA,IAC3FC,MAAQD,IAAKC,CAAAA,KAD8E;AAE3FC,IAAMF,IAAKE,CAAAA,GAFgF,CAG3FC,OAASH,IAAKG,CAAAA,MAH6E,CAI3FC,SAAWJ,IAAKI,CAAAA,QAJ2E,CAK3FC,UAAYL,IAAKK,CAAAA,SAL0E,CAM3FC,UAAYN,IAAKM,CAAAA,SAN0E,CAO3FC,WAAaP,IAAKO,CAAAA,UAuBtB,OAAON,MAAA,CAhCEH,aAgCF,CAAY,CACjB,iBAAkBU,QAAoB,CAACC,CAAD,CAAI,CACxC,IAAIC,IAAM,CAAV,CACIC,MAAQ,CACZ,EAAC,CAAA,CAAGhB,WAAYiB,CAAAA,WAAhB,EAA6BH,CAA7B,CAAgC,QAAS,CAACI,EAAD,CAAK,CAC5C,GAAI,CAACP,SAAA,CAAUO,EAAV,CAAL,EAAsB,CAACN,UAAA,CAAWM,EAAX,CAAvB,CACE,KAAM,KAAIC,SAAJ,CAAc,yDAAd,CAAN,CAGFJ,GAAA,CAAMR,GAAA,CAAIQ,GAAJ,CAASG,EAAT,CACNF,MAAA,CAAQP,QAAA,CAASO,KAAT,CAAgBN,SAAA,CAAUQ,EAAV,CAAhB,CANoC,CAA9C,CAQA,OAAOV,OAAA,CAAOE,SAAA,CAAUK,GAAV,CAAP,CAAuBC,KAAvB,CAXiC,CADzB,CAAZ,CA9BwF,CAA1D,CA8CvCrB,QAAQI,CAAAA,iBAAR,CAA4BA,MA5DoG;",
"sources":["node_modules/mathjs/lib/cjs/function/probability/multinomial.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$probability$multinomial\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMultinomial = void 0;\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'multinomial';\nvar dependencies = ['typed', 'add', 'divide', 'multiply', 'factorial', 'isInteger', 'isPositive'];\nvar createMultinomial = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      add = _ref.add,\n      divide = _ref.divide,\n      multiply = _ref.multiply,\n      factorial = _ref.factorial,\n      isInteger = _ref.isInteger,\n      isPositive = _ref.isPositive;\n\n  /**\n   * Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities.\n   *\n   * multinomial takes one array of integers as an argument.\n   * The following condition must be enforced: every ai <= 0\n   *\n   * Syntax:\n   *\n   *     math.multinomial(a) // a is an array type\n   *\n   * Examples:\n   *\n   *    math.multinomial([1,2,1]) // returns 12\n   *\n   * See also:\n   *\n   *    combinations, factorial\n   *\n   * @param {number[] | BigNumber[]} a    Integer numbers of objects in the subset\n   * @return {Number | BigNumber}         Multinomial coefficient.\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(a) {\n      var sum = 0;\n      var denom = 1;\n      (0, _collection.deepForEach)(a, function (ai) {\n        if (!isInteger(ai) || !isPositive(ai)) {\n          throw new TypeError('Positive integer value expected in function multinomial');\n        }\n\n        sum = add(sum, ai);\n        denom = multiply(denom, factorial(ai));\n      });\n      return divide(factorial(sum), denom);\n    }\n  });\n});\nexports.createMultinomial = createMultinomial;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createMultinomial","_collection","_factory","factory","name","dependencies","_ref","typed","add","divide","multiply","factorial","isInteger","isPositive","ArrayMatrix","a","sum","denom","deepForEach","ai","TypeError"]
}
