{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$complex$arg.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,uDAAA,CAA4E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGpHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,SAAR,CAAoB,IAAK,EAErBC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAEf,KAAIQ,YAAcR,OAAA,CAAQ,qDAAR,CAIdM,QAAAA,CAA2B,CAAC,CAAA,CAAGC,MAASE,CAAAA,OAAb,EAFpBC,KAEoB,CADZC,CAAC,OAADA,CACY,CAA0C,QAAS,CAACC,IAAD,CAAO,CACnFC,IAAAA,CAAQD,IAAKC,CAAAA,KA6BjB,OAAOA,KAAA,CAhCEH,KAgCF,CAAY,CACjBI,OAAQA,QAAe,CAACC,CAAD,CAAI,CACzB,MAAOC,KAAKC,CAAAA,KAAL,CAAW,CAAX,CAAcF,CAAd,CADkB,CADV,CAIjBG,UAAWA,QAAkB,CAACH,CAAD,CAAI,CAC/B,MAAOA,EAAEI,CAAAA,WAAYF,CAAAA,KAAd,CAAoB,CAApB;AAAuBF,CAAvB,CADwB,CAJhB,CAOjBK,QAASA,QAAgB,CAACL,CAAD,CAAI,CAC3B,MAAOA,EAAEM,CAAAA,GAAF,EADoB,CAPZ,CAWjB,iBAAkBC,QAAoB,CAACP,CAAD,CAAI,CACxC,MAAO,CAAC,CAAA,CAAGP,WAAYe,CAAAA,OAAhB,EAAyBR,CAAzB,CAA4B,IAA5B,CADiC,CAXzB,CAAZ,CA9BgF,CAA1D,CA8C/Bb,QAAQI,CAAAA,SAAR,CAAoBA,OA5DgG;",
"sources":["node_modules/mathjs/lib/cjs/function/complex/arg.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$complex$arg\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createArg = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar name = 'arg';\nvar dependencies = ['typed'];\nvar createArg = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Compute the argument of a complex value.\n   * For a complex number `a + bi`, the argument is computed as `atan2(b, a)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.arg(x)\n   *\n   * Examples:\n   *\n   *    const a = math.complex(2, 2)\n   *    math.arg(a) / math.pi          // returns number 0.25\n   *\n   *    const b = math.complex('2 + 3i')\n   *    math.arg(b)                    // returns number 0.982793723247329\n   *    math.atan2(3, 2)               // returns number 0.982793723247329\n   *\n   * See also:\n   *\n   *    re, im, conj, abs\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            A complex number or array with complex numbers\n   * @return {number | BigNumber | Array | Matrix} The argument of x\n   */\n  return typed(name, {\n    number: function number(x) {\n      return Math.atan2(0, x);\n    },\n    BigNumber: function BigNumber(x) {\n      return x.constructor.atan2(0, x);\n    },\n    Complex: function Complex(x) {\n      return x.arg();\n    },\n    // TODO: implement BigNumber support for function arg\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n});\nexports.createArg = createArg;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createArg","_factory","_collection","factory","name","dependencies","_ref","typed","number","x","Math","atan2","BigNumber","constructor","Complex","arg","ArrayMatrix","deepMap"]
}
