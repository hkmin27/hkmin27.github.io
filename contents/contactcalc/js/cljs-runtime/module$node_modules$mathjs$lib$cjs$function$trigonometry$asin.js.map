{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$trigonometry$asin.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,6DAAA,CAAkF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG1HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,UAAR,CAAqB,IAAK,EAEtBC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAEf,KAAIQ,YAAcR,OAAA,CAAQ,qDAAR,CAIdM,QAAAA,CAA4B,CAAC,CAAA,CAAGC,MAASE,CAAAA,OAAb,EAFrBC,MAEqB,CADbC,CAAC,OAADA,CAAU,QAAVA,CAAoB,SAApBA,CACa,CAA0C,QAAS,CAACC,IAAD,CAAO,CAAA,IACpFC,MAAQD,IAAKC,CAAAA,KADuE,CAEpFC,OAASF,IAAKE,CAAAA,MAFsE,CAGpFC,QAAUH,IAAKG,CAAAA,OAyBnB,OAAOF,MAAA,CA9BEH,MA8BF;AAAY,CACjBM,OAAQA,QAAe,CAACC,CAAD,CAAI,CACzB,MAAS,EAAT,EAAIA,CAAJ,EAAoB,CAApB,EAAeA,CAAf,EAAyBH,MAAOI,CAAAA,WAAhC,CACSC,IAAKC,CAAAA,IAAL,CAAUH,CAAV,CADT,CAG2BG,CAAlB,IAAIL,OAAJ,CAAYE,CAAZ,CAAe,CAAf,CAAkBG,EAAAA,IAAlB,EAJgB,CADV,CAQjBL,QAASA,QAAgB,CAACE,CAAD,CAAI,CAC3B,MAAOA,EAAEG,CAAAA,IAAF,EADoB,CARZ,CAWjBC,UAAWA,QAAkB,CAACJ,CAAD,CAAI,CAC/B,MAAOA,EAAEG,CAAAA,IAAF,EADwB,CAXhB,CAcjB,iBAAkBE,QAAoB,CAACL,CAAD,CAAI,CAExC,MAAO,CAAC,CAAA,CAAGT,WAAYe,CAAAA,OAAhB,EAAyBN,CAAzB,CAA4B,IAA5B,CAAkC,CAAA,CAAlC,CAFiC,CAdzB,CAAZ,CA5BiF,CAA1D,CAgDhCf,QAAQI,CAAAA,UAAR,CAAqBA,OA9DqG;",
"sources":["node_modules/mathjs/lib/cjs/function/trigonometry/asin.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$trigonometry$asin\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAsin = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar name = 'asin';\nvar dependencies = ['typed', 'config', 'Complex'];\nvar createAsin = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      Complex = _ref.Complex;\n\n  /**\n   * Calculate the inverse sine of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.asin(x)\n   *\n   * Examples:\n   *\n   *    math.asin(0.5)           // returns number 0.5235987755982989\n   *    math.asin(math.sin(1.5)) // returns number ~1.5\n   *\n   *    math.asin(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n   *\n   * See also:\n   *\n   *    sin, atan, acos\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input\n   * @return {number | BigNumber | Complex | Array | Matrix} The arc sine of x\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x >= -1 && x <= 1 || config.predictable) {\n        return Math.asin(x);\n      } else {\n        return new Complex(x, 0).asin();\n      }\n    },\n    Complex: function Complex(x) {\n      return x.asin();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.asin();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since asin(0) = 0\n      return (0, _collection.deepMap)(x, this, true);\n    }\n  });\n});\nexports.createAsin = createAsin;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createAsin","_factory","_collection","factory","name","dependencies","_ref","typed","config","Complex","number","x","predictable","Math","asin","BigNumber","ArrayMatrix","deepMap"]
}
