shadow$provide.module$node_modules$mathjs$lib$cjs$function$matrix$det=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.createDet=void 0;var _is=require("module$node_modules$mathjs$lib$cjs$utils$is"),_object=require("module$node_modules$mathjs$lib$cjs$utils$object"),_string=require("module$node_modules$mathjs$lib$cjs$utils$string");global=require("module$node_modules$mathjs$lib$cjs$utils$factory");global=(0,global.factory)("det","typed matrix subtract multiply unaryMinus lup".split(" "),
function(_ref){var typed=_ref.typed,matrix=_ref.matrix,subtract=_ref.subtract,multiply=_ref.multiply,unaryMinus=_ref.unaryMinus,lup=_ref.lup;return typed("det",{any:function(x){return(0,_object.clone)(x)},"Array | Matrix":function(x){if((0,_is.isMatrix)(x))var size=x.size();else Array.isArray(x)?(x=matrix(x),size=x.size()):size=[];switch(size.length){case 0:return(0,_object.clone)(x);case 1:if(1===size[0])return(0,_object.clone)(x.valueOf()[0]);throw new RangeError("Matrix must be square (size: "+
(0,_string.format)(size)+")");case 2:var rows=size[0];if(rows===size[1]){x=x.clone().valueOf();if(1===rows)rows=(0,_object.clone)(x[0][0]);else if(2===rows)rows=subtract(multiply(x[0][0],x[1][1]),multiply(x[1][0],x[0][1]));else{x=lup(x);size=x.U[0][0];for(var _i=1;_i<rows;_i++)size=multiply(size,x.U[_i][_i]);for(var i=_i=0,visited=[];;){for(;visited[i];)i++;if(i>=rows)break;for(var j=i,cycleLen=0;!visited[x.p[j]];)visited[x.p[j]]=!0,j=x.p[j],cycleLen++;0===cycleLen%2&&_i++}rows=0===_i%2?size:unaryMinus(size)}return rows}throw new RangeError("Matrix must be square (size: "+
(0,_string.format)(size)+")");default:throw new RangeError("Matrix must be two dimensional (size: "+(0,_string.format)(size)+")");}}})});exports.createDet=global}
//# sourceMappingURL=module$node_modules$mathjs$lib$cjs$function$matrix$det.js.map
