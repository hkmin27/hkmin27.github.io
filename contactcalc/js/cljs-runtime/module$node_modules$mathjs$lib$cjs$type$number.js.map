{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$type$number.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/type/number.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$type$number\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createNumber = void 0;\n\nvar _factory = require(\"../utils/factory.js\");\n\nvar _collection = require(\"../utils/collection.js\");\n\nvar name = 'number';\nvar dependencies = ['typed'];\n/**\n * Separates the radix, integer part, and fractional part of a non decimal number string\n * @param {string} input string to parse\n * @returns {object} the parts of the string or null if not a valid input\n */\n\nfunction getNonDecimalNumberParts(input) {\n  var nonDecimalWithRadixMatch = input.match(/(0[box])([0-9a-fA-F]*)\\.([0-9a-fA-F]*)/);\n\n  if (nonDecimalWithRadixMatch) {\n    var radix = {\n      '0b': 2,\n      '0o': 8,\n      '0x': 16\n    }[nonDecimalWithRadixMatch[1]];\n    var integerPart = nonDecimalWithRadixMatch[2];\n    var fractionalPart = nonDecimalWithRadixMatch[3];\n    return {\n      input: input,\n      radix: radix,\n      integerPart: integerPart,\n      fractionalPart: fractionalPart\n    };\n  } else {\n    return null;\n  }\n}\n/**\n * Makes a number from a radix, and integer part, and a fractional part\n * @param {parts} [x] parts of the number string (from getNonDecimalNumberParts)\n * @returns {number} the number\n */\n\n\nfunction makeNumberFromNonDecimalParts(parts) {\n  var n = parseInt(parts.integerPart, parts.radix);\n  var f = 0;\n\n  for (var i = 0; i < parts.fractionalPart.length; i++) {\n    var digitValue = parseInt(parts.fractionalPart[i], parts.radix);\n    f += digitValue / Math.pow(parts.radix, i + 1);\n  }\n\n  var result = n + f;\n\n  if (isNaN(result)) {\n    throw new SyntaxError('String \"' + parts.input + '\" is no valid number');\n  }\n\n  return result;\n}\n\nvar createNumber = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Create a number or convert a string, boolean, or unit to a number.\n   * When value is a matrix, all elements will be converted to number.\n   *\n   * Syntax:\n   *\n   *    math.number(value)\n   *    math.number(unit, valuelessUnit)\n   *\n   * Examples:\n   *\n   *    math.number(2)                         // returns number 2\n   *    math.number('7.2')                     // returns number 7.2\n   *    math.number(true)                      // returns number 1\n   *    math.number([true, false, true, true]) // returns [1, 0, 1, 1]\n   *    math.number(math.unit('52cm'), 'm')    // returns 0.52\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, matrix, string, unit\n   *\n   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted\n   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number\n   * @return {number | Array | Matrix} The created number\n   */\n  var number = typed('number', {\n    '': function _() {\n      return 0;\n    },\n    number: function number(x) {\n      return x;\n    },\n    string: function string(x) {\n      if (x === 'NaN') return NaN;\n      var nonDecimalNumberParts = getNonDecimalNumberParts(x);\n\n      if (nonDecimalNumberParts) {\n        return makeNumberFromNonDecimalParts(nonDecimalNumberParts);\n      }\n\n      var size = 0;\n      var wordSizeSuffixMatch = x.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);\n\n      if (wordSizeSuffixMatch) {\n        // x includes a size suffix like 0xffffi32, so we extract\n        // the suffix and remove it from x\n        size = Number(wordSizeSuffixMatch[2]);\n        x = wordSizeSuffixMatch[1];\n      }\n\n      var num = Number(x);\n\n      if (isNaN(num)) {\n        throw new SyntaxError('String \"' + x + '\" is no valid number');\n      }\n\n      if (wordSizeSuffixMatch) {\n        // x is a signed bin, oct, or hex literal\n        // num is the value of string x if x is interpreted as unsigned\n        if (num > Math.pow(2, size) - 1) {\n          // literal is too large for size suffix\n          throw new SyntaxError(\"String \\\"\".concat(x, \"\\\" is out of range\"));\n        } // check if the bit at index size - 1 is set and if so do the twos complement\n\n\n        if (num >= Math.pow(2, size - 1)) {\n          num = num - Math.pow(2, size);\n        }\n      }\n\n      return num;\n    },\n    BigNumber: function BigNumber(x) {\n      return x.toNumber();\n    },\n    Fraction: function Fraction(x) {\n      return x.valueOf();\n    },\n    Unit: function Unit(x) {\n      throw new Error('Second argument with valueless unit expected');\n    },\n    \"null\": function _null(x) {\n      return 0;\n    },\n    'Unit, string | Unit': function UnitStringUnit(unit, valuelessUnit) {\n      return unit.toNumber(valuelessUnit);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  }); // reviver function to parse a JSON object like:\n  //\n  //     {\"mathjs\":\"number\",\"value\":\"2.3\"}\n  //\n  // into a number 2.3\n\n  number.fromJSON = function (json) {\n    return parseFloat(json.value);\n  };\n\n  return number;\n});\nexports.createNumber = createNumber;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createNumber","_factory","_collection","factory","name","dependencies","_ref","typed","number","_","x","string","NaN","nonDecimalWithRadixMatch","input","match","radix","integerPart","fractionalPart","nonDecimalNumberParts","n","parseInt","i","f","length","digitValue","Math","pow","result","isNaN","SyntaxError","size","wordSizeSuffixMatch","Number","num","concat","BigNumber","toNumber","Fraction","valueOf","Unit","Error","_null","UnitStringUnit","unit","valuelessUnit","ArrayMatrix","deepMap","fromJSON","number.fromJSON","json","parseFloat"]
}
