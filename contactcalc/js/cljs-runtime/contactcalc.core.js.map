{"version":3,"sources":["contactcalc/core.cljs"],"mappings":"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","names":["contactcalc.core/figure8","num","den","contactcalc.core/whitehead","coeff","contactcalc.core/make-negative","js/module$node_modules$mathjs$lib$cjs$index.equal","js/module$node_modules$mathjs$lib$cjs$index.floor","js/module$node_modules$mathjs$lib$cjs$index.fraction","js/module$node_modules$mathjs$lib$cjs$index.smaller","js/module$node_modules$mathjs$lib$cjs$index.subtract","contactcalc.core/make-small","floor","contactcalc.core/euclidean","a","b","cljs.core._EQ_","vec__32995","cljs.core.nth","x","y","G__32998","G__32999","cljs.core/mod","js/module$node_modules$mathjs$lib$cjs$index.divide","var_args","G__33001","contactcalc.core/cfb-calc","js/Error","vec","past","now","js/Date.now","js/module$node_modules$mathjs$lib$cjs$index.largerEq","cljs.core.conj","contactcalc.core.cfb_calc","contactcalc.core/solid-torus","meridian","dividing","lst","js/module$node_modules$mathjs$lib$cjs$index.abs","cljs.core.reduce","js/module$node_modules$mathjs$lib$cjs$index.multiply","cljs.core/first","p1__33002#","cljs.core.map","js/module$node_modules$mathjs$lib$cjs$index.add","cljs.core/rest","p1__33003#","G__33004","G__33005","G__33006","contactcalc.core/f8-calc","or__4160__auto__","and__4149__auto__","js/module$node_modules$mathjs$lib$cjs$index.larger","p1__33007#","lst1","lst2","p1__33008#","p1__33009#","p1__33010#","contactcalc.core/whitehead-calc","contactcalc.core/sfs-calc","contactcalc.core/lens-calc","contactcalc.core/solid-calc","contactcalc.core/contact-calc","contact-data","draw?","e33011","cljs.core/deref","fexpr__33012","fexpr__33013","fexpr__33014","fexpr__33015","fexpr__33016","fexpr__33017","fexpr__33018","fexpr__33019","fexpr__33020","fexpr__33021","cljs.core/val","e","contactcalc.core/diagram-component","e33022","fexpr__33023","cat","fexpr__33024","js/module$node_modules$mathjs$lib$cjs$index.smallerEq","r","p1__33025#","contactcalc.core/temp-select","G__33028","fexpr__33027","cljs.core/reset!","fexpr__33029","p1__33030#","p1__33031#","contactcalc.core/contact-form","val","G__33033","G__33034","G__33035","fexpr__33032","fexpr__33036","contactcalc.core/references","fexpr__33037","contactcalc.core/contact-component","reagent.core.atom","contactcalc.core/home-page","contactcalc.core/mount-root","reagent.dom.render","js/document","contactcalc.core/init!"],"sourcesContent":["(ns contactcalc.core\n    (:require\n     [reagent.core :as r]\n     [reagent.dom :as d]\n     [mathjs :as m]))\n\n;; -------------------------\n;; diagrams\n\n(defn figure8 [num den]\n  [:svg {:width \"10.85in\", :height \"7.3761in\", :version \"1.1\", :viewbox \"0 0 275.59 187.35\", :xmlns \"http://www.w3.org/2000/svg\"}\n   [:g {:transform \"translate(-49.5 -142.45)\"}\n    [:g {:fill \"none\", :stroke \"#000\", :stroke-width \"4.1862\"}\n     [:path {:d \"m163.58 192.34c-12.758 11.953-24.03 20.463-38.5 20.463 12.825 0 90.924 77.644 148.26 79.24-22.791 0-69.177 35.496-106.67 35.661-41.062 0.18059-103.98-38.032-117.17-38.032 14.001 0 39.001-6.4602 53.823-11.634\"}]\n     [:path {:d \"m220.6 271.91c4.711-8.8383 41.138-47.606 58.749-48.745-17.778 0-61.717-42.95-89.627-42.95-7.4398 0-16.312 0.51996-22.362 7.4848\"}]\n     [:path {:d \"m192.7 255.76c10.638-8.663 25.489-39.923 35.481-57.261\"}]\n     [:path {:d \"m111.76 274.98c12.508-4.1892 18.963-6.3917 30.044-12.72\"}]\n     [:path {:d \"m149.05 258.23c7.4074-4.0106 12.105-9.305 17.801-13.458\"}]\n     [:path {:d \"m172.66 240.28c9.9622-8.7949 20.951-28.115 37.886-28.815-18.857 0-45.17-31.05-74.493-31.346-10.923 0-27.282 10.132-27.282 10.132\"}]\n     [:path {:d \"m97.117 196.17s-27.774 23.488-42.203 23.488c20.019 0 60.199 89.311 110.17 90.694 30.187 0 44.823-18.414 52.455-31.899\"}]\n     [:path {:d \"m230.64 193.13c7.3535-11.916 25.125-27.602 43.94-27.602-17.449 0-73.629-22.073-111.39-20.951-28.637 0.85123-66.284 20.876-83.374 20.876 20.142 0 47.183 103.24 86.788 104.01 7.7935-0.0386 21.177-9.9085 21.177-9.9085\"}]]\n    [:text {:x \"297.08456\", :y \"228.8149\", :fill \"#000000\", :font-family \"sans-serif\", :font-size \"14.768px\", :stroke-width \".3692\", :xml:space \"preserve\"} \"(2)\"]\n    [:path {:d \"m294.4 165.32h20.997\", :fill \"none\", :stroke \"#000\", :stroke-width \"1.3954\"}]\n    [:text {:x \"299.98947\", :y \"161.39523\", :fill \"#000000\", :font-family \"sans-serif\", :font-size \"14.768px\", :stroke-width \".3692\", :xml:space \"preserve\"} num]\n    [:text {:x \"294\", :y \"180.85577\", :fill \"#000000\", :font-family \"sans-serif\", :font-size \"14.768px\", :stroke-width \".3692\", :xml:space \"preserve\"} den]\n    [:path {:d \"m289.14 150.03c-4.6672 9.6086-5.3028 20.128 0 31.988\", :fill \"none\", :stroke \"#000\", :stroke-width \"1.3954\"}]\n    [:path {:d \"m320.66 149.85c4.6672 9.6086 5.3028 20.128 0 31.988\", :fill \"none\", :stroke \"#000\", :stroke-width \"1.3954\"}]]])\n\n(defn whitehead [coeff]\n  [:svg {:width \"24.49in\", :height \"7.3761in\", :version \"1.1\", :viewbox \"0 0 622.06 187.35\", :xmlns \"http://www.w3.org/2000/svg\"}\n   [:g {:transform \"translate(-2.9527 -4.6884)\"}\n    [:g {:fill \"none\", :stroke \"#000\", :stroke-width \"4.1862\"}\n     [:path {:d \"m117.03 54.584c-12.758 11.953-24.03 20.463-38.5 20.463 12.825 0 90.924 77.644 148.26 79.24-22.791 0-69.177 35.496-106.67 35.661-41.062 0.18059-103.98-38.032-117.17-38.032 14.001 0 39.001-6.4602 53.823-11.634\"}]\n     [:path {:d \"m174.05 134.15c4.711-8.8383 41.138-47.606 58.749-48.745-17.778 0-61.717-42.95-89.627-42.95-7.4398 0-16.312 0.51996-22.362 7.4848\"}]\n     [:path {:d \"m146.15 118c10.638-8.663 25.489-39.923 35.481-57.261\"}]\n     [:path {:d \"m65.212 137.22c12.508-4.1892 18.963-6.3917 30.044-12.72\"}]\n     [:path {:d \"m102.51 120.47c7.4074-4.0106 12.105-9.305 17.801-13.458\"}]\n     [:path {:d \"m126.12 102.52c9.9622-8.7949 20.951-28.115 37.886-28.815-18.857 0-45.17-31.05-74.493-31.346-10.923 0-27.282 10.132-27.282 10.132\"}]\n     [:path {:d \"m50.57 58.41s-27.774 23.488-42.203 23.488c20.019 0 60.199 89.311 110.17 90.694 30.187 0 44.823-18.414 52.455-31.899\"}]\n     [:path {:d \"m184.09 55.376c7.3535-11.916 25.125-27.602 43.94-27.602-17.449 0-73.629-22.073-111.39-20.951-28.637 0.85123-66.284 20.876-83.374 20.876 20.142 0 47.183 103.24 86.788 104.01 7.7935-0.0386 21.177-9.9085 21.177-9.9085\"}]]\n    [:text {:x \"250.53752\", :y \"91.056412\", :fill \"#000000\", :font-family \"sans-serif\", :font-size \"14.768px\", :stroke-width \".3692\", :xml:space \"preserve\"}\n     [:tspan {:x \"250.53752\", :y \"91.056412\", :stroke-width \".3692\"} \"(4)\"]]\n    [:path {:d \"m247.85 27.563h20.997\", :fill \"none\", :stroke \"#000\", :stroke-width \"1.3954\"}]\n    [:text {:x \"253.44243\", :y \"23.636745\", :fill \"#000000\", :font-family \"sans-serif\", :font-size \"14.768px\", :stroke-width \".3692\", :xml:space \"preserve\"}\n     [:tspan {:x \"253.44243\", :y \"23.636745\", :stroke-width \".3692\"} coeff.d]]\n    [:text {:x \"246.10899\", :y \"43.09729\", :fill \"#000000\", :font-family \"sans-serif\", :font-size \"14.768px\", :stroke-width \".3692\", :xml:space \"preserve\"}\n     [:tspan {:x \"246.10899\", :y \"43.09729\", :stroke-width \".3692\"} (- coeff.d coeff.n)]]\n    [:g {:fill \"none\", :stroke \"#000\"}\n     [:path {:d \"m242.59 12.272c-4.6672 9.6086-5.3028 20.128 0 31.988\", :stroke-width \"1.3954\"}]\n     [:path {:d \"m274.11 12.094c4.6672 9.6086 5.3028 20.128 0 31.988\", :stroke-width \"1.3954\"}]\n     [:g {:stroke-width \"4.1862\"}\n      [:path {:d \"m462.94 54.584c-12.758 11.953-24.03 20.463-38.5 20.463 12.825 0 90.924 77.644 148.26 79.24-22.791 0-69.177 35.496-106.67 35.661-41.062 0.18059-103.98-38.032-117.17-38.032 14.001 0 39.001-6.4602 53.823-11.634\"}]\n      [:path {:d \"m519.97 134.15c4.711-8.8383 41.138-47.606 58.749-48.745-17.778 0-61.717-42.95-89.627-42.95-7.4398 0-16.312 0.51996-22.362 7.4848\"}]\n      [:path {:d \"m492.06 118c10.638-8.663 25.489-39.923 35.481-57.261\"}]\n      [:path {:d \"m411.12 137.22c12.508-4.1892 18.963-6.3917 30.044-12.72\"}]\n      [:path {:d \"m448.42 120.47c7.4074-4.0106 12.105-9.305 17.801-13.458\"}]\n      [:path {:d \"m472.03 102.52c9.9622-8.7949 20.951-28.115 37.886-28.815-18.857 0-45.17-31.05-74.493-31.346-10.923 0-27.282 10.132-27.282 10.132\"}]\n      [:path {:d \"m396.48 58.41s-27.774 23.488-42.203 23.488c20.019 0 60.199 89.311 110.17 90.694 30.187 0 44.823-18.414 52.455-31.899\"}]\n      [:path {:d \"m530 55.376c7.3535-11.916 25.125-27.602 43.94-27.602-17.449 0-73.629-22.073-111.39-20.951-28.637 0.85123-66.284 20.876-83.374 20.876 20.142 0 47.183 103.24 86.788 104.01 7.7935-0.0386 21.177-9.9085 21.177-9.9085\"}]]]\n    [:text {:x \"590.44952\", :y \"91.056396\", :fill \"#000000\", :font-family \"sans-serif\", :font-size \"14.768px\", :stroke-width \".3692\", :xml:space \"preserve\"}\n     [:tspan {:x \"590.44952\", :y \"91.056396\", :stroke-width \".3692\"} \"(\" (- coeff.n coeff.d) \"/\" coeff.d \")\"]]\n    [:path {:d \"m600.43 27.563h13.677\", :fill \"none\", :stroke \"#000\", :stroke-width \"1.4\"}]\n    [:text {:x \"602.35437\", :y \"23.636745\", :fill \"#000000\", :font-family \"sans-serif\", :font-size \"14.768px\", :stroke-width \".3692\", :xml:space \"preserve\"}\n     [:tspan {:x \"602.35437\", :y \"23.636745\", :stroke-width \".3692\"} \"1\"]]\n    [:text {:x \"602.05481\", :y \"43.097286\", :fill \"#000000\", :font-family \"sans-serif\", :font-size \"14.768px\", :stroke-width \".3692\", :xml:space \"preserve\"}\n     [:tspan {:x \"602.05481\", :y \"43.097286\", :stroke-width \".3692\"} \"4\"]]\n    [:g {:fill \"none\", :stroke \"#000\"}\n     [:path {:d \"m588.51 12.272c-4.6672 9.6086-5.3028 20.128 0 31.988\", :stroke-width \"1.3954\"}]\n     [:path {:d \"m620.02 12.094c4.6672 9.6086 5.3028 20.128 0 31.988\", :stroke-width \"1.3954\"}]\n     [:path {:d \"m591.07 27.563h6.3576\", :stroke-width \"1.355\"}]]]])\n\n;; -------------------------\n;; contact-calculators\n\n(defn make-negative [num]\n  (cond\n    (m/equal (m/floor num) num) (m/fraction \"-1\")\n    (m/smaller num 0) num\n    :else (recur (m/fraction (m/subtract num.n num.d) num.d))))\n\n(defn make-small [num]\n  (let [floor (m/floor num)]\n    (if (m/equal floor num) (m/fraction 1) (m/subtract num floor))))\n\n(defn euclidean\n  \"Extended Euclidean Algorithm. Returns [gcd(a,b) x y] where ax + by = gcd(a,b).\"\n  [a b]\n  (if (= a 0)\n    [0 1]\n    (let [[x y] (euclidean (mod b a) a)]\n      [(- y (* (m/floor (m/divide b a)) x)) x])))\n\n(defn cfb-calc\n  ([num vec past] (let [floor (m/floor num) now (js/Date.now)]\n                    (cond\n                      (m/largerEq num 0) (recur (make-negative num) [] past)\n                      (m/equal floor num) (conj vec floor) ;; return list\n                      :else (if (> (- now past) 3000)\n                              (throw (js/Error. \"timeout\"))\n                              (recur (m/divide 1 (m/subtract floor num)) (conj vec floor) past)))))\n  ([num past] (cfb-calc num [] past)))\n\n(defn solid-torus [meridian dividing past]\n  (cond\n    (= dividing \"inf\") (let [lst (cfb-calc (. (. (make-small meridian) inverse) neg) past)]\n                         (m/abs (reduce m/multiply (first lst) (map #(m/add % 1) (rest lst)))))\n    (= meridian \"inf\") (let [lst (cfb-calc (. (make-negative dividing) inverse) past)]\n                         (m/abs (reduce m/multiply (first lst) (map #(m/add % 1) (rest lst)))))\n    :else (solid-torus (. (m/subtract dividing meridian) inverse) \"inf\" past)))\n\n(defn f8-calc [num past]\n  (cond (or (m/equal num 0) (m/equal num -4) (m/equal num 4)) \"\u221e\"\n        (or (and (m/larger num 4) (m/smaller num 5)) (and (m/largerEq num -4) (m/smaller num -3))) \"not known yet.\"\n        (m/larger num 0) (let [lst (cfb-calc (. (. (make-small num) inverse) neg) past)]\n                           (str (m/multiply 2 (m/abs (reduce m/multiply (first lst) (map #(m/add % 1) (rest lst)))))))\n        (m/smaller num -4) (let [lst1 (cfb-calc (. (. (make-small num) inverse) neg) past) lst2 (cfb-calc (m/add num 3) past)]\n                             (str (m/add (m/abs (reduce m/multiply (first lst1) (map #(m/add % 1) (rest lst1)))) (m/abs (reduce m/multiply (first lst2) (map #(m/add % 1) (rest lst2)))))))\n        :else (let [lst (cfb-calc (. (. (make-small num) inverse) neg) past)]\n                (str (m/abs (reduce m/multiply (first lst) (map #(m/add % 1) (rest lst))))))))\n\n(defn whitehead-calc [num past]\n  (str (m/add (m/multiply 2 (solid-torus num \"inf\" past)) (solid-torus num 1 past))))\n\n(defn sfs-calc [num] \"not yet implemented\")\n(defn lens-calc [num] \"not yet implemented\")\n(defn solid-calc [num] \"not yet implemented\")\n\n;;\uc2e4\ud589\uc2dc\uac04 3\ucd08 \ub118\uc73c\uba74 \ud504\ub85c\uc138\uc2a4 \uc8fd\uc5ec\uc57c\ud568 (\"Sorry. It takes too much time!\")\n(defn contact-calc [contact-data draw?]\n  (let [past (js/Date.now)]\n    (try\n      (cond\n        (false? @draw?) nil\n        (= (@contact-data :category) \"figure8\") [:p \"The number of tight contact structure is \" (f8-calc (m/fraction (@contact-data :value)) past)]\n        (= (@contact-data :category) \"whitehead\") [:p \"The number of tight contact structure is \" (whitehead-calc (m/fraction (@contact-data :value)) past)]\n        (= (@contact-data :category) \"lens\") [:p \"The number of tight contact structure is \" (lens-calc (m/fraction (@contact-data :value)))]\n        (= (@contact-data :category) \"sfs\") [:p \"The number of tight contact structure is \" (sfs-calc (m/fraction (@contact-data :value)))]\n        (= (@contact-data :category) \"solid\") [:p \"The number of tight contact structure is \" (solid-calc (m/fraction (@contact-data :value)))]\n        :else val)\n      (catch js/Error e [:p \"Sorry, it takes too much time.. or\"]))))\n\n\n;; ------------------------- \n;; Views\n\n(defn diagram-component [contact-data draw?]\n  (try\n    (let [coeff (m/fraction (@contact-data :value)) cat (@contact-data :category)]\n      (cond (false? @draw?) nil\n            (= cat \"figure8\") (cond (m/equal coeff 1) [figure8 \"1\" \"0\"]\n                                    (or (m/smallerEq coeff 0) (and (m/largerEq coeff 4) (m/smaller coeff 5)) (and (m/largerEq coeff -4) (m/smaller coeff -3))) nil\n                                    :else (let [r (. (m/subtract 1 coeff) inverse)] [figure8 (str r.n) (str r.d)]))\n            (= cat \"whitehead\") [whitehead coeff]\n            :else nil))\n    (catch js/Error e [:p \"invalid input\"])))\n\n(defn temp-select [contact-data draw?]\n  [:select {:on-change #((reset! contact-data {:value (@contact-data :value) :category (-> % .-target .-value)})\n                         (reset! draw? false))}\n   [:option {:value \"figure8\"} \"Surgeries on the figure-8 knot\"]\n   [:option {:value \"whitehead\"} \"Surgeries on the Whitehead link\"]\n   [:option {:value \"sfs\"} \"Small Seifert fibrations\"]\n   [:option {:value \"lens\"} \"Lens spaces\"]\n   [:option {:value \"solid\"} \"solid tori\"]])\n\n(defn contact-form [val contact-data draw?]\n  [:form {:on-submit #((.preventDefault %)\n                       (reset! contact-data {:value @val :category (@contact-data :category)})\n                       (reset! val \"\")\n                       (reset! draw? true))}\n   [:input {:type \"text\"\n            :value @val\n            :placeholder \"Type a surgery coefficient\"\n            :on-change #(reset! val (-> % .-target .-value))}]])\n\n(defn references [contact-data draw?]\n  (let [cat (@contact-data :category)]\n    (cond\n      (false? @draw?) nil\n      (= cat \"figure8\") [:p \"references: \" [:a {:href \"https://arxiv.org/abs/1901.06066\"} \"arxiv:1901.06066\"]]\n      (= cat \"whitehead\") [:p \"references: \"]\n      (= cat \"sfs\") [:p \"refernces: sfs\"]\n      (= cat \"lens\") [:p \"refernces: lens\"]\n      (= cat \"solid\") [:p \"refernces: solid\"])))\n\n(defn contact-component []\n  (let [val (r/atom \"\") contact-data (r/atom {:value \"5\" :category \"figure8\"}) draw? (r/atom false)]\n    (fn []\n      [:div\n       [temp-select contact-data draw?]\n       [contact-form val contact-data draw?]\n       [references contact-data draw?]\n       [contact-calc contact-data draw?]\n       [diagram-component contact-data draw?]])))\n\n\n(defn home-page []\n  [:div\n   [:h4 \"3d Contact Calculator\"]\n   [contact-component]])\n\n;; -------------------------\n;; Initialize app\n\n(defn mount-root []\n  (d/render [home-page] (.getElementById js/document \"app\")))\n\n(defn ^:export init! []\n  (mount-root))\n"]}