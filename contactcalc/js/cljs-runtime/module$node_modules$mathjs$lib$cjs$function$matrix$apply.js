shadow$provide.module$node_modules$mathjs$lib$cjs$function$matrix$apply=function(global,require,module,exports){function _apply(mat,dim,callback){if(0>=dim){if(Array.isArray(mat[0])){var i=mat.length;var ret=mat[0].length;var i$jscomp$0,j,ret$jscomp$0=[];for(j=0;j<ret;j++){var tmp=[];for(i$jscomp$0=0;i$jscomp$0<i;i$jscomp$0++)tmp.push(mat[i$jscomp$0][j]);ret$jscomp$0.push(tmp)}ret=[];for(i=0;i<ret$jscomp$0.length;i++)ret[i]=_apply(ret$jscomp$0[i],dim-1,callback);return ret}return callback(mat)}ret=
[];for(i=0;i<mat.length;i++)ret[i]=_apply(mat[i],dim-1,callback);return ret}Object.defineProperty(exports,"__esModule",{value:!0});exports.createApply=void 0;global=require("module$node_modules$mathjs$lib$cjs$utils$factory");var _array=require("module$node_modules$mathjs$lib$cjs$utils$array"),_is=require("module$node_modules$mathjs$lib$cjs$utils$is"),_IndexError=require("module$node_modules$mathjs$lib$cjs$error$IndexError");require=(0,global.factory)("apply",["typed","isInteger"],function(_ref){var typed=
_ref.typed,isInteger=_ref.isInteger;return typed("apply",{"Array | Matrix, number | BigNumber, function":function(mat,dim,callback){if(!isInteger(dim))throw new TypeError("Integer number expected for dimension");var size=Array.isArray(mat)?(0,_array.arraySize)(mat):mat.size();if(0>dim||dim>=size.length)throw new _IndexError.IndexError(dim,size.length);return(0,_is.isMatrix)(mat)?mat.create(_apply(mat.valueOf(),dim,callback)):_apply(mat,dim,callback)}})});exports.createApply=require}
//# sourceMappingURL=module$node_modules$mathjs$lib$cjs$function$matrix$apply.js.map
