shadow$provide.module$node_modules$mathjs$lib$cjs$function$statistics$mean=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.createMean=void 0;var _collection=require("module$node_modules$mathjs$lib$cjs$utils$collection"),_array=require("module$node_modules$mathjs$lib$cjs$utils$array");global=require("module$node_modules$mathjs$lib$cjs$utils$factory");var _improveErrorMessage=require("module$node_modules$mathjs$lib$cjs$function$statistics$utils$improveErrorMessage");
require=(0,global.factory)("mean",["typed","add","divide"],function(_ref){function _mean(array){var sum,num=0;(0,_collection.deepForEach)(array,function(value){try{sum=void 0===sum?value:add(sum,value),num++}catch(err){throw(0,_improveErrorMessage.improveErrorMessage)(err,"mean",value);}});if(0===num)throw Error("Cannot calculate the mean of an empty array");return divide(sum,num)}var typed=_ref.typed,add=_ref.add,divide=_ref.divide;return typed("mean",{"Array | Matrix":_mean,"Array | Matrix, number | BigNumber":function(array,
dim){try{var sum=(0,_collection.reduce)(array,dim,add),s=Array.isArray(array)?(0,_array.arraySize)(array):array.size();return divide(sum,s[dim])}catch(err){throw(0,_improveErrorMessage.improveErrorMessage)(err,"mean");}},"...":function(args){if((0,_collection.containsCollections)(args))throw new TypeError("Scalar values expected in function mean");return _mean(args)}})});exports.createMean=require}
//# sourceMappingURL=module$node_modules$mathjs$lib$cjs$function$statistics$mean.js.map
