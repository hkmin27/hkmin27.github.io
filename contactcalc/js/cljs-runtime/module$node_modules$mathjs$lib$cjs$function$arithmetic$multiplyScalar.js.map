{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$arithmetic$multiplyScalar.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,qEAAA,CAA0F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGlIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,oBAAR,CAA+B,IAAK,EAEhCC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAEf,KAAIQ,OAASR,OAAA,CAAQ,uDAAR,CAITM,QAAAA,CAAsC,CAAC,CAAA,CAAGC,MAASE,CAAAA,OAAb,EAF/BC,gBAE+B,CADvBC,CAAC,OAADA,CACuB,CAA0C,QAAS,CAACC,IAAD,CAAO,CAC9FC,IAAAA,CAAQD,IAAKC,CAAAA,KAcjB,OAAOA,KAAA,CAAM,gBAAN,CAAwB,CAC7B,iBAAkBL,MAAOM,CAAAA,cADI;AAE7B,mBAAoBC,QAAuB,CAACC,CAAD,CAAIC,CAAJ,CAAO,CAChD,MAAOD,EAAEE,CAAAA,GAAF,CAAMD,CAAN,CADyC,CAFrB,CAK7B,uBAAwBE,QAA2B,CAACH,CAAD,CAAIC,CAAJ,CAAO,CACxD,MAAOD,EAAEI,CAAAA,KAAF,CAAQH,CAAR,CADiD,CAL7B,CAQ7B,qBAAsBI,QAAyB,CAACL,CAAD,CAAIC,CAAJ,CAAO,CACpD,MAAOD,EAAEE,CAAAA,GAAF,CAAMD,CAAN,CAD6C,CARzB,CAW7B,gDAAiDK,QAA2C,CAACN,CAAD,CAAIC,CAAJ,CAAO,CAC7FM,CAAAA,CAAMN,CAAEO,CAAAA,KAAF,EACVD,EAAIlB,CAAAA,KAAJ,CAA0B,IAAd,GAAAkB,CAAIlB,CAAAA,KAAJ,CAAqBkB,CAAIE,CAAAA,UAAJ,CAAeT,CAAf,CAArB,CAAyC,IAAA,CAAKO,CAAIlB,CAAAA,KAAT,CAAgBW,CAAhB,CACrD,OAAOO,EAH0F,CAXtE,CAgB7B,gDAAiDG,QAA2C,CAACV,CAAD,CAAIC,CAAJ,CAAO,CAC7FM,CAAAA,CAAMP,CAAEQ,CAAAA,KAAF,EACVD,EAAIlB,CAAAA,KAAJ,CAA0B,IAAd,GAAAkB,CAAIlB,CAAAA,KAAJ,CAAqBkB,CAAIE,CAAAA,UAAJ,CAAeR,CAAf,CAArB,CAAyC,IAAA,CAAKM,CAAIlB,CAAAA,KAAT,CAAgBY,CAAhB,CACrD,OAAOM,EAH0F,CAhBtE,CAqB7B,aAAcI,QAAiB,CAACX,CAAD,CAAIC,CAAJ,CAAO,CACpC,MAAOD,EAAEY,CAAAA,QAAF,CAAWX,CAAX,CAD6B,CArBT,CAAxB,CAf2F,CAA1D,CAyC1Cf,QAAQI,CAAAA,oBAAR;AAA+BA,OAvDmG;",
"sources":["node_modules/mathjs/lib/cjs/function/arithmetic/multiplyScalar.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$arithmetic$multiplyScalar\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMultiplyScalar = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _index = require(\"../../plain/number/index.js\");\n\nvar name = 'multiplyScalar';\nvar dependencies = ['typed'];\nvar createMultiplyScalar = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Multiply two scalar values, `x * y`.\n   * This function is meant for internal use: it is used by the public function\n   * `multiply`\n   *\n   * This function does not support collections (Array or Matrix).\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to multiply\n   * @param  {number | BigNumber | Fraction | Complex} y          Second value to multiply\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Multiplication of `x` and `y`\n   * @private\n   */\n  return typed('multiplyScalar', {\n    'number, number': _index.multiplyNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.mul(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.times(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.mul(y);\n    },\n    'number | Fraction | BigNumber | Complex, Unit': function numberFractionBigNumberComplexUnit(x, y) {\n      var res = y.clone();\n      res.value = res.value === null ? res._normalize(x) : this(res.value, x);\n      return res;\n    },\n    'Unit, number | Fraction | BigNumber | Complex': function UnitNumberFractionBigNumberComplex(x, y) {\n      var res = x.clone();\n      res.value = res.value === null ? res._normalize(y) : this(res.value, y);\n      return res;\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      return x.multiply(y);\n    }\n  });\n});\nexports.createMultiplyScalar = createMultiplyScalar;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createMultiplyScalar","_factory","_index","factory","name","dependencies","_ref","typed","multiplyNumber","ComplexComplex","x","y","mul","BigNumberBigNumber","times","FractionFraction","numberFractionBigNumberComplexUnit","res","clone","_normalize","UnitNumberFractionBigNumberComplex","UnitUnit","multiply"]
}
