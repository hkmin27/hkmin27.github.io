{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$type$matrix$MatrixIndex.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/type/matrix/MatrixIndex.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$type$matrix$MatrixIndex\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createIndexClass = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _object = require(\"../../utils/object.js\");\n\nvar _number = require(\"../../utils/number.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'Index';\nvar dependencies = ['ImmutableDenseMatrix'];\nvar createIndexClass = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var ImmutableDenseMatrix = _ref.ImmutableDenseMatrix;\n\n  /**\n   * Create an index. An Index can store ranges and sets for multiple dimensions.\n   * Matrix.get, Matrix.set, and math.subset accept an Index as input.\n   *\n   * Usage:\n   *     const index = new Index(range1, range2, matrix1, array1, ...)\n   *\n   * Where each parameter can be any of:\n   *     A number\n   *     A string (containing a name of an object property)\n   *     An instance of Range\n   *     An Array with the Set values\n   *     A Matrix with the Set values\n   *\n   * The parameters start, end, and step must be integer numbers.\n   *\n   * @class Index\n   * @Constructor Index\n   * @param {...*} ranges\n   */\n  function Index(ranges) {\n    if (!(this instanceof Index)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this._dimensions = [];\n    this._isScalar = true;\n\n    for (var i = 0, ii = arguments.length; i < ii; i++) {\n      var arg = arguments[i];\n\n      if ((0, _is.isRange)(arg)) {\n        this._dimensions.push(arg);\n\n        this._isScalar = false;\n      } else if (Array.isArray(arg) || (0, _is.isMatrix)(arg)) {\n        // create matrix\n        var m = _createImmutableMatrix(arg.valueOf());\n\n        this._dimensions.push(m); // size\n\n\n        var size = m.size(); // scalar\n\n        if (size.length !== 1 || size[0] !== 1) {\n          this._isScalar = false;\n        }\n      } else if (typeof arg === 'number') {\n        this._dimensions.push(_createImmutableMatrix([arg]));\n      } else if (typeof arg === 'string') {\n        // object property (arguments.count should be 1)\n        this._dimensions.push(arg);\n      } else {\n        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');\n      } // TODO: implement support for wildcard '*'\n\n    }\n  }\n  /**\n   * Attach type information\n   */\n\n\n  Index.prototype.type = 'Index';\n  Index.prototype.isIndex = true;\n\n  function _createImmutableMatrix(arg) {\n    // loop array elements\n    for (var i = 0, l = arg.length; i < l; i++) {\n      if (typeof arg[i] !== 'number' || !(0, _number.isInteger)(arg[i])) {\n        throw new TypeError('Index parameters must be positive integer numbers');\n      }\n    } // create matrix\n\n\n    return new ImmutableDenseMatrix(arg);\n  }\n  /**\n   * Create a clone of the index\n   * @memberof Index\n   * @return {Index} clone\n   */\n\n\n  Index.prototype.clone = function () {\n    var index = new Index();\n    index._dimensions = (0, _object.clone)(this._dimensions);\n    index._isScalar = this._isScalar;\n    return index;\n  };\n  /**\n   * Create an index from an array with ranges/numbers\n   * @memberof Index\n   * @param {Array.<Array | number>} ranges\n   * @return {Index} index\n   * @private\n   */\n\n\n  Index.create = function (ranges) {\n    var index = new Index();\n    Index.apply(index, ranges);\n    return index;\n  };\n  /**\n   * Retrieve the size of the index, the number of elements for each dimension.\n   * @memberof Index\n   * @returns {number[]} size\n   */\n\n\n  Index.prototype.size = function () {\n    var size = [];\n\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var d = this._dimensions[i];\n      size[i] = typeof d === 'string' ? 1 : d.size()[0];\n    }\n\n    return size;\n  };\n  /**\n   * Get the maximum value for each of the indexes ranges.\n   * @memberof Index\n   * @returns {number[]} max\n   */\n\n\n  Index.prototype.max = function () {\n    var values = [];\n\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var range = this._dimensions[i];\n      values[i] = typeof range === 'string' ? range : range.max();\n    }\n\n    return values;\n  };\n  /**\n   * Get the minimum value for each of the indexes ranges.\n   * @memberof Index\n   * @returns {number[]} min\n   */\n\n\n  Index.prototype.min = function () {\n    var values = [];\n\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var range = this._dimensions[i];\n      values[i] = typeof range === 'string' ? range : range.min();\n    }\n\n    return values;\n  };\n  /**\n   * Loop over each of the ranges of the index\n   * @memberof Index\n   * @param {Function} callback   Called for each range with a Range as first\n   *                              argument, the dimension as second, and the\n   *                              index object as third.\n   */\n\n\n  Index.prototype.forEach = function (callback) {\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      callback(this._dimensions[i], i, this);\n    }\n  };\n  /**\n   * Retrieve the dimension for the given index\n   * @memberof Index\n   * @param {Number} dim                  Number of the dimension\n   * @returns {Range | null} range\n   */\n\n\n  Index.prototype.dimension = function (dim) {\n    return this._dimensions[dim] || null;\n  };\n  /**\n   * Test whether this index contains an object property\n   * @returns {boolean} Returns true if the index is an object property\n   */\n\n\n  Index.prototype.isObjectProperty = function () {\n    return this._dimensions.length === 1 && typeof this._dimensions[0] === 'string';\n  };\n  /**\n   * Returns the object property name when the Index holds a single object property,\n   * else returns null\n   * @returns {string | null}\n   */\n\n\n  Index.prototype.getObjectProperty = function () {\n    return this.isObjectProperty() ? this._dimensions[0] : null;\n  };\n  /**\n   * Test whether this index contains only a single value.\n   *\n   * This is the case when the index is created with only scalar values as ranges,\n   * not for ranges resolving into a single value.\n   * @memberof Index\n   * @return {boolean} isScalar\n   */\n\n\n  Index.prototype.isScalar = function () {\n    return this._isScalar;\n  };\n  /**\n   * Expand the Index into an array.\n   * For example new Index([0,3], [2,7]) returns [[0,1,2], [2,3,4,5,6]]\n   * @memberof Index\n   * @returns {Array} array\n   */\n\n\n  Index.prototype.toArray = function () {\n    var array = [];\n\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var dimension = this._dimensions[i];\n      array.push(typeof dimension === 'string' ? dimension : dimension.toArray());\n    }\n\n    return array;\n  };\n  /**\n   * Get the primitive value of the Index, a two dimensional array.\n   * Equivalent to Index.toArray().\n   * @memberof Index\n   * @returns {Array} array\n   */\n\n\n  Index.prototype.valueOf = Index.prototype.toArray;\n  /**\n   * Get the string representation of the index, for example '[2:6]' or '[0:2:10, 4:7, [1,2,3]]'\n   * @memberof Index\n   * @returns {String} str\n   */\n\n  Index.prototype.toString = function () {\n    var strings = [];\n\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var dimension = this._dimensions[i];\n\n      if (typeof dimension === 'string') {\n        strings.push(JSON.stringify(dimension));\n      } else {\n        strings.push(dimension.toString());\n      }\n    }\n\n    return '[' + strings.join(', ') + ']';\n  };\n  /**\n   * Get a JSON representation of the Index\n   * @memberof Index\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Index\", \"ranges\": [{\"mathjs\": \"Range\", start: 0, end: 10, step:1}, ...]}`\n   */\n\n\n  Index.prototype.toJSON = function () {\n    return {\n      mathjs: 'Index',\n      dimensions: this._dimensions\n    };\n  };\n  /**\n   * Instantiate an Index from a JSON object\n   * @memberof Index\n   * @param {Object} json A JSON object structured as:\n   *                     `{\"mathjs\": \"Index\", \"dimensions\": [{\"mathjs\": \"Range\", start: 0, end: 10, step:1}, ...]}`\n   * @return {Index}\n   */\n\n\n  Index.fromJSON = function (json) {\n    return Index.create(json.dimensions);\n  };\n\n  return Index;\n}, {\n  isClass: true\n});\nexports.createIndexClass = createIndexClass;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createIndexClass","_is","_object","_number","_factory","factory","name","dependencies","_ref","Index","ranges","SyntaxError","_dimensions","_isScalar","i","ii","arguments","length","arg","isRange","push","Array","isArray","isMatrix","m","_createImmutableMatrix","valueOf","size","TypeError","l","isInteger","ImmutableDenseMatrix","prototype","type","isIndex","clone","Index.prototype.clone","index","create","Index.create","apply","Index.prototype.size","d","max","Index.prototype.max","values","range","min","Index.prototype.min","forEach","Index.prototype.forEach","callback","dimension","Index.prototype.dimension","dim","isObjectProperty","Index.prototype.isObjectProperty","getObjectProperty","Index.prototype.getObjectProperty","isScalar","Index.prototype.isScalar","toArray","Index.prototype.toArray","array","toString","Index.prototype.toString","strings","JSON","stringify","join","toJSON","Index.prototype.toJSON","mathjs","dimensions","fromJSON","Index.fromJSON","json","isClass"]
}
