{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$type$chain$function$chain.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,CAAA,4DAAA,CAAiF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGzHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,WAAR,CAAsB,IAAK,EAEvBC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAIXM,OAAAA,CAA6B,CAAC,CAAA,CAAGC,MAASC,CAAAA,OAAb,EAFtBC,OAEsB,CADdC,CAAC,OAADA,CAAU,OAAVA,CACc,CAA0C,QAAS,CAACC,IAAD,CAAO,CAAA,IACrFC,MAAQD,IAAKC,CAAAA,KADwE,CAErFC,MAAQF,IAAKE,CAAAA,KAqCjB,OAAOD,MAAA,CAzCEH,OAyCF,CAAY,CACjB,GAAIK,QAAU,EAAG,CACf,MAAO,KAAID,KADI,CADA,CAIjBE,IAAKA,QAAY,CAACV,KAAD,CAAQ,CACvB,MAAO,KAAIQ,KAAJ,CAAUR,KAAV,CADgB,CAJR,CAAZ,CAvCkF,CAA1D,CAgDjCH,QAAQI,CAAAA,WAAR,CAAsBA,MA5DmG;",
"sources":["node_modules/mathjs/lib/cjs/type/chain/function/chain.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$type$chain$function$chain\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createChain = void 0;\n\nvar _factory = require(\"../../../utils/factory.js\");\n\nvar name = 'chain';\nvar dependencies = ['typed', 'Chain'];\nvar createChain = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      Chain = _ref.Chain;\n\n  /**\n   * Wrap any value in a chain, allowing to perform chained operations on\n   * the value.\n   *\n   * All methods available in the math.js library can be called upon the chain,\n   * and then will be evaluated with the value itself as first argument.\n   * The chain can be closed by executing `chain.done()`, which returns\n   * the final value.\n   *\n   * The chain has a number of special functions:\n   *\n   * - `done()`     Finalize the chain and return the chain's value.\n   * - `valueOf()`  The same as `done()`\n   * - `toString()` Executes `math.format()` onto the chain's value, returning\n   *                a string representation of the value.\n   *\n   * Syntax:\n   *\n   *    math.chain(value)\n   *\n   * Examples:\n   *\n   *     math.chain(3)\n   *         .add(4)\n   *         .subtract(2)\n   *         .done()     // 5\n   *\n   *     math.chain( [[1, 2], [3, 4]] )\n   *         .subset(math.index(0, 0), 8)\n   *         .multiply(3)\n   *         .done()     // [[24, 6], [9, 12]]\n   *\n   * @param {*} [value]   A value of any type on which to start a chained operation.\n   * @return {math.Chain} The created chain\n   */\n  return typed(name, {\n    '': function _() {\n      return new Chain();\n    },\n    any: function any(value) {\n      return new Chain(value);\n    }\n  });\n});\nexports.createChain = createChain;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createChain","_factory","factory","name","dependencies","_ref","typed","Chain","_","any"]
}
