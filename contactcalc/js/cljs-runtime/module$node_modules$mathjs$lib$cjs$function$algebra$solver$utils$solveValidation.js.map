{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$algebra$solver$utils$solveValidation.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/function/algebra/solver/utils/solveValidation.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$algebra$solver$utils$solveValidation\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSolveValidation = createSolveValidation;\n\nvar _is = require(\"../../../../utils/is.js\");\n\nvar _array = require(\"../../../../utils/array.js\");\n\nvar _string = require(\"../../../../utils/string.js\");\n\nfunction createSolveValidation(_ref) {\n  var DenseMatrix = _ref.DenseMatrix;\n\n  /**\n   * Validates matrix and column vector b for backward/forward substitution algorithms.\n   *\n   * @param {Matrix} m            An N x N matrix\n   * @param {Array | Matrix} b    A column vector\n   * @param {Boolean} copy        Return a copy of vector b\n   *\n   * @return {DenseMatrix}        Dense column vector b\n   */\n  return function solveValidation(m, b, copy) {\n    var mSize = m.size();\n\n    if (mSize.length !== 2) {\n      throw new RangeError('Matrix must be two dimensional (size: ' + (0, _string.format)(mSize) + ')');\n    }\n\n    var rows = mSize[0];\n    var columns = mSize[1];\n\n    if (rows !== columns) {\n      throw new RangeError('Matrix must be square (size: ' + (0, _string.format)(mSize) + ')');\n    }\n\n    var data = [];\n\n    if ((0, _is.isMatrix)(b)) {\n      var bSize = b.size();\n      var bdata = b._data; // 1-dim vector\n\n      if (bSize.length === 1) {\n        if (bSize[0] !== rows) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        }\n\n        for (var i = 0; i < rows; i++) {\n          data[i] = [bdata[i]];\n        }\n\n        return new DenseMatrix({\n          data: data,\n          size: [rows, 1],\n          datatype: b._datatype\n        });\n      } // 2-dim column\n\n\n      if (bSize.length === 2) {\n        if (bSize[0] !== rows || bSize[1] !== 1) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        }\n\n        if ((0, _is.isDenseMatrix)(b)) {\n          if (copy) {\n            data = [];\n\n            for (var _i = 0; _i < rows; _i++) {\n              data[_i] = [bdata[_i][0]];\n            }\n\n            return new DenseMatrix({\n              data: data,\n              size: [rows, 1],\n              datatype: b._datatype\n            });\n          }\n\n          return b;\n        }\n\n        if ((0, _is.isSparseMatrix)(b)) {\n          for (var _i2 = 0; _i2 < rows; _i2++) {\n            data[_i2] = [0];\n          }\n\n          var values = b._values;\n          var index = b._index;\n          var ptr = b._ptr;\n\n          for (var k1 = ptr[1], k = ptr[0]; k < k1; k++) {\n            var _i3 = index[k];\n            data[_i3][0] = values[k];\n          }\n\n          return new DenseMatrix({\n            data: data,\n            size: [rows, 1],\n            datatype: b._datatype\n          });\n        }\n      }\n\n      throw new RangeError('Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.');\n    }\n\n    if ((0, _is.isArray)(b)) {\n      var bsize = (0, _array.arraySize)(b);\n\n      if (bsize.length === 1) {\n        if (bsize[0] !== rows) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        }\n\n        for (var _i4 = 0; _i4 < rows; _i4++) {\n          data[_i4] = [b[_i4]];\n        }\n\n        return new DenseMatrix({\n          data: data,\n          size: [rows, 1]\n        });\n      }\n\n      if (bsize.length === 2) {\n        if (bsize[0] !== rows || bsize[1] !== 1) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        }\n\n        for (var _i5 = 0; _i5 < rows; _i5++) {\n          data[_i5] = [b[_i5][0]];\n        }\n\n        return new DenseMatrix({\n          data: data,\n          size: [rows, 1]\n        });\n      }\n\n      throw new RangeError('Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.');\n    }\n  };\n}\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createSolveValidation","_ref","DenseMatrix","solveValidation","m","b","copy","mSize","size","length","RangeError","_string","format","rows","columns","data","_is","isMatrix","bSize","bdata","_data","i","datatype","_datatype","isDenseMatrix","_i","isSparseMatrix","_i2","values","_values","index","_index","ptr","_ptr","k1","k","_i3","isArray","bsize","_array","arraySize","_i4","_i5"]
}
