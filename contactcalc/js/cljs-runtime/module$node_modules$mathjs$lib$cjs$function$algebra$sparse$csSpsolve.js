shadow$provide.module$node_modules$mathjs$lib$cjs$function$algebra$sparse$csSpsolve=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.createCsSpsolve=void 0;var _csReach=require("module$node_modules$mathjs$lib$cjs$function$algebra$sparse$csReach");global=require("module$node_modules$mathjs$lib$cjs$utils$factory");global=(0,global.factory)("csSpsolve",["divideScalar","multiply","subtract"],function(_ref){var divideScalar=_ref.divideScalar,multiply=
_ref.multiply,subtract=_ref.subtract;return function(g,b,k,xi,x,pinv,lo){var gvalues=g._values,gindex=g._index,gptr=g._ptr,n=g._size[1],bvalues=b._values,bindex=b._index,bptr=b._ptr;for(b=g=(0,_csReach.csReach)(g,b,k,xi,pinv);b<n;b++)x[xi[b]]=0;b=bptr[k];for(k=bptr[k+1];b<k;b++)x[bindex[b]]=bvalues[b];for(bvalues=g;bvalues<n;bvalues++)if(bindex=xi[bvalues],k=pinv?pinv[bindex]:bindex,!(0>k))for(b=gptr[k],k=gptr[k+1],x[bindex]=divideScalar(x[bindex],gvalues[lo?b:k-1]),b=lo?b+1:b,k=lo?k:k-1;b<k;b++)bptr=
gindex[b],x[bptr]=subtract(x[bptr],multiply(gvalues[b],x[bindex]));return g}});exports.createCsSpsolve=global}
//# sourceMappingURL=module$node_modules$mathjs$lib$cjs$function$algebra$sparse$csSpsolve.js.map
