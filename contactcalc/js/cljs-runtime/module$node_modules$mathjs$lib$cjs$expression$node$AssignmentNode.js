shadow$provide.module$node_modules$mathjs$lib$cjs$expression$node$AssignmentNode=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.createAssignmentNode=void 0;var _is=require("module$node_modules$mathjs$lib$cjs$utils$is"),_customs=require("module$node_modules$mathjs$lib$cjs$utils$customs");global=require("module$node_modules$mathjs$lib$cjs$utils$factory");var _access=require("module$node_modules$mathjs$lib$cjs$expression$node$utils$access"),_assign=
require("module$node_modules$mathjs$lib$cjs$expression$node$utils$assign"),_operators=require("module$node_modules$mathjs$lib$cjs$expression$operators");require=(0,global.factory)("AssignmentNode",["subset","?matrix","Node"],function(_ref){function AssignmentNode(object,index,value){if(!(this instanceof AssignmentNode))throw new SyntaxError("Constructor must be called with the new operator");this.object=object;this.index=value?index:null;this.value=value||index;if(!(0,_is.isSymbolNode)(object)&&!(0,
_is.isAccessorNode)(object))throw new TypeError('SymbolNode or AccessorNode expected as "object"');if((0,_is.isSymbolNode)(object)&&"end"===object.name)throw Error('Cannot assign to symbol "end"');if(this.index&&!(0,_is.isIndexNode)(this.index))throw new TypeError('IndexNode expected as "index"');if(!(0,_is.isNode)(this.value))throw new TypeError('Node expected as "value"');Object.defineProperty(this,"name",{get:function(){return this.index?this.index.isObjectProperty()?this.index.getObjectProperty():
"":this.object.name||""}.bind(this),set:function(){throw Error("Cannot assign a new name, name is read-only");}})}function needParenthesis(node,parenthesis){parenthesis||(parenthesis="keep");var precedence=(0,_operators.getPrecedence)(node,parenthesis);node=(0,_operators.getPrecedence)(node.value,parenthesis);return"all"===parenthesis||null!==node&&node<=precedence}var subset=_ref.subset,matrix=_ref.matrix;_ref=_ref.Node;var access=(0,_access.accessFactory)({subset:subset}),assign=(0,_assign.assignFactory)({subset:subset,
matrix:matrix});AssignmentNode.prototype=new _ref;AssignmentNode.prototype.type="AssignmentNode";AssignmentNode.prototype.isAssignmentNode=!0;AssignmentNode.prototype._compile=function(math,argNames){var evalObject=this.object._compile(math,argNames),evalIndex=this.index?this.index._compile(math,argNames):null,evalValue=this.value._compile(math,argNames),name=this.object.name;if(this.index){if(this.index.isObjectProperty()){var prop=this.index.getObjectProperty();return function(scope,args,context){var object=
evalObject(scope,args,context);scope=evalValue(scope,args,context);return(0,_customs.setSafeProperty)(object,prop,scope)}}if((0,_is.isSymbolNode)(this.object))return function(scope,args,context){var childObject=evalObject(scope,args,context);context=evalValue(scope,args,context);args=evalIndex(scope,args,childObject);(0,_customs.setSafeProperty)(scope,name,assign(childObject,args,context));return context};var evalParentObject=this.object.object._compile(math,argNames);if(this.object.index.isObjectProperty()){var parentProp=
this.object.index.getObjectProperty();return function(scope,args,context){var parent=evalParentObject(scope,args,context),childObject=(0,_customs.getSafeProperty)(parent,parentProp),index=evalIndex(scope,args,childObject);scope=evalValue(scope,args,context);(0,_customs.setSafeProperty)(parent,parentProp,assign(childObject,index,scope));return scope}}var evalParentIndex=this.object.index._compile(math,argNames);return function(scope,args,context){var parent=evalParentObject(scope,args,context),parentIndex=
evalParentIndex(scope,args,parent),childObject=access(parent,parentIndex),index=evalIndex(scope,args,childObject);scope=evalValue(scope,args,context);assign(parent,parentIndex,assign(childObject,index,scope));return scope}}if(!(0,_is.isSymbolNode)(this.object))throw new TypeError("SymbolNode expected as object");return function(scope,args,context){return(0,_customs.setSafeProperty)(scope,name,evalValue(scope,args,context))}};AssignmentNode.prototype.forEach=function(callback){callback(this.object,
"object",this);this.index&&callback(this.index,"index",this);callback(this.value,"value",this)};AssignmentNode.prototype.map=function(callback){var object=this._ifNode(callback(this.object,"object",this)),index=this.index?this._ifNode(callback(this.index,"index",this)):null;callback=this._ifNode(callback(this.value,"value",this));return new AssignmentNode(object,index,callback)};AssignmentNode.prototype.clone=function(){return new AssignmentNode(this.object,this.index,this.value)};AssignmentNode.prototype._toString=
function(options){var object=this.object.toString(options),index=this.index?this.index.toString(options):"",value=this.value.toString(options);needParenthesis(this,options&&options.parenthesis)&&(value="("+value+")");return object+index+" \x3d "+value};AssignmentNode.prototype.toJSON=function(){return{mathjs:"AssignmentNode",object:this.object,index:this.index,value:this.value}};AssignmentNode.fromJSON=function(json){return new AssignmentNode(json.object,json.index,json.value)};AssignmentNode.prototype.toHTML=
function(options){var object=this.object.toHTML(options),index=this.index?this.index.toHTML(options):"",value=this.value.toHTML(options);needParenthesis(this,options&&options.parenthesis)&&(value='\x3cspan class\x3d"math-paranthesis math-round-parenthesis"\x3e(\x3c/span\x3e'+value+'\x3cspan class\x3d"math-paranthesis math-round-parenthesis"\x3e)\x3c/span\x3e');return object+index+'\x3cspan class\x3d"math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator"\x3e\x3d\x3c/span\x3e'+
value};AssignmentNode.prototype._toTex=function(options){var object=this.object.toTex(options),index=this.index?this.index.toTex(options):"",value=this.value.toTex(options);needParenthesis(this,options&&options.parenthesis)&&(value="\\left(".concat(value,"\\right)"));return object+index+":\x3d"+value};return AssignmentNode},{isClass:!0,isNode:!0});exports.createAssignmentNode=require}
//# sourceMappingURL=module$node_modules$mathjs$lib$cjs$expression$node$AssignmentNode.js.map
