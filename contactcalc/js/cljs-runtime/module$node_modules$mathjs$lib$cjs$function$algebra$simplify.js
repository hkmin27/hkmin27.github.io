shadow$provide.module$node_modules$mathjs$lib$cjs$function$algebra$simplify=function(global,require,module,exports){function _typeof(obj$jscomp$0){"@babel/helpers - typeof";_typeof="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"===typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj};return _typeof(obj$jscomp$0)}Object.defineProperty(exports,"__esModule",{value:!0});exports.createSimplify=
void 0;var _is=require("module$node_modules$mathjs$lib$cjs$utils$is");global=require("module$node_modules$mathjs$lib$cjs$utils$factory");var _util=require("module$node_modules$mathjs$lib$cjs$function$algebra$simplify$util"),_simplifyCore=require("module$node_modules$mathjs$lib$cjs$function$algebra$simplify$simplifyCore"),_simplifyConstant=require("module$node_modules$mathjs$lib$cjs$function$algebra$simplify$simplifyConstant"),_resolve=require("module$node_modules$mathjs$lib$cjs$function$algebra$simplify$resolve"),
_object=require("module$node_modules$mathjs$lib$cjs$utils$object");require=(0,global.factory)("simplify","config typed parse add subtract multiply divide pow isZero equal ?fraction ?bignumber mathWithTransform ConstantNode FunctionNode OperatorNode ParenthesisNode SymbolNode".split(" "),function(_ref){function removeParens(node$jscomp$0){return node$jscomp$0.transform(function(node,path,parent){return(0,_is.isParenthesisNode)(node)?removeParens(node.content):node})}function mergeMatch(match1,match2){var res=
{placeholders:{}};if(match1.placeholders||match2.placeholders){if(!match1.placeholders)return match2;if(!match2.placeholders)return match1}else return res;for(var key in match1.placeholders)if((0,_object.hasOwnProperty)(match1.placeholders,key)&&(res.placeholders[key]=match1.placeholders[key],(0,_object.hasOwnProperty)(match2.placeholders,key)&&!_exactMatch(match1.placeholders[key],match2.placeholders[key])))return null;for(var _key in match2.placeholders)(0,_object.hasOwnProperty)(match2.placeholders,
_key)&&(res.placeholders[_key]=match2.placeholders[_key]);return res}function combineChildMatches(list1,list2){var res=[];if(0===list1.length||0===list2.length)return res;for(var merged,i1=0;i1<list1.length;i1++)for(var i2=0;i2<list2.length;i2++)(merged=mergeMatch(list1[i1],list2[i2]))&&res.push(merged);return res}function _ruleMatch(rule,node,isSplit){var res=[{placeholders:{}}];if(rule instanceof OperatorNode&&node instanceof OperatorNode||rule instanceof FunctionNode&&node instanceof FunctionNode){if(rule instanceof
OperatorNode){if(rule.op!==node.op||rule.fn!==node.fn)return[]}else if(rule instanceof FunctionNode&&rule.name!==node.name)return[];if(1===node.args.length&&1===rule.args.length||!isAssociative(node)&&node.args.length===rule.args.length||isSplit){isSplit=[];for(res=0;res<rule.args.length;res++){var childMatch=_ruleMatch(rule.args[res],node.args[res]);if(0===childMatch.length)return[];isSplit.push(childMatch)}if(0===isSplit.length)res=isSplit;else{rule=isSplit.reduce(combineChildMatches);node=[];isSplit=
{};for(res=0;res<rule.length;res++)childMatch=JSON.stringify(rule[res]),isSplit[childMatch]||(isSplit[childMatch]=!0,node.push(rule[res]));res=node}}else{if(2<=node.args.length&&2===rule.args.length){childMatch=rule.context;isSplit=[];res=createMakeNodeFunction(node);if(isCommutative(node,childMatch))for(childMatch=0;childMatch<node.args.length;childMatch++){var right=node.args.slice(0);right.splice(childMatch,1);right=1===right.length?right[0]:res(right);isSplit.push(res([node.args[childMatch],right]))}else right=
node.args.slice(1),right=1===right.length?right[0]:res(right),isSplit.push(res([node.args[0],right]));node=[];for(res=0;res<isSplit.length;res++)childMatch=_ruleMatch(rule,isSplit[res],!0),node=node.concat(childMatch);return node}if(2<rule.args.length)throw Error("Unexpected non-binary associative function: "+rule.toString());return[]}}else if(rule instanceof SymbolNode){if(0===rule.name.length)throw Error("Symbol in rule has 0 length...!?");if(SUPPORTED_CONSTANTS[rule.name]){if(rule.name!==node.name)return[]}else if("n"===
rule.name[0]||"_p"===rule.name.substring(0,2))res[0].placeholders[rule.name]=node;else if("v"===rule.name[0]){if((0,_is.isConstantNode)(node))return[];res[0].placeholders[rule.name]=node}else if("c"===rule.name[0])if(node instanceof ConstantNode)res[0].placeholders[rule.name]=node;else return[];else throw Error("Invalid symbol in rule: "+rule.name);}else if(rule instanceof ConstantNode){if(!equal(rule.value,node.value))return[]}else return[];return res}function _exactMatch(p,q){if(p instanceof ConstantNode&&
q instanceof ConstantNode){if(!equal(p.value,q.value))return!1}else if(p instanceof SymbolNode&&q instanceof SymbolNode){if(p.name!==q.name)return!1}else if(p instanceof OperatorNode&&q instanceof OperatorNode||p instanceof FunctionNode&&q instanceof FunctionNode){if(p instanceof OperatorNode){if(p.op!==q.op||p.fn!==q.fn)return!1}else if(p instanceof FunctionNode&&p.name!==q.name)return!1;if(p.args.length!==q.args.length)return!1;for(var i=0;i<p.args.length;i++)if(!_exactMatch(p.args[i],q.args[i]))return!1}else return!1;
return!0}var config=_ref.config,typed=_ref.typed,parse=_ref.parse,add=_ref.add,subtract=_ref.subtract,multiply=_ref.multiply,divide=_ref.divide,pow=_ref.pow,isZero=_ref.isZero,equal=_ref.equal,fraction=_ref.fraction,bignumber=_ref.bignumber,mathWithTransform=_ref.mathWithTransform,ConstantNode=_ref.ConstantNode,FunctionNode=_ref.FunctionNode,OperatorNode=_ref.OperatorNode,ParenthesisNode=_ref.ParenthesisNode,SymbolNode=_ref.SymbolNode;_ref=(0,_simplifyConstant.createSimplifyConstant)({typed:typed,
config:config,mathWithTransform:mathWithTransform,fraction:fraction,bignumber:bignumber,ConstantNode:ConstantNode,OperatorNode:OperatorNode,FunctionNode:FunctionNode,SymbolNode:SymbolNode});add=(0,_simplifyCore.createSimplifyCore)({equal:equal,isZero:isZero,add:add,subtract:subtract,multiply:multiply,divide:divide,pow:pow,ConstantNode:ConstantNode,OperatorNode:OperatorNode,FunctionNode:FunctionNode,ParenthesisNode:ParenthesisNode});var resolve=(0,_resolve.createResolve)({parse:parse,FunctionNode:FunctionNode,
OperatorNode:OperatorNode,ParenthesisNode:ParenthesisNode});subtract=(0,_util.createUtil)({FunctionNode:FunctionNode,OperatorNode:OperatorNode,SymbolNode:SymbolNode});var isCommutative=subtract.isCommutative,isAssociative=subtract.isAssociative,flatten=subtract.flatten,unflattenr=subtract.unflattenr,unflattenl=subtract.unflattenl,createMakeNodeFunction=subtract.createMakeNodeFunction;subtract=typed("simplify",{string:function(expr){return this(parse(expr),this.rules,{},{})},"string, Object":function(expr,
scope){return this(parse(expr),this.rules,scope,{})},"string, Object, Object":function(expr,scope,options){return this(parse(expr),this.rules,scope,options)},"string, Array":function(expr,rules){return this(parse(expr),rules,{},{})},"string, Array, Object":function(expr,rules,scope){return this(parse(expr),rules,scope,{})},"string, Array, Object, Object":function(expr,rules,scope,options){return this(parse(expr),rules,scope,options)},"Node, Object":function(expr,scope){return this(expr,this.rules,
scope,{})},"Node, Object, Object":function(expr,scope,options){return this(expr,this.rules,scope,options)},Node:function(expr){return this(expr,this.rules,{},{})},"Node, Array":function(expr,rules){return this(expr,rules,{},{})},"Node, Array, Object":function(expr,rules,scope){return this(expr,rules,scope,{})},"Node, Array, Object, Object":function(expr,rules,scope,options){for(var ruleSet=[],i=0;i<rules.length;i++){var rule=rules[i];var newRule=_typeof(rule);switch(newRule){case "string":if(newRule=
rule.split("-\x3e"),2===newRule.length)rule={l:newRule[0],r:newRule[1]};else throw SyntaxError("Could not parse rule: "+rule);case "object":newRule={l:removeParens(parse(rule.l)),r:removeParens(parse(rule.r))};rule.context&&(newRule.evaluate=rule.context);rule.evaluate&&(newRule.evaluate=parse(rule.evaluate));if(isAssociative(newRule.l)){rule=createMakeNodeFunction(newRule.l);var expandsym=new SymbolNode("_p"+_lastsym++);newRule.expanded={};newRule.expanded.l=rule([newRule.l.clone(),expandsym]);flatten(newRule.expanded.l);
unflattenr(newRule.expanded.l);newRule.expanded.r=rule([newRule.r,expandsym])}break;case "function":newRule=rule;break;default:throw TypeError("Unsupported type of rule: "+newRule);}ruleSet.push(newRule)}rules=ruleSet;expr=resolve(expr,scope);expr=removeParens(expr);scope={};for(ruleSet=expr.toString({parenthesis:"all"});!scope[ruleSet];){scope[ruleSet]=!0;for(ruleSet=_lastsym=0;ruleSet<rules.length;ruleSet++)"function"===typeof rules[ruleSet]?expr=rules[ruleSet](expr,options):(flatten(expr),expr=
applyRule(expr,rules[ruleSet])),unflattenl(expr);ruleSet=expr.toString({parenthesis:"all"})}return expr}});subtract.simplifyCore=add;subtract.resolve=resolve;var SUPPORTED_CONSTANTS={"true":!0,"false":!0,e:!0,i:!0,Infinity:!0,LN2:!0,LN10:!0,LOG2E:!0,LOG10E:!0,NaN:!0,phi:!0,pi:!0,SQRT1_2:!0,SQRT2:!0,tau:!0};subtract.rules=[add,{l:"log(e)",r:"1"},{l:"n-n1",r:"n+-n1"},{l:"-(c*v)",r:"(-c) * v"},{l:"-v",r:"(-1) * v"},{l:"n/n1^n2",r:"n*n1^-n2"},{l:"n/n1",r:"n*n1^-1"},{l:"(n ^ n1) ^ n2",r:"n ^ (n1 * n2)"},
{l:"n*n",r:"n^2"},{l:"n * n^n1",r:"n^(n1+1)"},{l:"n^n1 * n^n2",r:"n^(n1+n2)"},{l:"n+n",r:"2*n"},{l:"n+-n",r:"0"},{l:"n1*n2 + n2",r:"(n1+1)*n2"},{l:"n1*n3 + n2*n3",r:"(n1+n2)*n3"},{l:"n1 + -1 * (n2 + n3)",r:"n1 + -1 * n2 + -1 * n3"},_ref,{l:"(-n)*n1",r:"-(n*n1)"},{l:"c+v",r:"v+c",context:{add:{commutative:!1}}},{l:"v*c",r:"c*v",context:{multiply:{commutative:!1}}},{l:"n+-n1",r:"n-n1"},{l:"n*(n1^-1)",r:"n/n1"},{l:"n*n1^-n2",r:"n/n1^n2"},{l:"n1^-1",r:"1/n1"},{l:"n*(n1/n2)",r:"(n*n1)/n2"},{l:"n-(n1+n2)",
r:"n-n1-n2"},{l:"1*n",r:"n"},{l:"n1/(n2/n3)",r:"(n1*n3)/n2"}];var _lastsym=0,applyRule=typed("applyRule",{"Node, Object":function(node$jscomp$0,rule){if(node$jscomp$0 instanceof OperatorNode||node$jscomp$0 instanceof FunctionNode){if(node$jscomp$0.args)for(var i=0;i<node$jscomp$0.args.length;i++)node$jscomp$0.args[i]=applyRule(node$jscomp$0.args[i],rule)}else node$jscomp$0 instanceof ParenthesisNode&&node$jscomp$0.content&&(node$jscomp$0.content=applyRule(node$jscomp$0.content,rule));i=rule.r;var matches=
_ruleMatch(rule.l,node$jscomp$0)[0];!matches&&rule.expanded&&(i=rule.expanded.r,matches=_ruleMatch(rule.expanded.l,node$jscomp$0)[0]);matches&&(rule=node$jscomp$0.implicit,node$jscomp$0=i.clone(),rule&&"implicit"in i&&(node$jscomp$0.implicit=!0),node$jscomp$0=node$jscomp$0.transform(function(node){return node.isSymbolNode&&(0,_object.hasOwnProperty)(matches.placeholders,node.name)?matches.placeholders[node.name].clone():node}));return node$jscomp$0}});return subtract});exports.createSimplify=require}
//# sourceMappingURL=module$node_modules$mathjs$lib$cjs$function$algebra$simplify.js.map
