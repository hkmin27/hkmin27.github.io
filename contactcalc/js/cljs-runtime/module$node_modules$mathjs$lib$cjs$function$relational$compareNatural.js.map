{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$relational$compareNatural.js",
"lineCount":6,
"mappings":"AAAAA,cAAA,CAAA,qEAAA,CAA0F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGlIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,oBAAR,CAA+B,IAAK,EAEpC,KAAIC,uBAMJC,QAA+B,CAACC,GAAD,CAAM,CAAE,MAAOA,IAAA,EAAOA,GAAIC,CAAAA,UAAX,CAAwBD,GAAxB,CAA8B,CAAE,UAAWA,GAAb,CAAvC,CANR,CAAuBT,OAAA,CAAQ,yDAAR,CAAvB,CAA7B,CAEIW,IAAMX,OAAA,CAAQ,6CAAR,CAENY,OAAAA,CAAWZ,OAAA,CAAQ,kDAAR,CAMXM,OAAAA;AAAsC,CAAC,CAAA,CAAGM,MAASC,CAAAA,OAAb,EAF/BC,gBAE+B,CADvBC,CAAC,OAADA,CAAU,SAAVA,CACuB,CAA0C,QAAS,CAACC,IAAD,CAAO,CAuJlGC,QAASA,yBAAwB,CAACC,cAAD,CAAiBC,CAAjB,CAAoBC,CAApB,CAAuB,CACtD,MAAI,CAAC,CAAA,CAAGT,GAAIU,CAAAA,cAAR,EAAwBF,CAAxB,CAAJ,EAAkC,CAAC,CAAA,CAAGR,GAAIU,CAAAA,cAAR,EAAwBD,CAAxB,CAAlC,CACSE,aAAA,CAAcJ,cAAd,CAA8BC,CAAEI,CAAAA,MAAF,EAAWC,CAAAA,MAAzC,CAAiDJ,CAAEG,CAAAA,MAAF,EAAWC,CAAAA,MAA5D,CADT,CAII,CAAC,CAAA,CAAGb,GAAIU,CAAAA,cAAR,EAAwBF,CAAxB,CAAJ,CAESF,wBAAA,CAAyBC,cAAzB,CAAyCC,CAAEM,CAAAA,OAAF,EAAzC,CAAsDL,CAAtD,CAFT,CAKI,CAAC,CAAA,CAAGT,GAAIU,CAAAA,cAAR,EAAwBD,CAAxB,CAAJ,CAESH,wBAAA,CAAyBC,cAAzB,CAAyCC,CAAzC,CAA4CC,CAAEK,CAAAA,OAAF,EAA5C,CAFT,CAMI,CAAC,CAAA,CAAGd,GAAIe,CAAAA,aAAR,EAAuBP,CAAvB,CAAJ,CACSF,wBAAA,CAAyBC,cAAzB,CAAyCC,CAAEI,CAAAA,MAAF,EAAWI,CAAAA,IAApD,CAA0DP,CAA1D,CADT,CAII,CAAC,CAAA,CAAGT,GAAIe,CAAAA,aAAR,EAAuBN,CAAvB,CAAJ;AACSH,wBAAA,CAAyBC,cAAzB,CAAyCC,CAAzC,CAA4CC,CAAEG,CAAAA,MAAF,EAAWI,CAAAA,IAAvD,CADT,CAKKC,KAAMC,CAAAA,OAAN,CAAcV,CAAd,CAAL,CAIKS,KAAMC,CAAAA,OAAN,CAAcT,CAAd,CAAL,CAIOE,aAAA,CAAcJ,cAAd,CAA8BC,CAA9B,CAAiCC,CAAjC,CAJP,CACSH,wBAAA,CAAyBC,cAAzB,CAAyCC,CAAzC,CAA4C,CAACC,CAAD,CAA5C,CALT,CACSH,wBAAA,CAAyBC,cAAzB,CAAyC,CAACC,CAAD,CAAzC,CAA8CC,CAA9C,CA1B6C,CAgDxDE,QAASA,cAAa,CAACJ,cAAD,CAAiBC,CAAjB,CAAoBC,CAApB,CAAuB,CAE3C,IAF2C,IAElCU,EAAI,CAF8B,CAE3BC,GAAKC,IAAKC,CAAAA,GAAL,CAASd,CAAEe,CAAAA,MAAX,CAAmBd,CAAEc,CAAAA,MAArB,CAArB,CAAmDJ,CAAnD,CAAuDC,EAAvD,CAA2DD,CAAA,EAA3D,CAAgE,CAC9D,IAAIK,EAAIjB,cAAA,CAAeC,CAAA,CAAEW,CAAF,CAAf,CAAqBV,CAAA,CAAEU,CAAF,CAArB,CAER,IAAU,CAAV,GAAIK,CAAJ,CACE,MAAOA,EAJqD,CAShE,MAAIhB,EAAEe,CAAAA,MAAN,CAAed,CAAEc,CAAAA,MAAjB,CACS,CADT,CAIIf,CAAEe,CAAAA,MAAN,CAAed,CAAEc,CAAAA,MAAjB,CACS,EADT,CAKO,CApBoC,CAvMqD,IAC9FE,MAAQpB,IAAKoB,CAAAA,KADiF,CAE9FC,QAAUrB,IAAKqB,CAAAA,OAF+E,CAG9FC,gBAAkBD,OAAQE,CAAAA,UAAR,CAAmB,iBAAnB,CAsEtB;MAAOH,MAAA,CA3EEtB,gBA2EF,CAAY,CACjB,WAAY0B,QAAe,CAACrB,CAAD,CAAIC,CAAJ,CAAO,CAChC,IAAIqB,MAAQ,CAAC,CAAA,CAAG9B,GAAI+B,CAAAA,MAAR,EAAgBvB,CAAhB,CAAZ,CACIwB,MAAQ,CAAC,CAAA,CAAGhC,GAAI+B,CAAAA,MAAR,EAAgBtB,CAAhB,CAGZ,IAAI,EAAW,QAAX,GAACqB,KAAD,EAAiC,WAAjC,GAAuBA,KAAvB,EAA0D,UAA1D,GAAgDA,KAAhD,EAAoF,QAApF,GAA0EE,KAA1E,EAA0G,WAA1G,GAAgGA,KAAhG,EAAmI,UAAnI,GAAyHA,KAAzH,CAAJ,CAGE,MAFAC,EAEA,CAFIP,OAAA,CAAQlB,CAAR,CAAWC,CAAX,CAEJ,CAAqB,GAArB,GAAIwB,CAAEC,CAAAA,QAAF,EAAJ,CAEa,CAAJ,CAAAD,CAAA,CAAQ,CAAR,CAAY,EAFrB,CAIS,CAAC,CAAA,CAAGrC,sBAAA,CAAuB,SAAvB,CAAJ,EAAuCkC,KAAvC,CAA8CE,KAA9C,CAKX,IAAc,OAAd,GAAIF,KAAJ,EAAmC,QAAnC,GAAyBA,KAAzB,EAAyD,OAAzD,GAA+CE,KAA/C,EAA8E,QAA9E,GAAoEA,KAApE,CAGE,MAFAC,EAEA,CAFI3B,wBAAA,CAAyB,IAAzB,CAA+BE,CAA/B,CAAkCC,CAAlC,CAEJ,CAAU,CAAV,GAAIwB,CAAJ,CACSA,CADT,CAGS,CAAC,CAAA,CAAGrC,sBAAA,CAAuB,SAAvB,CAAJ,EAAuCkC,KAAvC,CAA8CE,KAA9C,CAKX;GAAIF,KAAJ,GAAcE,KAAd,CACE,MAAO,CAAC,CAAA,CAAGpC,sBAAA,CAAuB,SAAvB,CAAJ,EAAuCkC,KAAvC,CAA8CE,KAA9C,CAGT,IAAc,SAAd,GAAIF,KAAJ,CACE,MAA6BtB,EAoK7B2B,CAAAA,EAAN,CApKsC1B,CAoKzB0B,CAAAA,EAAb,CACS,CADT,CApKmC3B,CAwK7B2B,CAAAA,EAAN,CAxKsC1B,CAwKzB0B,CAAAA,EAAb,CACS,EADT,CAxKmC3B,CA4K7B4B,CAAAA,EAAN,CA5KsC3B,CA4KzB2B,CAAAA,EAAb,CACS,CADT,CA5KmC5B,CAgL7B4B,CAAAA,EAAN,CAhLsC3B,CAgLzB2B,CAAAA,EAAb,CACS,EADT,CAIO,CAjLH,IAAc,MAAd,GAAIN,KAAJ,CACE,MAAItB,EAAE6B,CAAAA,SAAF,CAAY5B,CAAZ,CAAJ,CACS,IAAA,CAAKD,CAAEd,CAAAA,KAAP,CAAce,CAAEf,CAAAA,KAAhB,CADT,CAKOiB,aAAA,CAAc,IAAd,CAAoBH,CAAE8B,CAAAA,WAAF,EAApB,CAAqC7B,CAAE6B,CAAAA,WAAF,EAArC,CAGT,IAAc,SAAd,GAAIR,KAAJ,CACE,MAAOH,gBAAA,CAAgBnB,CAAhB,CAAmBC,CAAnB,CAGT,IAAc,QAAd,GAAIqB,KAAJ,CACE,MAAO,CAAC,CAAA,CAAGlC,sBAAA,CAAuB,SAAvB,CAAJ,EAAuCY,CAAvC,CAA0CC,CAA1C,CAGT,IAAc,QAAd,GAAIqB,KAAJ,CAAwB,CA0GkB,CAAA,CAAA,CACxCS,KAAAA,CAAQ/C,MAAOgD,CAAAA,IAAP,CA1GoBhC,CA0GpB,CACRiC,MAAAA,CAAQjD,MAAOgD,CAAAA,IAAP,CA3GuB/B,CA2GvB,CAEZ8B,MAAMG,CAAAA,IAAN,CAAW9C,sBAAA,CAAuB,SAAvB,CAAX,CACA6C,MAAMC,CAAAA,IAAN,CAAW9C,sBAAA,CAAuB,SAAvB,CAAX,CACA;IAAIqC,EAAItB,aAAA,CA/GkBJ,IA+GlB,CAA8BgC,KAA9B,CAAqCE,KAArC,CAER,IAAU,CAAV,GAAIR,CAAJ,CACE,CAAA,CAAOA,CADT,KAAA,CAKA,IAASd,CAAT,CAAa,CAAb,CAAgBA,CAAhB,CAAoBoB,KAAMhB,CAAAA,MAA1B,CAAkCJ,CAAA,EAAlC,CAAuC,CACrC,IAAIK,EAvHoBjB,IAuHhB,CAvHsBC,CAuHP,CAAE+B,KAAA,CAAMpB,CAAN,CAAF,CAAf,CAvHyBV,CAuHG,CAAEgC,KAAA,CAAMtB,CAAN,CAAF,CAA5B,CAER,IAAU,CAAV,GAAIK,CAAJ,CAAa,CACX,CAAA,CAAOA,CAAP,OAAA,CADW,CAHwB,CAQvC,CAAA,CAAO,CAbP,CAR4C,CAzGxC,MAAO,EADe,CAQxB,GAJc,MAId,GAJIM,KAIJ,EAAc,WAAd,GAAIA,KAAJ,CACE,MAAO,EAIT,MAAM,KAAIa,SAAJ,CAAc,6BAAd,CAA8Cb,KAA9C,CAAsD,GAAtD,CAAN,CAlEgC,CADjB,CAAZ,CAzE2F,CAA1D,CA4Q1CvC,QAAQI,CAAAA,oBAAR,CAA+BA,MA9RmG;",
"sources":["node_modules/mathjs/lib/cjs/function/relational/compareNatural.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$relational$compareNatural\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCompareNatural = void 0;\n\nvar _javascriptNaturalSort = _interopRequireDefault(require(\"javascript-natural-sort\"));\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar name = 'compareNatural';\nvar dependencies = ['typed', 'compare'];\nvar createCompareNatural = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      compare = _ref.compare;\n  var compareBooleans = compare.signatures['boolean,boolean'];\n  /**\n   * Compare two values of any type in a deterministic, natural way.\n   *\n   * For numeric values, the function works the same as `math.compare`.\n   * For types of values that can't be compared mathematically,\n   * the function compares in a natural way.\n   *\n   * For numeric values, x and y are considered equal when the relative\n   * difference between x and y is smaller than the configured epsilon.\n   * The function cannot be used to compare values smaller than\n   * approximately 2.22e-16.\n   *\n   * For Complex numbers, first the real parts are compared. If equal,\n   * the imaginary parts are compared.\n   *\n   * Strings are compared with a natural sorting algorithm, which\n   * orders strings in a \"logic\" way following some heuristics.\n   * This differs from the function `compare`, which converts the string\n   * into a numeric value and compares that. The function `compareText`\n   * on the other hand compares text lexically.\n   *\n   * Arrays and Matrices are compared value by value until there is an\n   * unequal pair of values encountered. Objects are compared by sorted\n   * keys until the keys or their values are unequal.\n   *\n   * Syntax:\n   *\n   *    math.compareNatural(x, y)\n   *\n   * Examples:\n   *\n   *    math.compareNatural(6, 1)              // returns 1\n   *    math.compareNatural(2, 3)              // returns -1\n   *    math.compareNatural(7, 7)              // returns 0\n   *\n   *    math.compareNatural('10', '2')         // returns 1\n   *    math.compareText('10', '2')            // returns -1\n   *    math.compare('10', '2')                // returns 1\n   *\n   *    math.compareNatural('Answer: 10', 'Answer: 2') // returns 1\n   *    math.compareText('Answer: 10', 'Answer: 2')    // returns -1\n   *    math.compare('Answer: 10', 'Answer: 2')\n   *        // Error: Cannot convert \"Answer: 10\" to a number\n   *\n   *    const a = math.unit('5 cm')\n   *    const b = math.unit('40 mm')\n   *    math.compareNatural(a, b)              // returns 1\n   *\n   *    const c = math.complex('2 + 3i')\n   *    const d = math.complex('2 + 4i')\n   *    math.compareNatural(c, d)              // returns -1\n   *\n   *    math.compareNatural([1, 2, 4], [1, 2, 3]) // returns 1\n   *    math.compareNatural([1, 2, 3], [1, 2])    // returns 1\n   *    math.compareNatural([1, 5], [1, 2, 3])    // returns 1\n   *    math.compareNatural([1, 2], [1, 2])       // returns 0\n   *\n   *    math.compareNatural({a: 2}, {a: 4})       // returns -1\n   *\n   * See also:\n   *\n   *    compare, compareText\n   *\n   * @param  {*} x First value to compare\n   * @param  {*} y Second value to compare\n   * @return {number} Returns the result of the comparison:\n   *                  1 when x > y, -1 when x < y, and 0 when x == y.\n   */\n\n  return typed(name, {\n    'any, any': function anyAny(x, y) {\n      var typeX = (0, _is.typeOf)(x);\n      var typeY = (0, _is.typeOf)(y);\n      var c; // numeric types\n\n      if ((typeX === 'number' || typeX === 'BigNumber' || typeX === 'Fraction') && (typeY === 'number' || typeY === 'BigNumber' || typeY === 'Fraction')) {\n        c = compare(x, y);\n\n        if (c.toString() !== '0') {\n          // c can be number, BigNumber, or Fraction\n          return c > 0 ? 1 : -1; // return a number\n        } else {\n          return (0, _javascriptNaturalSort[\"default\"])(typeX, typeY);\n        }\n      } // matrix types\n\n\n      if (typeX === 'Array' || typeX === 'Matrix' || typeY === 'Array' || typeY === 'Matrix') {\n        c = compareMatricesAndArrays(this, x, y);\n\n        if (c !== 0) {\n          return c;\n        } else {\n          return (0, _javascriptNaturalSort[\"default\"])(typeX, typeY);\n        }\n      } // in case of different types, order by name of type, i.e. 'BigNumber' < 'Complex'\n\n\n      if (typeX !== typeY) {\n        return (0, _javascriptNaturalSort[\"default\"])(typeX, typeY);\n      }\n\n      if (typeX === 'Complex') {\n        return compareComplexNumbers(x, y);\n      }\n\n      if (typeX === 'Unit') {\n        if (x.equalBase(y)) {\n          return this(x.value, y.value);\n        } // compare by units\n\n\n        return compareArrays(this, x.formatUnits(), y.formatUnits());\n      }\n\n      if (typeX === 'boolean') {\n        return compareBooleans(x, y);\n      }\n\n      if (typeX === 'string') {\n        return (0, _javascriptNaturalSort[\"default\"])(x, y);\n      }\n\n      if (typeX === 'Object') {\n        return compareObjects(this, x, y);\n      }\n\n      if (typeX === 'null') {\n        return 0;\n      }\n\n      if (typeX === 'undefined') {\n        return 0;\n      } // this should not occur...\n\n\n      throw new TypeError('Unsupported type of value \"' + typeX + '\"');\n    }\n  });\n  /**\n   * Compare mixed matrix/array types, by converting to same-shaped array.\n   * This comparator is non-deterministic regarding input types.\n   * @param {Array | SparseMatrix | DenseMatrix | *} x\n   * @param {Array | SparseMatrix | DenseMatrix | *} y\n   * @returns {number} Returns the comparison result: -1, 0, or 1\n   */\n\n  function compareMatricesAndArrays(compareNatural, x, y) {\n    if ((0, _is.isSparseMatrix)(x) && (0, _is.isSparseMatrix)(y)) {\n      return compareArrays(compareNatural, x.toJSON().values, y.toJSON().values);\n    }\n\n    if ((0, _is.isSparseMatrix)(x)) {\n      // note: convert to array is expensive\n      return compareMatricesAndArrays(compareNatural, x.toArray(), y);\n    }\n\n    if ((0, _is.isSparseMatrix)(y)) {\n      // note: convert to array is expensive\n      return compareMatricesAndArrays(compareNatural, x, y.toArray());\n    } // convert DenseArray into Array\n\n\n    if ((0, _is.isDenseMatrix)(x)) {\n      return compareMatricesAndArrays(compareNatural, x.toJSON().data, y);\n    }\n\n    if ((0, _is.isDenseMatrix)(y)) {\n      return compareMatricesAndArrays(compareNatural, x, y.toJSON().data);\n    } // convert scalars to array\n\n\n    if (!Array.isArray(x)) {\n      return compareMatricesAndArrays(compareNatural, [x], y);\n    }\n\n    if (!Array.isArray(y)) {\n      return compareMatricesAndArrays(compareNatural, x, [y]);\n    }\n\n    return compareArrays(compareNatural, x, y);\n  }\n  /**\n   * Compare two Arrays\n   *\n   * - First, compares value by value\n   * - Next, if all corresponding values are equal,\n   *   look at the length: longest array will be considered largest\n   *\n   * @param {Array} x\n   * @param {Array} y\n   * @returns {number} Returns the comparison result: -1, 0, or 1\n   */\n\n\n  function compareArrays(compareNatural, x, y) {\n    // compare each value\n    for (var i = 0, ii = Math.min(x.length, y.length); i < ii; i++) {\n      var v = compareNatural(x[i], y[i]);\n\n      if (v !== 0) {\n        return v;\n      }\n    } // compare the size of the arrays\n\n\n    if (x.length > y.length) {\n      return 1;\n    }\n\n    if (x.length < y.length) {\n      return -1;\n    } // both Arrays have equal size and content\n\n\n    return 0;\n  }\n  /**\n   * Compare two objects\n   *\n   * - First, compare sorted property names\n   * - Next, compare the property values\n   *\n   * @param {Object} x\n   * @param {Object} y\n   * @returns {number} Returns the comparison result: -1, 0, or 1\n   */\n\n\n  function compareObjects(compareNatural, x, y) {\n    var keysX = Object.keys(x);\n    var keysY = Object.keys(y); // compare keys\n\n    keysX.sort(_javascriptNaturalSort[\"default\"]);\n    keysY.sort(_javascriptNaturalSort[\"default\"]);\n    var c = compareArrays(compareNatural, keysX, keysY);\n\n    if (c !== 0) {\n      return c;\n    } // compare values\n\n\n    for (var i = 0; i < keysX.length; i++) {\n      var v = compareNatural(x[keysX[i]], y[keysY[i]]);\n\n      if (v !== 0) {\n        return v;\n      }\n    }\n\n    return 0;\n  }\n});\n/**\n * Compare two complex numbers, `x` and `y`:\n *\n * - First, compare the real values of `x` and `y`\n * - If equal, compare the imaginary values of `x` and `y`\n *\n * @params {Complex} x\n * @params {Complex} y\n * @returns {number} Returns the comparison result: -1, 0, or 1\n */\n\nexports.createCompareNatural = createCompareNatural;\n\nfunction compareComplexNumbers(x, y) {\n  if (x.re > y.re) {\n    return 1;\n  }\n\n  if (x.re < y.re) {\n    return -1;\n  }\n\n  if (x.im > y.im) {\n    return 1;\n  }\n\n  if (x.im < y.im) {\n    return -1;\n  }\n\n  return 0;\n}\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createCompareNatural","_javascriptNaturalSort","_interopRequireDefault","obj","__esModule","_is","_factory","factory","name","dependencies","_ref","compareMatricesAndArrays","compareNatural","x","y","isSparseMatrix","compareArrays","toJSON","values","toArray","isDenseMatrix","data","Array","isArray","i","ii","Math","min","length","v","typed","compare","compareBooleans","signatures","anyAny","typeX","typeOf","typeY","c","toString","re","im","equalBase","formatUnits","keysX","keys","keysY","sort","TypeError"]
}
