{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$probability$kldivergence.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,oEAAA,CAAyF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGjIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,kBAAR,CAA6B,IAAK,EAE9BC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAIXM,OAAAA,CAAoC,CAAC,CAAA,CAAGC,MAASC,CAAAA,OAAb,EAF7BC,cAE6B,CADrBC,0DAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CACqB,CAA0C,QAAS,CAACC,IAAD,CAAO,CAyChGC,QAASA,OAAM,CAACC,CAAD,CAAIC,CAAJ,CAAO,CACpB,IAAIC,QAAUD,CAAEE,CAAAA,IAAF,EAASC,CAAAA,MAAvB,CACIC,QAAUL,CAAEG,CAAAA,IAAF,EAASC,CAAAA,MAEvB,IAAc,CAAd,CAAIF,OAAJ,CACE,KAAUI,MAAJ,CAAU,sCAAV,CAAN;AAGF,GAAc,CAAd,CAAID,OAAJ,CACE,KAAUC,MAAJ,CAAU,uCAAV,CAAN,CAGF,GAAIJ,OAAJ,GAAgBG,OAAhB,CACE,KAAUC,MAAJ,CAAU,qCAAV,CAAN,CAMF,GAAa,CAAb,GAFWC,GAAAC,CAAIR,CAAJQ,CAEX,CACE,KAAUF,MAAJ,CAAU,kDAAV,CAAN,CAKF,GAAa,CAAb,GAFWC,GAAAE,CAAIR,CAAJQ,CAEX,CACE,KAAUH,MAAJ,CAAU,mDAAV,CAAN,CAGEI,CAAAA,CAAQC,MAAA,CAAOX,CAAP,CAAUO,GAAA,CAAIP,CAAJ,CAAV,CACRY,EAAAA,CAAQD,MAAA,CAAOV,CAAP,CAAUM,GAAA,CAAIN,CAAJ,CAAV,CACRY,EAAAA,CAASN,GAAA,CAAIO,QAAA,CAASJ,CAAT,CAAgBK,GAAA,CAAIC,SAAA,CAAUN,CAAV,CAAiBE,CAAjB,CAAJ,CAAhB,CAAJ,CAEb,OAAIK,UAAA,CAAUJ,CAAV,CAAJ,CACSA,CADT,CAGSK,MAAOC,CAAAA,GApCI,CAzC0E,IAC5FC,MAAQtB,IAAKsB,CAAAA,KAD+E,CAE5FC,OAASvB,IAAKuB,CAAAA,MAF8E,CAG5FV,OAASb,IAAKa,CAAAA,MAH8E,CAI5FJ,IAAMT,IAAKS,CAAAA,GAJiF,CAK5FO,SAAWhB,IAAKgB,CAAAA,QAL4E,CAM5FE;AAAYlB,IAAKkB,CAAAA,SAN2E,CAO5FD,IAAMjB,IAAKiB,CAAAA,GAPiF,CAQ5FE,UAAYnB,IAAKmB,CAAAA,SAkBrB,OAAOG,MAAA,CA5BExB,cA4BF,CAAY,CACjB,eAAgB0B,QAAmB,CAACtB,CAAD,CAAIC,CAAJ,CAAO,CACxC,MAAOF,OAAA,CAAOsB,MAAA,CAAOrB,CAAP,CAAP,CAAkBqB,MAAA,CAAOpB,CAAP,CAAlB,CADiC,CADzB,CAIjB,gBAAiBsB,QAAoB,CAACvB,CAAD,CAAIC,CAAJ,CAAO,CAC1C,MAAOF,OAAA,CAAOC,CAAP,CAAUqB,MAAA,CAAOpB,CAAP,CAAV,CADmC,CAJ3B,CAOjB,gBAAiBuB,QAAoB,CAACxB,CAAD,CAAIC,CAAJ,CAAO,CAC1C,MAAOF,OAAA,CAAOsB,MAAA,CAAOrB,CAAP,CAAP,CAAkBC,CAAlB,CADmC,CAP3B,CAUjB,iBAAkBwB,QAAqB,CAACzB,CAAD,CAAIC,CAAJ,CAAO,CAC5C,MAAOF,OAAA,CAAOC,CAAP,CAAUC,CAAV,CADqC,CAV7B,CAAZ,CA1ByF,CAA1D,CAiFxCZ,QAAQI,CAAAA,kBAAR,CAA6BA,MA7FoG;",
"sources":["node_modules/mathjs/lib/cjs/function/probability/kldivergence.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$probability$kldivergence\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createKldivergence = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'kldivergence';\nvar dependencies = ['typed', 'matrix', 'divide', 'sum', 'multiply', 'dotDivide', 'log', 'isNumeric'];\nvar createKldivergence = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      divide = _ref.divide,\n      sum = _ref.sum,\n      multiply = _ref.multiply,\n      dotDivide = _ref.dotDivide,\n      log = _ref.log,\n      isNumeric = _ref.isNumeric;\n\n  /**\n     * Calculate the Kullback-Leibler (KL) divergence  between two distributions\n     *\n     * Syntax:\n     *\n     *     math.kldivergence(x, y)\n     *\n     * Examples:\n     *\n     *     math.kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])   //returns 0.24376698773121153\n     *\n     *\n     * @param  {Array | Matrix} q    First vector\n     * @param  {Array | Matrix} p    Second vector\n     * @return {number}              Returns distance between q and p\n     */\n  return typed(name, {\n    'Array, Array': function ArrayArray(q, p) {\n      return _kldiv(matrix(q), matrix(p));\n    },\n    'Matrix, Array': function MatrixArray(q, p) {\n      return _kldiv(q, matrix(p));\n    },\n    'Array, Matrix': function ArrayMatrix(q, p) {\n      return _kldiv(matrix(q), p);\n    },\n    'Matrix, Matrix': function MatrixMatrix(q, p) {\n      return _kldiv(q, p);\n    }\n  });\n\n  function _kldiv(q, p) {\n    var plength = p.size().length;\n    var qlength = q.size().length;\n\n    if (plength > 1) {\n      throw new Error('first object must be one dimensional');\n    }\n\n    if (qlength > 1) {\n      throw new Error('second object must be one dimensional');\n    }\n\n    if (plength !== qlength) {\n      throw new Error('Length of two vectors must be equal');\n    } // Before calculation, apply normalization\n\n\n    var sumq = sum(q);\n\n    if (sumq === 0) {\n      throw new Error('Sum of elements in first object must be non zero');\n    }\n\n    var sump = sum(p);\n\n    if (sump === 0) {\n      throw new Error('Sum of elements in second object must be non zero');\n    }\n\n    var qnorm = divide(q, sum(q));\n    var pnorm = divide(p, sum(p));\n    var result = sum(multiply(qnorm, log(dotDivide(qnorm, pnorm))));\n\n    if (isNumeric(result)) {\n      return result;\n    } else {\n      return Number.NaN;\n    }\n  }\n});\nexports.createKldivergence = createKldivergence;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createKldivergence","_factory","factory","name","dependencies","_ref","_kldiv","q","p","plength","size","length","qlength","Error","sum","sumq","sump","qnorm","divide","pnorm","result","multiply","log","dotDivide","isNumeric","Number","NaN","typed","matrix","ArrayArray","MatrixArray","ArrayMatrix","MatrixMatrix"]
}
