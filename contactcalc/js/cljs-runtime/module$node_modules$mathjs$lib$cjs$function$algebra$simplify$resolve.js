shadow$provide.module$node_modules$mathjs$lib$cjs$function$algebra$simplify$resolve=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.createResolve=void 0;var _is=require("module$node_modules$mathjs$lib$cjs$utils$is");global=require("module$node_modules$mathjs$lib$cjs$utils$factory");global=(0,global.factory)("resolve",["parse","FunctionNode","OperatorNode","ParenthesisNode"],function(_ref){function resolve(node,scope){if(!scope)return node;if((0,
_is.isSymbolNode)(node)){var value=scope[node.name];if((0,_is.isNode)(value))return resolve(value,scope);if("number"===typeof value)return parse(String(value))}else{if((0,_is.isOperatorNode)(node))return value=node.args.map(function(arg){return resolve(arg,scope)}),new OperatorNode(node.op,node.fn,value,node.implicit);if((0,_is.isParenthesisNode)(node))return new ParenthesisNode(resolve(node.content,scope));if((0,_is.isFunctionNode)(node))return value=node.args.map(function(arg){return resolve(arg,
scope)}),new FunctionNode(node.name,value)}return node}var parse=_ref.parse,FunctionNode=_ref.FunctionNode,OperatorNode=_ref.OperatorNode,ParenthesisNode=_ref.ParenthesisNode;return resolve});exports.createResolve=global}
//# sourceMappingURL=module$node_modules$mathjs$lib$cjs$function$algebra$simplify$resolve.js.map
