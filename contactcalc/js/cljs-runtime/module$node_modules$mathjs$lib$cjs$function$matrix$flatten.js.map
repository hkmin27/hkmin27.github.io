{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$matrix$flatten.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,0DAAA,CAA+E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGvHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,aAAR,CAAwB,IAAK,EAE7B,KAAIC,QAAUP,OAAA,CAAQ,iDAAR,CAAd,CAEIQ,OAASR,OAAA,CAAQ,gDAAR,CAETS,OAAAA,CAAWT,OAAA,CAAQ,kDAAR,CAIXM,OAAAA,CAA+B,CAAC,CAAA,CAAGG,MAASC,CAAAA,OAAb,EAFxBC,SAEwB,CADhBC,CAAC,OAADA,CAAU,QAAVA,CACgB,CAA0C,QAAS,CAACC,IAAD,CAAO,CAAA,IACvFC,MAAQD,IAAKC,CAAAA,KAD0E,CAEvFC,OAASF,IAAKE,CAAAA,MAoBlB;MAAOD,MAAA,CAxBEH,SAwBF,CAAY,CACjBK,MAAOA,QAAc,CAACC,CAAD,CAAI,CACvB,MAAO,CAAC,CAAA,CAAGT,MAAOU,CAAAA,OAAX,EAAoB,CAAC,CAAA,CAAGX,OAAQY,CAAAA,KAAZ,EAAmBF,CAAnB,CAApB,CADgB,CADR,CAIjBG,OAAQA,QAAe,CAACH,CAAD,CAAI,CACrBI,CAAAA,CAAO,CAAC,CAAA,CAAGb,MAAOU,CAAAA,OAAX,EAAoB,CAAC,CAAA,CAAGX,OAAQY,CAAAA,KAAZ,EAAmBF,CAAEK,CAAAA,OAAF,EAAnB,CAApB,CAEX,OAAOP,OAAA,CAAOM,CAAP,CAHkB,CAJV,CAAZ,CAtBoF,CAA1D,CAiCnCnB,QAAQI,CAAAA,aAAR,CAAwBA,MAjD+F;",
"sources":["node_modules/mathjs/lib/cjs/function/matrix/flatten.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$matrix$flatten\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createFlatten = void 0;\n\nvar _object = require(\"../../utils/object.js\");\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'flatten';\nvar dependencies = ['typed', 'matrix'];\nvar createFlatten = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix;\n\n  /**\n   * Flatten a multi dimensional matrix into a single dimensional matrix.\n   *\n   * Syntax:\n   *\n   *    math.flatten(x)\n   *\n   * Examples:\n   *\n   *    math.flatten([[1,2], [3,4]])   // returns [1, 2, 3, 4]\n   *\n   * See also:\n   *\n   *    concat, resize, size, squeeze\n   *\n   * @param {Matrix | Array} x   Matrix to be flattened\n   * @return {Matrix | Array} Returns the flattened matrix\n   */\n  return typed(name, {\n    Array: function Array(x) {\n      return (0, _array.flatten)((0, _object.clone)(x));\n    },\n    Matrix: function Matrix(x) {\n      var flat = (0, _array.flatten)((0, _object.clone)(x.toArray())); // TODO: return the same matrix type as x\n\n      return matrix(flat);\n    }\n  });\n});\nexports.createFlatten = createFlatten;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createFlatten","_object","_array","_factory","factory","name","dependencies","_ref","typed","matrix","Array","x","flatten","clone","Matrix","flat","toArray"]
}
