shadow$provide.module$node_modules$mathjs$lib$cjs$function$relational$compareNatural=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.createCompareNatural=void 0;var _javascriptNaturalSort=function(obj){return obj&&obj.__esModule?obj:{"default":obj}}(require("module$node_modules$javascript_natural_sort$naturalSort")),_is=require("module$node_modules$mathjs$lib$cjs$utils$is");global=require("module$node_modules$mathjs$lib$cjs$utils$factory");global=
(0,global.factory)("compareNatural",["typed","compare"],function(_ref){function compareMatricesAndArrays(compareNatural,x,y){return(0,_is.isSparseMatrix)(x)&&(0,_is.isSparseMatrix)(y)?compareArrays(compareNatural,x.toJSON().values,y.toJSON().values):(0,_is.isSparseMatrix)(x)?compareMatricesAndArrays(compareNatural,x.toArray(),y):(0,_is.isSparseMatrix)(y)?compareMatricesAndArrays(compareNatural,x,y.toArray()):(0,_is.isDenseMatrix)(x)?compareMatricesAndArrays(compareNatural,x.toJSON().data,y):(0,_is.isDenseMatrix)(y)?
compareMatricesAndArrays(compareNatural,x,y.toJSON().data):Array.isArray(x)?Array.isArray(y)?compareArrays(compareNatural,x,y):compareMatricesAndArrays(compareNatural,x,[y]):compareMatricesAndArrays(compareNatural,[x],y)}function compareArrays(compareNatural,x,y){for(var i=0,ii=Math.min(x.length,y.length);i<ii;i++){var v=compareNatural(x[i],y[i]);if(0!==v)return v}return x.length>y.length?1:x.length<y.length?-1:0}var typed=_ref.typed,compare=_ref.compare,compareBooleans=compare.signatures["boolean,boolean"];
return typed("compareNatural",{"any, any":function(x,y){var typeX=(0,_is.typeOf)(x),typeY=(0,_is.typeOf)(y);if(!("number"!==typeX&&"BigNumber"!==typeX&&"Fraction"!==typeX||"number"!==typeY&&"BigNumber"!==typeY&&"Fraction"!==typeY))return x=compare(x,y),"0"!==x.toString()?0<x?1:-1:(0,_javascriptNaturalSort["default"])(typeX,typeY);if("Array"===typeX||"Matrix"===typeX||"Array"===typeY||"Matrix"===typeY)return x=compareMatricesAndArrays(this,x,y),0!==x?x:(0,_javascriptNaturalSort["default"])(typeX,typeY);
if(typeX!==typeY)return(0,_javascriptNaturalSort["default"])(typeX,typeY);if("Complex"===typeX)return x.re>y.re?1:x.re<y.re?-1:x.im>y.im?1:x.im<y.im?-1:0;if("Unit"===typeX)return x.equalBase(y)?this(x.value,y.value):compareArrays(this,x.formatUnits(),y.formatUnits());if("boolean"===typeX)return compareBooleans(x,y);if("string"===typeX)return(0,_javascriptNaturalSort["default"])(x,y);if("Object"===typeX){a:{typeX=Object.keys(x);typeY=Object.keys(y);typeX.sort(_javascriptNaturalSort["default"]);typeY.sort(_javascriptNaturalSort["default"]);
var c=compareArrays(this,typeX,typeY);if(0!==c)x=c;else{for(c=0;c<typeX.length;c++){var v=this(x[typeX[c]],y[typeY[c]]);if(0!==v){x=v;break a}}x=0}}return x}if("null"===typeX||"undefined"===typeX)return 0;throw new TypeError('Unsupported type of value "'+typeX+'"');}})});exports.createCompareNatural=global}
//# sourceMappingURL=module$node_modules$mathjs$lib$cjs$function$relational$compareNatural.js.map
