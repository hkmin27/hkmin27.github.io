{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$arithmetic$sqrt.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,2DAAA,CAAgF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGxHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,UAAR,CAAqB,IAAK,EAEtBC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAEf,KAAIQ,YAAcR,OAAA,CAAQ,qDAAR,CAIdM,QAAAA,CAA4B,CAAC,CAAA,CAAGC,MAASE,CAAAA,OAAb,EAFrBC,MAEqB,CADbC,CAAC,QAADA,CAAW,OAAXA,CAAoB,SAApBA,CACa,CAA0C,QAAS,CAACC,IAAD,CAAO,CA0DxFC,QAASA,YAAW,CAACC,CAAD,CAAI,CACtB,MAAIC,MAAA,CAAMD,CAAN,CAAJ,CACSE,GADT,CAEgB,CAAT,EAAIF,CAAJ,EAAcG,MAAOC,CAAAA,WAArB,CACEC,IAAKC,CAAAA,IAAL,CAAUN,CAAV,CADF;AAGoBM,CAAlB,IAAIC,OAAJ,CAAYP,CAAZ,CAAe,CAAf,CAAkBM,EAAAA,IAAlB,EANa,CA1DgE,IACpFH,OAASL,IAAKK,CAAAA,MADsE,CAEpFK,MAAQV,IAAKU,CAAAA,KAFuE,CAGpFD,QAAUT,IAAKS,CAAAA,OA0BnB,OAAOC,MAAA,CAAM,MAAN,CAAc,CACnBC,OAAQV,WADW,CAEnBQ,QAASA,QAAgB,CAACP,CAAD,CAAI,CAC3B,MAAOA,EAAEM,CAAAA,IAAF,EADoB,CAFV,CAKnBI,UAAWA,QAAkB,CAACV,CAAD,CAAI,CAC/B,MAAI,CAACA,CAAEW,CAAAA,UAAF,EAAL,EAAuBR,MAAOC,CAAAA,WAA9B,CACSJ,CAAEM,CAAAA,IAAF,EADT,CAISP,WAAA,CAAYC,CAAEY,CAAAA,QAAF,EAAZ,CALsB,CALd,CAanB,iBAAkBC,QAAoB,CAACb,CAAD,CAAI,CAExC,MAAO,CAAC,CAAA,CAAGN,WAAYoB,CAAAA,OAAhB,EAAyBd,CAAzB,CAA4B,IAA5B,CAAkC,CAAA,CAAlC,CAFiC,CAbvB,CAiBnBe,KAAMA,QAAa,CAACf,CAAD,CAAI,CAErB,MAAOA,EAAEgB,CAAAA,GAAF,CAAM,EAAN,CAFc,CAjBJ,CAAd,CA7BiF,CAA1D,CAoEhC5B,QAAQI,CAAAA,UAAR,CAAqBA,OAlFmG;",
"sources":["node_modules/mathjs/lib/cjs/function/arithmetic/sqrt.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$arithmetic$sqrt\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSqrt = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar name = 'sqrt';\nvar dependencies = ['config', 'typed', 'Complex'];\nvar createSqrt = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var config = _ref.config,\n      typed = _ref.typed,\n      Complex = _ref.Complex;\n\n  /**\n   * Calculate the square root of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.sqrt(x)\n   *\n   * Examples:\n   *\n   *    math.sqrt(25)                // returns 5\n   *    math.square(5)               // returns 25\n   *    math.sqrt(-4)                // returns Complex 2i\n   *\n   * See also:\n   *\n   *    square, multiply, cube, cbrt, sqrtm\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix | Unit} x\n   *            Value for which to calculate the square root.\n   * @return {number | BigNumber | Complex | Array | Matrix | Unit}\n   *            Returns the square root of `x`\n   */\n  return typed('sqrt', {\n    number: _sqrtNumber,\n    Complex: function Complex(x) {\n      return x.sqrt();\n    },\n    BigNumber: function BigNumber(x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.sqrt();\n      } else {\n        // negative value -> downgrade to number to do complex value computation\n        return _sqrtNumber(x.toNumber());\n      }\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since sqrt(0) = 0\n      return (0, _collection.deepMap)(x, this, true);\n    },\n    Unit: function Unit(x) {\n      // Someday will work for complex units when they are implemented\n      return x.pow(0.5);\n    }\n  });\n  /**\n   * Calculate sqrt for a number\n   * @param {number} x\n   * @returns {number | Complex} Returns the square root of x\n   * @private\n   */\n\n  function _sqrtNumber(x) {\n    if (isNaN(x)) {\n      return NaN;\n    } else if (x >= 0 || config.predictable) {\n      return Math.sqrt(x);\n    } else {\n      return new Complex(x, 0).sqrt();\n    }\n  }\n});\nexports.createSqrt = createSqrt;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createSqrt","_factory","_collection","factory","name","dependencies","_ref","_sqrtNumber","x","isNaN","NaN","config","predictable","Math","sqrt","Complex","typed","number","BigNumber","isNegative","toNumber","ArrayMatrix","deepMap","Unit","pow"]
}
