{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$algebra$sparse$csPost.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,CAAA,iEAAA,CAAsF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG9HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,MAAR,CAYAA,QAAe,CAACC,MAAD,CAASC,CAAT,CAAY,CAEzB,GAAI,CAACD,MAAL,CACE,MAAO,KAIT,KAAIE,EAAI,CAAR,CACIC,CADJ,CAGIC,KAAO,EAHX,CAMIC,EAAI,EANR,CAUIC,MAAQ,CAARA,CAAYL,CAEhB,KAAKE,CAAL,CAAS,CAAT,CAAYA,CAAZ,CAAgBF,CAAhB,CAAmBE,CAAA,EAAnB,CAEEE,CAAA,CANSE,CAMT,CAASJ,CAAT,CAAA,CAAc,EAIhB,KAAKA,CAAL,CAASF,CAAT,CAAa,CAAb,CAAqB,CAArB,EAAgBE,CAAhB,CAAwBA,CAAA,EAAxB,CAEoB,EAAlB,GAAIH,MAAA,CAAOG,CAAP,CAAJ,GAKAE,CAAA,CAhBSJ,CAgBT,CAASE,CAAT,CACA,CADcE,CAAA,CAjBLE,CAiBK,CAASP,MAAA,CAAOG,CAAP,CAAT,CACd,CAAAE,CAAA,CAlBSE,CAkBT,CAASP,MAAA,CAAOG,CAAP,CAAT,CAAA,CAAsBA,CANtB,CAUF,KAAKA,CAAL,CAAS,CAAT,CAAYA,CAAZ,CAAgBF,CAAhB,CAAmBE,CAAA,EAAnB,CAEoB,EAAlB,GAAIH,MAAA,CAAOG,CAAP,CAAJ,GAKAD,CALA,CAKI,CAAC,CAAA,CAAGM,OAAQC,CAAAA,MAAZ,EAAoBN,CAApB,CAAuBD,CAAvB,CAA0BG,CAA1B,CA7BKE,CA6BL,CA5BKN,CA4BL,CAAyCG,IAAzC,CAA+CE,KAA/C,CALJ,CAQF,OAAOF,KA/CkB,CAV3B,KAAII,QAAUf,OAAA,CAAQ,mEAAR,CARgH;",
"sources":["node_modules/mathjs/lib/cjs/function/algebra/sparse/csPost.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$algebra$sparse$csPost\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.csPost = csPost;\n\nvar _csTdfs = require(\"./csTdfs.js\");\n\n/**\n * Post order a tree of forest\n *\n * @param {Array}   parent          The tree or forest\n * @param {Number}  n               Number of columns\n *\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n */\nfunction csPost(parent, n) {\n  // check inputs\n  if (!parent) {\n    return null;\n  } // vars\n\n\n  var k = 0;\n  var j; // allocate result\n\n  var post = []; // (n)\n  // workspace, head: first n entries, next: next n entries, stack: last n entries\n\n  var w = []; // (3 * n)\n\n  var head = 0;\n  var next = n;\n  var stack = 2 * n; // initialize workspace\n\n  for (j = 0; j < n; j++) {\n    // empty linked lists\n    w[head + j] = -1;\n  } // traverse nodes in reverse order\n\n\n  for (j = n - 1; j >= 0; j--) {\n    // check j is a root\n    if (parent[j] === -1) {\n      continue;\n    } // add j to list of its parent\n\n\n    w[next + j] = w[head + parent[j]];\n    w[head + parent[j]] = j;\n  } // loop nodes\n\n\n  for (j = 0; j < n; j++) {\n    // skip j if it is not a root\n    if (parent[j] !== -1) {\n      continue;\n    } // depth-first search\n\n\n    k = (0, _csTdfs.csTdfs)(j, k, w, head, next, post, stack);\n  }\n\n  return post;\n}\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","csPost","parent","n","k","j","post","w","stack","head","_csTdfs","csTdfs"]
}
