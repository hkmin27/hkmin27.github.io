{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$set$setIsSubset.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,2DAAA,CAAgF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGxHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,iBAAR,CAA4B,IAAK,EAEjC,KAAIC,OAASP,OAAA,CAAQ,gDAAR,CAETQ,OAAAA,CAAWR,OAAA,CAAQ,kDAAR,CAIXM,OAAAA,CAAmC,CAAC,CAAA,CAAGE,MAASC,CAAAA,OAAb,EAF5BC,aAE4B,CADpBC,CAAC,OAADA,CAAU,MAAVA,CAAkB,QAAlBA,CAA4B,gBAA5BA,CAA8C,OAA9CA,CACoB,CAA0C,QAAS,CAACC,IAAD,CAAO,CAAA,IAC3FC,MAAQD,IAAKC,CAAAA,KAD8E,CAE3FC,KAAOF,IAAKE,CAAAA,IAF+E,CAG3FC,OAASH,IAAKG,CAAAA,MAH6E,CAI3FC;AAAiBJ,IAAKI,CAAAA,cAJqE,CAK3FC,MAAQL,IAAKK,CAAAA,KAuBjB,OAAOJ,MAAA,CA9BEH,aA8BF,CAAY,CACjB,iCAAkCQ,QAA+B,CAACC,EAAD,CAAKC,EAAL,CAAS,CACxE,GAAuC,CAAvC,GAAIL,MAAA,CAAOD,IAAA,CAAKK,EAAL,CAAP,CAAiB,IAAIF,KAAJ,CAAU,CAAV,CAAjB,CAAJ,CAEE,MAAO,CAAA,CACF,IAAuC,CAAvC,GAAIF,MAAA,CAAOD,IAAA,CAAKM,EAAL,CAAP,CAAiB,IAAIH,KAAJ,CAAU,CAAV,CAAjB,CAAJ,CAEL,MAAO,CAAA,CAGLI,GAAAA,CAAK,CAAC,CAAA,CAAGd,MAAOe,CAAAA,QAAX,EAAqB,CAAC,CAAA,CAAGf,MAAOgB,CAAAA,OAAX,EAAoBC,KAAMC,CAAAA,OAAN,CAAcN,EAAd,CAAA,CAAoBA,EAApB,CAAyBA,EAAGO,CAAAA,OAAH,EAA7C,CAA2DC,CAAAA,IAA3D,CAAgEX,cAAhE,CAArB,CACLY,GAAAA,CAAK,CAAC,CAAA,CAAGrB,MAAOe,CAAAA,QAAX,EAAqB,CAAC,CAAA,CAAGf,MAAOgB,CAAAA,OAAX,EAAoBC,KAAMC,CAAAA,OAAN,CAAcL,EAAd,CAAA,CAAoBA,EAApB,CAAyBA,EAAGM,CAAAA,OAAH,EAA7C,CAA2DC,CAAAA,IAA3D,CAAgEX,cAAhE,CAArB,CAGT,KAFA,IAAIa,IAAJ,CAESC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBT,EAAGU,CAAAA,MAAvB,CAA+BD,CAAA,EAA/B,CAAoC,CAClCD,IAAA,CAAO,CAAA,CAEP,KAAK,IAAIG,EAAI,CAAb,CAAgBA,CAAhB,CAAoBJ,EAAGG,CAAAA,MAAvB,CAA+BC,CAAA,EAA/B,CACE,GAAiD,CAAjD,GAAIhB,cAAA,CAAeK,EAAA,CAAGS,CAAH,CAAMzB,CAAAA,KAArB;AAA4BuB,EAAA,CAAGI,CAAH,CAAM3B,CAAAA,KAAlC,CAAJ,EAAsDgB,EAAA,CAAGS,CAAH,CAAMG,CAAAA,UAA5D,GAA2EL,EAAA,CAAGI,CAAH,CAAMC,CAAAA,UAAjF,CAA6F,CAE3FJ,IAAA,CAAO,CAAA,CACP,MAH2F,CAO/F,GAAa,CAAA,CAAb,GAAIA,IAAJ,CACE,MAAO,CAAA,CAZyB,CAgBpC,MAAO,CAAA,CA7BiE,CADzD,CAAZ,CA5BwF,CAA1D,CA8DvC3B,QAAQI,CAAAA,iBAAR,CAA4BA,MA5E4F;",
"sources":["node_modules/mathjs/lib/cjs/function/set/setIsSubset.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$set$setIsSubset\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSetIsSubset = void 0;\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'setIsSubset';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index'];\nvar createSetIsSubset = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      size = _ref.size,\n      subset = _ref.subset,\n      compareNatural = _ref.compareNatural,\n      Index = _ref.Index;\n\n  /**\n   * Check whether a (multi)set is a subset of another (multi)set. (Every element of set1 is the element of set2.)\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setIsSubset(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setIsSubset([1, 2], [3, 4, 5, 6])        // returns false\n   *    math.setIsSubset([3, 4], [3, 4, 5, 6])        // returns true\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setDifference\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {boolean}            true | false\n   */\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {\n      if (subset(size(a1), new Index(0)) === 0) {\n        // empty is a subset of anything\n        return true;\n      } else if (subset(size(a2), new Index(0)) === 0) {\n        // anything is not a subset of empty\n        return false;\n      }\n\n      var b1 = (0, _array.identify)((0, _array.flatten)(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));\n      var b2 = (0, _array.identify)((0, _array.flatten)(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));\n      var inb2;\n\n      for (var i = 0; i < b1.length; i++) {\n        inb2 = false;\n\n        for (var j = 0; j < b2.length; j++) {\n          if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {\n            // the identifier is always a decimal int\n            inb2 = true;\n            break;\n          }\n        }\n\n        if (inb2 === false) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  });\n});\nexports.createSetIsSubset = createSetIsSubset;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createSetIsSubset","_array","_factory","factory","name","dependencies","_ref","typed","size","subset","compareNatural","Index","ArrayMatrixArrayMatrix","a1","a2","b1","identify","flatten","Array","isArray","toArray","sort","b2","inb2","i","length","j","identifier"]
}
