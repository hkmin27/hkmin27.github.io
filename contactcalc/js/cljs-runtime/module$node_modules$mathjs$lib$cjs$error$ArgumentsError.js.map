{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$error$ArgumentsError.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,uDAAA,CAA4E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAiBpHC,QAASA,eAAc,CAACC,EAAD,CAAKC,KAAL,CAAYC,GAAZ,CAAiBC,GAAjB,CAAsB,CAC3C,GAAI,EAAE,IAAF,WAAkBJ,eAAlB,CAAJ,CACE,KAAM,KAAIK,WAAJ,CAAgB,kDAAhB,CAAN,CAGF,IAAKJ,CAAAA,EAAL,CAAUA,EACV,KAAKC,CAAAA,KAAL,CAAaA,KACb,KAAKC,CAAAA,GAAL,CAAWA,GACX,KAAKC,CAAAA,GAAL,CAAWA,GACX,KAAKE,CAAAA,OAAL,CAAe,wCAAf,CAA0DL,EAA1D,CAA+D,IAA/D,CAAsEC,KAAtE,CAA8E,aAA9E,CAA8FC,GAA9F,EAA6GI,IAAAA,EAAR,GAAAH,GAAA,EAA6B,IAA7B,GAAqBA,GAArB,CAAoC,GAApC,CAA0CA,GAA1C,CAAgD,EAArJ,EAA2J,YAC3J,KAAKI,CAAAA,KAAL,CAAiBC,KAAJ,EAAYD,CAAAA,KAVkB,CAd7CE,MAAOC,CAAAA,cAAP,CAAsBZ,OAAtB;AAA+B,YAA/B,CAA6C,CAC3Ca,MAAO,CAAA,CADoC,CAA7C,CAGAb,QAAQC,CAAAA,cAAR,CAAyBA,cAwBzBA,eAAea,CAAAA,SAAf,CAA+BJ,KAAJ,EAC3BT,eAAea,CAAAA,SAAUC,CAAAA,WAAzB,CAAuCL,KACvCT,eAAea,CAAAA,SAAUE,CAAAA,IAAzB,CAAgC,gBAChCf,eAAea,CAAAA,SAAUG,CAAAA,gBAAzB,CAA4C,CAAA,CAjCwE;",
"sources":["node_modules/mathjs/lib/cjs/error/ArgumentsError.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$error$ArgumentsError\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ArgumentsError = ArgumentsError;\n\n/**\n * Create a syntax error with the message:\n *     'Wrong number of arguments in function <fn> (<count> provided, <min>-<max> expected)'\n * @param {string} fn     Function name\n * @param {number} count  Actual argument count\n * @param {number} min    Minimum required argument count\n * @param {number} [max]  Maximum required argument count\n * @extends Error\n */\nfunction ArgumentsError(fn, count, min, max) {\n  if (!(this instanceof ArgumentsError)) {\n    throw new SyntaxError('Constructor must be called with the new operator');\n  }\n\n  this.fn = fn;\n  this.count = count;\n  this.min = min;\n  this.max = max;\n  this.message = 'Wrong number of arguments in function ' + fn + ' (' + count + ' provided, ' + min + (max !== undefined && max !== null ? '-' + max : '') + ' expected)';\n  this.stack = new Error().stack;\n}\n\nArgumentsError.prototype = new Error();\nArgumentsError.prototype.constructor = Error;\nArgumentsError.prototype.name = 'ArgumentsError';\nArgumentsError.prototype.isArgumentsError = true;\n};"],
"names":["shadow$provide","global","require","module","exports","ArgumentsError","fn","count","min","max","SyntaxError","message","undefined","stack","Error","Object","defineProperty","value","prototype","constructor","name","isArgumentsError"]
}
