{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$arithmetic$square.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,6DAAA,CAAkF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG1HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,YAAR,CAAuB,IAAK,EAExBC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAEf,KAAIQ,YAAcR,OAAA,CAAQ,qDAAR,CAAlB,CAEIS,OAAST,OAAA,CAAQ,uDAAR,CAITM,QAAAA,CAA8B,CAAC,CAAA,CAAGC,MAASG,CAAAA,OAAb,EAFvBC,QAEuB,CADfC,CAAC,OAADA,CACe,CAA0C,QAAS,CAACC,IAAD,CAAO,CACtFC,IAAAA,CAAQD,IAAKC,CAAAA,KA4BjB,OAAOA,KAAA,CA/BEH,QA+BF;AAAY,CACjBI,OAAQN,MAAOO,CAAAA,YADE,CAEjBC,QAASA,QAAgB,CAACC,CAAD,CAAI,CAC3B,MAAOA,EAAEC,CAAAA,GAAF,CAAMD,CAAN,CADoB,CAFZ,CAKjBE,UAAWA,QAAkB,CAACF,CAAD,CAAI,CAC/B,MAAOA,EAAEG,CAAAA,KAAF,CAAQH,CAAR,CADwB,CALhB,CAQjBI,SAAUA,QAAiB,CAACJ,CAAD,CAAI,CAC7B,MAAOA,EAAEC,CAAAA,GAAF,CAAMD,CAAN,CADsB,CARd,CAWjB,iBAAkBK,QAAoB,CAACL,CAAD,CAAI,CAExC,MAAO,CAAC,CAAA,CAAGV,WAAYgB,CAAAA,OAAhB,EAAyBN,CAAzB,CAA4B,IAA5B,CAAkC,CAAA,CAAlC,CAFiC,CAXzB,CAejBO,KAAMA,QAAa,CAACP,CAAD,CAAI,CACrB,MAAOA,EAAEQ,CAAAA,GAAF,CAAM,CAAN,CADc,CAfN,CAAZ,CA7BmF,CAA1D,CAiDlCxB,QAAQI,CAAAA,YAAR,CAAuBA,OAjEmG;",
"sources":["node_modules/mathjs/lib/cjs/function/arithmetic/square.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$arithmetic$square\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSquare = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _index = require(\"../../plain/number/index.js\");\n\nvar name = 'square';\nvar dependencies = ['typed'];\nvar createSquare = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Compute the square of a value, `x * x`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.square(x)\n   *\n   * Examples:\n   *\n   *    math.square(2)           // returns number 4\n   *    math.square(3)           // returns number 9\n   *    math.pow(3, 2)           // returns number 9\n   *    math.multiply(3, 3)      // returns number 9\n   *\n   *    math.square([1, 2, 3, 4])  // returns Array [1, 4, 9, 16]\n   *\n   * See also:\n   *\n   *    multiply, cube, sqrt, pow\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\n   *            Number for which to calculate the square\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}\n   *            Squared value\n   */\n  return typed(name, {\n    number: _index.squareNumber,\n    Complex: function Complex(x) {\n      return x.mul(x);\n    },\n    BigNumber: function BigNumber(x) {\n      return x.times(x);\n    },\n    Fraction: function Fraction(x) {\n      return x.mul(x);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since square(0) = 0\n      return (0, _collection.deepMap)(x, this, true);\n    },\n    Unit: function Unit(x) {\n      return x.pow(2);\n    }\n  });\n});\nexports.createSquare = createSquare;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createSquare","_factory","_collection","_index","factory","name","dependencies","_ref","typed","number","squareNumber","Complex","x","mul","BigNumber","times","Fraction","ArrayMatrix","deepMap","Unit","pow"]
}
