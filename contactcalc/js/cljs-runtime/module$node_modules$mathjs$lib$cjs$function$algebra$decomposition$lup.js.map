{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$algebra$decomposition$lup.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/function/algebra/decomposition/lup.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$algebra$decomposition$lup\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createLup = void 0;\n\nvar _object = require(\"../../../utils/object.js\");\n\nvar _factory = require(\"../../../utils/factory.js\");\n\nvar name = 'lup';\nvar dependencies = ['typed', 'matrix', 'abs', 'addScalar', 'divideScalar', 'multiplyScalar', 'subtract', 'larger', 'equalScalar', 'unaryMinus', 'DenseMatrix', 'SparseMatrix', 'Spa'];\nvar createLup = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      abs = _ref.abs,\n      addScalar = _ref.addScalar,\n      divideScalar = _ref.divideScalar,\n      multiplyScalar = _ref.multiplyScalar,\n      subtract = _ref.subtract,\n      larger = _ref.larger,\n      equalScalar = _ref.equalScalar,\n      unaryMinus = _ref.unaryMinus,\n      DenseMatrix = _ref.DenseMatrix,\n      SparseMatrix = _ref.SparseMatrix,\n      Spa = _ref.Spa;\n\n  /**\n   * Calculate the Matrix LU decomposition with partial pivoting. Matrix `A` is decomposed in two matrices (`L`, `U`) and a\n   * row permutation vector `p` where `A[p,:] = L * U`\n   *\n   * Syntax:\n   *\n   *    math.lup(A)\n   *\n   * Example:\n   *\n   *    const m = [[2, 1], [1, 4]]\n   *    const r = math.lup(m)\n   *    // r = {\n   *    //   L: [[1, 0], [0.5, 1]],\n   *    //   U: [[2, 1], [0, 3.5]],\n   *    //   P: [0, 1]\n   *    // }\n   *\n   * See also:\n   *\n   *    slu, lsolve, lusolve, usolve\n   *\n   * @param {Matrix | Array} A    A two dimensional matrix or array for which to get the LUP decomposition.\n   *\n   * @return {{L: Array | Matrix, U: Array | Matrix, P: Array.<number>}} The lower triangular matrix, the upper triangular matrix and the permutation matrix.\n   */\n  return typed(name, {\n    DenseMatrix: function DenseMatrix(m) {\n      return _denseLUP(m);\n    },\n    SparseMatrix: function SparseMatrix(m) {\n      return _sparseLUP(m);\n    },\n    Array: function Array(a) {\n      // create dense matrix from array\n      var m = matrix(a); // lup, use matrix implementation\n\n      var r = _denseLUP(m); // result\n\n\n      return {\n        L: r.L.valueOf(),\n        U: r.U.valueOf(),\n        p: r.p\n      };\n    }\n  });\n\n  function _denseLUP(m) {\n    // rows & columns\n    var rows = m._size[0];\n    var columns = m._size[1]; // minimum rows and columns\n\n    var n = Math.min(rows, columns); // matrix array, clone original data\n\n    var data = (0, _object.clone)(m._data); // l matrix arrays\n\n    var ldata = [];\n    var lsize = [rows, n]; // u matrix arrays\n\n    var udata = [];\n    var usize = [n, columns]; // vars\n\n    var i, j, k; // permutation vector\n\n    var p = [];\n\n    for (i = 0; i < rows; i++) {\n      p[i] = i;\n    } // loop columns\n\n\n    for (j = 0; j < columns; j++) {\n      // skip first column in upper triangular matrix\n      if (j > 0) {\n        // loop rows\n        for (i = 0; i < rows; i++) {\n          // min i,j\n          var min = Math.min(i, j); // v[i, j]\n\n          var s = 0; // loop up to min\n\n          for (k = 0; k < min; k++) {\n            // s = l[i, k] - data[k, j]\n            s = addScalar(s, multiplyScalar(data[i][k], data[k][j]));\n          }\n\n          data[i][j] = subtract(data[i][j], s);\n        }\n      } // row with larger value in cvector, row >= j\n\n\n      var pi = j;\n      var pabsv = 0;\n      var vjj = 0; // loop rows\n\n      for (i = j; i < rows; i++) {\n        // data @ i, j\n        var v = data[i][j]; // absolute value\n\n        var absv = abs(v); // value is greater than pivote value\n\n        if (larger(absv, pabsv)) {\n          // store row\n          pi = i; // update max value\n\n          pabsv = absv; // value @ [j, j]\n\n          vjj = v;\n        }\n      } // swap rows (j <-> pi)\n\n\n      if (j !== pi) {\n        // swap values j <-> pi in p\n        p[j] = [p[pi], p[pi] = p[j]][0]; // swap j <-> pi in data\n\n        DenseMatrix._swapRows(j, pi, data);\n      } // check column is in lower triangular matrix\n\n\n      if (j < rows) {\n        // loop rows (lower triangular matrix)\n        for (i = j + 1; i < rows; i++) {\n          // value @ i, j\n          var vij = data[i][j];\n\n          if (!equalScalar(vij, 0)) {\n            // update data\n            data[i][j] = divideScalar(data[i][j], vjj);\n          }\n        }\n      }\n    } // loop columns\n\n\n    for (j = 0; j < columns; j++) {\n      // loop rows\n      for (i = 0; i < rows; i++) {\n        // initialize row in arrays\n        if (j === 0) {\n          // check row exists in upper triangular matrix\n          if (i < columns) {\n            // U\n            udata[i] = [];\n          } // L\n\n\n          ldata[i] = [];\n        } // check we are in the upper triangular matrix\n\n\n        if (i < j) {\n          // check row exists in upper triangular matrix\n          if (i < columns) {\n            // U\n            udata[i][j] = data[i][j];\n          } // check column exists in lower triangular matrix\n\n\n          if (j < rows) {\n            // L\n            ldata[i][j] = 0;\n          }\n\n          continue;\n        } // diagonal value\n\n\n        if (i === j) {\n          // check row exists in upper triangular matrix\n          if (i < columns) {\n            // U\n            udata[i][j] = data[i][j];\n          } // check column exists in lower triangular matrix\n\n\n          if (j < rows) {\n            // L\n            ldata[i][j] = 1;\n          }\n\n          continue;\n        } // check row exists in upper triangular matrix\n\n\n        if (i < columns) {\n          // U\n          udata[i][j] = 0;\n        } // check column exists in lower triangular matrix\n\n\n        if (j < rows) {\n          // L\n          ldata[i][j] = data[i][j];\n        }\n      }\n    } // l matrix\n\n\n    var l = new DenseMatrix({\n      data: ldata,\n      size: lsize\n    }); // u matrix\n\n    var u = new DenseMatrix({\n      data: udata,\n      size: usize\n    }); // p vector\n\n    var pv = [];\n\n    for (i = 0, n = p.length; i < n; i++) {\n      pv[p[i]] = i;\n    } // return matrices\n\n\n    return {\n      L: l,\n      U: u,\n      p: pv,\n      toString: function toString() {\n        return 'L: ' + this.L.toString() + '\\nU: ' + this.U.toString() + '\\nP: ' + this.p;\n      }\n    };\n  }\n\n  function _sparseLUP(m) {\n    // rows & columns\n    var rows = m._size[0];\n    var columns = m._size[1]; // minimum rows and columns\n\n    var n = Math.min(rows, columns); // matrix arrays (will not be modified, thanks to permutation vector)\n\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr; // l matrix arrays\n\n    var lvalues = [];\n    var lindex = [];\n    var lptr = [];\n    var lsize = [rows, n]; // u matrix arrays\n\n    var uvalues = [];\n    var uindex = [];\n    var uptr = [];\n    var usize = [n, columns]; // vars\n\n    var i, j, k; // permutation vectors, (current index -> original index) and (original index -> current index)\n\n    var pvCo = [];\n    var pvOc = [];\n\n    for (i = 0; i < rows; i++) {\n      pvCo[i] = i;\n      pvOc[i] = i;\n    } // swap indices in permutation vectors (condition x < y)!\n\n\n    var swapIndeces = function swapIndeces(x, y) {\n      // find pv indeces getting data from x and y\n      var kx = pvOc[x];\n      var ky = pvOc[y]; // update permutation vector current -> original\n\n      pvCo[kx] = y;\n      pvCo[ky] = x; // update permutation vector original -> current\n\n      pvOc[x] = ky;\n      pvOc[y] = kx;\n    }; // loop columns\n\n\n    var _loop = function _loop() {\n      // sparse accumulator\n      var spa = new Spa(); // check lower triangular matrix has a value @ column j\n\n      if (j < rows) {\n        // update ptr\n        lptr.push(lvalues.length); // first value in j column for lower triangular matrix\n\n        lvalues.push(1);\n        lindex.push(j);\n      } // update ptr\n\n\n      uptr.push(uvalues.length); // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n\n      var k0 = ptr[j];\n      var k1 = ptr[j + 1]; // copy column j into sparse accumulator\n\n      for (k = k0; k < k1; k++) {\n        // row\n        i = index[k]; // copy column values into sparse accumulator (use permutation vector)\n\n        spa.set(pvCo[i], values[k]);\n      } // skip first column in upper triangular matrix\n\n\n      if (j > 0) {\n        // loop rows in column j (above diagonal)\n        spa.forEach(0, j - 1, function (k, vkj) {\n          // loop rows in column k (L)\n          SparseMatrix._forEachRow(k, lvalues, lindex, lptr, function (i, vik) {\n            // check row is below k\n            if (i > k) {\n              // update spa value\n              spa.accumulate(i, unaryMinus(multiplyScalar(vik, vkj)));\n            }\n          });\n        });\n      } // row with larger value in spa, row >= j\n\n\n      var pi = j;\n      var vjj = spa.get(j);\n      var pabsv = abs(vjj); // loop values in spa (order by row, below diagonal)\n\n      spa.forEach(j + 1, rows - 1, function (x, v) {\n        // absolute value\n        var absv = abs(v); // value is greater than pivote value\n\n        if (larger(absv, pabsv)) {\n          // store row\n          pi = x; // update max value\n\n          pabsv = absv; // value @ [j, j]\n\n          vjj = v;\n        }\n      }); // swap rows (j <-> pi)\n\n      if (j !== pi) {\n        // swap values j <-> pi in L\n        SparseMatrix._swapRows(j, pi, lsize[1], lvalues, lindex, lptr); // swap values j <-> pi in U\n\n\n        SparseMatrix._swapRows(j, pi, usize[1], uvalues, uindex, uptr); // swap values in spa\n\n\n        spa.swap(j, pi); // update permutation vector (swap values @ j, pi)\n\n        swapIndeces(j, pi);\n      } // loop values in spa (order by row)\n\n\n      spa.forEach(0, rows - 1, function (x, v) {\n        // check we are above diagonal\n        if (x <= j) {\n          // update upper triangular matrix\n          uvalues.push(v);\n          uindex.push(x);\n        } else {\n          // update value\n          v = divideScalar(v, vjj); // check value is non zero\n\n          if (!equalScalar(v, 0)) {\n            // update lower triangular matrix\n            lvalues.push(v);\n            lindex.push(x);\n          }\n        }\n      });\n    };\n\n    for (j = 0; j < columns; j++) {\n      _loop();\n    } // update ptrs\n\n\n    uptr.push(uvalues.length);\n    lptr.push(lvalues.length); // return matrices\n\n    return {\n      L: new SparseMatrix({\n        values: lvalues,\n        index: lindex,\n        ptr: lptr,\n        size: lsize\n      }),\n      U: new SparseMatrix({\n        values: uvalues,\n        index: uindex,\n        ptr: uptr,\n        size: usize\n      }),\n      p: pvCo,\n      toString: function toString() {\n        return 'L: ' + this.L.toString() + '\\nU: ' + this.U.toString() + '\\nP: ' + this.p;\n      }\n    };\n  }\n});\nexports.createLup = createLup;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createLup","_object","_factory","factory","name","dependencies","_ref","_denseLUP","m","rows","_size","columns","n","Math","min","data","clone","_data","ldata","lsize","udata","usize","j","k","p","i","s","addScalar","multiplyScalar","subtract","pi","vjj","pabsv","v","absv","abs","larger","DenseMatrix","_swapRows","equalScalar","vij","divideScalar","l","size","u","pv","length","L","U","toString","_sparseLUP","values","_values","index","_index","ptr","_ptr","lvalues","lindex","lptr","uvalues","uindex","uptr","pvCo","pvOc","swapIndeces","x","y","kx","ky","_loop","spa","Spa","push","k1","k0","set","forEach","vkj","SparseMatrix","_forEachRow","vik","accumulate","unaryMinus","get","swap","typed","matrix","Array","a","r","valueOf"]
}
