{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$arithmetic$divide.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,6DAAA,CAAkF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG1HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,YAAR,CAAuB,IAAK,EAExBC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAEf,KAAIQ,QAAUR,OAAA,CAAQ,iDAAR,CAAd,CAEIS,WAAaT,OAAA,CAAQ,kEAAR,CAFjB,CAIIU,YAAcV,OAAA,CAAQ,kEAAR,CAIdM;OAAAA,CAA8B,CAAC,CAAA,CAAGC,MAASI,CAAAA,OAAb,EAFvBC,QAEuB,CADfC,oDAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CACe,CAA0C,QAAS,CAACC,IAAD,CAAO,CAAA,IACtFC,MAAQD,IAAKC,CAAAA,KADyE,CAEtFC,OAASF,IAAKE,CAAAA,MAFwE,CAGtFC,SAAWH,IAAKG,CAAAA,QAHsE,CAItFC,YAAcJ,IAAKI,CAAAA,WAJmE,CAKtFC,aAAeL,IAAKK,CAAAA,YALkE,CAMtFC,IAAMN,IAAKM,CAAAA,GAN2E,CAOtFC,YAAc,CAAC,CAAA,CAAGZ,UAAWa,CAAAA,iBAAf,EAAkC,CAClDP,MAAOA,KAD2C,CAElDG,YAAaA,WAFqC,CAAlC,CAPwE,CAWtFK,YAAc,CAAC,CAAA,CAAGb,WAAYc,CAAAA,iBAAhB,EAAmC,CACnDT,MAAOA,KAD4C,CAAnC,CAmClB,OAAOA,MAAA,CAAM,QAAN,CAAgB,CAAC,CAAA,CAAGP,OAAQiB,CAAAA,MAAZ,EAAoB,CAEzC,iCAAkCC,QAA+B,CAACC,CAAD,CAAIC,CAAJ,CAAO,CAKtE,MAAOX,SAAA,CAASU,CAAT;AAAYP,GAAA,CAAIQ,CAAJ,CAAZ,CAL+D,CAF/B,CASzC,mBAAoBC,QAAuB,CAACF,CAAD,CAAIC,CAAJ,CAAO,CAChD,MAAOL,YAAA,CAAYI,CAAZ,CAAeC,CAAf,CAAkBT,YAAlB,CAAgC,CAAA,CAAhC,CADyC,CATT,CAYzC,oBAAqBW,QAAwB,CAACH,CAAD,CAAIC,CAAJ,CAAO,CAClD,MAAOP,YAAA,CAAYM,CAAZ,CAAeC,CAAf,CAAkBT,YAAlB,CAAgC,CAAA,CAAhC,CAD2C,CAZX,CAezC,aAAcY,QAAiB,CAACJ,CAAD,CAAIC,CAAJ,CAAO,CAEpC,MAAOL,YAAA,CAAYP,MAAA,CAAOW,CAAP,CAAZ,CAAuBC,CAAvB,CAA0BT,YAA1B,CAAwC,CAAA,CAAxC,CAA+Ca,CAAAA,OAA/C,EAF6B,CAfG,CAmBzC,sBAAuBC,QAAuB,CAACN,CAAD,CAAIC,CAAJ,CAAO,CACnD,MAAOX,SAAA,CAASU,CAAT,CAAYP,GAAA,CAAIQ,CAAJ,CAAZ,CAD4C,CAnBZ,CAApB,CAsBpBT,YAAae,CAAAA,UAtBO,CAAhB,CA9CmF,CAA1D,CAsElChC,QAAQI,CAAAA,YAAR,CAAuBA,OAxFmG;",
"sources":["node_modules/mathjs/lib/cjs/function/arithmetic/divide.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$arithmetic$divide\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createDivide = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _object = require(\"../../utils/object.js\");\n\nvar _algorithm = require(\"../../type/matrix/utils/algorithm11.js\");\n\nvar _algorithm2 = require(\"../../type/matrix/utils/algorithm14.js\");\n\nvar name = 'divide';\nvar dependencies = ['typed', 'matrix', 'multiply', 'equalScalar', 'divideScalar', 'inv'];\nvar createDivide = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      multiply = _ref.multiply,\n      equalScalar = _ref.equalScalar,\n      divideScalar = _ref.divideScalar,\n      inv = _ref.inv;\n  var algorithm11 = (0, _algorithm.createAlgorithm11)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm14 = (0, _algorithm2.createAlgorithm14)({\n    typed: typed\n  });\n  /**\n   * Divide two values, `x / y`.\n   * To divide matrices, `x` is multiplied with the inverse of `y`: `x * inv(y)`.\n   *\n   * Syntax:\n   *\n   *    math.divide(x, y)\n   *\n   * Examples:\n   *\n   *    math.divide(2, 3)            // returns number 0.6666666666666666\n   *\n   *    const a = math.complex(5, 14)\n   *    const b = math.complex(4, 1)\n   *    math.divide(a, b)            // returns Complex 2 + 3i\n   *\n   *    const c = [[7, -6], [13, -4]]\n   *    const d = [[1, 2], [4, 3]]\n   *    math.divide(c, d)            // returns Array [[-9, 4], [-11, 6]]\n   *\n   *    const e = math.unit('18 km')\n   *    math.divide(e, 4.5)          // returns Unit 4 km\n   *\n   * See also:\n   *\n   *    multiply\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x   Numerator\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} y          Denominator\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                      Quotient, `x / y`\n   */\n\n  return typed('divide', (0, _object.extend)({\n    // we extend the signatures of divideScalar with signatures dealing with matrices\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(x, y) {\n      // TODO: implement matrix right division using pseudo inverse\n      // https://www.mathworks.nl/help/matlab/ref/mrdivide.html\n      // https://www.gnu.org/software/octave/doc/interpreter/Arithmetic-Ops.html\n      // https://stackoverflow.com/questions/12263932/how-does-gnu-octave-matrix-division-work-getting-unexpected-behaviour\n      return multiply(x, inv(y));\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, divideScalar, false);\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm11(x, y, divideScalar, false);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, divideScalar, false).valueOf();\n    },\n    'any, Array | Matrix': function anyArrayMatrix(x, y) {\n      return multiply(x, inv(y));\n    }\n  }, divideScalar.signatures));\n});\nexports.createDivide = createDivide;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createDivide","_factory","_object","_algorithm","_algorithm2","factory","name","dependencies","_ref","typed","matrix","multiply","equalScalar","divideScalar","inv","algorithm11","createAlgorithm11","algorithm14","createAlgorithm14","extend","ArrayMatrixArrayMatrix","x","y","DenseMatrixAny","SparseMatrixAny","ArrayAny","valueOf","anyArrayMatrix","signatures"]
}
