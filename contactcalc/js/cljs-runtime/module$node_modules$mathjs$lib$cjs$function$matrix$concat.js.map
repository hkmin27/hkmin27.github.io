{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$matrix$concat.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/function/matrix/concat.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$matrix$concat\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createConcat = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _object = require(\"../../utils/object.js\");\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _IndexError = require(\"../../error/IndexError.js\");\n\nvar _DimensionError = require(\"../../error/DimensionError.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'concat';\nvar dependencies = ['typed', 'matrix', 'isInteger'];\nvar createConcat = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      isInteger = _ref.isInteger;\n\n  /**\n   * Concatenate two or more matrices.\n   *\n   * Syntax:\n   *\n   *     math.concat(A, B, C, ...)\n   *     math.concat(A, B, C, ..., dim)\n   *\n   * Where:\n   *\n   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.\n   *   By default the last dimension of the matrices.\n   *\n   * Examples:\n   *\n   *    const A = [[1, 2], [5, 6]]\n   *    const B = [[3, 4], [7, 8]]\n   *\n   *    math.concat(A, B)                  // returns [[1, 2, 3, 4], [5, 6, 7, 8]]\n   *    math.concat(A, B, 0)               // returns [[1, 2], [5, 6], [3, 4], [7, 8]]\n   *    math.concat('hello', ' ', 'world') // returns 'hello world'\n   *\n   * See also:\n   *\n   *    size, squeeze, subset, transpose\n   *\n   * @param {... Array | Matrix} args     Two or more matrices\n   * @return {Array | Matrix} Concatenated matrix\n   */\n  return typed(name, {\n    // TODO: change signature to '...Array | Matrix, dim?' when supported\n    '...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumber(args) {\n      var i;\n      var len = args.length;\n      var dim = -1; // zero-based dimension\n\n      var prevDim;\n      var asMatrix = false;\n      var matrices = []; // contains multi dimensional arrays\n\n      for (i = 0; i < len; i++) {\n        var arg = args[i]; // test whether we need to return a Matrix (if not we return an Array)\n\n        if ((0, _is.isMatrix)(arg)) {\n          asMatrix = true;\n        }\n\n        if ((0, _is.isNumber)(arg) || (0, _is.isBigNumber)(arg)) {\n          if (i !== len - 1) {\n            throw new Error('Dimension must be specified as last argument');\n          } // last argument contains the dimension on which to concatenate\n\n\n          prevDim = dim;\n          dim = arg.valueOf(); // change BigNumber to number\n\n          if (!isInteger(dim)) {\n            throw new TypeError('Integer number expected for dimension');\n          }\n\n          if (dim < 0 || i > 0 && dim > prevDim) {\n            // TODO: would be more clear when throwing a DimensionError here\n            throw new _IndexError.IndexError(dim, prevDim + 1);\n          }\n        } else {\n          // this is a matrix or array\n          var m = (0, _object.clone)(arg).valueOf();\n          var size = (0, _array.arraySize)(m);\n          matrices[i] = m;\n          prevDim = dim;\n          dim = size.length - 1; // verify whether each of the matrices has the same number of dimensions\n\n          if (i > 0 && dim !== prevDim) {\n            throw new _DimensionError.DimensionError(prevDim + 1, dim + 1);\n          }\n        }\n      }\n\n      if (matrices.length === 0) {\n        throw new SyntaxError('At least one matrix expected');\n      }\n\n      var res = matrices.shift();\n\n      while (matrices.length) {\n        res = _concat(res, matrices.shift(), dim, 0);\n      }\n\n      return asMatrix ? matrix(res) : res;\n    },\n    '...string': function string(args) {\n      return args.join('');\n    }\n  });\n});\n/**\n * Recursively concatenate two matrices.\n * The contents of the matrices is not cloned.\n * @param {Array} a             Multi dimensional array\n * @param {Array} b             Multi dimensional array\n * @param {number} concatDim    The dimension on which to concatenate (zero-based)\n * @param {number} dim          The current dim (zero-based)\n * @return {Array} c            The concatenated matrix\n * @private\n */\n\nexports.createConcat = createConcat;\n\nfunction _concat(a, b, concatDim, dim) {\n  if (dim < concatDim) {\n    // recurse into next dimension\n    if (a.length !== b.length) {\n      throw new _DimensionError.DimensionError(a.length, b.length);\n    }\n\n    var c = [];\n\n    for (var i = 0; i < a.length; i++) {\n      c[i] = _concat(a[i], b[i], concatDim, dim + 1);\n    }\n\n    return c;\n  } else {\n    // concatenate this dimension\n    return a.concat(b);\n  }\n}\n};"],
"names":["shadow$provide","global","require","module","exports","_concat","a","b","concatDim","dim","length","_DimensionError","DimensionError","c","i","concat","Object","defineProperty","value","createConcat","_is","_object","_array","_IndexError","_factory","factory","name","dependencies","_ref","typed","matrix","isInteger","ArrayMatrixNumberBigNumber","args","len","asMatrix","matrices","arg","isMatrix","isNumber","isBigNumber","Error","prevDim","valueOf","TypeError","IndexError","m","clone","size","arraySize","SyntaxError","res","shift","string","join"]
}
