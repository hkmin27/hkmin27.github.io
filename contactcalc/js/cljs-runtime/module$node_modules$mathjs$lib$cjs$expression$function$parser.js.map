{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$expression$function$parser.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,CAAA,6DAAA,CAAkF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG1HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,YAAR,CAAuB,IAAK,EAExBC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAIXM,OAAAA,CAA8B,CAAC,CAAA,CAAGC,MAASC,CAAAA,OAAb,EAFvBC,QAEuB,CADfC,CAAC,OAADA,CAAU,QAAVA,CACe,CAA0C,QAAS,CAACC,IAAD,CAAO,CAAA,IACtFC,MAAQD,IAAKC,CAAAA,KADyE,CAEtFC,OAASF,IAAKE,CAAAA,MA6ClB,OAAOD,MAAA,CAjDEH,QAiDF,CAAY,CACjB,GAAIK,QAAU,EAAG,CACf,MAAO,KAAID,MADI,CADA,CAAZ,CA/CmF,CAA1D,CAqDlCX,QAAQI,CAAAA,YAAR,CAAuBA,MAjEmG;",
"sources":["node_modules/mathjs/lib/cjs/expression/function/parser.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$expression$function$parser\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createParser = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'parser';\nvar dependencies = ['typed', 'Parser'];\nvar createParser = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      Parser = _ref.Parser;\n\n  /**\n   * Create a parser. The function creates a new `math.Parser` object.\n   *\n   * Syntax:\n   *\n   *    math.parser()\n   *\n   * Examples:\n   *\n   *     const parser = new math.parser()\n   *\n   *     // evaluate expressions\n   *     const a = parser.evaluate('sqrt(3^2 + 4^2)') // 5\n   *     const b = parser.evaluate('sqrt(-4)')        // 2i\n   *     const c = parser.evaluate('2 inch in cm')    // 5.08 cm\n   *     const d = parser.evaluate('cos(45 deg)')     // 0.7071067811865476\n   *\n   *     // define variables and functions\n   *     parser.evaluate('x = 7 / 2')                 // 3.5\n   *     parser.evaluate('x + 3')                     // 6.5\n   *     parser.evaluate('function f(x, y) = x^y')    // f(x, y)\n   *     parser.evaluate('f(2, 3)')                   // 8\n   *\n   *     // get and set variables and functions\n   *     const x = parser.get('x')                // 7\n   *     const f = parser.get('f')                // function\n   *     const g = f(3, 2)                        // 9\n   *     parser.set('h', 500)\n   *     const i = parser.evaluate('h / 2')       // 250\n   *     parser.set('hello', function (name) {\n   *       return 'hello, ' + name + '!'\n   *     })\n   *     parser.evaluate('hello(\"user\")')         // \"hello, user!\"\n   *\n   *     // clear defined functions and variables\n   *     parser.clear()\n   *\n   * See also:\n   *\n   *    evaluate, compile, parse\n   *\n   * @return {Parser} Parser\n   */\n  return typed(name, {\n    '': function _() {\n      return new Parser();\n    }\n  });\n});\nexports.createParser = createParser;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createParser","_factory","factory","name","dependencies","_ref","typed","Parser","_"]
}
