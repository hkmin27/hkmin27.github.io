{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$arithmetic$multiply.js",
"lineCount":19,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/function/arithmetic/multiply.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$arithmetic$multiply\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMultiply = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _object = require(\"../../utils/object.js\");\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _algorithm = require(\"../../type/matrix/utils/algorithm11.js\");\n\nvar _algorithm2 = require(\"../../type/matrix/utils/algorithm14.js\");\n\nvar name = 'multiply';\nvar dependencies = ['typed', 'matrix', 'addScalar', 'multiplyScalar', 'equalScalar', 'dot'];\nvar createMultiply = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      addScalar = _ref.addScalar,\n      multiplyScalar = _ref.multiplyScalar,\n      equalScalar = _ref.equalScalar,\n      dot = _ref.dot;\n  var algorithm11 = (0, _algorithm.createAlgorithm11)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm14 = (0, _algorithm2.createAlgorithm14)({\n    typed: typed\n  });\n\n  function _validateMatrixDimensions(size1, size2) {\n    // check left operand dimensions\n    switch (size1.length) {\n      case 1:\n        // check size2\n        switch (size2.length) {\n          case 1:\n            // Vector x Vector\n            if (size1[0] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Vectors must have the same length');\n            }\n\n            break;\n\n          case 2:\n            // Vector x Matrix\n            if (size1[0] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Vector length (' + size1[0] + ') must match Matrix rows (' + size2[0] + ')');\n            }\n\n            break;\n\n          default:\n            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');\n        }\n\n        break;\n\n      case 2:\n        // check size2\n        switch (size2.length) {\n          case 1:\n            // Matrix x Vector\n            if (size1[1] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Matrix columns (' + size1[1] + ') must match Vector length (' + size2[0] + ')');\n            }\n\n            break;\n\n          case 2:\n            // Matrix x Matrix\n            if (size1[1] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Matrix A columns (' + size1[1] + ') must match Matrix B rows (' + size2[0] + ')');\n            }\n\n            break;\n\n          default:\n            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');\n        }\n\n        break;\n\n      default:\n        throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix A has ' + size1.length + ' dimensions)');\n    }\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (N)\n   * @param {Matrix} b            Dense Vector   (N)\n   *\n   * @return {number}             Scalar value\n   */\n\n\n  function _multiplyVectorVector(a, b, n) {\n    // check empty vector\n    if (n === 0) {\n      throw new Error('Cannot multiply two empty vectors');\n    }\n\n    return dot(a, b);\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (M)\n   * @param {Matrix} b            Matrix         (MxN)\n   *\n   * @return {Matrix}             Dense Vector   (N)\n   */\n\n\n  function _multiplyVectorMatrix(a, b) {\n    // process storage\n    if (b.storage() !== 'dense') {\n      throw new Error('Support for SparseMatrix not implemented');\n    }\n\n    return _multiplyVectorDenseMatrix(a, b);\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (M)\n   * @param {Matrix} b            Dense Matrix   (MxN)\n   *\n   * @return {Matrix}             Dense Vector   (N)\n   */\n\n\n  function _multiplyVectorDenseMatrix(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b dense\n\n    var bdata = b._data;\n    var bsize = b._size;\n    var bdt = b._datatype; // rows & columns\n\n    var alength = asize[0];\n    var bcolumns = bsize[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    } // result\n\n\n    var c = []; // loop matrix columns\n\n    for (var j = 0; j < bcolumns; j++) {\n      // sum (do not initialize it with zero)\n      var sum = mf(adata[0], bdata[0][j]); // loop vector\n\n      for (var i = 1; i < alength; i++) {\n        // multiply & accumulate\n        sum = af(sum, mf(adata[i], bdata[i][j]));\n      }\n\n      c[j] = sum;\n    } // return matrix\n\n\n    return a.createDenseMatrix({\n      data: c,\n      size: [bcolumns],\n      datatype: dt\n    });\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Matrix         (MxN)\n   * @param {Matrix} b            Dense Vector   (N)\n   *\n   * @return {Matrix}             Dense Vector   (M)\n   */\n\n\n  var _multiplyMatrixVector = typed('_multiplyMatrixVector', {\n    'DenseMatrix, any': _multiplyDenseMatrixVector,\n    'SparseMatrix, any': _multiplySparseMatrixVector\n  });\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Matrix         (MxN)\n   * @param {Matrix} b            Matrix         (NxC)\n   *\n   * @return {Matrix}             Matrix         (MxC)\n   */\n\n\n  var _multiplyMatrixMatrix = typed('_multiplyMatrixMatrix', {\n    'DenseMatrix, DenseMatrix': _multiplyDenseMatrixDenseMatrix,\n    'DenseMatrix, SparseMatrix': _multiplyDenseMatrixSparseMatrix,\n    'SparseMatrix, DenseMatrix': _multiplySparseMatrixDenseMatrix,\n    'SparseMatrix, SparseMatrix': _multiplySparseMatrixSparseMatrix\n  });\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix  (MxN)\n   * @param {Matrix} b            Dense Vector (N)\n   *\n   * @return {Matrix}             Dense Vector (M)\n   */\n\n\n  function _multiplyDenseMatrixVector(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b dense\n\n    var bdata = b._data;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = asize[0];\n    var acolumns = asize[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    } // result\n\n\n    var c = []; // loop matrix a rows\n\n    for (var i = 0; i < arows; i++) {\n      // current row\n      var row = adata[i]; // sum (do not initialize it with zero)\n\n      var sum = mf(row[0], bdata[0]); // loop matrix a columns\n\n      for (var j = 1; j < acolumns; j++) {\n        // multiply & accumulate\n        sum = af(sum, mf(row[j], bdata[j]));\n      }\n\n      c[i] = sum;\n    } // return matrix\n\n\n    return a.createDenseMatrix({\n      data: c,\n      size: [arows],\n      datatype: dt\n    });\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix    (MxN)\n   * @param {Matrix} b            DenseMatrix    (NxC)\n   *\n   * @return {Matrix}             DenseMatrix    (MxC)\n   */\n\n\n  function _multiplyDenseMatrixDenseMatrix(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b dense\n\n    var bdata = b._data;\n    var bsize = b._size;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = asize[0];\n    var acolumns = asize[1];\n    var bcolumns = bsize[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    } // result\n\n\n    var c = []; // loop matrix a rows\n\n    for (var i = 0; i < arows; i++) {\n      // current row\n      var row = adata[i]; // initialize row array\n\n      c[i] = []; // loop matrix b columns\n\n      for (var j = 0; j < bcolumns; j++) {\n        // sum (avoid initializing sum to zero)\n        var sum = mf(row[0], bdata[0][j]); // loop matrix a columns\n\n        for (var x = 1; x < acolumns; x++) {\n          // multiply & accumulate\n          sum = af(sum, mf(row[x], bdata[x][j]));\n        }\n\n        c[i][j] = sum;\n      }\n    } // return matrix\n\n\n    return a.createDenseMatrix({\n      data: c,\n      size: [arows, bcolumns],\n      datatype: dt\n    });\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix    (MxN)\n   * @param {Matrix} b            SparseMatrix   (NxC)\n   *\n   * @return {Matrix}             SparseMatrix   (MxC)\n   */\n\n\n  function _multiplyDenseMatrixSparseMatrix(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b sparse\n\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate b matrix\n\n    if (!bvalues) {\n      throw new Error('Cannot multiply Dense Matrix times Pattern only Matrix');\n    } // rows & columns\n\n\n    var arows = asize[0];\n    var bcolumns = bsize[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // equalScalar signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt);\n    } // result\n\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // c matrix\n\n    var c = b.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    }); // loop b columns\n\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length; // indeces in column jb\n\n      var kb0 = bptr[jb];\n      var kb1 = bptr[jb + 1]; // do not process column jb if no data exists\n\n      if (kb1 > kb0) {\n        // last row mark processed\n        var last = 0; // loop a rows\n\n        for (var i = 0; i < arows; i++) {\n          // column mark\n          var mark = i + 1; // C[i, jb]\n\n          var cij = void 0; // values in b column j\n\n          for (var kb = kb0; kb < kb1; kb++) {\n            // row\n            var ib = bindex[kb]; // check value has been initialized\n\n            if (last !== mark) {\n              // first value in column jb\n              cij = mf(adata[i][ib], bvalues[kb]); // update mark\n\n              last = mark;\n            } else {\n              // accumulate value\n              cij = af(cij, mf(adata[i][ib], bvalues[kb]));\n            }\n          } // check column has been processed and value != 0\n\n\n          if (last === mark && !eq(cij, zero)) {\n            // push row & value\n            cindex.push(i);\n            cvalues.push(cij);\n          }\n        }\n      }\n    } // update ptr\n\n\n    cptr[bcolumns] = cindex.length; // return sparse matrix\n\n    return c;\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix    (MxN)\n   * @param {Matrix} b            Dense Vector (N)\n   *\n   * @return {Matrix}             SparseMatrix    (M, 1)\n   */\n\n\n  function _multiplySparseMatrixVector(a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype; // validate a matrix\n\n    if (!avalues) {\n      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');\n    } // b dense\n\n\n    var bdata = b._data;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = a._size[0];\n    var brows = b._size[0]; // result\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // equalScalar signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt);\n    } // workspace\n\n\n    var x = []; // vector with marks indicating a value x[i] exists in a given column\n\n    var w = []; // update ptr\n\n    cptr[0] = 0; // rows in b\n\n    for (var ib = 0; ib < brows; ib++) {\n      // b[ib]\n      var vbi = bdata[ib]; // check b[ib] != 0, avoid loops\n\n      if (!eq(vbi, zero)) {\n        // A values & index in ib column\n        for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n          // a row\n          var ia = aindex[ka]; // check value exists in current j\n\n          if (!w[ia]) {\n            // ia is new entry in j\n            w[ia] = true; // add i to pattern of C\n\n            cindex.push(ia); // x(ia) = A\n\n            x[ia] = mf(vbi, avalues[ka]);\n          } else {\n            // i exists in C already\n            x[ia] = af(x[ia], mf(vbi, avalues[ka]));\n          }\n        }\n      }\n    } // copy values from x to column jb of c\n\n\n    for (var p1 = cindex.length, p = 0; p < p1; p++) {\n      // row\n      var ic = cindex[p]; // copy value\n\n      cvalues[p] = x[ic];\n    } // update ptr\n\n\n    cptr[1] = cindex.length; // return sparse matrix\n\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, 1],\n      datatype: dt\n    });\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix      (MxN)\n   * @param {Matrix} b            DenseMatrix       (NxC)\n   *\n   * @return {Matrix}             SparseMatrix      (MxC)\n   */\n\n\n  function _multiplySparseMatrixDenseMatrix(a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype; // validate a matrix\n\n    if (!avalues) {\n      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');\n    } // b dense\n\n\n    var bdata = b._data;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = a._size[0];\n    var brows = b._size[0];\n    var bcolumns = b._size[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // equalScalar signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt);\n    } // result\n\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // c matrix\n\n    var c = a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    }); // workspace\n\n    var x = []; // vector with marks indicating a value x[i] exists in a given column\n\n    var w = []; // loop b columns\n\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length; // mark in workspace for current column\n\n      var mark = jb + 1; // rows in jb\n\n      for (var ib = 0; ib < brows; ib++) {\n        // b[ib, jb]\n        var vbij = bdata[ib][jb]; // check b[ib, jb] != 0, avoid loops\n\n        if (!eq(vbij, zero)) {\n          // A values & index in ib column\n          for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // a row\n            var ia = aindex[ka]; // check value exists in current j\n\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark; // add i to pattern of C\n\n              cindex.push(ia); // x(ia) = A\n\n              x[ia] = mf(vbij, avalues[ka]);\n            } else {\n              // i exists in C already\n              x[ia] = af(x[ia], mf(vbij, avalues[ka]));\n            }\n          }\n        }\n      } // copy values from x to column jb of c\n\n\n      for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {\n        // row\n        var ic = cindex[p]; // copy value\n\n        cvalues[p] = x[ic];\n      }\n    } // update ptr\n\n\n    cptr[bcolumns] = cindex.length; // return sparse matrix\n\n    return c;\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix      (MxN)\n   * @param {Matrix} b            SparseMatrix      (NxC)\n   *\n   * @return {Matrix}             SparseMatrix      (MxC)\n   */\n\n\n  function _multiplySparseMatrixSparseMatrix(a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype; // b sparse\n\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = a._size[0];\n    var bcolumns = b._size[1]; // flag indicating both matrices (a & b) contain data\n\n    var values = avalues && bvalues; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    } // result\n\n\n    var cvalues = values ? [] : undefined;\n    var cindex = [];\n    var cptr = []; // c matrix\n\n    var c = a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    }); // workspace\n\n    var x = values ? [] : undefined; // vector with marks indicating a value x[i] exists in a given column\n\n    var w = []; // variables\n\n    var ka, ka0, ka1, kb, kb0, kb1, ia, ib; // loop b columns\n\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length; // mark in workspace for current column\n\n      var mark = jb + 1; // B values & index in j\n\n      for (kb0 = bptr[jb], kb1 = bptr[jb + 1], kb = kb0; kb < kb1; kb++) {\n        // b row\n        ib = bindex[kb]; // check we need to process values\n\n        if (values) {\n          // loop values in a[:,ib]\n          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // row\n            ia = aindex[ka]; // check value exists in current j\n\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark; // add i to pattern of C\n\n              cindex.push(ia); // x(ia) = A\n\n              x[ia] = mf(bvalues[kb], avalues[ka]);\n            } else {\n              // i exists in C already\n              x[ia] = af(x[ia], mf(bvalues[kb], avalues[ka]));\n            }\n          }\n        } else {\n          // loop values in a[:,ib]\n          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // row\n            ia = aindex[ka]; // check value exists in current j\n\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark; // add i to pattern of C\n\n              cindex.push(ia);\n            }\n          }\n        }\n      } // check we need to process matrix values (pattern matrix)\n\n\n      if (values) {\n        // copy values from x to column jb of c\n        for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {\n          // row\n          var ic = cindex[p]; // copy value\n\n          cvalues[p] = x[ic];\n        }\n      }\n    } // update ptr\n\n\n    cptr[bcolumns] = cindex.length; // return sparse matrix\n\n    return c;\n  }\n  /**\n   * Multiply two or more values, `x * y`.\n   * For matrices, the matrix product is calculated.\n   *\n   * Syntax:\n   *\n   *    math.multiply(x, y)\n   *    math.multiply(x, y, z, ...)\n   *\n   * Examples:\n   *\n   *    math.multiply(4, 5.2)        // returns number 20.8\n   *    math.multiply(2, 3, 4)       // returns number 24\n   *\n   *    const a = math.complex(2, 3)\n   *    const b = math.complex(4, 1)\n   *    math.multiply(a, b)          // returns Complex 5 + 14i\n   *\n   *    const c = [[1, 2], [4, 3]]\n   *    const d = [[1, 2, 3], [3, -4, 7]]\n   *    math.multiply(c, d)          // returns Array [[7, -6, 17], [13, -4, 33]]\n   *\n   *    const e = math.unit('2.1 km')\n   *    math.multiply(3, e)          // returns Unit 6.3 km\n   *\n   * See also:\n   *\n   *    divide, prod, cross, dot\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to multiply\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to multiply\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Multiplication of `x` and `y`\n   */\n\n\n  return typed(name, (0, _object.extend)({\n    // we extend the signatures of multiplyScalar with signatures dealing with matrices\n    'Array, Array': function ArrayArray(x, y) {\n      // check dimensions\n      _validateMatrixDimensions((0, _array.arraySize)(x), (0, _array.arraySize)(y)); // use dense matrix implementation\n\n\n      var m = this(matrix(x), matrix(y)); // return array or scalar\n\n      return (0, _is.isMatrix)(m) ? m.valueOf() : m;\n    },\n    'Matrix, Matrix': function MatrixMatrix(x, y) {\n      // dimensions\n      var xsize = x.size();\n      var ysize = y.size(); // check dimensions\n\n      _validateMatrixDimensions(xsize, ysize); // process dimensions\n\n\n      if (xsize.length === 1) {\n        // process y dimensions\n        if (ysize.length === 1) {\n          // Vector * Vector\n          return _multiplyVectorVector(x, y, xsize[0]);\n        } // Vector * Matrix\n\n\n        return _multiplyVectorMatrix(x, y);\n      } // process y dimensions\n\n\n      if (ysize.length === 1) {\n        // Matrix * Vector\n        return _multiplyMatrixVector(x, y);\n      } // Matrix * Matrix\n\n\n      return _multiplyMatrixMatrix(x, y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use Matrix * Matrix implementation\n      return this(x, matrix(y));\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use Matrix * Matrix implementation\n      return this(matrix(x, y.storage()), y);\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm11(x, y, multiplyScalar, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, multiplyScalar, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm11(y, x, multiplyScalar, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, multiplyScalar, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();\n    },\n    'any, any': multiplyScalar,\n    'any, any, ...any': function anyAnyAny(x, y, rest) {\n      var result = this(x, y);\n\n      for (var i = 0; i < rest.length; i++) {\n        result = this(result, rest[i]);\n      }\n\n      return result;\n    }\n  }, multiplyScalar.signatures));\n});\nexports.createMultiply = createMultiply;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createMultiply","_factory","_is","_object","_array","_algorithm","_algorithm2","factory","name","dependencies","_ref","_validateMatrixDimensions","size1","size2","length","RangeError","Error","typed","matrix","addScalar","multiplyScalar","equalScalar","dot","algorithm11","createAlgorithm11","algorithm14","createAlgorithm14","_multiplyMatrixVector","_multiplyDenseMatrixVector","a","b","adata","_data","asize","_size","adt","_datatype","bdata","bdt","arows","acolumns","af","mf","dt","find","c","i","row","sum","j","createDenseMatrix","data","size","datatype","_multiplySparseMatrixVector","avalues","_values","aindex","_index","aptr","_ptr","brows","cvalues","cindex","cptr","eq","zero","convert","x","w","ib","vbi","ka1","ka","ka0","ia","push","p1","p","ic","createSparseMatrix","values","index","ptr","_multiplyMatrixMatrix","_multiplyDenseMatrixDenseMatrix","bcolumns","_multiplyDenseMatrixSparseMatrix","bvalues","bindex","bptr","bsize","jb","kb0","kb1","last","mark","cij","kb","_multiplySparseMatrixDenseMatrix","vbij","p0","_multiplySparseMatrixSparseMatrix","undefined","extend","ArrayArray","y","arraySize","m","isMatrix","valueOf","MatrixMatrix","xsize","ysize","n","storage","alength","MatrixArray","ArrayMatrix","SparseMatrixAny","DenseMatrixAny","anySparseMatrix","anyDenseMatrix","ArrayAny","anyArray","anyAnyAny","rest","result","signatures"]
}
