{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$utils$string.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/utils/string.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$utils$string\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.endsWith = endsWith;\nexports.format = format;\nexports.stringify = stringify;\nexports.escape = escape;\nexports.compareText = compareText;\n\nvar _is = require(\"./is.js\");\n\nvar _number = require(\"./number.js\");\n\nvar _formatter = require(\"./bignumber/formatter.js\");\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * Check if a text ends with a certain string.\n * @param {string} text\n * @param {string} search\n */\nfunction endsWith(text, search) {\n  var start = text.length - search.length;\n  var end = text.length;\n  return text.substring(start, end) === search;\n}\n/**\n * Format a value of any type into a string.\n *\n * Usage:\n *     math.format(value)\n *     math.format(value, precision)\n *\n * When value is a function:\n *\n * - When the function has a property `syntax`, it returns this\n *   syntax description.\n * - In other cases, a string `'function'` is returned.\n *\n * When `value` is an Object:\n *\n * - When the object contains a property `format` being a function, this\n *   function is invoked as `value.format(options)` and the result is returned.\n * - When the object has its own `toString` method, this method is invoked\n *   and the result is returned.\n * - In other cases the function will loop over all object properties and\n *   return JSON object notation like '{\"a\": 2, \"b\": 3}'.\n *\n * Example usage:\n *     math.format(2/7)                // '0.2857142857142857'\n *     math.format(math.pi, 3)         // '3.14'\n *     math.format(new Complex(2, 3))  // '2 + 3i'\n *     math.format('hello')            // '\"hello\"'\n *\n * @param {*} value             Value to be stringified\n * @param {Object | number | Function} [options]  Formatting options. See\n *                                                lib/utils/number:format for a\n *                                                description of the available\n *                                                options.\n * @return {string} str\n */\n\n\nfunction format(value, options) {\n  if (typeof value === 'number') {\n    return (0, _number.format)(value, options);\n  }\n\n  if ((0, _is.isBigNumber)(value)) {\n    return (0, _formatter.format)(value, options);\n  } // note: we use unsafe duck-typing here to check for Fractions, this is\n  // ok here since we're only invoking toString or concatenating its values\n\n\n  if (looksLikeFraction(value)) {\n    if (!options || options.fraction !== 'decimal') {\n      // output as ratio, like '1/3'\n      return value.s * value.n + '/' + value.d;\n    } else {\n      // output as decimal, like '0.(3)'\n      return value.toString();\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return formatArray(value, options);\n  }\n\n  if ((0, _is.isString)(value)) {\n    return '\"' + value + '\"';\n  }\n\n  if (typeof value === 'function') {\n    return value.syntax ? String(value.syntax) : 'function';\n  }\n\n  if (value && _typeof(value) === 'object') {\n    if (typeof value.format === 'function') {\n      return value.format(options);\n    } else if (value && value.toString(options) !== {}.toString()) {\n      // this object has a non-native toString method, use that one\n      return value.toString(options);\n    } else {\n      var entries = Object.keys(value).map(function (key) {\n        return '\"' + key + '\": ' + format(value[key], options);\n      });\n      return '{' + entries.join(', ') + '}';\n    }\n  }\n\n  return String(value);\n}\n/**\n * Stringify a value into a string enclosed in double quotes.\n * Unescaped double quotes and backslashes inside the value are escaped.\n * @param {*} value\n * @return {string}\n */\n\n\nfunction stringify(value) {\n  var text = String(value);\n  var escaped = '';\n  var i = 0;\n\n  while (i < text.length) {\n    var c = text.charAt(i);\n\n    if (c === '\\\\') {\n      escaped += c;\n      i++;\n      c = text.charAt(i);\n\n      if (c === '' || '\"\\\\/bfnrtu'.indexOf(c) === -1) {\n        escaped += '\\\\'; // no valid escape character -> escape it\n      }\n\n      escaped += c;\n    } else if (c === '\"') {\n      escaped += '\\\\\"';\n    } else {\n      escaped += c;\n    }\n\n    i++;\n  }\n\n  return '\"' + escaped + '\"';\n}\n/**\n * Escape special HTML characters\n * @param {*} value\n * @return {string}\n */\n\n\nfunction escape(value) {\n  var text = String(value);\n  text = text.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n  return text;\n}\n/**\n * Recursively format an n-dimensional matrix\n * Example output: \"[[1, 2], [3, 4]]\"\n * @param {Array} array\n * @param {Object | number | Function} [options]  Formatting options. See\n *                                                lib/utils/number:format for a\n *                                                description of the available\n *                                                options.\n * @returns {string} str\n */\n\n\nfunction formatArray(array, options) {\n  if (Array.isArray(array)) {\n    var str = '[';\n    var len = array.length;\n\n    for (var i = 0; i < len; i++) {\n      if (i !== 0) {\n        str += ', ';\n      }\n\n      str += formatArray(array[i], options);\n    }\n\n    str += ']';\n    return str;\n  } else {\n    return format(array, options);\n  }\n}\n/**\n * Check whether a value looks like a Fraction (unsafe duck-type check)\n * @param {*} value\n * @return {boolean}\n */\n\n\nfunction looksLikeFraction(value) {\n  return value && _typeof(value) === 'object' && typeof value.s === 'number' && typeof value.n === 'number' && typeof value.d === 'number' || false;\n}\n/**\n * Compare two strings\n * @param {string} x\n * @param {string} y\n * @returns {number}\n */\n\n\nfunction compareText(x, y) {\n  // we don't want to convert numbers to string, only accept string input\n  if (!(0, _is.isString)(x)) {\n    throw new TypeError('Unexpected type of argument in function compareText ' + '(expected: string or Array or Matrix, actual: ' + (0, _is.typeOf)(x) + ', index: 0)');\n  }\n\n  if (!(0, _is.isString)(y)) {\n    throw new TypeError('Unexpected type of argument in function compareText ' + '(expected: string or Array or Matrix, actual: ' + (0, _is.typeOf)(y) + ', index: 1)');\n  }\n\n  return x === y ? 0 : x > y ? 1 : -1;\n}\n};"],
"names":["shadow$provide","global","require","module","exports","_typeof","obj","Symbol","iterator","constructor","prototype","format","value","options","_number","_is","isBigNumber","_formatter","looksLikeFraction","fraction","toString","s","n","d","Array","isArray","formatArray","isString","syntax","String","Object","keys","map","entries","key","join","array","str","len","length","i","defineProperty","endsWith","text","search","substring","stringify","escaped","c","charAt","indexOf","escape","replace","compareText","x","y","TypeError","typeOf"]
}
