{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$algebra$rationalize.js",
"lineCount":21,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/function/algebra/rationalize.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$algebra$rationalize\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createRationalize = void 0;\n\nvar _number = require(\"../../utils/number.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _simplifyConstant = require(\"./simplify/simplifyConstant.js\");\n\nvar _simplifyCore = require(\"./simplify/simplifyCore.js\");\n\nvar name = 'rationalize';\nvar dependencies = ['config', 'typed', 'equal', 'isZero', 'add', 'subtract', 'multiply', 'divide', 'pow', 'parse', 'simplify', '?bignumber', '?fraction', 'mathWithTransform', 'ConstantNode', 'OperatorNode', 'FunctionNode', 'SymbolNode', 'ParenthesisNode'];\nvar createRationalize = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var config = _ref.config,\n      typed = _ref.typed,\n      equal = _ref.equal,\n      isZero = _ref.isZero,\n      add = _ref.add,\n      subtract = _ref.subtract,\n      multiply = _ref.multiply,\n      divide = _ref.divide,\n      pow = _ref.pow,\n      parse = _ref.parse,\n      simplify = _ref.simplify,\n      fraction = _ref.fraction,\n      bignumber = _ref.bignumber,\n      mathWithTransform = _ref.mathWithTransform,\n      ConstantNode = _ref.ConstantNode,\n      OperatorNode = _ref.OperatorNode,\n      FunctionNode = _ref.FunctionNode,\n      SymbolNode = _ref.SymbolNode,\n      ParenthesisNode = _ref.ParenthesisNode;\n  var simplifyConstant = (0, _simplifyConstant.createSimplifyConstant)({\n    typed: typed,\n    config: config,\n    mathWithTransform: mathWithTransform,\n    fraction: fraction,\n    bignumber: bignumber,\n    ConstantNode: ConstantNode,\n    OperatorNode: OperatorNode,\n    FunctionNode: FunctionNode,\n    SymbolNode: SymbolNode\n  });\n  var simplifyCore = (0, _simplifyCore.createSimplifyCore)({\n    equal: equal,\n    isZero: isZero,\n    add: add,\n    subtract: subtract,\n    multiply: multiply,\n    divide: divide,\n    pow: pow,\n    ConstantNode: ConstantNode,\n    OperatorNode: OperatorNode,\n    FunctionNode: FunctionNode,\n    ParenthesisNode: ParenthesisNode\n  });\n  /**\n   * Transform a rationalizable expression in a rational fraction.\n   * If rational fraction is one variable polynomial then converts\n   * the numerator and denominator in canonical form, with decreasing\n   * exponents, returning the coefficients of numerator.\n   *\n   * Syntax:\n   *\n   *     rationalize(expr)\n   *     rationalize(expr, detailed)\n   *     rationalize(expr, scope)\n   *     rationalize(expr, scope, detailed)\n   *\n   * Examples:\n   *\n   *     math.rationalize('sin(x)+y')\n   *                   //  Error: There is an unsolved function call\n   *     math.rationalize('2x/y - y/(x+1)')\n   *                   // (2*x^2-y^2+2*x)/(x*y+y)\n   *     math.rationalize('(2x+1)^6')\n   *                   // 64*x^6+192*x^5+240*x^4+160*x^3+60*x^2+12*x+1\n   *     math.rationalize('2x/( (2x-1) / (3x+2) ) - 5x/ ( (3x+4) / (2x^2-5) ) + 3')\n   *                   // -20*x^4+28*x^3+104*x^2+6*x-12)/(6*x^2+5*x-4)\n   *     math.rationalize('x/(1-x)/(x-2)/(x-3)/(x-4) + 2x/ ( (1-2x)/(2-3x) )/ ((3-4x)/(4-5x) )') =\n   *                   // (-30*x^7+344*x^6-1506*x^5+3200*x^4-3472*x^3+1846*x^2-381*x)/\n   *                   //     (-8*x^6+90*x^5-383*x^4+780*x^3-797*x^2+390*x-72)\n   *\n   *     math.rationalize('x+x+x+y',{y:1}) // 3*x+1\n   *     math.rationalize('x+x+x+y',{})    // 3*x+y\n   *\n   *     const ret = math.rationalize('x+x+x+y',{},true)\n   *                   // ret.expression=3*x+y, ret.variables = [\"x\",\"y\"]\n   *     const ret = math.rationalize('-2+5x^2',{},true)\n   *                   // ret.expression=5*x^2-2, ret.variables = [\"x\"], ret.coefficients=[-2,0,5]\n   *\n   * See also:\n   *\n   *     simplify\n   *\n   * @param  {Node|string} expr    The expression to check if is a polynomial expression\n   * @param  {Object|boolean}      optional scope of expression or true for already evaluated rational expression at input\n   * @param  {Boolean}  detailed   optional True if return an object, false if return expression node (default)\n   *\n   * @return {Object | Node}    The rational polynomial of `expr` or na object\n   *            {Object}\n   *              {Expression Node} expression: node simplified expression\n   *              {Expression Node} numerator: simplified numerator of expression\n   *              {Expression Node | boolean} denominator: simplified denominator or false (if there is no denominator)\n   *              {Array}           variables:  variable names\n   *              {Array}           coefficients: coefficients of numerator sorted by increased exponent\n   *           {Expression Node}  node simplified expression\n   *\n   */\n\n  return typed(name, {\n    string: function string(expr) {\n      return this(parse(expr), {}, false);\n    },\n    'string, boolean': function stringBoolean(expr, detailed) {\n      return this(parse(expr), {}, detailed);\n    },\n    'string, Object': function stringObject(expr, scope) {\n      return this(parse(expr), scope, false);\n    },\n    'string, Object, boolean': function stringObjectBoolean(expr, scope, detailed) {\n      return this(parse(expr), scope, detailed);\n    },\n    Node: function Node(expr) {\n      return this(expr, {}, false);\n    },\n    'Node, boolean': function NodeBoolean(expr, detailed) {\n      return this(expr, {}, detailed);\n    },\n    'Node, Object': function NodeObject(expr, scope) {\n      return this(expr, scope, false);\n    },\n    'Node, Object, boolean': function NodeObjectBoolean(expr, scope, detailed) {\n      var setRules = rulesRationalize(); // Rules for change polynomial in near canonical form\n\n      var polyRet = polynomial(expr, scope, true, setRules.firstRules); // Check if expression is a rationalizable polynomial\n\n      var nVars = polyRet.variables.length;\n      expr = polyRet.expression;\n\n      if (nVars >= 1) {\n        // If expression in not a constant\n        expr = expandPower(expr); // First expand power of polynomials (cannot be made from rules!)\n\n        var sBefore; // Previous expression\n\n        var rules;\n        var eDistrDiv = true;\n        var redoInic = false;\n        expr = simplify(expr, setRules.firstRules, {}, {\n          exactFractions: false\n        }); // Apply the initial rules, including succ div rules\n\n        var s;\n\n        while (true) {\n          // Apply alternately  successive division rules and distr.div.rules\n          rules = eDistrDiv ? setRules.distrDivRules : setRules.sucDivRules;\n          expr = simplify(expr, rules); // until no more changes\n\n          eDistrDiv = !eDistrDiv; // Swap between Distr.Div and Succ. Div. Rules\n\n          s = expr.toString();\n\n          if (s === sBefore) {\n            break; // No changes : end of the loop\n          }\n\n          redoInic = true;\n          sBefore = s;\n        }\n\n        if (redoInic) {\n          // Apply first rules again without succ div rules (if there are changes)\n          expr = simplify(expr, setRules.firstRulesAgain, {}, {\n            exactFractions: false\n          });\n        }\n\n        expr = simplify(expr, setRules.finalRules, {}, {\n          exactFractions: false\n        }); // Apply final rules\n      } // NVars >= 1\n\n\n      var coefficients = [];\n      var retRationalize = {};\n\n      if (expr.type === 'OperatorNode' && expr.isBinary() && expr.op === '/') {\n        // Separate numerator from denominator\n        if (nVars === 1) {\n          expr.args[0] = polyToCanonical(expr.args[0], coefficients);\n          expr.args[1] = polyToCanonical(expr.args[1]);\n        }\n\n        if (detailed) {\n          retRationalize.numerator = expr.args[0];\n          retRationalize.denominator = expr.args[1];\n        }\n      } else {\n        if (nVars === 1) {\n          expr = polyToCanonical(expr, coefficients);\n        }\n\n        if (detailed) {\n          retRationalize.numerator = expr;\n          retRationalize.denominator = null;\n        }\n      } // nVars\n\n\n      if (!detailed) return expr;\n      retRationalize.coefficients = coefficients;\n      retRationalize.variables = polyRet.variables;\n      retRationalize.expression = expr;\n      return retRationalize;\n    } // ^^^^^^^ end of rationalize ^^^^^^^^\n\n  }); // end of typed rationalize\n\n  /**\n   *  Function to simplify an expression using an optional scope and\n   *  return it if the expression is a polynomial expression, i.e.\n   *  an expression with one or more variables and the operators\n   *  +, -, *, and ^, where the exponent can only be a positive integer.\n   *\n   * Syntax:\n   *\n   *     polynomial(expr,scope,extended, rules)\n   *\n   * @param  {Node | string} expr     The expression to simplify and check if is polynomial expression\n   * @param  {object} scope           Optional scope for expression simplification\n   * @param  {boolean} extended       Optional. Default is false. When true allows divide operator.\n   * @param  {array}  rules           Optional. Default is no rule.\n   *\n   *\n   * @return {Object}\n   *            {Object} node:   node simplified expression\n   *            {Array}  variables:  variable names\n   */\n\n  function polynomial(expr, scope, extended, rules) {\n    var variables = [];\n    var node = simplify(expr, rules, scope, {\n      exactFractions: false\n    }); // Resolves any variables and functions with all defined parameters\n\n    extended = !!extended;\n    var oper = '+-*' + (extended ? '/' : '');\n    recPoly(node);\n    var retFunc = {};\n    retFunc.expression = node;\n    retFunc.variables = variables;\n    return retFunc; // -------------------------------------------------------------------------------------------------------\n\n    /**\n     *  Function to simplify an expression using an optional scope and\n     *  return it if the expression is a polynomial expression, i.e.\n     *  an expression with one or more variables and the operators\n     *  +, -, *, and ^, where the exponent can only be a positive integer.\n     *\n     * Syntax:\n     *\n     *     recPoly(node)\n     *\n     *\n     * @param  {Node} node               The current sub tree expression in recursion\n     *\n     * @return                           nothing, throw an exception if error\n     */\n\n    function recPoly(node) {\n      var tp = node.type; // node type\n\n      if (tp === 'FunctionNode') {\n        // No function call in polynomial expression\n        throw new Error('There is an unsolved function call');\n      } else if (tp === 'OperatorNode') {\n        if (node.op === '^') {\n          // TODO: handle negative exponents like in '1/x^(-2)'\n          if (node.args[1].type !== 'ConstantNode' || !(0, _number.isInteger)(parseFloat(node.args[1].value))) {\n            throw new Error('There is a non-integer exponent');\n          } else {\n            recPoly(node.args[0]);\n          }\n        } else {\n          if (oper.indexOf(node.op) === -1) {\n            throw new Error('Operator ' + node.op + ' invalid in polynomial expression');\n          }\n\n          for (var i = 0; i < node.args.length; i++) {\n            recPoly(node.args[i]);\n          }\n        } // type of operator\n\n      } else if (tp === 'SymbolNode') {\n        var _name = node.name; // variable name\n\n        var pos = variables.indexOf(_name);\n\n        if (pos === -1) {\n          // new variable in expression\n          variables.push(_name);\n        }\n      } else if (tp === 'ParenthesisNode') {\n        recPoly(node.content);\n      } else if (tp !== 'ConstantNode') {\n        throw new Error('type ' + tp + ' is not allowed in polynomial expression');\n      }\n    } // end of recPoly\n\n  } // end of polynomial\n  // ---------------------------------------------------------------------------------------\n\n  /**\n   * Return a rule set to rationalize an polynomial expression in rationalize\n   *\n   * Syntax:\n   *\n   *     rulesRationalize()\n   *\n   * @return {array}        rule set to rationalize an polynomial expression\n   */\n\n\n  function rulesRationalize() {\n    var oldRules = [simplifyCore, // sCore\n    {\n      l: 'n+n',\n      r: '2*n'\n    }, {\n      l: 'n+-n',\n      r: '0'\n    }, simplifyConstant, // sConstant\n    {\n      l: 'n*(n1^-1)',\n      r: 'n/n1'\n    }, {\n      l: 'n*n1^-n2',\n      r: 'n/n1^n2'\n    }, {\n      l: 'n1^-1',\n      r: '1/n1'\n    }, {\n      l: 'n*(n1/n2)',\n      r: '(n*n1)/n2'\n    }, {\n      l: '1*n',\n      r: 'n'\n    }];\n    var rulesFirst = [{\n      l: '(-n1)/(-n2)',\n      r: 'n1/n2'\n    }, // Unary division\n    {\n      l: '(-n1)*(-n2)',\n      r: 'n1*n2'\n    }, // Unary multiplication\n    {\n      l: 'n1--n2',\n      r: 'n1+n2'\n    }, // '--' elimination\n    {\n      l: 'n1-n2',\n      r: 'n1+(-n2)'\n    }, // Subtraction turn into add with un\ufffdry minus\n    {\n      l: '(n1+n2)*n3',\n      r: '(n1*n3 + n2*n3)'\n    }, // Distributive 1\n    {\n      l: 'n1*(n2+n3)',\n      r: '(n1*n2+n1*n3)'\n    }, // Distributive 2\n    {\n      l: 'c1*n + c2*n',\n      r: '(c1+c2)*n'\n    }, // Joining constants\n    {\n      l: 'c1*n + n',\n      r: '(c1+1)*n'\n    }, // Joining constants\n    {\n      l: 'c1*n - c2*n',\n      r: '(c1-c2)*n'\n    }, // Joining constants\n    {\n      l: 'c1*n - n',\n      r: '(c1-1)*n'\n    }, // Joining constants\n    {\n      l: 'v/c',\n      r: '(1/c)*v'\n    }, // variable/constant (new!)\n    {\n      l: 'v/-c',\n      r: '-(1/c)*v'\n    }, // variable/constant (new!)\n    {\n      l: '-v*-c',\n      r: 'c*v'\n    }, // Inversion constant and variable 1\n    {\n      l: '-v*c',\n      r: '-c*v'\n    }, // Inversion constant and variable 2\n    {\n      l: 'v*-c',\n      r: '-c*v'\n    }, // Inversion constant and variable 3\n    {\n      l: 'v*c',\n      r: 'c*v'\n    }, // Inversion constant and variable 4\n    {\n      l: '-(-n1*n2)',\n      r: '(n1*n2)'\n    }, // Unary propagation\n    {\n      l: '-(n1*n2)',\n      r: '(-n1*n2)'\n    }, // Unary propagation\n    {\n      l: '-(-n1+n2)',\n      r: '(n1-n2)'\n    }, // Unary propagation\n    {\n      l: '-(n1+n2)',\n      r: '(-n1-n2)'\n    }, // Unary propagation\n    {\n      l: '(n1^n2)^n3',\n      r: '(n1^(n2*n3))'\n    }, // Power to Power\n    {\n      l: '-(-n1/n2)',\n      r: '(n1/n2)'\n    }, // Division and Unary\n    {\n      l: '-(n1/n2)',\n      r: '(-n1/n2)'\n    }]; // Divisao and Unary\n\n    var rulesDistrDiv = [{\n      l: '(n1/n2 + n3/n4)',\n      r: '((n1*n4 + n3*n2)/(n2*n4))'\n    }, // Sum of fractions\n    {\n      l: '(n1/n2 + n3)',\n      r: '((n1 + n3*n2)/n2)'\n    }, // Sum fraction with number 1\n    {\n      l: '(n1 + n2/n3)',\n      r: '((n1*n3 + n2)/n3)'\n    }]; // Sum fraction with number 1\n\n    var rulesSucDiv = [{\n      l: '(n1/(n2/n3))',\n      r: '((n1*n3)/n2)'\n    }, // Division simplification\n    {\n      l: '(n1/n2/n3)',\n      r: '(n1/(n2*n3))'\n    }];\n    var setRules = {}; // rules set in 4 steps.\n    // All rules => infinite loop\n    // setRules.allRules =oldRules.concat(rulesFirst,rulesDistrDiv,rulesSucDiv)\n\n    setRules.firstRules = oldRules.concat(rulesFirst, rulesSucDiv); // First rule set\n\n    setRules.distrDivRules = rulesDistrDiv; // Just distr. div. rules\n\n    setRules.sucDivRules = rulesSucDiv; // Jus succ. div. rules\n\n    setRules.firstRulesAgain = oldRules.concat(rulesFirst); // Last rules set without succ. div.\n    // Division simplification\n    // Second rule set.\n    // There is no aggregate expression with parentesis, but the only variable can be scattered.\n\n    setRules.finalRules = [simplifyCore, // simplify.rules[0]\n    {\n      l: 'n*-n',\n      r: '-n^2'\n    }, // Joining multiply with power 1\n    {\n      l: 'n*n',\n      r: 'n^2'\n    }, // Joining multiply with power 2\n    simplifyConstant, // simplify.rules[14] old 3rd index in oldRules\n    {\n      l: 'n*-n^n1',\n      r: '-n^(n1+1)'\n    }, // Joining multiply with power 3\n    {\n      l: 'n*n^n1',\n      r: 'n^(n1+1)'\n    }, // Joining multiply with power 4\n    {\n      l: 'n^n1*-n^n2',\n      r: '-n^(n1+n2)'\n    }, // Joining multiply with power 5\n    {\n      l: 'n^n1*n^n2',\n      r: 'n^(n1+n2)'\n    }, // Joining multiply with power 6\n    {\n      l: 'n^n1*-n',\n      r: '-n^(n1+1)'\n    }, // Joining multiply with power 7\n    {\n      l: 'n^n1*n',\n      r: 'n^(n1+1)'\n    }, // Joining multiply with power 8\n    {\n      l: 'n^n1/-n',\n      r: '-n^(n1-1)'\n    }, // Joining multiply with power 8\n    {\n      l: 'n^n1/n',\n      r: 'n^(n1-1)'\n    }, // Joining division with power 1\n    {\n      l: 'n/-n^n1',\n      r: '-n^(1-n1)'\n    }, // Joining division with power 2\n    {\n      l: 'n/n^n1',\n      r: 'n^(1-n1)'\n    }, // Joining division with power 3\n    {\n      l: 'n^n1/-n^n2',\n      r: 'n^(n1-n2)'\n    }, // Joining division with power 4\n    {\n      l: 'n^n1/n^n2',\n      r: 'n^(n1-n2)'\n    }, // Joining division with power 5\n    {\n      l: 'n1+(-n2*n3)',\n      r: 'n1-n2*n3'\n    }, // Solving useless parenthesis 1\n    {\n      l: 'v*(-c)',\n      r: '-c*v'\n    }, // Solving useless unary 2\n    {\n      l: 'n1+-n2',\n      r: 'n1-n2'\n    }, // Solving +- together (new!)\n    {\n      l: 'v*c',\n      r: 'c*v'\n    }, // inversion constant with variable\n    {\n      l: '(n1^n2)^n3',\n      r: '(n1^(n2*n3))'\n    } // Power to Power\n    ];\n    return setRules;\n  } // End rulesRationalize\n  // ---------------------------------------------------------------------------------------\n\n  /**\n   *  Expand recursively a tree node for handling with expressions with exponents\n   *  (it's not for constants, symbols or functions with exponents)\n   *  PS: The other parameters are internal for recursion\n   *\n   * Syntax:\n   *\n   *     expandPower(node)\n   *\n   * @param  {Node} node         Current expression node\n   * @param  {node} parent       Parent current node inside the recursion\n   * @param  (int}               Parent number of chid inside the rercursion\n   *\n   * @return {node}        node expression with all powers expanded.\n   */\n\n\n  function expandPower(node, parent, indParent) {\n    var tp = node.type;\n    var internal = arguments.length > 1; // TRUE in internal calls\n\n    if (tp === 'OperatorNode' && node.isBinary()) {\n      var does = false;\n      var val;\n\n      if (node.op === '^') {\n        // First operator: Parenthesis or UnaryMinus\n        if ((node.args[0].type === 'ParenthesisNode' || node.args[0].type === 'OperatorNode') && node.args[1].type === 'ConstantNode') {\n          // Second operator: Constant\n          val = parseFloat(node.args[1].value);\n          does = val >= 2 && (0, _number.isInteger)(val);\n        }\n      }\n\n      if (does) {\n        // Exponent >= 2\n        // Before:\n        //            operator A --\u003e Subtree\n        // parent pow\n        //            constant\n        //\n        if (val > 2) {\n          // Exponent > 2,\n          // AFTER:  (exponent > 2)\n          //             operator A --\u003e Subtree\n          // parent  *\n          //                 deep clone (operator A --\u003e Subtree\n          //             pow\n          //                 constant - 1\n          //\n          var nEsqTopo = node.args[0];\n          var nDirTopo = new OperatorNode('^', 'pow', [node.args[0].cloneDeep(), new ConstantNode(val - 1)]);\n          node = new OperatorNode('*', 'multiply', [nEsqTopo, nDirTopo]);\n        } else {\n          // Expo = 2 - no power\n          // AFTER:  (exponent =  2)\n          //             operator A --\u003e Subtree\n          // parent   oper\n          //            deep clone (operator A --\u003e Subtree)\n          //\n          node = new OperatorNode('*', 'multiply', [node.args[0], node.args[0].cloneDeep()]);\n        }\n\n        if (internal) {\n          // Change parent references in internal recursive calls\n          if (indParent === 'content') {\n            parent.content = node;\n          } else {\n            parent.args[indParent] = node;\n          }\n        }\n      } // does\n\n    } // binary OperatorNode\n\n\n    if (tp === 'ParenthesisNode') {\n      // Recursion\n      expandPower(node.content, node, 'content');\n    } else if (tp !== 'ConstantNode' && tp !== 'SymbolNode') {\n      for (var i = 0; i < node.args.length; i++) {\n        expandPower(node.args[i], node, i);\n      }\n    }\n\n    if (!internal) {\n      // return the root node\n      return node;\n    }\n  } // End expandPower\n  // ---------------------------------------------------------------------------------------\n\n  /**\n   * Auxilary function for rationalize\n   * Convert near canonical polynomial in one variable in a canonical polynomial\n   * with one term for each exponent in decreasing order\n   *\n   * Syntax:\n   *\n   *     polyToCanonical(node [, coefficients])\n   *\n   * @param  {Node | string} expr       The near canonical polynomial expression to convert in a a canonical polynomial expression\n   *\n   *        The string or tree expression needs to be at below syntax, with free spaces:\n   *         (  (^(-)? | [+-]? )cte (*)? var (^expo)?  | cte )+\n   *       Where 'var' is one variable with any valid name\n   *             'cte' are real numeric constants with any value. It can be omitted if equal than 1\n   *             'expo' are integers greater than 0. It can be omitted if equal than 1.\n   *\n   * @param  {array}   coefficients             Optional returns coefficients sorted by increased exponent\n   *\n   *\n   * @return {node}        new node tree with one variable polynomial or string error.\n   */\n\n\n  function polyToCanonical(node, coefficients) {\n    if (coefficients === undefined) {\n      coefficients = [];\n    } // coefficients.\n\n\n    coefficients[0] = 0; // index is the exponent\n\n    var o = {};\n    o.cte = 1;\n    o.oper = '+'; // fire: mark with * or ^ when finds * or ^ down tree, reset to \"\" with + and -.\n    //       It is used to deduce the exponent: 1 for *, 0 for \"\".\n\n    o.fire = '';\n    var maxExpo = 0; // maximum exponent\n\n    var varname = ''; // variable name\n\n    recurPol(node, null, o);\n    maxExpo = coefficients.length - 1;\n    var first = true;\n    var no;\n\n    for (var i = maxExpo; i >= 0; i--) {\n      if (coefficients[i] === 0) continue;\n      var n1 = new ConstantNode(first ? coefficients[i] : Math.abs(coefficients[i]));\n      var op = coefficients[i] < 0 ? '-' : '+';\n\n      if (i > 0) {\n        // Is not a constant without variable\n        var n2 = new SymbolNode(varname);\n\n        if (i > 1) {\n          var n3 = new ConstantNode(i);\n          n2 = new OperatorNode('^', 'pow', [n2, n3]);\n        }\n\n        if (coefficients[i] === -1 && first) {\n          n1 = new OperatorNode('-', 'unaryMinus', [n2]);\n        } else if (Math.abs(coefficients[i]) === 1) {\n          n1 = n2;\n        } else {\n          n1 = new OperatorNode('*', 'multiply', [n1, n2]);\n        }\n      }\n\n      if (first) {\n        no = n1;\n      } else if (op === '+') {\n        no = new OperatorNode('+', 'add', [no, n1]);\n      } else {\n        no = new OperatorNode('-', 'subtract', [no, n1]);\n      }\n\n      first = false;\n    } // for\n\n\n    if (first) {\n      return new ConstantNode(0);\n    } else {\n      return no;\n    }\n    /**\n     * Recursive auxilary function inside polyToCanonical for\n     * converting expression in canonical form\n     *\n     * Syntax:\n     *\n     *     recurPol(node, noPai, obj)\n     *\n     * @param  {Node} node        The current subpolynomial expression\n     * @param  {Node | Null}  noPai   The current parent node\n     * @param  {object}    obj        Object with many internal flags\n     *\n     * @return {}                    No return. If error, throws an exception\n     */\n\n\n    function recurPol(node, noPai, o) {\n      var tp = node.type;\n\n      if (tp === 'FunctionNode') {\n        // ***** FunctionName *****\n        // No function call in polynomial expression\n        throw new Error('There is an unsolved function call');\n      } else if (tp === 'OperatorNode') {\n        // ***** OperatorName *****\n        if ('+-*^'.indexOf(node.op) === -1) throw new Error('Operator ' + node.op + ' invalid');\n\n        if (noPai !== null) {\n          // -(unary),^  : children of *,+,-\n          if ((node.fn === 'unaryMinus' || node.fn === 'pow') && noPai.fn !== 'add' && noPai.fn !== 'subtract' && noPai.fn !== 'multiply') {\n            throw new Error('Invalid ' + node.op + ' placing');\n          } // -,+,* : children of +,-\n\n\n          if ((node.fn === 'subtract' || node.fn === 'add' || node.fn === 'multiply') && noPai.fn !== 'add' && noPai.fn !== 'subtract') {\n            throw new Error('Invalid ' + node.op + ' placing');\n          } // -,+ : first child\n\n\n          if ((node.fn === 'subtract' || node.fn === 'add' || node.fn === 'unaryMinus') && o.noFil !== 0) {\n            throw new Error('Invalid ' + node.op + ' placing');\n          }\n        } // Has parent\n        // Firers: ^,*       Old:   ^,&,-(unary): firers\n\n\n        if (node.op === '^' || node.op === '*') {\n          o.fire = node.op;\n        }\n\n        for (var _i = 0; _i < node.args.length; _i++) {\n          // +,-: reset fire\n          if (node.fn === 'unaryMinus') o.oper = '-';\n\n          if (node.op === '+' || node.fn === 'subtract') {\n            o.fire = '';\n            o.cte = 1; // default if there is no constant\n\n            o.oper = _i === 0 ? '+' : node.op;\n          }\n\n          o.noFil = _i; // number of son\n\n          recurPol(node.args[_i], node, o);\n        } // for in children\n\n      } else if (tp === 'SymbolNode') {\n        // ***** SymbolName *****\n        if (node.name !== varname && varname !== '') {\n          throw new Error('There is more than one variable');\n        }\n\n        varname = node.name;\n\n        if (noPai === null) {\n          coefficients[1] = 1;\n          return;\n        } // ^: Symbol is First child\n\n\n        if (noPai.op === '^' && o.noFil !== 0) {\n          throw new Error('In power the variable should be the first parameter');\n        } // *: Symbol is Second child\n\n\n        if (noPai.op === '*' && o.noFil !== 1) {\n          throw new Error('In multiply the variable should be the second parameter');\n        } // Symbol: firers '',* => it means there is no exponent above, so it's 1 (cte * var)\n\n\n        if (o.fire === '' || o.fire === '*') {\n          if (maxExpo < 1) coefficients[1] = 0;\n          coefficients[1] += o.cte * (o.oper === '+' ? 1 : -1);\n          maxExpo = Math.max(1, maxExpo);\n        }\n      } else if (tp === 'ConstantNode') {\n        var valor = parseFloat(node.value);\n\n        if (noPai === null) {\n          coefficients[0] = valor;\n          return;\n        }\n\n        if (noPai.op === '^') {\n          // cte: second  child of power\n          if (o.noFil !== 1) throw new Error('Constant cannot be powered');\n\n          if (!(0, _number.isInteger)(valor) || valor <= 0) {\n            throw new Error('Non-integer exponent is not allowed');\n          }\n\n          for (var _i2 = maxExpo + 1; _i2 < valor; _i2++) {\n            coefficients[_i2] = 0;\n          }\n\n          if (valor > maxExpo) coefficients[valor] = 0;\n          coefficients[valor] += o.cte * (o.oper === '+' ? 1 : -1);\n          maxExpo = Math.max(valor, maxExpo);\n          return;\n        }\n\n        o.cte = valor; // Cte: firer '' => There is no exponent and no multiplication, so the exponent is 0.\n\n        if (o.fire === '') {\n          coefficients[0] += o.cte * (o.oper === '+' ? 1 : -1);\n        }\n      } else {\n        throw new Error('Type ' + tp + ' is not allowed');\n      }\n    } // End of recurPol\n\n  } // End of polyToCanonical\n\n});\nexports.createRationalize = createRationalize;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createRationalize","_number","_factory","_simplifyConstant","_simplifyCore","factory","name","dependencies","_ref","polynomial","expr","scope","extended","rules","recPoly","node","tp","type","Error","op","args","isInteger","parseFloat","oper","indexOf","i","length","_name","variables","pos","push","content","simplify","exactFractions","retFunc","expression","expandPower","parent","indParent","internal","arguments","isBinary","does","val","nEsqTopo","nDirTopo","OperatorNode","cloneDeep","ConstantNode","polyToCanonical","coefficients","recurPol","noPai","o","fn","noFil","fire","_i","cte","varname","maxExpo","Math","max","valor","_i2","undefined","first","no","n1","abs","n2","SymbolNode","n3","config","typed","equal","isZero","add","subtract","multiply","divide","pow","parse","fraction","bignumber","mathWithTransform","FunctionNode","ParenthesisNode","simplifyConstant","createSimplifyConstant","simplifyCore","createSimplifyCore","string","stringBoolean","detailed","stringObject","stringObjectBoolean","Node","NodeBoolean","NodeObject","NodeObjectBoolean","oldRules","l","r","rulesFirst","rulesSucDiv","firstRules","concat","distrDivRules","rulesDistrDiv","firstRulesAgain","finalRules","polyRet","nVars","eDistrDiv","redoInic","s","toString","sBefore","retRationalize","numerator","denominator"]
}
