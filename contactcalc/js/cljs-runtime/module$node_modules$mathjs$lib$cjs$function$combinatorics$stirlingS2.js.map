{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$combinatorics$stirlingS2.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,oEAAA,CAAyF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGjIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,gBAAR,CAA2B,IAAK,EAE5BC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAIXM,OAAAA,CAAkC,CAAC,CAAA,CAAGC,MAASC,CAAAA,OAAb,EAF3BC,YAE2B,CADnBC,6GAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CACmB,CAA0C,QAAS,CAACC,IAAD,CAAO,CAAA,IAC1FC,MAAQD,IAAKC,CAAAA,KAD6E,CAE1FC,UAAYF,IAAKE,CAAAA,SAFyE,CAG1FC;AAAWH,IAAKG,CAAAA,QAH0E,CAI1FC,eAAiBJ,IAAKI,CAAAA,cAJoE,CAK1FC,aAAeL,IAAKK,CAAAA,YALsE,CAM1FC,IAAMN,IAAKM,CAAAA,GAN+E,CAO1FC,UAAYP,IAAKO,CAAAA,SAPyE,CAQ1FC,aAAeR,IAAKQ,CAAAA,YARsE,CAS1FC,WAAaT,IAAKS,CAAAA,UATwE,CAU1FC,UAAYV,IAAKU,CAAAA,SAVyE,CAW1FC,OAASX,IAAKW,CAAAA,MA0BlB,OAAOV,MAAA,CAvCEH,YAuCF,CAAY,CACjB,yCAA0Cc,QAAuC,CAACC,CAAD,CAAIC,CAAJ,CAAO,CACtF,GAAI,CAACJ,SAAA,CAAUG,CAAV,CAAL,EAAqBJ,UAAA,CAAWI,CAAX,CAArB,EAAsC,CAACH,SAAA,CAAUI,CAAV,CAAvC,EAAuDL,UAAA,CAAWK,CAAX,CAAvD,CACE,KAAM,KAAIC,SAAJ,CAAc,4DAAd,CAAN,CACK,GAAIJ,MAAA,CAAOG,CAAP,CAAUD,CAAV,CAAJ,CACL,KAAM,KAAIE,SAAJ,CAAc,0DAAd,CAAN;AAOF,IAHA,IAAIC,WAAaT,SAAA,CAAUO,CAAV,CAAjB,CACIG,OAAS,CADb,CAGSC,EAAI,CAAb,CAAgBA,CAAhB,EAAqBJ,CAArB,CAAwBI,CAAA,EAAxB,CAA6B,CAC3B,IAAIC,YAAcb,GAAA,CAAI,EAAJ,CAAQH,QAAA,CAASW,CAAT,CAAYI,CAAZ,CAAR,CAAlB,CACIE,SAAWZ,YAAA,CAAaM,CAAb,CAAgBI,CAAhB,CADf,CAEIG,OAASf,GAAA,CAAIY,CAAJ,CAAOL,CAAP,CACbI,OAAA,CAASf,SAAA,CAAUe,MAAV,CAAkBb,cAAA,CAAeA,cAAA,CAAegB,QAAf,CAAyBC,MAAzB,CAAf,CAAiDF,WAAjD,CAAlB,CAJkB,CAO7B,MAAOd,aAAA,CAAaY,MAAb,CAAqBD,UAArB,CAlB+E,CADvE,CAAZ,CArCuF,CAA1D,CA4DtCzB,QAAQI,CAAAA,gBAAR,CAA2BA,MAxEsG;",
"sources":["node_modules/mathjs/lib/cjs/function/combinatorics/stirlingS2.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$combinatorics$stirlingS2\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createStirlingS2 = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'stirlingS2';\nvar dependencies = ['typed', 'addScalar', 'subtract', 'multiplyScalar', 'divideScalar', 'pow', 'factorial', 'combinations', 'isNegative', 'isInteger', 'larger'];\nvar createStirlingS2 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      addScalar = _ref.addScalar,\n      subtract = _ref.subtract,\n      multiplyScalar = _ref.multiplyScalar,\n      divideScalar = _ref.divideScalar,\n      pow = _ref.pow,\n      factorial = _ref.factorial,\n      combinations = _ref.combinations,\n      isNegative = _ref.isNegative,\n      isInteger = _ref.isInteger,\n      larger = _ref.larger;\n\n  /**\n   * The Stirling numbers of the second kind, counts the number of ways to partition\n   * a set of n labelled objects into k nonempty unlabelled subsets.\n   * stirlingS2 only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   *  If n = k or k = 1, then s(n,k) = 1\n   *\n   * Syntax:\n   *\n   *   math.stirlingS2(n, k)\n   *\n   * Examples:\n   *\n   *    math.stirlingS2(5, 3) //returns 25\n   *\n   * See also:\n   *\n   *    bellNumbers\n   *\n   * @param {Number | BigNumber} n    Total number of objects in the set\n   * @param {Number | BigNumber} k    Number of objects in the subset\n   * @return {Number | BigNumber}     S(n,k)\n   */\n  return typed(name, {\n    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(n, k) {\n      if (!isInteger(n) || isNegative(n) || !isInteger(k) || isNegative(k)) {\n        throw new TypeError('Non-negative integer value expected in function stirlingS2');\n      } else if (larger(k, n)) {\n        throw new TypeError('k must be less than or equal to n in function stirlingS2');\n      } // 1/k! Sum(i=0 -> k) [(-1)^(k-i)*C(k,j)* i^n]\n\n\n      var kFactorial = factorial(k);\n      var result = 0;\n\n      for (var i = 0; i <= k; i++) {\n        var negativeOne = pow(-1, subtract(k, i));\n        var kChooseI = combinations(k, i);\n        var iPower = pow(i, n);\n        result = addScalar(result, multiplyScalar(multiplyScalar(kChooseI, iPower), negativeOne));\n      }\n\n      return divideScalar(result, kFactorial);\n    }\n  });\n});\nexports.createStirlingS2 = createStirlingS2;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createStirlingS2","_factory","factory","name","dependencies","_ref","typed","addScalar","subtract","multiplyScalar","divideScalar","pow","factorial","combinations","isNegative","isInteger","larger","numberBigNumberNumberBigNumber","n","k","TypeError","kFactorial","result","i","negativeOne","kChooseI","iPower"]
}
