{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$algebra$decomposition$qr.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/function/algebra/decomposition/qr.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$algebra$decomposition$qr\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createQr = void 0;\n\nvar _factory = require(\"../../../utils/factory.js\");\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nvar name = 'qr';\nvar dependencies = ['typed', 'matrix', 'zeros', 'identity', 'isZero', 'equal', 'sign', 'sqrt', 'conj', 'unaryMinus', 'addScalar', 'divideScalar', 'multiplyScalar', 'subtract', 'complex'];\nvar createQr = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      zeros = _ref.zeros,\n      identity = _ref.identity,\n      isZero = _ref.isZero,\n      equal = _ref.equal,\n      sign = _ref.sign,\n      sqrt = _ref.sqrt,\n      conj = _ref.conj,\n      unaryMinus = _ref.unaryMinus,\n      addScalar = _ref.addScalar,\n      divideScalar = _ref.divideScalar,\n      multiplyScalar = _ref.multiplyScalar,\n      subtract = _ref.subtract,\n      complex = _ref.complex;\n\n  /**\n   * Calculate the Matrix QR decomposition. Matrix `A` is decomposed in\n   * two matrices (`Q`, `R`) where `Q` is an\n   * orthogonal matrix and `R` is an upper triangular matrix.\n   *\n   * Syntax:\n   *\n   *    math.qr(A)\n   *\n   * Example:\n   *\n   *    const m = [\n   *      [1, -1,  4],\n   *      [1,  4, -2],\n   *      [1,  4,  2],\n   *      [1,  -1, 0]\n   *    ]\n   *    const result = math.qr(m)\n   *    // r = {\n   *    //   Q: [\n   *    //     [0.5, -0.5,   0.5],\n   *    //     [0.5,  0.5,  -0.5],\n   *    //     [0.5,  0.5,   0.5],\n   *    //     [0.5, -0.5,  -0.5],\n   *    //   ],\n   *    //   R: [\n   *    //     [2, 3,  2],\n   *    //     [0, 5, -2],\n   *    //     [0, 0,  4],\n   *    //     [0, 0,  0]\n   *    //   ]\n   *    // }\n   *\n   * See also:\n   *\n   *    lup, lusolve\n   *\n   * @param {Matrix | Array} A    A two dimensional matrix or array\n   * for which to get the QR decomposition.\n   *\n   * @return {{Q: Array | Matrix, R: Array | Matrix}} Q: the orthogonal\n   * matrix and R: the upper triangular matrix\n   */\n  return _extends(typed(name, {\n    DenseMatrix: function DenseMatrix(m) {\n      return _denseQR(m);\n    },\n    SparseMatrix: function SparseMatrix(m) {\n      return _sparseQR(m);\n    },\n    Array: function Array(a) {\n      // create dense matrix from array\n      var m = matrix(a); // lup, use matrix implementation\n\n      var r = _denseQR(m); // result\n\n\n      return {\n        Q: r.Q.valueOf(),\n        R: r.R.valueOf()\n      };\n    }\n  }), {\n    _denseQRimpl: _denseQRimpl\n  });\n\n  function _denseQRimpl(m) {\n    // rows & columns (m x n)\n    var rows = m._size[0]; // m\n\n    var cols = m._size[1]; // n\n\n    var Q = identity([rows], 'dense');\n    var Qdata = Q._data;\n    var R = m.clone();\n    var Rdata = R._data; // vars\n\n    var i, j, k;\n    var w = zeros([rows], '');\n\n    for (k = 0; k < Math.min(cols, rows); ++k) {\n      /*\n       * **k-th Household matrix**\n       *\n       * The matrix I - 2*v*transpose(v)\n       * x     = first column of A\n       * x1    = first element of x\n       * alpha = x1 / |x1| * |x|\n       * e1    = tranpose([1, 0, 0, ...])\n       * u     = x - alpha * e1\n       * v     = u / |u|\n       *\n       * Household matrix = I - 2 * v * tranpose(v)\n       *\n       *  * Initially Q = I and R = A.\n       *  * Household matrix is a reflection in a plane normal to v which\n       *    will zero out all but the top right element in R.\n       *  * Appplying reflection to both Q and R will not change product.\n       *  * Repeat this process on the (1,1) minor to get R as an upper\n       *    triangular matrix.\n       *  * Reflections leave the magnitude of the columns of Q unchanged\n       *    so Q remains othoganal.\n       *\n       */\n      var pivot = Rdata[k][k];\n      var sgn = unaryMinus(equal(pivot, 0) ? 1 : sign(pivot));\n      var conjSgn = conj(sgn);\n      var alphaSquared = 0;\n\n      for (i = k; i < rows; i++) {\n        alphaSquared = addScalar(alphaSquared, multiplyScalar(Rdata[i][k], conj(Rdata[i][k])));\n      }\n\n      var alpha = multiplyScalar(sgn, sqrt(alphaSquared));\n\n      if (!isZero(alpha)) {\n        // first element in vector u\n        var u1 = subtract(pivot, alpha); // w = v * u1 / |u|    (only elements k to (rows-1) are used)\n\n        w[k] = 1;\n\n        for (i = k + 1; i < rows; i++) {\n          w[i] = divideScalar(Rdata[i][k], u1);\n        } // tau = - conj(u1 / alpha)\n\n\n        var tau = unaryMinus(conj(divideScalar(u1, alpha)));\n        var s = void 0;\n        /*\n         * tau and w have been choosen so that\n         *\n         * 2 * v * tranpose(v) = tau * w * tranpose(w)\n         */\n\n        /*\n         * -- calculate R = R - tau * w * tranpose(w) * R --\n         * Only do calculation with rows k to (rows-1)\n         * Additionally columns 0 to (k-1) will not be changed by this\n         *   multiplication so do not bother recalculating them\n         */\n\n        for (j = k; j < cols; j++) {\n          s = 0.0; // calculate jth element of [tranpose(w) * R]\n\n          for (i = k; i < rows; i++) {\n            s = addScalar(s, multiplyScalar(conj(w[i]), Rdata[i][j]));\n          } // calculate the jth element of [tau * transpose(w) * R]\n\n\n          s = multiplyScalar(s, tau);\n\n          for (i = k; i < rows; i++) {\n            Rdata[i][j] = multiplyScalar(subtract(Rdata[i][j], multiplyScalar(w[i], s)), conjSgn);\n          }\n        }\n        /*\n         * -- calculate Q = Q - tau * Q * w * transpose(w) --\n         * Q is a square matrix (rows x rows)\n         * Only do calculation with columns k to (rows-1)\n         * Additionally rows 0 to (k-1) will not be changed by this\n         *   multiplication so do not bother recalculating them\n         */\n\n\n        for (i = 0; i < rows; i++) {\n          s = 0.0; // calculate ith element of [Q * w]\n\n          for (j = k; j < rows; j++) {\n            s = addScalar(s, multiplyScalar(Qdata[i][j], w[j]));\n          } // calculate the ith element of [tau * Q * w]\n\n\n          s = multiplyScalar(s, tau);\n\n          for (j = k; j < rows; ++j) {\n            Qdata[i][j] = divideScalar(subtract(Qdata[i][j], multiplyScalar(s, conj(w[j]))), conjSgn);\n          }\n        }\n      }\n    } // return matrices\n\n\n    return {\n      Q: Q,\n      R: R,\n      toString: function toString() {\n        return 'Q: ' + this.Q.toString() + '\\nR: ' + this.R.toString();\n      }\n    };\n  }\n\n  function _denseQR(m) {\n    var ret = _denseQRimpl(m);\n\n    var Rdata = ret.R._data;\n\n    if (m._data.length > 0) {\n      var zero = Rdata[0][0].type === 'Complex' ? complex(0) : 0;\n\n      for (var i = 0; i < Rdata.length; ++i) {\n        for (var j = 0; j < i && j < (Rdata[0] || []).length; ++j) {\n          Rdata[i][j] = zero;\n        }\n      }\n    }\n\n    return ret;\n  }\n\n  function _sparseQR(m) {\n    throw new Error('qr not implemented for sparse matrices yet');\n  }\n});\nexports.createQr = createQr;\n};"],
"names":["shadow$provide","global","require","module","exports","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","defineProperty","value","createQr","_factory","factory","name","dependencies","_ref","_denseQRimpl","m","rows","_size","cols","Q","identity","Qdata","_data","R","clone","Rdata","k","w","zeros","Math","min","pivot","sgn","unaryMinus","equal","sign","conjSgn","conj","alphaSquared","addScalar","multiplyScalar","alpha","sqrt","isZero","u1","subtract","divideScalar","tau","s","j","toString","_denseQR","ret","zero","type","complex","typed","matrix","DenseMatrix","SparseMatrix","Error","Array","a","r","valueOf"]
}
