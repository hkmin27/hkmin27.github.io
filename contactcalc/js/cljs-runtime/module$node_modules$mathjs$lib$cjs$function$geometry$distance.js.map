{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$geometry$distance.js",
"lineCount":15,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/function/geometry/distance.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$geometry$distance\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createDistance = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'distance';\nvar dependencies = ['typed', 'addScalar', 'subtract', 'divideScalar', 'multiplyScalar', 'unaryMinus', 'sqrt', 'abs'];\nvar createDistance = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      addScalar = _ref.addScalar,\n      subtract = _ref.subtract,\n      multiplyScalar = _ref.multiplyScalar,\n      divideScalar = _ref.divideScalar,\n      unaryMinus = _ref.unaryMinus,\n      sqrt = _ref.sqrt,\n      abs = _ref.abs;\n\n  /**\n    * Calculates:\n    *    The eucledian distance between two points in N-dimensional spaces.\n    *    Distance between point and a line in 2 and 3 dimensional spaces.\n    *    Pairwise distance between a set of 2D or 3D points\n    * NOTE:\n    *    When substituting coefficients of a line(a, b and c), use ax + by + c = 0 instead of ax + by = c\n    *    For parametric equation of a 3D line, x0, y0, z0, a, b, c are from: (x\u2212x0, y\u2212y0, z\u2212z0) = t(a, b, c)\n    *\n    * Syntax:\n    *    math.distance([x1, y1], [x2, y2])\n    *-   math.distance({pointOneX: 4, pointOneY: 5}, {pointTwoX: 2, pointTwoY: 7})\n    *    math.distance([x1, y1, z1], [x2, y2, z2])\n    *    math.distance({pointOneX: 4, pointOneY: 5, pointOneZ: 8}, {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})\n    *    math.distance([x1, y1, ... , N1], [x2, y2, ... , N2])\n    *    math.distance([[A], [B], [C]...])\n    *    math.distance([x1, y1], [LinePtX1, LinePtY1], [LinePtX2, LinePtY2])\n    *    math.distance({pointX: 1, pointY: 4}, {lineOnePtX: 6, lineOnePtY: 3}, {lineTwoPtX: 2, lineTwoPtY: 8})\n    *    math.distance([x1, y1, z1], [LinePtX1, LinePtY1, LinePtZ1], [LinePtX2, LinePtY2, LinePtZ2])\n    *    math.distance({pointX: 1, pointY: 4, pointZ: 7}, {lineOnePtX: 6, lineOnePtY: 3, lineOnePtZ: 4}, {lineTwoPtX: 2, lineTwoPtY: 8, lineTwoPtZ: 5})\n    *    math.distance([x1, y1], [xCoeffLine, yCoeffLine, constant])\n    *    math.distance({pointX: 10, pointY: 10}, {xCoeffLine: 8, yCoeffLine: 1, constant: 3})\n    *    math.distance([x1, y1, z1], [x0, y0, z0, a-tCoeff, b-tCoeff, c-tCoeff]) point and parametric equation of 3D line\n    *    math.distance([x, y, z], [x0, y0, z0, a, b, c])\n    *    math.distance({pointX: 2, pointY: 5, pointZ: 9}, {x0: 4, y0: 6, z0: 3, a: 4, b: 2, c: 0})\n    *\n    * Examples:\n    *    math.distance([0,0], [4,4])                     // Returns 5.6569\n    *    math.distance(\n    *     {pointOneX: 0, pointOneY: 0},\n    *     {pointTwoX: 10, pointTwoY: 10})                // Returns 14.142135623730951\n    *    math.distance([1, 0, 1], [4, -2, 2])            // Returns 3.74166\n    *    math.distance(\n    *     {pointOneX: 4, pointOneY: 5, pointOneZ: 8},\n    *     {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})    // Returns 3\n    *    math.distance([1, 0, 1, 0], [0, -1, 0, -1])     // Returns 2\n    *    math.distance([[1, 2], [1, 2], [1, 3]])         // Returns [0, 1, 1]\n    *    math.distance([[1,2,4], [1,2,6], [8,1,3]])      // Returns [2, 7.14142842854285, 7.681145747868608]\n    *    math.distance([10, 10], [8, 1, 3])              // Returns 11.535230316796387\n    *    math.distance([10, 10], [2, 3], [-8, 0])        // Returns 8.759953130362847\n    *    math.distance(\n    *     {pointX: 1, pointY: 4},\n    *     {lineOnePtX: 6, lineOnePtY: 3},\n    *     {lineTwoPtX: 2, lineTwoPtY: 8})                // Returns 2.720549372624744\n    *    math.distance([2, 3, 1], [1, 1, 2, 5, 0, 1])    // Returns 2.3204774044612857\n    *    math.distance(\n    *     {pointX: 2, pointY: 3, pointZ: 1},\n    *     {x0: 1, y0: 1, z0: 2, a: 5, b: 0, c: 1}        // Returns 2.3204774044612857\n    *\n    * @param {Array | Matrix | Object} x    Co-ordinates of first point\n    * @param {Array | Matrix | Object} y    Co-ordinates of second point\n    * @return {Number | BigNumber} Returns the distance from two/three points\n  */\n  return typed(name, {\n    'Array, Array, Array': function ArrayArrayArray(x, y, z) {\n      // Point to Line 2D (x=Point, y=LinePoint1, z=LinePoint2)\n      if (x.length === 2 && y.length === 2 && z.length === 2) {\n        if (!_2d(x)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');\n        }\n\n        if (!_2d(y)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');\n        }\n\n        if (!_2d(z)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');\n        }\n\n        var m = divideScalar(subtract(z[1], z[0]), subtract(y[1], y[0]));\n        var xCoeff = multiplyScalar(multiplyScalar(m, m), y[0]);\n        var yCoeff = unaryMinus(multiplyScalar(m, y[0]));\n        var constant = x[1];\n        return _distancePointLine2D(x[0], x[1], xCoeff, yCoeff, constant);\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    'Object, Object, Object': function ObjectObjectObject(x, y, z) {\n      if (Object.keys(x).length === 2 && Object.keys(y).length === 2 && Object.keys(z).length === 2) {\n        if (!_2d(x)) {\n          throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');\n        }\n\n        if (!_2d(y)) {\n          throw new TypeError('Values of lineOnePtX and lineOnePtY should be numbers or BigNumbers');\n        }\n\n        if (!_2d(z)) {\n          throw new TypeError('Values of lineTwoPtX and lineTwoPtY should be numbers or BigNumbers');\n        }\n\n        if ('pointX' in x && 'pointY' in x && 'lineOnePtX' in y && 'lineOnePtY' in y && 'lineTwoPtX' in z && 'lineTwoPtY' in z) {\n          var m = divideScalar(subtract(z.lineTwoPtY, z.lineTwoPtX), subtract(y.lineOnePtY, y.lineOnePtX));\n          var xCoeff = multiplyScalar(multiplyScalar(m, m), y.lineOnePtX);\n          var yCoeff = unaryMinus(multiplyScalar(m, y.lineOnePtX));\n          var constant = x.pointX;\n          return _distancePointLine2D(x.pointX, x.pointY, xCoeff, yCoeff, constant);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // Point to Line 2D (x=[pointX, pointY], y=[x-coeff, y-coeff, const])\n      if (x.length === 2 && y.length === 3) {\n        if (!_2d(x)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');\n        }\n\n        if (!_3d(y)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');\n        }\n\n        return _distancePointLine2D(x[0], x[1], y[0], y[1], y[2]);\n      } else if (x.length === 3 && y.length === 6) {\n        // Point to Line 3D\n        if (!_3d(x)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');\n        }\n\n        if (!_parametricLine(y)) {\n          throw new TypeError('Array with 6 numbers or BigNumbers expected for second argument');\n        }\n\n        return _distancePointLine3D(x[0], x[1], x[2], y[0], y[1], y[2], y[3], y[4], y[5]);\n      } else if (x.length === y.length && x.length > 0) {\n        // Point to Point N-dimensions\n        if (!_containsOnlyNumbers(x)) {\n          throw new TypeError('All values of an array should be numbers or BigNumbers');\n        }\n\n        if (!_containsOnlyNumbers(y)) {\n          throw new TypeError('All values of an array should be numbers or BigNumbers');\n        }\n\n        return _euclideanDistance(x, y);\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    'Object, Object': function ObjectObject(x, y) {\n      if (Object.keys(x).length === 2 && Object.keys(y).length === 3) {\n        if (!_2d(x)) {\n          throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');\n        }\n\n        if (!_3d(y)) {\n          throw new TypeError('Values of xCoeffLine, yCoeffLine and constant should be numbers or BigNumbers');\n        }\n\n        if ('pointX' in x && 'pointY' in x && 'xCoeffLine' in y && 'yCoeffLine' in y && 'constant' in y) {\n          return _distancePointLine2D(x.pointX, x.pointY, y.xCoeffLine, y.yCoeffLine, y.constant);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else if (Object.keys(x).length === 3 && Object.keys(y).length === 6) {\n        // Point to Line 3D\n        if (!_3d(x)) {\n          throw new TypeError('Values of pointX, pointY and pointZ should be numbers or BigNumbers');\n        }\n\n        if (!_parametricLine(y)) {\n          throw new TypeError('Values of x0, y0, z0, a, b and c should be numbers or BigNumbers');\n        }\n\n        if ('pointX' in x && 'pointY' in x && 'x0' in y && 'y0' in y && 'z0' in y && 'a' in y && 'b' in y && 'c' in y) {\n          return _distancePointLine3D(x.pointX, x.pointY, x.pointZ, y.x0, y.y0, y.z0, y.a, y.b, y.c);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else if (Object.keys(x).length === 2 && Object.keys(y).length === 2) {\n        // Point to Point 2D\n        if (!_2d(x)) {\n          throw new TypeError('Values of pointOneX and pointOneY should be numbers or BigNumbers');\n        }\n\n        if (!_2d(y)) {\n          throw new TypeError('Values of pointTwoX and pointTwoY should be numbers or BigNumbers');\n        }\n\n        if ('pointOneX' in x && 'pointOneY' in x && 'pointTwoX' in y && 'pointTwoY' in y) {\n          return _euclideanDistance([x.pointOneX, x.pointOneY], [y.pointTwoX, y.pointTwoY]);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else if (Object.keys(x).length === 3 && Object.keys(y).length === 3) {\n        // Point to Point 3D\n        if (!_3d(x)) {\n          throw new TypeError('Values of pointOneX, pointOneY and pointOneZ should be numbers or BigNumbers');\n        }\n\n        if (!_3d(y)) {\n          throw new TypeError('Values of pointTwoX, pointTwoY and pointTwoZ should be numbers or BigNumbers');\n        }\n\n        if ('pointOneX' in x && 'pointOneY' in x && 'pointOneZ' in x && 'pointTwoX' in y && 'pointTwoY' in y && 'pointTwoZ' in y) {\n          return _euclideanDistance([x.pointOneX, x.pointOneY, x.pointOneZ], [y.pointTwoX, y.pointTwoY, y.pointTwoZ]);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    Array: function Array(arr) {\n      if (!_pairwise(arr)) {\n        throw new TypeError('Incorrect array format entered for pairwise distance calculation');\n      }\n\n      return _distancePairwise(arr);\n    }\n  });\n\n  function _isNumber(a) {\n    // distance supports numbers and bignumbers\n    return typeof a === 'number' || (0, _is.isBigNumber)(a);\n  }\n\n  function _2d(a) {\n    // checks if the number of arguments are correct in count and are valid (should be numbers)\n    if (a.constructor !== Array) {\n      a = _objectToArray(a);\n    }\n\n    return _isNumber(a[0]) && _isNumber(a[1]);\n  }\n\n  function _3d(a) {\n    // checks if the number of arguments are correct in count and are valid (should be numbers)\n    if (a.constructor !== Array) {\n      a = _objectToArray(a);\n    }\n\n    return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]);\n  }\n\n  function _containsOnlyNumbers(a) {\n    // checks if the number of arguments are correct in count and are valid (should be numbers)\n    if (!Array.isArray(a)) {\n      a = _objectToArray(a);\n    }\n\n    return a.every(_isNumber);\n  }\n\n  function _parametricLine(a) {\n    if (a.constructor !== Array) {\n      a = _objectToArray(a);\n    }\n\n    return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]) && _isNumber(a[3]) && _isNumber(a[4]) && _isNumber(a[5]);\n  }\n\n  function _objectToArray(o) {\n    var keys = Object.keys(o);\n    var a = [];\n\n    for (var i = 0; i < keys.length; i++) {\n      a.push(o[keys[i]]);\n    }\n\n    return a;\n  }\n\n  function _pairwise(a) {\n    // checks for valid arguments passed to _distancePairwise(Array)\n    if (a[0].length === 2 && _isNumber(a[0][0]) && _isNumber(a[0][1])) {\n      if (a.some(function (aI) {\n        return aI.length !== 2 || !_isNumber(aI[0]) || !_isNumber(aI[1]);\n      })) {\n        return false;\n      }\n    } else if (a[0].length === 3 && _isNumber(a[0][0]) && _isNumber(a[0][1]) && _isNumber(a[0][2])) {\n      if (a.some(function (aI) {\n        return aI.length !== 3 || !_isNumber(aI[0]) || !_isNumber(aI[1]) || !_isNumber(aI[2]);\n      })) {\n        return false;\n      }\n    } else {\n      return false;\n    }\n\n    return true;\n  }\n\n  function _distancePointLine2D(x, y, a, b, c) {\n    var num = abs(addScalar(addScalar(multiplyScalar(a, x), multiplyScalar(b, y)), c));\n    var den = sqrt(addScalar(multiplyScalar(a, a), multiplyScalar(b, b)));\n    return divideScalar(num, den);\n  }\n\n  function _distancePointLine3D(x, y, z, x0, y0, z0, a, b, c) {\n    var num = [subtract(multiplyScalar(subtract(y0, y), c), multiplyScalar(subtract(z0, z), b)), subtract(multiplyScalar(subtract(z0, z), a), multiplyScalar(subtract(x0, x), c)), subtract(multiplyScalar(subtract(x0, x), b), multiplyScalar(subtract(y0, y), a))];\n    num = sqrt(addScalar(addScalar(multiplyScalar(num[0], num[0]), multiplyScalar(num[1], num[1])), multiplyScalar(num[2], num[2])));\n    var den = sqrt(addScalar(addScalar(multiplyScalar(a, a), multiplyScalar(b, b)), multiplyScalar(c, c)));\n    return divideScalar(num, den);\n  }\n\n  function _euclideanDistance(x, y) {\n    var vectorSize = x.length;\n    var result = 0;\n    var diff = 0;\n\n    for (var i = 0; i < vectorSize; i++) {\n      diff = subtract(x[i], y[i]);\n      result = addScalar(multiplyScalar(diff, diff), result);\n    }\n\n    return sqrt(result);\n  }\n\n  function _distancePairwise(a) {\n    var result = [];\n    var pointA = [];\n    var pointB = [];\n\n    for (var i = 0; i < a.length - 1; i++) {\n      for (var j = i + 1; j < a.length; j++) {\n        if (a[0].length === 2) {\n          pointA = [a[i][0], a[i][1]];\n          pointB = [a[j][0], a[j][1]];\n        } else if (a[0].length === 3) {\n          pointA = [a[i][0], a[i][1], a[i][2]];\n          pointB = [a[j][0], a[j][1], a[j][2]];\n        }\n\n        result.push(_euclideanDistance(pointA, pointB));\n      }\n    }\n\n    return result;\n  }\n});\nexports.createDistance = createDistance;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createDistance","_is","_factory","factory","name","dependencies","_ref","_isNumber","a","isBigNumber","_2d","constructor","Array","_objectToArray","_3d","_containsOnlyNumbers","isArray","every","_parametricLine","o","keys","i","length","push","_pairwise","some","aI","_distancePointLine2D","x","y","b","c","num","abs","addScalar","multiplyScalar","den","sqrt","divideScalar","_distancePointLine3D","z","x0","y0","z0","subtract","_euclideanDistance","vectorSize","result","diff","typed","unaryMinus","ArrayArrayArray","TypeError","m","xCoeff","yCoeff","constant","ObjectObjectObject","lineTwoPtY","lineTwoPtX","lineOnePtY","lineOnePtX","pointX","pointY","ArrayArray","ObjectObject","xCoeffLine","yCoeffLine","pointZ","pointOneX","pointOneY","pointTwoX","pointTwoY","pointOneZ","pointTwoZ","arr","pointA","pointB","j"]
}
