{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$algebra$simplify$util.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/function/algebra/simplify/util.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$algebra$simplify$util\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createUtil = void 0;\n\nvar _is = require(\"../../../utils/is.js\");\n\nvar _factory = require(\"../../../utils/factory.js\");\n\nvar _object = require(\"../../../utils/object.js\");\n\nvar name = 'simplifyUtil';\nvar dependencies = ['FunctionNode', 'OperatorNode', 'SymbolNode'];\nvar createUtil = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var FunctionNode = _ref.FunctionNode,\n      OperatorNode = _ref.OperatorNode,\n      SymbolNode = _ref.SymbolNode;\n  // TODO commutative/associative properties rely on the arguments\n  // e.g. multiply is not commutative for matrices\n  // The properties should be calculated from an argument to simplify, or possibly something in math.config\n  // the other option is for typed() to specify a return type so that we can evaluate the type of arguments\n  var commutative = {\n    add: true,\n    multiply: true\n  };\n  var associative = {\n    add: true,\n    multiply: true\n  };\n\n  function isCommutative(node, context) {\n    if (!(0, _is.isOperatorNode)(node)) {\n      return true;\n    }\n\n    var name = node.fn.toString();\n\n    if (context && (0, _object.hasOwnProperty)(context, name) && (0, _object.hasOwnProperty)(context[name], 'commutative')) {\n      return context[name].commutative;\n    }\n\n    return commutative[name] || false;\n  }\n\n  function isAssociative(node, context) {\n    if (!(0, _is.isOperatorNode)(node)) {\n      return false;\n    }\n\n    var name = node.fn.toString();\n\n    if (context && (0, _object.hasOwnProperty)(context, name) && (0, _object.hasOwnProperty)(context[name], 'associative')) {\n      return context[name].associative;\n    }\n\n    return associative[name] || false;\n  }\n  /**\n   * Flatten all associative operators in an expression tree.\n   * Assumes parentheses have already been removed.\n   */\n\n\n  function flatten(node) {\n    if (!node.args || node.args.length === 0) {\n      return node;\n    }\n\n    node.args = allChildren(node);\n\n    for (var i = 0; i < node.args.length; i++) {\n      flatten(node.args[i]);\n    }\n  }\n  /**\n   * Get the children of a node as if it has been flattened.\n   * TODO implement for FunctionNodes\n   */\n\n\n  function allChildren(node) {\n    var op;\n    var children = [];\n\n    var findChildren = function findChildren(node) {\n      for (var i = 0; i < node.args.length; i++) {\n        var child = node.args[i];\n\n        if ((0, _is.isOperatorNode)(child) && op === child.op) {\n          findChildren(child);\n        } else {\n          children.push(child);\n        }\n      }\n    };\n\n    if (isAssociative(node)) {\n      op = node.op;\n      findChildren(node);\n      return children;\n    } else {\n      return node.args;\n    }\n  }\n  /**\n   *  Unflatten all flattened operators to a right-heavy binary tree.\n   */\n\n\n  function unflattenr(node) {\n    if (!node.args || node.args.length === 0) {\n      return;\n    }\n\n    var makeNode = createMakeNodeFunction(node);\n    var l = node.args.length;\n\n    for (var i = 0; i < l; i++) {\n      unflattenr(node.args[i]);\n    }\n\n    if (l > 2 && isAssociative(node)) {\n      var curnode = node.args.pop();\n\n      while (node.args.length > 0) {\n        curnode = makeNode([node.args.pop(), curnode]);\n      }\n\n      node.args = curnode.args;\n    }\n  }\n  /**\n   *  Unflatten all flattened operators to a left-heavy binary tree.\n   */\n\n\n  function unflattenl(node) {\n    if (!node.args || node.args.length === 0) {\n      return;\n    }\n\n    var makeNode = createMakeNodeFunction(node);\n    var l = node.args.length;\n\n    for (var i = 0; i < l; i++) {\n      unflattenl(node.args[i]);\n    }\n\n    if (l > 2 && isAssociative(node)) {\n      var curnode = node.args.shift();\n\n      while (node.args.length > 0) {\n        curnode = makeNode([curnode, node.args.shift()]);\n      }\n\n      node.args = curnode.args;\n    }\n  }\n\n  function createMakeNodeFunction(node) {\n    if ((0, _is.isOperatorNode)(node)) {\n      return function (args) {\n        try {\n          return new OperatorNode(node.op, node.fn, args, node.implicit);\n        } catch (err) {\n          console.error(err);\n          return [];\n        }\n      };\n    } else {\n      return function (args) {\n        return new FunctionNode(new SymbolNode(node.name), args);\n      };\n    }\n  }\n\n  return {\n    createMakeNodeFunction: createMakeNodeFunction,\n    isCommutative: isCommutative,\n    isAssociative: isAssociative,\n    flatten: flatten,\n    allChildren: allChildren,\n    unflattenr: unflattenr,\n    unflattenl: unflattenl\n  };\n});\nexports.createUtil = createUtil;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createUtil","_is","_factory","_object","factory","name","dependencies","_ref","isAssociative","node","context","isOperatorNode","fn","toString","hasOwnProperty","associative","flatten","args","length","allChildren","i","children","findChildren","child","op","push","unflattenr","makeNode","createMakeNodeFunction","l","curnode","pop","unflattenl","shift","OperatorNode","implicit","err","console","error","FunctionNode","SymbolNode","commutative","add","multiply","isCommutative"]
}
