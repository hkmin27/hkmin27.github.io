{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$utils$bignumber$nearlyEqual.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,CAAA,8DAAA,CAAmF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG3HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,WAAR,CAWAA,QAAoB,CAACC,CAAD,CAAIC,CAAJ,CAAOC,OAAP,CAAgB,CAElC,GAAgB,IAAhB,GAAIA,OAAJ,EAAoCC,IAAAA,EAApC,GAAwBD,OAAxB,CACE,MAAOF,EAAEI,CAAAA,EAAF,CAAKH,CAAL,CAIT,IAAID,CAAEI,CAAAA,EAAF,CAAKH,CAAL,CAAJ,CACE,MAAO,CAAA,CAIT,IAAID,CAAEK,CAAAA,KAAF,EAAJ,EAAiBJ,CAAEI,CAAAA,KAAF,EAAjB,CACE,MAAO,CAAA,CAIT,IAAIL,CAAEM,CAAAA,QAAF,EAAJ,EAAoBL,CAAEK,CAAAA,QAAF,EAApB,CAAkC,CAEhC,IAAIC,KAAOP,CAAEQ,CAAAA,KAAF,CAAQP,CAAR,CAAWQ,CAAAA,GAAX,EAEX,IAAIF,IAAKG,CAAAA,MAAL,EAAJ,CACE,MAAO,CAAA,CAGHC,EAAAA,CAAMX,CAAEY,CAAAA,WAAYD,CAAAA,GAAd,CAAkBX,CAAES,CAAAA,GAAF,EAAlB,CAA2BR,CAAEQ,CAAAA,GAAF,EAA3B,CACV,OAAOF,KAAKM,CAAAA,GAAL,CAASF,CAAIG,CAAAA,KAAJ,CAAUZ,OAAV,CAAT,CATuB,CAclC,MAAO,CAAA,CA/B2B,CAjBuF;",
"sources":["node_modules/mathjs/lib/cjs/utils/bignumber/nearlyEqual.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$utils$bignumber$nearlyEqual\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.nearlyEqual = nearlyEqual;\n\n/**\n * Compares two BigNumbers.\n * @param {BigNumber} x       First value to compare\n * @param {BigNumber} y       Second value to compare\n * @param {number} [epsilon]  The maximum relative difference between x and y\n *                            If epsilon is undefined or null, the function will\n *                            test whether x and y are exactly equal.\n * @return {boolean} whether the two numbers are nearly equal\n */\nfunction nearlyEqual(x, y, epsilon) {\n  // if epsilon is null or undefined, test whether x and y are exactly equal\n  if (epsilon === null || epsilon === undefined) {\n    return x.eq(y);\n  } // use \"==\" operator, handles infinities\n\n\n  if (x.eq(y)) {\n    return true;\n  } // NaN\n\n\n  if (x.isNaN() || y.isNaN()) {\n    return false;\n  } // at this point x and y should be finite\n\n\n  if (x.isFinite() && y.isFinite()) {\n    // check numbers are very close, needed when comparing numbers near zero\n    var diff = x.minus(y).abs();\n\n    if (diff.isZero()) {\n      return true;\n    } else {\n      // use relative error\n      var max = x.constructor.max(x.abs(), y.abs());\n      return diff.lte(max.times(epsilon));\n    }\n  } // Infinite and Number or negative Infinite and positive Infinite cases\n\n\n  return false;\n}\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","nearlyEqual","x","y","epsilon","undefined","eq","isNaN","isFinite","diff","minus","abs","isZero","max","constructor","lte","times"]
}
