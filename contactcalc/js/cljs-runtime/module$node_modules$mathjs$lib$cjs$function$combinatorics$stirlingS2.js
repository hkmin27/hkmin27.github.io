shadow$provide.module$node_modules$mathjs$lib$cjs$function$combinatorics$stirlingS2=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.createStirlingS2=void 0;global=require("module$node_modules$mathjs$lib$cjs$utils$factory");global=(0,global.factory)("stirlingS2","typed addScalar subtract multiplyScalar divideScalar pow factorial combinations isNegative isInteger larger".split(" "),function(_ref){var typed=_ref.typed,addScalar=_ref.addScalar,subtract=
_ref.subtract,multiplyScalar=_ref.multiplyScalar,divideScalar=_ref.divideScalar,pow=_ref.pow,factorial=_ref.factorial,combinations=_ref.combinations,isNegative=_ref.isNegative,isInteger=_ref.isInteger,larger=_ref.larger;return typed("stirlingS2",{"number | BigNumber, number | BigNumber":function(n,k){if(!isInteger(n)||isNegative(n)||!isInteger(k)||isNegative(k))throw new TypeError("Non-negative integer value expected in function stirlingS2");if(larger(k,n))throw new TypeError("k must be less than or equal to n in function stirlingS2");
for(var kFactorial=factorial(k),result=0,i=0;i<=k;i++){var negativeOne=pow(-1,subtract(k,i)),kChooseI=combinations(k,i),iPower=pow(i,n);result=addScalar(result,multiplyScalar(multiplyScalar(kChooseI,iPower),negativeOne))}return divideScalar(result,kFactorial)}})});exports.createStirlingS2=global}
//# sourceMappingURL=module$node_modules$mathjs$lib$cjs$function$combinatorics$stirlingS2.js.map
