{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$statistics$variance.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/function/statistics/variance.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$statistics$variance\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createVariance = void 0;\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _improveErrorMessage = require(\"./utils/improveErrorMessage.js\");\n\nvar DEFAULT_NORMALIZATION = 'unbiased';\nvar name = 'variance';\nvar dependencies = ['typed', 'add', 'subtract', 'multiply', 'divide', 'apply', 'isNaN'];\nvar createVariance = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      add = _ref.add,\n      subtract = _ref.subtract,\n      multiply = _ref.multiply,\n      divide = _ref.divide,\n      apply = _ref.apply,\n      isNaN = _ref.isNaN;\n\n  /**\n   * Compute the variance of a matrix or a  list with values.\n   * In case of a (multi dimensional) array or matrix, the variance over all\n   * elements will be calculated.\n   *\n   * Additionally, it is possible to compute the variance along the rows\n   * or columns of a matrix by specifying the dimension as the second argument.\n   *\n   * Optionally, the type of normalization can be specified as the final\n   * parameter. The parameter `normalization` can be one of the following values:\n   *\n   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)\n   * - 'uncorrected'        The sum of squared errors is divided by n\n   * - 'biased'             The sum of squared errors is divided by (n + 1)\n   *\n   *\n   * Note that older browser may not like the variable name `var`. In that\n   * case, the function can be called as `math['var'](...)` instead of\n   * `math.var(...)`.\n   *\n   * Syntax:\n   *\n   *     math.variance(a, b, c, ...)\n   *     math.variance(A)\n   *     math.variance(A, normalization)\n   *     math.variance(A, dimension)\n   *     math.variance(A, dimension, normalization)\n   *\n   * Examples:\n   *\n   *     math.variance(2, 4, 6)                     // returns 4\n   *     math.variance([2, 4, 6, 8])                // returns 6.666666666666667\n   *     math.variance([2, 4, 6, 8], 'uncorrected') // returns 5\n   *     math.variance([2, 4, 6, 8], 'biased')      // returns 4\n   *\n   *     math.variance([[1, 2, 3], [4, 5, 6]])      // returns 3.5\n   *     math.variance([[1, 2, 3], [4, 6, 8]], 0)   // returns [4.5, 8, 12.5]\n   *     math.variance([[1, 2, 3], [4, 6, 8]], 1)   // returns [1, 4]\n   *     math.variance([[1, 2, 3], [4, 6, 8]], 1, 'biased') // returns [0.5, 2]\n   *\n   * See also:\n   *\n   *    mean, median, max, min, prod, std, sum\n   *\n   * @param {Array | Matrix} array\n   *                        A single matrix or or multiple scalar values\n   * @param {string} [normalization='unbiased']\n   *                        Determines how to normalize the variance.\n   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.\n   * @param dimension {number | BigNumber}\n   *                        Determines the axis to compute the variance for a matrix\n   * @return {*} The variance\n   */\n  return typed(name, {\n    // variance([a, b, c, d, ...])\n    'Array | Matrix': function ArrayMatrix(array) {\n      return _var(array, DEFAULT_NORMALIZATION);\n    },\n    // variance([a, b, c, d, ...], normalization)\n    'Array | Matrix, string': _var,\n    // variance([a, b, c, c, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      return _varDim(array, dim, DEFAULT_NORMALIZATION);\n    },\n    // variance([a, b, c, c, ...], dim, normalization)\n    'Array | Matrix, number | BigNumber, string': _varDim,\n    // variance(a, b, c, d, ...)\n    '...': function _(args) {\n      return _var(args, DEFAULT_NORMALIZATION);\n    }\n  });\n  /**\n   * Recursively calculate the variance of an n-dimensional array\n   * @param {Array} array\n   * @param {string} normalization\n   *                        Determines how to normalize the variance:\n   *                        - 'unbiased'    The sum of squared errors is divided by (n - 1)\n   *                        - 'uncorrected' The sum of squared errors is divided by n\n   *                        - 'biased'      The sum of squared errors is divided by (n + 1)\n   * @return {number | BigNumber} variance\n   * @private\n   */\n\n  function _var(array, normalization) {\n    var sum;\n    var num = 0;\n\n    if (array.length === 0) {\n      throw new SyntaxError('Function variance requires one or more parameters (0 provided)');\n    } // calculate the mean and number of elements\n\n\n    (0, _collection.deepForEach)(array, function (value) {\n      try {\n        sum = sum === undefined ? value : add(sum, value);\n        num++;\n      } catch (err) {\n        throw (0, _improveErrorMessage.improveErrorMessage)(err, 'variance', value);\n      }\n    });\n    if (num === 0) throw new Error('Cannot calculate variance of an empty array');\n    var mean = divide(sum, num); // calculate the variance\n\n    sum = undefined;\n    (0, _collection.deepForEach)(array, function (value) {\n      var diff = subtract(value, mean);\n      sum = sum === undefined ? multiply(diff, diff) : add(sum, multiply(diff, diff));\n    });\n\n    if (isNaN(sum)) {\n      return sum;\n    }\n\n    switch (normalization) {\n      case 'uncorrected':\n        return divide(sum, num);\n\n      case 'biased':\n        return divide(sum, num + 1);\n\n      case 'unbiased':\n        {\n          var zero = (0, _is.isBigNumber)(sum) ? sum.mul(0) : 0;\n          return num === 1 ? zero : divide(sum, num - 1);\n        }\n\n      default:\n        throw new Error('Unknown normalization \"' + normalization + '\". ' + 'Choose \"unbiased\" (default), \"uncorrected\", or \"biased\".');\n    }\n  }\n\n  function _varDim(array, dim, normalization) {\n    try {\n      if (array.length === 0) {\n        throw new SyntaxError('Function variance requires one or more parameters (0 provided)');\n      }\n\n      return apply(array, dim, function (x) {\n        return _var(x, normalization);\n      });\n    } catch (err) {\n      throw (0, _improveErrorMessage.improveErrorMessage)(err, 'variance');\n    }\n  }\n});\nexports.createVariance = createVariance;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createVariance","_collection","_is","_factory","_improveErrorMessage","factory","name","dependencies","_ref","_var","array","normalization","num","length","SyntaxError","deepForEach","sum","undefined","add","err","improveErrorMessage","Error","mean","divide","diff","subtract","multiply","isNaN","zero","isBigNumber","mul","_varDim","dim","apply","x","typed","ArrayMatrix","DEFAULT_NORMALIZATION","ArrayMatrixNumberBigNumber","_","args"]
}
