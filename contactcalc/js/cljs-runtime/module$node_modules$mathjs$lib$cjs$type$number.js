shadow$provide.module$node_modules$mathjs$lib$cjs$type$number=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.createNumber=void 0;global=require("module$node_modules$mathjs$lib$cjs$utils$factory");var _collection=require("module$node_modules$mathjs$lib$cjs$utils$collection");require=(0,global.factory)("number",["typed"],function(_ref){_ref=_ref.typed;_ref=_ref("number",{"":function(){return 0},number:function(x){return x},string:function(x){if("NaN"===
x)return NaN;var nonDecimalNumberParts=x;var nonDecimalWithRadixMatch=nonDecimalNumberParts.match(/(0[box])([0-9a-fA-F]*)\.([0-9a-fA-F]*)/);nonDecimalNumberParts=nonDecimalWithRadixMatch?{input:nonDecimalNumberParts,radix:{"0b":2,"0o":8,"0x":16}[nonDecimalWithRadixMatch[1]],integerPart:nonDecimalWithRadixMatch[2],fractionalPart:nonDecimalWithRadixMatch[3]}:null;if(nonDecimalNumberParts){x=parseInt(nonDecimalNumberParts.integerPart,nonDecimalNumberParts.radix);for(var i=nonDecimalWithRadixMatch=0;i<
nonDecimalNumberParts.fractionalPart.length;i++){var digitValue=parseInt(nonDecimalNumberParts.fractionalPart[i],nonDecimalNumberParts.radix);nonDecimalWithRadixMatch+=digitValue/Math.pow(nonDecimalNumberParts.radix,i+1)}x+=nonDecimalWithRadixMatch;if(isNaN(x))throw new SyntaxError('String "'+nonDecimalNumberParts.input+'" is no valid number');return x}nonDecimalNumberParts=0;if(nonDecimalWithRadixMatch=x.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/))nonDecimalNumberParts=Number(nonDecimalWithRadixMatch[2]),
x=nonDecimalWithRadixMatch[1];i=Number(x);if(isNaN(i))throw new SyntaxError('String "'+x+'" is no valid number');if(nonDecimalWithRadixMatch){if(i>Math.pow(2,nonDecimalNumberParts)-1)throw new SyntaxError('String "'.concat(x,'" is out of range'));i>=Math.pow(2,nonDecimalNumberParts-1)&&(i-=Math.pow(2,nonDecimalNumberParts))}return i},BigNumber:function(x){return x.toNumber()},Fraction:function(x){return x.valueOf()},Unit:function(x){throw Error("Second argument with valueless unit expected");},"null":function(x){return 0},
"Unit, string | Unit":function(unit,valuelessUnit){return unit.toNumber(valuelessUnit)},"Array | Matrix":function(x){return(0,_collection.deepMap)(x,this)}});_ref.fromJSON=function(json){return parseFloat(json.value)};return _ref});exports.createNumber=require}
//# sourceMappingURL=module$node_modules$mathjs$lib$cjs$type$number.js.map
