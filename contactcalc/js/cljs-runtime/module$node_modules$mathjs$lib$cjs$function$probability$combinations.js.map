{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$probability$combinations.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,oEAAA,CAAyF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAiFjIC,QAASA,kBAAiB,CAACC,CAAD,CAAI,CAC5B,MAAOA,EAAEC,CAAAA,SAAF,EAAP,EAAwBD,CAAEE,CAAAA,GAAF,CAAM,CAAN,CADI,CA9E9BC,MAAOC,CAAAA,cAAP,CAAsBN,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CO,MAAO,CAAA,CADoC,CAA7C,CAGAP,QAAQQ,CAAAA,kBAAR,CAA6B,IAAK,EAE9BC,OAAAA,CAAWX,OAAA,CAAQ,kDAAR,CAEf,KAAIY,cAAgBZ,OAAA,CAAQ,8DAAR,CAIhBU,QAAAA,CAAoC,CAAC,CAAA,CAAGC,MAASE,CAAAA,OAAb,EAF7BC,cAE6B,CADrBC,CAAC,OAADA,CACqB,CAA0C,QAAS,CAACC,IAAD,CAAO,CAC5FC,IAAAA;AAAQD,IAAKC,CAAAA,KAyBjB,OAAOA,KAAA,CA5BEH,cA4BF,CAAY,CACjB,iBAAkBF,aAAcM,CAAAA,kBADf,CAEjB,uBAAwBC,QAA2B,CAACf,CAAD,CAAIgB,CAAJ,CAAO,CACxD,IAAIC,UAAYjB,CAAEkB,CAAAA,WAAlB,CACYC,CADZ,CAEIC,QAAUpB,CAAEqB,CAAAA,KAAF,CAAQL,CAAR,CACVM,UAAAA,CAAM,IAAIL,SAAJ,CAAc,CAAd,CAEV,IAAI,CAAClB,iBAAA,CAAkBC,CAAlB,CAAL,EAA6B,CAACD,iBAAA,CAAkBiB,CAAlB,CAA9B,CACE,KAAM,KAAIO,SAAJ,CAAc,0DAAd,CAAN,CAGF,GAAIP,CAAEQ,CAAAA,EAAF,CAAKxB,CAAL,CAAJ,CACE,KAAM,KAAIuB,SAAJ,CAAc,gDAAd,CAAN,CAGFE,CAAA,CAASH,SAET,IAAIN,CAAEU,CAAAA,EAAF,CAAKN,OAAL,CAAJ,CACE,IAAKD,CAAL,CAASG,SAAT,CAAcH,CAAEQ,CAAAA,GAAF,CAAMP,OAAN,CAAd,CAA8BD,CAA9B,CAAkCA,CAAES,CAAAA,IAAF,CAAON,SAAP,CAAlC,CACEG,CAAA,CAASA,CAAOI,CAAAA,KAAP,CAAab,CAAEY,CAAAA,IAAF,CAAOT,CAAP,CAAb,CAAwBW,CAAAA,SAAxB,CAAkCX,CAAlC,CAFb;IAKE,KAAKA,CAAL,CAASG,SAAT,CAAcH,CAAEQ,CAAAA,GAAF,CAAMX,CAAN,CAAd,CAAwBG,CAAxB,CAA4BA,CAAES,CAAAA,IAAF,CAAON,SAAP,CAA5B,CACEG,CAAA,CAASA,CAAOI,CAAAA,KAAP,CAAaT,OAAQQ,CAAAA,IAAR,CAAaT,CAAb,CAAb,CAA8BW,CAAAA,SAA9B,CAAwCX,CAAxC,CAIb,OAAOM,EA1BiD,CAFzC,CAAZ,CA1ByF,CAA1D,CAiExC3B,QAAQQ,CAAAA,kBAAR,CAA6BA,OA/EoG;",
"sources":["node_modules/mathjs/lib/cjs/function/probability/combinations.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$probability$combinations\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCombinations = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _combinations = require(\"../../plain/number/combinations.js\");\n\nvar name = 'combinations';\nvar dependencies = ['typed'];\nvar createCombinations = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Compute the number of ways of picking `k` unordered outcomes from `n`\n   * possibilities.\n   *\n   * Combinations only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   * Syntax:\n   *\n   *     math.combinations(n, k)\n   *\n   * Examples:\n   *\n   *    math.combinations(7, 5) // returns 21\n   *\n   * See also:\n   *\n   *    combinationsWithRep, permutations, factorial\n   *\n   * @param {number | BigNumber} n    Total number of objects in the set\n   * @param {number | BigNumber} k    Number of objects in the subset\n   * @return {number | BigNumber}     Number of possible combinations.\n   */\n  return typed(name, {\n    'number, number': _combinations.combinationsNumber,\n    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {\n      var BigNumber = n.constructor;\n      var result, i;\n      var nMinusk = n.minus(k);\n      var one = new BigNumber(1);\n\n      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {\n        throw new TypeError('Positive integer value expected in function combinations');\n      }\n\n      if (k.gt(n)) {\n        throw new TypeError('k must be less than n in function combinations');\n      }\n\n      result = one;\n\n      if (k.lt(nMinusk)) {\n        for (i = one; i.lte(nMinusk); i = i.plus(one)) {\n          result = result.times(k.plus(i)).dividedBy(i);\n        }\n      } else {\n        for (i = one; i.lte(k); i = i.plus(one)) {\n          result = result.times(nMinusk.plus(i)).dividedBy(i);\n        }\n      }\n\n      return result;\n    } // TODO: implement support for collection in combinations\n\n  });\n});\n/**\n * Test whether BigNumber n is a positive integer\n * @param {BigNumber} n\n * @returns {boolean} isPositiveInteger\n */\n\nexports.createCombinations = createCombinations;\n\nfunction isPositiveInteger(n) {\n  return n.isInteger() && n.gte(0);\n}\n};"],
"names":["shadow$provide","global","require","module","exports","isPositiveInteger","n","isInteger","gte","Object","defineProperty","value","createCombinations","_factory","_combinations","factory","name","dependencies","_ref","typed","combinationsNumber","BigNumberBigNumber","k","BigNumber","constructor","i","nMinusk","minus","one","TypeError","gt","result","lt","lte","plus","times","dividedBy"]
}
