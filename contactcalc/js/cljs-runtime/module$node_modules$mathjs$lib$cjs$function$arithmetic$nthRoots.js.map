{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$arithmetic$nthRoots.js",
"lineCount":3,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/function/arithmetic/nthRoots.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$arithmetic$nthRoots\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createNthRoots = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'nthRoots';\nvar dependencies = ['config', 'typed', 'divideScalar', 'Complex'];\nvar createNthRoots = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      divideScalar = _ref.divideScalar,\n      Complex = _ref.Complex;\n\n  /**\n   * Each function here returns a real multiple of i as a Complex value.\n   * @param  {number} val\n   * @return {Complex} val, i*val, -val or -i*val for index 0, 1, 2, 3\n   */\n  // This is used to fix float artifacts for zero-valued components.\n  var _calculateExactResult = [function realPos(val) {\n    return new Complex(val, 0);\n  }, function imagPos(val) {\n    return new Complex(0, val);\n  }, function realNeg(val) {\n    return new Complex(-val, 0);\n  }, function imagNeg(val) {\n    return new Complex(0, -val);\n  }];\n  /**\n   * Calculate the nth root of a Complex Number a using De Movire's Theorem.\n   * @param  {Complex} a\n   * @param  {number} root\n   * @return {Array} array of n Complex Roots\n   */\n\n  function _nthComplexRoots(a, root) {\n    if (root < 0) throw new Error('Root must be greater than zero');\n    if (root === 0) throw new Error('Root must be non-zero');\n    if (root % 1 !== 0) throw new Error('Root must be an integer');\n    if (a === 0 || a.abs() === 0) return [new Complex(0, 0)];\n    var aIsNumeric = typeof a === 'number';\n    var offset; // determine the offset (argument of a)/(pi/2)\n\n    if (aIsNumeric || a.re === 0 || a.im === 0) {\n      if (aIsNumeric) {\n        offset = 2 * +(a < 0); // numeric value on the real axis\n      } else if (a.im === 0) {\n        offset = 2 * +(a.re < 0); // complex value on the real axis\n      } else {\n        offset = 2 * +(a.im < 0) + 1; // complex value on the imaginary axis\n      }\n    }\n\n    var arg = a.arg();\n    var abs = a.abs();\n    var roots = [];\n    var r = Math.pow(abs, 1 / root);\n\n    for (var k = 0; k < root; k++) {\n      var halfPiFactor = (offset + 4 * k) / root;\n      /**\n       * If (offset + 4*k)/root is an integral multiple of pi/2\n       * then we can produce a more exact result.\n       */\n\n      if (halfPiFactor === Math.round(halfPiFactor)) {\n        roots.push(_calculateExactResult[halfPiFactor % 4](r));\n        continue;\n      }\n\n      roots.push(new Complex({\n        r: r,\n        phi: (arg + 2 * Math.PI * k) / root\n      }));\n    }\n\n    return roots;\n  }\n  /**\n   * Calculate the nth roots of a value.\n   * An nth root of a positive real number A,\n   * is a positive real solution of the equation \"x^root = A\".\n   * This function returns an array of complex values.\n   *\n   * Syntax:\n   *\n   *    math.nthRoots(x)\n   *    math.nthRoots(x, root)\n   *\n   * Examples:\n   *\n   *    math.nthRoots(1)\n   *    // returns [\n   *    //   {re: 1, im: 0},\n   *    //   {re: -1, im: 0}\n   *    // ]\n   *    nthRoots(1, 3)\n   *    // returns [\n   *    //   { re: 1, im: 0 },\n   *    //   { re: -0.4999999999999998, im: 0.8660254037844387 },\n   *    //   { re: -0.5000000000000004, im: -0.8660254037844385 }\n   *    ]\n   *\n   * See also:\n   *\n   *    nthRoot, pow, sqrt\n   *\n   * @param {number | BigNumber | Fraction | Complex} x Number to be rounded\n   * @return {number | BigNumber | Fraction | Complex}            Rounded value\n   */\n\n\n  return typed(name, {\n    Complex: function Complex(x) {\n      return _nthComplexRoots(x, 2);\n    },\n    'Complex, number': _nthComplexRoots\n  });\n});\nexports.createNthRoots = createNthRoots;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createNthRoots","_factory","factory","name","dependencies","_ref","_nthComplexRoots","a","root","Error","abs","Complex","aIsNumeric","re","im","offset","arg","roots","r","Math","pow","k","halfPiFactor","round","push","_calculateExactResult","phi","PI","typed","realPos","val","imagPos","realNeg","imagNeg","x"]
}
