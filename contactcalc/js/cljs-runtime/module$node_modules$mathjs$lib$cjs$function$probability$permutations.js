shadow$provide.module$node_modules$mathjs$lib$cjs$function$probability$permutations=function(global,require,module,exports){function isPositiveInteger(n){return n.isInteger()&&n.gte(0)}Object.defineProperty(exports,"__esModule",{value:!0});exports.createPermutations=void 0;var _number=require("module$node_modules$mathjs$lib$cjs$utils$number"),_product=require("module$node_modules$mathjs$lib$cjs$utils$product");global=require("module$node_modules$mathjs$lib$cjs$utils$factory");global=(0,global.factory)("permutations",
["typed","factorial"],function(_ref){var typed=_ref.typed;return typed("permutations",{"number | BigNumber":_ref.factorial,"number, number":function(n,k){if(!(0,_number.isInteger)(n)||0>n)throw new TypeError("Positive integer value expected in function permutations");if(!(0,_number.isInteger)(k)||0>k)throw new TypeError("Positive integer value expected in function permutations");if(k>n)throw new TypeError("second argument k must be less than or equal to first argument n");return(0,_product.product)(n-
k+1,n)},"BigNumber, BigNumber":function(n,k){if(!isPositiveInteger(n)||!isPositiveInteger(k))throw new TypeError("Positive integer value expected in function permutations");if(k.gt(n))throw new TypeError("second argument k must be less than or equal to first argument n");var result=n.mul(0).add(1);for(k=n.minus(k).plus(1);k.lte(n);k=k.plus(1))result=result.times(k);return result}})});exports.createPermutations=global}
//# sourceMappingURL=module$node_modules$mathjs$lib$cjs$function$probability$permutations.js.map
