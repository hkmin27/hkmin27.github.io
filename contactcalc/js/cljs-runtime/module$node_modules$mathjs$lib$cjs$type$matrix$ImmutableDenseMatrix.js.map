{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$type$matrix$ImmutableDenseMatrix.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/type/matrix/ImmutableDenseMatrix.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$type$matrix$ImmutableDenseMatrix\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createImmutableDenseMatrixClass = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _object = require(\"../../utils/object.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'ImmutableDenseMatrix';\nvar dependencies = ['smaller', 'DenseMatrix'];\nvar createImmutableDenseMatrixClass = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var smaller = _ref.smaller,\n      DenseMatrix = _ref.DenseMatrix;\n\n  function ImmutableDenseMatrix(data, datatype) {\n    if (!(this instanceof ImmutableDenseMatrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (datatype && !(0, _is.isString)(datatype)) {\n      throw new Error('Invalid datatype: ' + datatype);\n    }\n\n    if ((0, _is.isMatrix)(data) || (0, _is.isArray)(data)) {\n      // use DenseMatrix implementation\n      var matrix = new DenseMatrix(data, datatype); // internal structures\n\n      this._data = matrix._data;\n      this._size = matrix._size;\n      this._datatype = matrix._datatype;\n      this._min = null;\n      this._max = null;\n    } else if (data && (0, _is.isArray)(data.data) && (0, _is.isArray)(data.size)) {\n      // initialize fields from JSON representation\n      this._data = data.data;\n      this._size = data.size;\n      this._datatype = data.datatype;\n      this._min = typeof data.min !== 'undefined' ? data.min : null;\n      this._max = typeof data.max !== 'undefined' ? data.max : null;\n    } else if (data) {\n      // unsupported type\n      throw new TypeError('Unsupported type of data (' + (0, _is.typeOf)(data) + ')');\n    } else {\n      // nothing provided\n      this._data = [];\n      this._size = [0];\n      this._datatype = datatype;\n      this._min = null;\n      this._max = null;\n    }\n  }\n\n  ImmutableDenseMatrix.prototype = new DenseMatrix();\n  /**\n   * Attach type information\n   */\n\n  ImmutableDenseMatrix.prototype.type = 'ImmutableDenseMatrix';\n  ImmutableDenseMatrix.prototype.isImmutableDenseMatrix = true;\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     const subset = matrix.subset(index)               // retrieve subset\n   *     const value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @param {Index} index\n   * @param {Array | ImmutableDenseMatrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n\n  ImmutableDenseMatrix.prototype.subset = function (index) {\n    switch (arguments.length) {\n      case 1:\n        {\n          // use base implementation\n          var m = DenseMatrix.prototype.subset.call(this, index); // check result is a matrix\n\n          if ((0, _is.isMatrix)(m)) {\n            // return immutable matrix\n            return new ImmutableDenseMatrix({\n              data: m._data,\n              size: m._size,\n              datatype: m._datatype\n            });\n          }\n\n          return m;\n        }\n      // intentional fall through\n\n      case 2:\n      case 3:\n        throw new Error('Cannot invoke set subset on an Immutable Matrix instance');\n\n      default:\n        throw new SyntaxError('Wrong number of arguments');\n    }\n  };\n  /**\n   * Replace a single element in the matrix.\n   * @param {Number[]} index   Zero-based index\n   * @param {*} value\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be left undefined.\n   * @return {ImmutableDenseMatrix} self\n   */\n\n\n  ImmutableDenseMatrix.prototype.set = function () {\n    throw new Error('Cannot invoke set on an Immutable Matrix instance');\n  };\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @param {Number[]} size           The new size the matrix should have.\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n\n\n  ImmutableDenseMatrix.prototype.resize = function () {\n    throw new Error('Cannot invoke resize on an Immutable Matrix instance');\n  };\n  /**\n   * Disallows reshaping in favor of immutability.\n   *\n   * @throws {Error} Operation not allowed\n   */\n\n\n  ImmutableDenseMatrix.prototype.reshape = function () {\n    throw new Error('Cannot invoke reshape on an Immutable Matrix instance');\n  };\n  /**\n   * Create a clone of the matrix\n   * @return {ImmutableDenseMatrix} clone\n   */\n\n\n  ImmutableDenseMatrix.prototype.clone = function () {\n    return new ImmutableDenseMatrix({\n      data: (0, _object.clone)(this._data),\n      size: (0, _object.clone)(this._size),\n      datatype: this._datatype\n    });\n  };\n  /**\n   * Get a JSON representation of the matrix\n   * @returns {Object}\n   */\n\n\n  ImmutableDenseMatrix.prototype.toJSON = function () {\n    return {\n      mathjs: 'ImmutableDenseMatrix',\n      data: this._data,\n      size: this._size,\n      datatype: this._datatype\n    };\n  };\n  /**\n   * Generate a matrix from a JSON object\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"ImmutableDenseMatrix\", data: [], size: []}`,\n   *                       where mathjs is optional\n   * @returns {ImmutableDenseMatrix}\n   */\n\n\n  ImmutableDenseMatrix.fromJSON = function (json) {\n    return new ImmutableDenseMatrix(json);\n  };\n  /**\n   * Swap rows i and j in Matrix.\n   *\n   * @param {Number} i       Matrix row index 1\n   * @param {Number} j       Matrix row index 2\n   *\n   * @return {Matrix}        The matrix reference\n   */\n\n\n  ImmutableDenseMatrix.prototype.swapRows = function () {\n    throw new Error('Cannot invoke swapRows on an Immutable Matrix instance');\n  };\n  /**\n   * Calculate the minimum value in the set\n   * @return {Number | undefined} min\n   */\n\n\n  ImmutableDenseMatrix.prototype.min = function () {\n    // check min has been calculated before\n    if (this._min === null) {\n      // minimum\n      var m = null; // compute min\n\n      this.forEach(function (v) {\n        if (m === null || smaller(v, m)) {\n          m = v;\n        }\n      });\n      this._min = m !== null ? m : undefined;\n    }\n\n    return this._min;\n  };\n  /**\n   * Calculate the maximum value in the set\n   * @return {Number | undefined} max\n   */\n\n\n  ImmutableDenseMatrix.prototype.max = function () {\n    // check max has been calculated before\n    if (this._max === null) {\n      // maximum\n      var m = null; // compute max\n\n      this.forEach(function (v) {\n        if (m === null || smaller(m, v)) {\n          m = v;\n        }\n      });\n      this._max = m !== null ? m : undefined;\n    }\n\n    return this._max;\n  };\n\n  return ImmutableDenseMatrix;\n}, {\n  isClass: true\n});\nexports.createImmutableDenseMatrixClass = createImmutableDenseMatrixClass;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createImmutableDenseMatrixClass","_is","_object","_factory","factory","name","dependencies","_ref","ImmutableDenseMatrix","data","datatype","SyntaxError","isString","Error","isMatrix","isArray","matrix","DenseMatrix","_data","_size","_datatype","_max","_min","size","min","max","TypeError","typeOf","smaller","prototype","type","isImmutableDenseMatrix","subset","ImmutableDenseMatrix.prototype.subset","index","arguments","length","m","call","set","ImmutableDenseMatrix.prototype.set","resize","ImmutableDenseMatrix.prototype.resize","reshape","ImmutableDenseMatrix.prototype.reshape","clone","ImmutableDenseMatrix.prototype.clone","toJSON","ImmutableDenseMatrix.prototype.toJSON","mathjs","fromJSON","ImmutableDenseMatrix.fromJSON","json","swapRows","ImmutableDenseMatrix.prototype.swapRows","ImmutableDenseMatrix.prototype.min","forEach","v","undefined","ImmutableDenseMatrix.prototype.max","isClass"]
}
