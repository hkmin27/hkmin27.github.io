{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$bitwise$bitNot.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,0DAAA,CAA+E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGvHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,YAAR,CAAuB,IAAK,EAE5B,KAAIC,SAAWP,OAAA,CAAQ,4DAAR,CAAf,CAEIQ,YAAcR,OAAA,CAAQ,qDAAR,CAEdS,OAAAA,CAAWT,OAAA,CAAQ,kDAAR,CAEf,KAAIU,OAASV,OAAA,CAAQ,uDAAR,CAITM,QAAAA;AAA8B,CAAC,CAAA,CAAGG,MAASE,CAAAA,OAAb,EAFvBC,QAEuB,CADfC,CAAC,OAADA,CACe,CAA0C,QAAS,CAACC,IAAD,CAAO,CACtFC,IAAAA,CAAQD,IAAKC,CAAAA,KAwBjB,OAAOA,KAAA,CA3BEH,QA2BF,CAAY,CACjBI,OAAQN,MAAOO,CAAAA,YADE,CAEjBC,UAAWX,QAASY,CAAAA,eAFH,CAGjB,iBAAkBC,QAAoB,CAACC,CAAD,CAAI,CACxC,MAAO,CAAC,CAAA,CAAGb,WAAYc,CAAAA,OAAhB,EAAyBD,CAAzB,CAA4B,IAA5B,CADiC,CAHzB,CAAZ,CAzBmF,CAA1D,CAiClCnB,QAAQI,CAAAA,YAAR,CAAuBA,OAnDgG;",
"sources":["node_modules/mathjs/lib/cjs/function/bitwise/bitNot.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$bitwise$bitNot\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createBitNot = void 0;\n\nvar _bitwise = require(\"../../utils/bignumber/bitwise.js\");\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _index = require(\"../../plain/number/index.js\");\n\nvar name = 'bitNot';\nvar dependencies = ['typed'];\nvar createBitNot = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Bitwise NOT value, `~x`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the best prefix base.\n   *\n   * Syntax:\n   *\n   *    math.bitNot(x)\n   *\n   * Examples:\n   *\n   *    math.bitNot(1)               // returns number -2\n   *\n   *    math.bitNot([2, -3, 4])      // returns Array [-3, 2, 5]\n   *\n   * See also:\n   *\n   *    bitAnd, bitOr, bitXor, leftShift, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x Value to not\n   * @return {number | BigNumber | Array | Matrix} NOT of `x`\n   */\n  return typed(name, {\n    number: _index.bitNotNumber,\n    BigNumber: _bitwise.bitNotBigNumber,\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n});\nexports.createBitNot = createBitNot;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createBitNot","_bitwise","_collection","_factory","_index","factory","name","dependencies","_ref","typed","number","bitNotNumber","BigNumber","bitNotBigNumber","ArrayMatrix","x","deepMap"]
}
