{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$expression$node$ArrayNode.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/expression/node/ArrayNode.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$expression$node$ArrayNode\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createArrayNode = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'ArrayNode';\nvar dependencies = ['Node'];\nvar createArrayNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var Node = _ref.Node;\n\n  /**\n   * @constructor ArrayNode\n   * @extends {Node}\n   * Holds an 1-dimensional array with items\n   * @param {Node[]} [items]   1 dimensional array with items\n   */\n  function ArrayNode(items) {\n    if (!(this instanceof ArrayNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.items = items || []; // validate input\n\n    if (!Array.isArray(this.items) || !this.items.every(_is.isNode)) {\n      throw new TypeError('Array containing Nodes expected');\n    }\n  }\n\n  ArrayNode.prototype = new Node();\n  ArrayNode.prototype.type = 'ArrayNode';\n  ArrayNode.prototype.isArrayNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  ArrayNode.prototype._compile = function (math, argNames) {\n    var evalItems = (0, _array.map)(this.items, function (item) {\n      return item._compile(math, argNames);\n    });\n    var asMatrix = math.config.matrix !== 'Array';\n\n    if (asMatrix) {\n      var matrix = math.matrix;\n      return function evalArrayNode(scope, args, context) {\n        return matrix((0, _array.map)(evalItems, function (evalItem) {\n          return evalItem(scope, args, context);\n        }));\n      };\n    } else {\n      return function evalArrayNode(scope, args, context) {\n        return (0, _array.map)(evalItems, function (evalItem) {\n          return evalItem(scope, args, context);\n        });\n      };\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  ArrayNode.prototype.forEach = function (callback) {\n    for (var i = 0; i < this.items.length; i++) {\n      var node = this.items[i];\n      callback(node, 'items[' + i + ']', this);\n    }\n  };\n  /**\n   * Create a new ArrayNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {ArrayNode} Returns a transformed copy of the node\n   */\n\n\n  ArrayNode.prototype.map = function (callback) {\n    var items = [];\n\n    for (var i = 0; i < this.items.length; i++) {\n      items[i] = this._ifNode(callback(this.items[i], 'items[' + i + ']', this));\n    }\n\n    return new ArrayNode(items);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {ArrayNode}\n   */\n\n\n  ArrayNode.prototype.clone = function () {\n    return new ArrayNode(this.items.slice(0));\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  ArrayNode.prototype._toString = function (options) {\n    var items = this.items.map(function (node) {\n      return node.toString(options);\n    });\n    return '[' + items.join(', ') + ']';\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  ArrayNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'ArrayNode',\n      items: this.items\n    };\n  };\n  /**\n   * Instantiate an ArrayNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"ArrayNode\", items: [...]}`,\n   *                       where mathjs is optional\n   * @returns {ArrayNode}\n   */\n\n\n  ArrayNode.fromJSON = function (json) {\n    return new ArrayNode(json.items);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  ArrayNode.prototype.toHTML = function (options) {\n    var items = this.items.map(function (node) {\n      return node.toHTML(options);\n    });\n    return '<span class=\"math-parenthesis math-square-parenthesis\">[</span>' + items.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-square-parenthesis\">]</span>';\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ArrayNode.prototype._toTex = function (options) {\n    var s = '\\\\begin{bmatrix}';\n    this.items.forEach(function (node) {\n      if (node.items) {\n        s += node.items.map(function (childNode) {\n          return childNode.toTex(options);\n        }).join('&');\n      } else {\n        s += node.toTex(options);\n      } // new line\n\n\n      s += '\\\\\\\\';\n    });\n    s += '\\\\end{bmatrix}';\n    return s;\n  };\n\n  return ArrayNode;\n}, {\n  isClass: true,\n  isNode: true\n});\nexports.createArrayNode = createArrayNode;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createArrayNode","_is","_array","_factory","factory","name","dependencies","_ref","ArrayNode","items","SyntaxError","Array","isArray","every","isNode","TypeError","prototype","Node","type","isArrayNode","_compile","ArrayNode.prototype._compile","math","argNames","evalItems","map","item","config","matrix","evalArrayNode","scope","args","context","evalItem","forEach","ArrayNode.prototype.forEach","callback","i","length","node","ArrayNode.prototype.map","_ifNode","clone","ArrayNode.prototype.clone","slice","_toString","ArrayNode.prototype._toString","options","toString","join","toJSON","ArrayNode.prototype.toJSON","mathjs","fromJSON","ArrayNode.fromJSON","json","toHTML","ArrayNode.prototype.toHTML","_toTex","ArrayNode.prototype._toTex","s","childNode","toTex","isClass"]
}
