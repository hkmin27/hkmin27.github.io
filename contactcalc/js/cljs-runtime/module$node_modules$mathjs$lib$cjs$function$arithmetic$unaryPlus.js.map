{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$function$arithmetic$unaryPlus.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,gEAAA,CAAqF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG7HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,eAAR,CAA0B,IAAK,EAE3BC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAEf,KAAIQ,YAAcR,OAAA,CAAQ,qDAAR,CAAlB,CAEIS,OAAST,OAAA,CAAQ,uDAAR,CAITM,QAAAA,CAAiC,CAAC,CAAA,CAAGC,MAASG,CAAAA,OAAb,EAF1BC,WAE0B,CADlBC,CAAC,OAADA,CAAU,QAAVA,CAAoB,WAApBA,CACkB,CAA0C,QAAS,CAACC,IAAD,CAAO,CAAA,IACzFC;AAAQD,IAAKC,CAAAA,KAD4E,CAEzFC,OAASF,IAAKE,CAAAA,MAF2E,CAGzFC,UAAYH,IAAKG,CAAAA,SA0BrB,OAAOF,MAAA,CA/BEH,WA+BF,CAAY,CACjBM,OAAQR,MAAOS,CAAAA,eADE,CAEjBC,QAASA,QAAgB,CAACC,CAAD,CAAI,CAC3B,MAAOA,EADoB,CAFZ,CAKjBJ,UAAWA,QAAkB,CAACI,CAAD,CAAI,CAC/B,MAAOA,EADwB,CALhB,CAQjBC,SAAUA,QAAiB,CAACD,CAAD,CAAI,CAC7B,MAAOA,EADsB,CARd,CAWjBE,KAAMA,QAAa,CAACF,CAAD,CAAI,CACrB,MAAOA,EAAEG,CAAAA,KAAF,EADc,CAXN,CAcjB,iBAAkBC,QAAoB,CAACJ,CAAD,CAAI,CAExC,MAAO,CAAC,CAAA,CAAGZ,WAAYiB,CAAAA,OAAhB,EAAyBL,CAAzB,CAA4B,IAA5B,CAAkC,CAAA,CAAlC,CAFiC,CAdzB,CAkBjB,mBAAoBM,QAAsB,CAACN,CAAD,CAAI,CAE5C,MAAyB,WAAlB,GAAAL,MAAOE,CAAAA,MAAP,CAAgC,IAAID,SAAJ,CAAc,CAACI,CAAf,CAAhC,CAAoD,CAACA,CAFhB,CAlB7B,CAAZ,CA7BsF,CAA1D,CAqDrClB,QAAQI,CAAAA,eAAR,CAA0BA,OArEmG;",
"sources":["node_modules/mathjs/lib/cjs/function/arithmetic/unaryPlus.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$arithmetic$unaryPlus\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createUnaryPlus = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _index = require(\"../../plain/number/index.js\");\n\nvar name = 'unaryPlus';\nvar dependencies = ['typed', 'config', 'BigNumber'];\nvar createUnaryPlus = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      BigNumber = _ref.BigNumber;\n\n  /**\n   * Unary plus operation.\n   * Boolean values and strings will be converted to a number, numeric values will be returned as is.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.unaryPlus(x)\n   *\n   * Examples:\n   *\n   *    math.unaryPlus(3.5)      // returns 3.5\n   *    math.unaryPlus(1)     // returns 1\n   *\n   * See also:\n   *\n   *    unaryMinus, add, subtract\n   *\n   * @param  {number | BigNumber | Fraction | string | Complex | Unit | Array | Matrix} x\n   *            Input value\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n   *            Returns the input value when numeric, converts to a number when input is non-numeric.\n   */\n  return typed(name, {\n    number: _index.unaryPlusNumber,\n    Complex: function Complex(x) {\n      return x; // complex numbers are immutable\n    },\n    BigNumber: function BigNumber(x) {\n      return x; // bignumbers are immutable\n    },\n    Fraction: function Fraction(x) {\n      return x; // fractions are immutable\n    },\n    Unit: function Unit(x) {\n      return x.clone();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since unaryPlus(0) = 0\n      return (0, _collection.deepMap)(x, this, true);\n    },\n    'boolean | string': function booleanString(x) {\n      // convert to a number or bignumber\n      return config.number === 'BigNumber' ? new BigNumber(+x) : +x;\n    }\n  });\n});\nexports.createUnaryPlus = createUnaryPlus;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createUnaryPlus","_factory","_collection","_index","factory","name","dependencies","_ref","typed","config","BigNumber","number","unaryPlusNumber","Complex","x","Fraction","Unit","clone","ArrayMatrix","deepMap","booleanString"]
}
