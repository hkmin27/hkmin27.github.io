{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$expression$transform$index_transform.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,uEAAA,CAA4F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGpIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,oBAAR,CAA+B,IAAK,EAEpC,KAAIC,IAAMP,OAAA,CAAQ,6CAAR,CAENQ,OAAAA,CAAWR,OAAA,CAAQ,kDAAR,CAIXM,OAAAA,CAAsC,CAAC,CAAA,CAAGE,MAASC,CAAAA,OAAb,EAF/BC,OAE+B,CADvBC,CAAC,OAADA,CACuB,CAA0C,QAAS,CAACC,IAAD,CAAO,CAClG,IAAIC,MAAQD,IAAKC,CAAAA,KAQjB,OAAOC,SAAuB,EAAG,CAG/B,IAFA,IAAIC,KAAO,EAAX,CAESC,EAAI,CAFb,CAEgBC,GAAKC,SAAUC,CAAAA,MAA/B,CAAuCH,CAAvC,CAA2CC,EAA3C,CAA+CD,CAAA,EAA/C,CAAoD,CAClD,IAAII;AAAMF,SAAA,CAAUF,CAAV,CAEV,IAAI,CAAC,CAAA,CAAGT,GAAIc,CAAAA,OAAR,EAAiBD,GAAjB,CAAJ,CACEA,GAAIE,CAAAA,KAAJ,EACA,CAAAF,GAAIG,CAAAA,GAAJ,EAAsB,CAAX,CAAAH,GAAII,CAAAA,IAAJ,CAAe,CAAf,CAAmB,CAFhC,KAGO,IAAIJ,GAAJ,EAAyB,CAAA,CAAzB,GAAWA,GAAIK,CAAAA,KAAf,CACLL,GAAA,CAAMA,GAAIM,CAAAA,GAAJ,CAAQ,QAAS,CAACC,CAAD,CAAI,CACzB,MAAOA,EAAP,CAAW,CADc,CAArB,CADD,KAIA,IAAI,CAAC,CAAA,CAAGpB,GAAIqB,CAAAA,OAAR,EAAiBR,GAAjB,CAAJ,EAA6B,CAAC,CAAA,CAAGb,GAAIsB,CAAAA,QAAR,EAAkBT,GAAlB,CAA7B,CACLA,GAAA,CAAMA,GAAIM,CAAAA,GAAJ,CAAQ,QAAS,CAACC,CAAD,CAAI,CACzB,MAAOA,EAAP,CAAW,CADc,CAArB,CADD,KAIA,IAAI,CAAC,CAAA,CAAGpB,GAAIuB,CAAAA,QAAR,EAAkBV,GAAlB,CAAJ,CACLA,GAAA,EADK,KAEA,IAAI,CAAC,CAAA,CAAGb,GAAIwB,CAAAA,WAAR,EAAqBX,GAArB,CAAJ,CACLA,GAAA,CAAMA,GAAIY,CAAAA,QAAJ,EAAN,CAAuB,CADlB,KAEA,IAAmB,QAAnB,GAAI,MAAOZ,IAAX,CAEL,KAAM,KAAIa,SAAJ,CAAc,8DAAd,CAAN,CAGFlB,IAAA,CAAKC,CAAL,CAAA,CAAUI,GAvBwC,CA0BhDc,CAAAA,CAAM,IAAIrB,KACdA,MAAMsB,CAAAA,KAAN,CAAYD,CAAZ,CAAiBnB,IAAjB,CACA,OAAOmB,EA/BwB,CATiE,CAA1D,CA0CvC,CACDE,oBAAqB,CAAA,CADpB,CA1CuC,CA6C1ClC;OAAQI,CAAAA,oBAAR,CAA+BA,MA3DqG;",
"sources":["node_modules/mathjs/lib/cjs/expression/transform/index.transform.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$expression$transform$index_transform\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createIndexTransform = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'index';\nvar dependencies = ['Index'];\nvar createIndexTransform = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var Index = _ref.Index;\n\n  /**\n   * Attach a transform function to math.index\n   * Adds a property transform containing the transform function.\n   *\n   * This transform creates a one-based index instead of a zero-based index\n   */\n  return function indexTransform() {\n    var args = [];\n\n    for (var i = 0, ii = arguments.length; i < ii; i++) {\n      var arg = arguments[i]; // change from one-based to zero based, and convert BigNumber to number\n\n      if ((0, _is.isRange)(arg)) {\n        arg.start--;\n        arg.end -= arg.step > 0 ? 0 : 2;\n      } else if (arg && arg.isSet === true) {\n        arg = arg.map(function (v) {\n          return v - 1;\n        });\n      } else if ((0, _is.isArray)(arg) || (0, _is.isMatrix)(arg)) {\n        arg = arg.map(function (v) {\n          return v - 1;\n        });\n      } else if ((0, _is.isNumber)(arg)) {\n        arg--;\n      } else if ((0, _is.isBigNumber)(arg)) {\n        arg = arg.toNumber() - 1;\n      } else if (typeof arg === 'string') {// leave as is\n      } else {\n        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');\n      }\n\n      args[i] = arg;\n    }\n\n    var res = new Index();\n    Index.apply(res, args);\n    return res;\n  };\n}, {\n  isTransformFunction: true\n});\nexports.createIndexTransform = createIndexTransform;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createIndexTransform","_is","_factory","factory","name","dependencies","_ref","Index","indexTransform","args","i","ii","arguments","length","arg","isRange","start","end","step","isSet","map","v","isArray","isMatrix","isNumber","isBigNumber","toNumber","TypeError","res","apply","isTransformFunction"]
}
