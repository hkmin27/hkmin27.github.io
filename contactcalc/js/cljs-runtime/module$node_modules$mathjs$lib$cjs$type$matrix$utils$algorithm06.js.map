{
"version":3,
"file":"module$node_modules$mathjs$lib$cjs$type$matrix$utils$algorithm06.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm06.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mathjs$lib$cjs$type$matrix$utils$algorithm06\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAlgorithm06 = void 0;\n\nvar _factory = require(\"../../../utils/factory.js\");\n\nvar _DimensionError = require(\"../../../error/DimensionError.js\");\n\nvar _collection = require(\"../../../utils/collection.js\");\n\nvar name = 'algorithm06';\nvar dependencies = ['typed', 'equalScalar'];\nvar createAlgorithm06 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      equalScalar = _ref.equalScalar;\n\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked (Anz U Bnz) times, where Anz and Bnz are the nonzero elements in both matrices.\n   *\n   *\n   *          \u250c  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n   * C(i,j) = \u2524\n   *          \u2514  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  return function algorithm06(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var asize = a._size;\n    var adt = a._datatype; // sparse matrix arrays\n\n    var bvalues = b._values;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new _DimensionError.DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = []; // workspaces\n\n    var x = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column\n\n    var w = []; // marks indicating value in a given row has been updated\n\n    var u = []; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length; // columns mark\n\n      var mark = j + 1; // scatter the values of A(:,j) into workspace\n\n      (0, _collection.scatter)(a, j, w, x, u, mark, cindex, cf); // scatter the values of B(:,j) into workspace\n\n      (0, _collection.scatter)(b, j, w, x, u, mark, cindex, cf); // check we need to process values (non pattern matrix)\n\n      if (x) {\n        // initialize first index in j\n        var k = cptr[j]; // loop index in j\n\n        while (k < cindex.length) {\n          // row\n          var i = cindex[k]; // check function was invoked on current row (Aij !=0 && Bij != 0)\n\n          if (u[i] === mark) {\n            // value @ i\n            var v = x[i]; // check for zero value\n\n            if (!eq(v, zero)) {\n              // push value\n              cvalues.push(v); // increment pointer\n\n              k++;\n            } else {\n              // remove value @ i, do not increment pointer\n              cindex.splice(k, 1);\n            }\n          } else {\n            // remove value @ i, do not increment pointer\n            cindex.splice(k, 1);\n          }\n        }\n      } else {\n        // initialize first index in j\n        var p = cptr[j]; // loop index in j\n\n        while (p < cindex.length) {\n          // row\n          var r = cindex[p]; // check function was invoked on current row (Aij !=0 && Bij != 0)\n\n          if (u[r] !== mark) {\n            // remove value @ i, do not increment pointer\n            cindex.splice(p, 1);\n          } else {\n            // increment pointer\n            p++;\n          }\n        }\n      }\n    } // update cptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});\nexports.createAlgorithm06 = createAlgorithm06;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","createAlgorithm06","_factory","_DimensionError","_collection","factory","name","dependencies","_ref","typed","equalScalar","algorithm06","a","b","callback","avalues","_values","asize","_size","adt","_datatype","bvalues","bsize","bdt","length","DimensionError","RangeError","rows","columns","eq","zero","cf","dt","find","convert","cvalues","undefined","cindex","cptr","x","w","u","j","mark","scatter","k","i","v","splice","push","p","r","createSparseMatrix","values","index","ptr","size","datatype"]
}
